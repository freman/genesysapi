// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchConversationsAftercallworkConversationIDParticipantCommunicationReader is a Reader for the PatchConversationsAftercallworkConversationIDParticipantCommunication structure.
type PatchConversationsAftercallworkConversationIDParticipantCommunicationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchConversationsAftercallworkConversationIDParticipantCommunicationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewPatchConversationsAftercallworkConversationIDParticipantCommunicationAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchConversationsAftercallworkConversationIDParticipantCommunicationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchConversationsAftercallworkConversationIDParticipantCommunicationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchConversationsAftercallworkConversationIDParticipantCommunicationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchConversationsAftercallworkConversationIDParticipantCommunicationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchConversationsAftercallworkConversationIDParticipantCommunicationRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchConversationsAftercallworkConversationIDParticipantCommunicationRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchConversationsAftercallworkConversationIDParticipantCommunicationUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchConversationsAftercallworkConversationIDParticipantCommunicationTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchConversationsAftercallworkConversationIDParticipantCommunicationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchConversationsAftercallworkConversationIDParticipantCommunicationServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchConversationsAftercallworkConversationIDParticipantCommunicationGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchConversationsAftercallworkConversationIDParticipantCommunicationOK creates a PatchConversationsAftercallworkConversationIDParticipantCommunicationOK with default headers values
func NewPatchConversationsAftercallworkConversationIDParticipantCommunicationOK() *PatchConversationsAftercallworkConversationIDParticipantCommunicationOK {
	return &PatchConversationsAftercallworkConversationIDParticipantCommunicationOK{}
}

/*
PatchConversationsAftercallworkConversationIDParticipantCommunicationOK describes a response with status code 200, with default header values.

successful operation
*/
type PatchConversationsAftercallworkConversationIDParticipantCommunicationOK struct {
	Payload *models.AfterCallWorkUpdate
}

// IsSuccess returns true when this patch conversations aftercallwork conversation Id participant communication o k response has a 2xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch conversations aftercallwork conversation Id participant communication o k response has a 3xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations aftercallwork conversation Id participant communication o k response has a 4xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations aftercallwork conversation Id participant communication o k response has a 5xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations aftercallwork conversation Id participant communication o k response a status code equal to that given
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/aftercallwork/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsAftercallworkConversationIdParticipantCommunicationOK  %+v", 200, o.Payload)
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationOK) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/aftercallwork/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsAftercallworkConversationIdParticipantCommunicationOK  %+v", 200, o.Payload)
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationOK) GetPayload() *models.AfterCallWorkUpdate {
	return o.Payload
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AfterCallWorkUpdate)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsAftercallworkConversationIDParticipantCommunicationAccepted creates a PatchConversationsAftercallworkConversationIDParticipantCommunicationAccepted with default headers values
func NewPatchConversationsAftercallworkConversationIDParticipantCommunicationAccepted() *PatchConversationsAftercallworkConversationIDParticipantCommunicationAccepted {
	return &PatchConversationsAftercallworkConversationIDParticipantCommunicationAccepted{}
}

/*
PatchConversationsAftercallworkConversationIDParticipantCommunicationAccepted describes a response with status code 202, with default header values.

Accepted
*/
type PatchConversationsAftercallworkConversationIDParticipantCommunicationAccepted struct {
	Payload *models.AfterCallWorkUpdate
}

// IsSuccess returns true when this patch conversations aftercallwork conversation Id participant communication accepted response has a 2xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch conversations aftercallwork conversation Id participant communication accepted response has a 3xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations aftercallwork conversation Id participant communication accepted response has a 4xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations aftercallwork conversation Id participant communication accepted response has a 5xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations aftercallwork conversation Id participant communication accepted response a status code equal to that given
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationAccepted) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/aftercallwork/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsAftercallworkConversationIdParticipantCommunicationAccepted  %+v", 202, o.Payload)
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationAccepted) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/aftercallwork/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsAftercallworkConversationIdParticipantCommunicationAccepted  %+v", 202, o.Payload)
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationAccepted) GetPayload() *models.AfterCallWorkUpdate {
	return o.Payload
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AfterCallWorkUpdate)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsAftercallworkConversationIDParticipantCommunicationBadRequest creates a PatchConversationsAftercallworkConversationIDParticipantCommunicationBadRequest with default headers values
func NewPatchConversationsAftercallworkConversationIDParticipantCommunicationBadRequest() *PatchConversationsAftercallworkConversationIDParticipantCommunicationBadRequest {
	return &PatchConversationsAftercallworkConversationIDParticipantCommunicationBadRequest{}
}

/*
PatchConversationsAftercallworkConversationIDParticipantCommunicationBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchConversationsAftercallworkConversationIDParticipantCommunicationBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations aftercallwork conversation Id participant communication bad request response has a 2xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations aftercallwork conversation Id participant communication bad request response has a 3xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations aftercallwork conversation Id participant communication bad request response has a 4xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations aftercallwork conversation Id participant communication bad request response has a 5xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations aftercallwork conversation Id participant communication bad request response a status code equal to that given
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/aftercallwork/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsAftercallworkConversationIdParticipantCommunicationBadRequest  %+v", 400, o.Payload)
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/aftercallwork/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsAftercallworkConversationIdParticipantCommunicationBadRequest  %+v", 400, o.Payload)
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsAftercallworkConversationIDParticipantCommunicationUnauthorized creates a PatchConversationsAftercallworkConversationIDParticipantCommunicationUnauthorized with default headers values
func NewPatchConversationsAftercallworkConversationIDParticipantCommunicationUnauthorized() *PatchConversationsAftercallworkConversationIDParticipantCommunicationUnauthorized {
	return &PatchConversationsAftercallworkConversationIDParticipantCommunicationUnauthorized{}
}

/*
PatchConversationsAftercallworkConversationIDParticipantCommunicationUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchConversationsAftercallworkConversationIDParticipantCommunicationUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations aftercallwork conversation Id participant communication unauthorized response has a 2xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations aftercallwork conversation Id participant communication unauthorized response has a 3xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations aftercallwork conversation Id participant communication unauthorized response has a 4xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations aftercallwork conversation Id participant communication unauthorized response has a 5xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations aftercallwork conversation Id participant communication unauthorized response a status code equal to that given
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/aftercallwork/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsAftercallworkConversationIdParticipantCommunicationUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/aftercallwork/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsAftercallworkConversationIdParticipantCommunicationUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsAftercallworkConversationIDParticipantCommunicationForbidden creates a PatchConversationsAftercallworkConversationIDParticipantCommunicationForbidden with default headers values
func NewPatchConversationsAftercallworkConversationIDParticipantCommunicationForbidden() *PatchConversationsAftercallworkConversationIDParticipantCommunicationForbidden {
	return &PatchConversationsAftercallworkConversationIDParticipantCommunicationForbidden{}
}

/*
PatchConversationsAftercallworkConversationIDParticipantCommunicationForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PatchConversationsAftercallworkConversationIDParticipantCommunicationForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations aftercallwork conversation Id participant communication forbidden response has a 2xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations aftercallwork conversation Id participant communication forbidden response has a 3xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations aftercallwork conversation Id participant communication forbidden response has a 4xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations aftercallwork conversation Id participant communication forbidden response has a 5xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations aftercallwork conversation Id participant communication forbidden response a status code equal to that given
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/aftercallwork/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsAftercallworkConversationIdParticipantCommunicationForbidden  %+v", 403, o.Payload)
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/aftercallwork/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsAftercallworkConversationIdParticipantCommunicationForbidden  %+v", 403, o.Payload)
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsAftercallworkConversationIDParticipantCommunicationNotFound creates a PatchConversationsAftercallworkConversationIDParticipantCommunicationNotFound with default headers values
func NewPatchConversationsAftercallworkConversationIDParticipantCommunicationNotFound() *PatchConversationsAftercallworkConversationIDParticipantCommunicationNotFound {
	return &PatchConversationsAftercallworkConversationIDParticipantCommunicationNotFound{}
}

/*
PatchConversationsAftercallworkConversationIDParticipantCommunicationNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PatchConversationsAftercallworkConversationIDParticipantCommunicationNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations aftercallwork conversation Id participant communication not found response has a 2xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations aftercallwork conversation Id participant communication not found response has a 3xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations aftercallwork conversation Id participant communication not found response has a 4xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations aftercallwork conversation Id participant communication not found response has a 5xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations aftercallwork conversation Id participant communication not found response a status code equal to that given
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/aftercallwork/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsAftercallworkConversationIdParticipantCommunicationNotFound  %+v", 404, o.Payload)
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/aftercallwork/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsAftercallworkConversationIdParticipantCommunicationNotFound  %+v", 404, o.Payload)
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsAftercallworkConversationIDParticipantCommunicationRequestTimeout creates a PatchConversationsAftercallworkConversationIDParticipantCommunicationRequestTimeout with default headers values
func NewPatchConversationsAftercallworkConversationIDParticipantCommunicationRequestTimeout() *PatchConversationsAftercallworkConversationIDParticipantCommunicationRequestTimeout {
	return &PatchConversationsAftercallworkConversationIDParticipantCommunicationRequestTimeout{}
}

/*
PatchConversationsAftercallworkConversationIDParticipantCommunicationRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchConversationsAftercallworkConversationIDParticipantCommunicationRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations aftercallwork conversation Id participant communication request timeout response has a 2xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations aftercallwork conversation Id participant communication request timeout response has a 3xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations aftercallwork conversation Id participant communication request timeout response has a 4xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations aftercallwork conversation Id participant communication request timeout response has a 5xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations aftercallwork conversation Id participant communication request timeout response a status code equal to that given
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/aftercallwork/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsAftercallworkConversationIdParticipantCommunicationRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationRequestTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/aftercallwork/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsAftercallworkConversationIdParticipantCommunicationRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsAftercallworkConversationIDParticipantCommunicationRequestEntityTooLarge creates a PatchConversationsAftercallworkConversationIDParticipantCommunicationRequestEntityTooLarge with default headers values
func NewPatchConversationsAftercallworkConversationIDParticipantCommunicationRequestEntityTooLarge() *PatchConversationsAftercallworkConversationIDParticipantCommunicationRequestEntityTooLarge {
	return &PatchConversationsAftercallworkConversationIDParticipantCommunicationRequestEntityTooLarge{}
}

/*
PatchConversationsAftercallworkConversationIDParticipantCommunicationRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PatchConversationsAftercallworkConversationIDParticipantCommunicationRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations aftercallwork conversation Id participant communication request entity too large response has a 2xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations aftercallwork conversation Id participant communication request entity too large response has a 3xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations aftercallwork conversation Id participant communication request entity too large response has a 4xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations aftercallwork conversation Id participant communication request entity too large response has a 5xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations aftercallwork conversation Id participant communication request entity too large response a status code equal to that given
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/aftercallwork/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsAftercallworkConversationIdParticipantCommunicationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/aftercallwork/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsAftercallworkConversationIdParticipantCommunicationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsAftercallworkConversationIDParticipantCommunicationUnsupportedMediaType creates a PatchConversationsAftercallworkConversationIDParticipantCommunicationUnsupportedMediaType with default headers values
func NewPatchConversationsAftercallworkConversationIDParticipantCommunicationUnsupportedMediaType() *PatchConversationsAftercallworkConversationIDParticipantCommunicationUnsupportedMediaType {
	return &PatchConversationsAftercallworkConversationIDParticipantCommunicationUnsupportedMediaType{}
}

/*
PatchConversationsAftercallworkConversationIDParticipantCommunicationUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchConversationsAftercallworkConversationIDParticipantCommunicationUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations aftercallwork conversation Id participant communication unsupported media type response has a 2xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations aftercallwork conversation Id participant communication unsupported media type response has a 3xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations aftercallwork conversation Id participant communication unsupported media type response has a 4xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations aftercallwork conversation Id participant communication unsupported media type response has a 5xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations aftercallwork conversation Id participant communication unsupported media type response a status code equal to that given
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/aftercallwork/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsAftercallworkConversationIdParticipantCommunicationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/aftercallwork/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsAftercallworkConversationIdParticipantCommunicationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsAftercallworkConversationIDParticipantCommunicationTooManyRequests creates a PatchConversationsAftercallworkConversationIDParticipantCommunicationTooManyRequests with default headers values
func NewPatchConversationsAftercallworkConversationIDParticipantCommunicationTooManyRequests() *PatchConversationsAftercallworkConversationIDParticipantCommunicationTooManyRequests {
	return &PatchConversationsAftercallworkConversationIDParticipantCommunicationTooManyRequests{}
}

/*
PatchConversationsAftercallworkConversationIDParticipantCommunicationTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchConversationsAftercallworkConversationIDParticipantCommunicationTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations aftercallwork conversation Id participant communication too many requests response has a 2xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations aftercallwork conversation Id participant communication too many requests response has a 3xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations aftercallwork conversation Id participant communication too many requests response has a 4xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations aftercallwork conversation Id participant communication too many requests response has a 5xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations aftercallwork conversation Id participant communication too many requests response a status code equal to that given
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/aftercallwork/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsAftercallworkConversationIdParticipantCommunicationTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/aftercallwork/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsAftercallworkConversationIdParticipantCommunicationTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsAftercallworkConversationIDParticipantCommunicationInternalServerError creates a PatchConversationsAftercallworkConversationIDParticipantCommunicationInternalServerError with default headers values
func NewPatchConversationsAftercallworkConversationIDParticipantCommunicationInternalServerError() *PatchConversationsAftercallworkConversationIDParticipantCommunicationInternalServerError {
	return &PatchConversationsAftercallworkConversationIDParticipantCommunicationInternalServerError{}
}

/*
PatchConversationsAftercallworkConversationIDParticipantCommunicationInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchConversationsAftercallworkConversationIDParticipantCommunicationInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations aftercallwork conversation Id participant communication internal server error response has a 2xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations aftercallwork conversation Id participant communication internal server error response has a 3xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations aftercallwork conversation Id participant communication internal server error response has a 4xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations aftercallwork conversation Id participant communication internal server error response has a 5xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations aftercallwork conversation Id participant communication internal server error response a status code equal to that given
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/aftercallwork/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsAftercallworkConversationIdParticipantCommunicationInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/aftercallwork/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsAftercallworkConversationIdParticipantCommunicationInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsAftercallworkConversationIDParticipantCommunicationServiceUnavailable creates a PatchConversationsAftercallworkConversationIDParticipantCommunicationServiceUnavailable with default headers values
func NewPatchConversationsAftercallworkConversationIDParticipantCommunicationServiceUnavailable() *PatchConversationsAftercallworkConversationIDParticipantCommunicationServiceUnavailable {
	return &PatchConversationsAftercallworkConversationIDParticipantCommunicationServiceUnavailable{}
}

/*
PatchConversationsAftercallworkConversationIDParticipantCommunicationServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchConversationsAftercallworkConversationIDParticipantCommunicationServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations aftercallwork conversation Id participant communication service unavailable response has a 2xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations aftercallwork conversation Id participant communication service unavailable response has a 3xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations aftercallwork conversation Id participant communication service unavailable response has a 4xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations aftercallwork conversation Id participant communication service unavailable response has a 5xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations aftercallwork conversation Id participant communication service unavailable response a status code equal to that given
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/aftercallwork/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsAftercallworkConversationIdParticipantCommunicationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationServiceUnavailable) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/aftercallwork/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsAftercallworkConversationIdParticipantCommunicationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsAftercallworkConversationIDParticipantCommunicationGatewayTimeout creates a PatchConversationsAftercallworkConversationIDParticipantCommunicationGatewayTimeout with default headers values
func NewPatchConversationsAftercallworkConversationIDParticipantCommunicationGatewayTimeout() *PatchConversationsAftercallworkConversationIDParticipantCommunicationGatewayTimeout {
	return &PatchConversationsAftercallworkConversationIDParticipantCommunicationGatewayTimeout{}
}

/*
PatchConversationsAftercallworkConversationIDParticipantCommunicationGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PatchConversationsAftercallworkConversationIDParticipantCommunicationGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations aftercallwork conversation Id participant communication gateway timeout response has a 2xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations aftercallwork conversation Id participant communication gateway timeout response has a 3xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations aftercallwork conversation Id participant communication gateway timeout response has a 4xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations aftercallwork conversation Id participant communication gateway timeout response has a 5xx status code
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations aftercallwork conversation Id participant communication gateway timeout response a status code equal to that given
func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/aftercallwork/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsAftercallworkConversationIdParticipantCommunicationGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationGatewayTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/aftercallwork/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsAftercallworkConversationIdParticipantCommunicationGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsAftercallworkConversationIDParticipantCommunicationGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

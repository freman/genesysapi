// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchConversationsMessagingSupportedcontentSupportedContentIDReader is a Reader for the PatchConversationsMessagingSupportedcontentSupportedContentID structure.
type PatchConversationsMessagingSupportedcontentSupportedContentIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchConversationsMessagingSupportedcontentSupportedContentIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchConversationsMessagingSupportedcontentSupportedContentIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchConversationsMessagingSupportedcontentSupportedContentIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchConversationsMessagingSupportedcontentSupportedContentIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchConversationsMessagingSupportedcontentSupportedContentIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchConversationsMessagingSupportedcontentSupportedContentIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchConversationsMessagingSupportedcontentSupportedContentIDRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchConversationsMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchConversationsMessagingSupportedcontentSupportedContentIDUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchConversationsMessagingSupportedcontentSupportedContentIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchConversationsMessagingSupportedcontentSupportedContentIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchConversationsMessagingSupportedcontentSupportedContentIDServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchConversationsMessagingSupportedcontentSupportedContentIDGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchConversationsMessagingSupportedcontentSupportedContentIDOK creates a PatchConversationsMessagingSupportedcontentSupportedContentIDOK with default headers values
func NewPatchConversationsMessagingSupportedcontentSupportedContentIDOK() *PatchConversationsMessagingSupportedcontentSupportedContentIDOK {
	return &PatchConversationsMessagingSupportedcontentSupportedContentIDOK{}
}

/*PatchConversationsMessagingSupportedcontentSupportedContentIDOK handles this case with default header values.

successful operation
*/
type PatchConversationsMessagingSupportedcontentSupportedContentIDOK struct {
	Payload *models.SupportedContent
}

func (o *PatchConversationsMessagingSupportedcontentSupportedContentIDOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] patchConversationsMessagingSupportedcontentSupportedContentIdOK  %+v", 200, o.Payload)
}

func (o *PatchConversationsMessagingSupportedcontentSupportedContentIDOK) GetPayload() *models.SupportedContent {
	return o.Payload
}

func (o *PatchConversationsMessagingSupportedcontentSupportedContentIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SupportedContent)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingSupportedcontentSupportedContentIDBadRequest creates a PatchConversationsMessagingSupportedcontentSupportedContentIDBadRequest with default headers values
func NewPatchConversationsMessagingSupportedcontentSupportedContentIDBadRequest() *PatchConversationsMessagingSupportedcontentSupportedContentIDBadRequest {
	return &PatchConversationsMessagingSupportedcontentSupportedContentIDBadRequest{}
}

/*PatchConversationsMessagingSupportedcontentSupportedContentIDBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchConversationsMessagingSupportedcontentSupportedContentIDBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsMessagingSupportedcontentSupportedContentIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] patchConversationsMessagingSupportedcontentSupportedContentIdBadRequest  %+v", 400, o.Payload)
}

func (o *PatchConversationsMessagingSupportedcontentSupportedContentIDBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingSupportedcontentSupportedContentIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingSupportedcontentSupportedContentIDUnauthorized creates a PatchConversationsMessagingSupportedcontentSupportedContentIDUnauthorized with default headers values
func NewPatchConversationsMessagingSupportedcontentSupportedContentIDUnauthorized() *PatchConversationsMessagingSupportedcontentSupportedContentIDUnauthorized {
	return &PatchConversationsMessagingSupportedcontentSupportedContentIDUnauthorized{}
}

/*PatchConversationsMessagingSupportedcontentSupportedContentIDUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchConversationsMessagingSupportedcontentSupportedContentIDUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsMessagingSupportedcontentSupportedContentIDUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] patchConversationsMessagingSupportedcontentSupportedContentIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConversationsMessagingSupportedcontentSupportedContentIDUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingSupportedcontentSupportedContentIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingSupportedcontentSupportedContentIDForbidden creates a PatchConversationsMessagingSupportedcontentSupportedContentIDForbidden with default headers values
func NewPatchConversationsMessagingSupportedcontentSupportedContentIDForbidden() *PatchConversationsMessagingSupportedcontentSupportedContentIDForbidden {
	return &PatchConversationsMessagingSupportedcontentSupportedContentIDForbidden{}
}

/*PatchConversationsMessagingSupportedcontentSupportedContentIDForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PatchConversationsMessagingSupportedcontentSupportedContentIDForbidden struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsMessagingSupportedcontentSupportedContentIDForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] patchConversationsMessagingSupportedcontentSupportedContentIdForbidden  %+v", 403, o.Payload)
}

func (o *PatchConversationsMessagingSupportedcontentSupportedContentIDForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingSupportedcontentSupportedContentIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingSupportedcontentSupportedContentIDNotFound creates a PatchConversationsMessagingSupportedcontentSupportedContentIDNotFound with default headers values
func NewPatchConversationsMessagingSupportedcontentSupportedContentIDNotFound() *PatchConversationsMessagingSupportedcontentSupportedContentIDNotFound {
	return &PatchConversationsMessagingSupportedcontentSupportedContentIDNotFound{}
}

/*PatchConversationsMessagingSupportedcontentSupportedContentIDNotFound handles this case with default header values.

The requested resource was not found.
*/
type PatchConversationsMessagingSupportedcontentSupportedContentIDNotFound struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsMessagingSupportedcontentSupportedContentIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] patchConversationsMessagingSupportedcontentSupportedContentIdNotFound  %+v", 404, o.Payload)
}

func (o *PatchConversationsMessagingSupportedcontentSupportedContentIDNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingSupportedcontentSupportedContentIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingSupportedcontentSupportedContentIDRequestTimeout creates a PatchConversationsMessagingSupportedcontentSupportedContentIDRequestTimeout with default headers values
func NewPatchConversationsMessagingSupportedcontentSupportedContentIDRequestTimeout() *PatchConversationsMessagingSupportedcontentSupportedContentIDRequestTimeout {
	return &PatchConversationsMessagingSupportedcontentSupportedContentIDRequestTimeout{}
}

/*PatchConversationsMessagingSupportedcontentSupportedContentIDRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchConversationsMessagingSupportedcontentSupportedContentIDRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsMessagingSupportedcontentSupportedContentIDRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] patchConversationsMessagingSupportedcontentSupportedContentIdRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchConversationsMessagingSupportedcontentSupportedContentIDRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingSupportedcontentSupportedContentIDRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge creates a PatchConversationsMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge with default headers values
func NewPatchConversationsMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge() *PatchConversationsMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge {
	return &PatchConversationsMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge{}
}

/*PatchConversationsMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PatchConversationsMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] patchConversationsMessagingSupportedcontentSupportedContentIdRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchConversationsMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingSupportedcontentSupportedContentIDUnsupportedMediaType creates a PatchConversationsMessagingSupportedcontentSupportedContentIDUnsupportedMediaType with default headers values
func NewPatchConversationsMessagingSupportedcontentSupportedContentIDUnsupportedMediaType() *PatchConversationsMessagingSupportedcontentSupportedContentIDUnsupportedMediaType {
	return &PatchConversationsMessagingSupportedcontentSupportedContentIDUnsupportedMediaType{}
}

/*PatchConversationsMessagingSupportedcontentSupportedContentIDUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchConversationsMessagingSupportedcontentSupportedContentIDUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsMessagingSupportedcontentSupportedContentIDUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] patchConversationsMessagingSupportedcontentSupportedContentIdUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchConversationsMessagingSupportedcontentSupportedContentIDUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingSupportedcontentSupportedContentIDUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingSupportedcontentSupportedContentIDTooManyRequests creates a PatchConversationsMessagingSupportedcontentSupportedContentIDTooManyRequests with default headers values
func NewPatchConversationsMessagingSupportedcontentSupportedContentIDTooManyRequests() *PatchConversationsMessagingSupportedcontentSupportedContentIDTooManyRequests {
	return &PatchConversationsMessagingSupportedcontentSupportedContentIDTooManyRequests{}
}

/*PatchConversationsMessagingSupportedcontentSupportedContentIDTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchConversationsMessagingSupportedcontentSupportedContentIDTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsMessagingSupportedcontentSupportedContentIDTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] patchConversationsMessagingSupportedcontentSupportedContentIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConversationsMessagingSupportedcontentSupportedContentIDTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingSupportedcontentSupportedContentIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingSupportedcontentSupportedContentIDInternalServerError creates a PatchConversationsMessagingSupportedcontentSupportedContentIDInternalServerError with default headers values
func NewPatchConversationsMessagingSupportedcontentSupportedContentIDInternalServerError() *PatchConversationsMessagingSupportedcontentSupportedContentIDInternalServerError {
	return &PatchConversationsMessagingSupportedcontentSupportedContentIDInternalServerError{}
}

/*PatchConversationsMessagingSupportedcontentSupportedContentIDInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchConversationsMessagingSupportedcontentSupportedContentIDInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsMessagingSupportedcontentSupportedContentIDInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] patchConversationsMessagingSupportedcontentSupportedContentIdInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchConversationsMessagingSupportedcontentSupportedContentIDInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingSupportedcontentSupportedContentIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingSupportedcontentSupportedContentIDServiceUnavailable creates a PatchConversationsMessagingSupportedcontentSupportedContentIDServiceUnavailable with default headers values
func NewPatchConversationsMessagingSupportedcontentSupportedContentIDServiceUnavailable() *PatchConversationsMessagingSupportedcontentSupportedContentIDServiceUnavailable {
	return &PatchConversationsMessagingSupportedcontentSupportedContentIDServiceUnavailable{}
}

/*PatchConversationsMessagingSupportedcontentSupportedContentIDServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchConversationsMessagingSupportedcontentSupportedContentIDServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsMessagingSupportedcontentSupportedContentIDServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] patchConversationsMessagingSupportedcontentSupportedContentIdServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchConversationsMessagingSupportedcontentSupportedContentIDServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingSupportedcontentSupportedContentIDServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingSupportedcontentSupportedContentIDGatewayTimeout creates a PatchConversationsMessagingSupportedcontentSupportedContentIDGatewayTimeout with default headers values
func NewPatchConversationsMessagingSupportedcontentSupportedContentIDGatewayTimeout() *PatchConversationsMessagingSupportedcontentSupportedContentIDGatewayTimeout {
	return &PatchConversationsMessagingSupportedcontentSupportedContentIDGatewayTimeout{}
}

/*PatchConversationsMessagingSupportedcontentSupportedContentIDGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PatchConversationsMessagingSupportedcontentSupportedContentIDGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsMessagingSupportedcontentSupportedContentIDGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] patchConversationsMessagingSupportedcontentSupportedContentIdGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchConversationsMessagingSupportedcontentSupportedContentIDGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingSupportedcontentSupportedContentIDGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

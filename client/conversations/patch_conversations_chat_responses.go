// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchConversationsChatReader is a Reader for the PatchConversationsChat structure.
type PatchConversationsChatReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchConversationsChatReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchConversationsChatOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchConversationsChatBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchConversationsChatUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchConversationsChatForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchConversationsChatNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchConversationsChatRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchConversationsChatRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchConversationsChatUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchConversationsChatTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchConversationsChatInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchConversationsChatServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchConversationsChatGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchConversationsChatOK creates a PatchConversationsChatOK with default headers values
func NewPatchConversationsChatOK() *PatchConversationsChatOK {
	return &PatchConversationsChatOK{}
}

/*
PatchConversationsChatOK describes a response with status code 200, with default header values.

successful operation
*/
type PatchConversationsChatOK struct {
	Payload *models.Conversation
}

// IsSuccess returns true when this patch conversations chat o k response has a 2xx status code
func (o *PatchConversationsChatOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch conversations chat o k response has a 3xx status code
func (o *PatchConversationsChatOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations chat o k response has a 4xx status code
func (o *PatchConversationsChatOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations chat o k response has a 5xx status code
func (o *PatchConversationsChatOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations chat o k response a status code equal to that given
func (o *PatchConversationsChatOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchConversationsChatOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}][%d] patchConversationsChatOK  %+v", 200, o.Payload)
}

func (o *PatchConversationsChatOK) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}][%d] patchConversationsChatOK  %+v", 200, o.Payload)
}

func (o *PatchConversationsChatOK) GetPayload() *models.Conversation {
	return o.Payload
}

func (o *PatchConversationsChatOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Conversation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsChatBadRequest creates a PatchConversationsChatBadRequest with default headers values
func NewPatchConversationsChatBadRequest() *PatchConversationsChatBadRequest {
	return &PatchConversationsChatBadRequest{}
}

/*
PatchConversationsChatBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchConversationsChatBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations chat bad request response has a 2xx status code
func (o *PatchConversationsChatBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations chat bad request response has a 3xx status code
func (o *PatchConversationsChatBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations chat bad request response has a 4xx status code
func (o *PatchConversationsChatBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations chat bad request response has a 5xx status code
func (o *PatchConversationsChatBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations chat bad request response a status code equal to that given
func (o *PatchConversationsChatBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchConversationsChatBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}][%d] patchConversationsChatBadRequest  %+v", 400, o.Payload)
}

func (o *PatchConversationsChatBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}][%d] patchConversationsChatBadRequest  %+v", 400, o.Payload)
}

func (o *PatchConversationsChatBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsChatBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsChatUnauthorized creates a PatchConversationsChatUnauthorized with default headers values
func NewPatchConversationsChatUnauthorized() *PatchConversationsChatUnauthorized {
	return &PatchConversationsChatUnauthorized{}
}

/*
PatchConversationsChatUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchConversationsChatUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations chat unauthorized response has a 2xx status code
func (o *PatchConversationsChatUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations chat unauthorized response has a 3xx status code
func (o *PatchConversationsChatUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations chat unauthorized response has a 4xx status code
func (o *PatchConversationsChatUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations chat unauthorized response has a 5xx status code
func (o *PatchConversationsChatUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations chat unauthorized response a status code equal to that given
func (o *PatchConversationsChatUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchConversationsChatUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}][%d] patchConversationsChatUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConversationsChatUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}][%d] patchConversationsChatUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConversationsChatUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsChatUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsChatForbidden creates a PatchConversationsChatForbidden with default headers values
func NewPatchConversationsChatForbidden() *PatchConversationsChatForbidden {
	return &PatchConversationsChatForbidden{}
}

/*
PatchConversationsChatForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PatchConversationsChatForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations chat forbidden response has a 2xx status code
func (o *PatchConversationsChatForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations chat forbidden response has a 3xx status code
func (o *PatchConversationsChatForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations chat forbidden response has a 4xx status code
func (o *PatchConversationsChatForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations chat forbidden response has a 5xx status code
func (o *PatchConversationsChatForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations chat forbidden response a status code equal to that given
func (o *PatchConversationsChatForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchConversationsChatForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}][%d] patchConversationsChatForbidden  %+v", 403, o.Payload)
}

func (o *PatchConversationsChatForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}][%d] patchConversationsChatForbidden  %+v", 403, o.Payload)
}

func (o *PatchConversationsChatForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsChatForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsChatNotFound creates a PatchConversationsChatNotFound with default headers values
func NewPatchConversationsChatNotFound() *PatchConversationsChatNotFound {
	return &PatchConversationsChatNotFound{}
}

/*
PatchConversationsChatNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PatchConversationsChatNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations chat not found response has a 2xx status code
func (o *PatchConversationsChatNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations chat not found response has a 3xx status code
func (o *PatchConversationsChatNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations chat not found response has a 4xx status code
func (o *PatchConversationsChatNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations chat not found response has a 5xx status code
func (o *PatchConversationsChatNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations chat not found response a status code equal to that given
func (o *PatchConversationsChatNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchConversationsChatNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}][%d] patchConversationsChatNotFound  %+v", 404, o.Payload)
}

func (o *PatchConversationsChatNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}][%d] patchConversationsChatNotFound  %+v", 404, o.Payload)
}

func (o *PatchConversationsChatNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsChatNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsChatRequestTimeout creates a PatchConversationsChatRequestTimeout with default headers values
func NewPatchConversationsChatRequestTimeout() *PatchConversationsChatRequestTimeout {
	return &PatchConversationsChatRequestTimeout{}
}

/*
PatchConversationsChatRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchConversationsChatRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations chat request timeout response has a 2xx status code
func (o *PatchConversationsChatRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations chat request timeout response has a 3xx status code
func (o *PatchConversationsChatRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations chat request timeout response has a 4xx status code
func (o *PatchConversationsChatRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations chat request timeout response has a 5xx status code
func (o *PatchConversationsChatRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations chat request timeout response a status code equal to that given
func (o *PatchConversationsChatRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PatchConversationsChatRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}][%d] patchConversationsChatRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchConversationsChatRequestTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}][%d] patchConversationsChatRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchConversationsChatRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsChatRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsChatRequestEntityTooLarge creates a PatchConversationsChatRequestEntityTooLarge with default headers values
func NewPatchConversationsChatRequestEntityTooLarge() *PatchConversationsChatRequestEntityTooLarge {
	return &PatchConversationsChatRequestEntityTooLarge{}
}

/*
PatchConversationsChatRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PatchConversationsChatRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations chat request entity too large response has a 2xx status code
func (o *PatchConversationsChatRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations chat request entity too large response has a 3xx status code
func (o *PatchConversationsChatRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations chat request entity too large response has a 4xx status code
func (o *PatchConversationsChatRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations chat request entity too large response has a 5xx status code
func (o *PatchConversationsChatRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations chat request entity too large response a status code equal to that given
func (o *PatchConversationsChatRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PatchConversationsChatRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}][%d] patchConversationsChatRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchConversationsChatRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}][%d] patchConversationsChatRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchConversationsChatRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsChatRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsChatUnsupportedMediaType creates a PatchConversationsChatUnsupportedMediaType with default headers values
func NewPatchConversationsChatUnsupportedMediaType() *PatchConversationsChatUnsupportedMediaType {
	return &PatchConversationsChatUnsupportedMediaType{}
}

/*
PatchConversationsChatUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchConversationsChatUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations chat unsupported media type response has a 2xx status code
func (o *PatchConversationsChatUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations chat unsupported media type response has a 3xx status code
func (o *PatchConversationsChatUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations chat unsupported media type response has a 4xx status code
func (o *PatchConversationsChatUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations chat unsupported media type response has a 5xx status code
func (o *PatchConversationsChatUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations chat unsupported media type response a status code equal to that given
func (o *PatchConversationsChatUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PatchConversationsChatUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}][%d] patchConversationsChatUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchConversationsChatUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}][%d] patchConversationsChatUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchConversationsChatUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsChatUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsChatTooManyRequests creates a PatchConversationsChatTooManyRequests with default headers values
func NewPatchConversationsChatTooManyRequests() *PatchConversationsChatTooManyRequests {
	return &PatchConversationsChatTooManyRequests{}
}

/*
PatchConversationsChatTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchConversationsChatTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations chat too many requests response has a 2xx status code
func (o *PatchConversationsChatTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations chat too many requests response has a 3xx status code
func (o *PatchConversationsChatTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations chat too many requests response has a 4xx status code
func (o *PatchConversationsChatTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations chat too many requests response has a 5xx status code
func (o *PatchConversationsChatTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations chat too many requests response a status code equal to that given
func (o *PatchConversationsChatTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchConversationsChatTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}][%d] patchConversationsChatTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConversationsChatTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}][%d] patchConversationsChatTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConversationsChatTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsChatTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsChatInternalServerError creates a PatchConversationsChatInternalServerError with default headers values
func NewPatchConversationsChatInternalServerError() *PatchConversationsChatInternalServerError {
	return &PatchConversationsChatInternalServerError{}
}

/*
PatchConversationsChatInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchConversationsChatInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations chat internal server error response has a 2xx status code
func (o *PatchConversationsChatInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations chat internal server error response has a 3xx status code
func (o *PatchConversationsChatInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations chat internal server error response has a 4xx status code
func (o *PatchConversationsChatInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations chat internal server error response has a 5xx status code
func (o *PatchConversationsChatInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations chat internal server error response a status code equal to that given
func (o *PatchConversationsChatInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchConversationsChatInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}][%d] patchConversationsChatInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchConversationsChatInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}][%d] patchConversationsChatInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchConversationsChatInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsChatInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsChatServiceUnavailable creates a PatchConversationsChatServiceUnavailable with default headers values
func NewPatchConversationsChatServiceUnavailable() *PatchConversationsChatServiceUnavailable {
	return &PatchConversationsChatServiceUnavailable{}
}

/*
PatchConversationsChatServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchConversationsChatServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations chat service unavailable response has a 2xx status code
func (o *PatchConversationsChatServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations chat service unavailable response has a 3xx status code
func (o *PatchConversationsChatServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations chat service unavailable response has a 4xx status code
func (o *PatchConversationsChatServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations chat service unavailable response has a 5xx status code
func (o *PatchConversationsChatServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations chat service unavailable response a status code equal to that given
func (o *PatchConversationsChatServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PatchConversationsChatServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}][%d] patchConversationsChatServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchConversationsChatServiceUnavailable) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}][%d] patchConversationsChatServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchConversationsChatServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsChatServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsChatGatewayTimeout creates a PatchConversationsChatGatewayTimeout with default headers values
func NewPatchConversationsChatGatewayTimeout() *PatchConversationsChatGatewayTimeout {
	return &PatchConversationsChatGatewayTimeout{}
}

/*
PatchConversationsChatGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PatchConversationsChatGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations chat gateway timeout response has a 2xx status code
func (o *PatchConversationsChatGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations chat gateway timeout response has a 3xx status code
func (o *PatchConversationsChatGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations chat gateway timeout response has a 4xx status code
func (o *PatchConversationsChatGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations chat gateway timeout response has a 5xx status code
func (o *PatchConversationsChatGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations chat gateway timeout response a status code equal to that given
func (o *PatchConversationsChatGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PatchConversationsChatGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}][%d] patchConversationsChatGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchConversationsChatGatewayTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}][%d] patchConversationsChatGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchConversationsChatGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsChatGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

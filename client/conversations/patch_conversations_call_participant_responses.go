// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchConversationsCallParticipantReader is a Reader for the PatchConversationsCallParticipant structure.
type PatchConversationsCallParticipantReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchConversationsCallParticipantReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewPatchConversationsCallParticipantAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchConversationsCallParticipantBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchConversationsCallParticipantUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchConversationsCallParticipantForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchConversationsCallParticipantNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchConversationsCallParticipantRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchConversationsCallParticipantRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchConversationsCallParticipantUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchConversationsCallParticipantTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchConversationsCallParticipantInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchConversationsCallParticipantServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchConversationsCallParticipantGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchConversationsCallParticipantAccepted creates a PatchConversationsCallParticipantAccepted with default headers values
func NewPatchConversationsCallParticipantAccepted() *PatchConversationsCallParticipantAccepted {
	return &PatchConversationsCallParticipantAccepted{}
}

/*
PatchConversationsCallParticipantAccepted describes a response with status code 202, with default header values.

Accepted
*/
type PatchConversationsCallParticipantAccepted struct {
}

// IsSuccess returns true when this patch conversations call participant accepted response has a 2xx status code
func (o *PatchConversationsCallParticipantAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch conversations call participant accepted response has a 3xx status code
func (o *PatchConversationsCallParticipantAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations call participant accepted response has a 4xx status code
func (o *PatchConversationsCallParticipantAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations call participant accepted response has a 5xx status code
func (o *PatchConversationsCallParticipantAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations call participant accepted response a status code equal to that given
func (o *PatchConversationsCallParticipantAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *PatchConversationsCallParticipantAccepted) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/calls/{conversationId}/participants/{participantId}][%d] patchConversationsCallParticipantAccepted ", 202)
}

func (o *PatchConversationsCallParticipantAccepted) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/calls/{conversationId}/participants/{participantId}][%d] patchConversationsCallParticipantAccepted ", 202)
}

func (o *PatchConversationsCallParticipantAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchConversationsCallParticipantBadRequest creates a PatchConversationsCallParticipantBadRequest with default headers values
func NewPatchConversationsCallParticipantBadRequest() *PatchConversationsCallParticipantBadRequest {
	return &PatchConversationsCallParticipantBadRequest{}
}

/*
PatchConversationsCallParticipantBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchConversationsCallParticipantBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations call participant bad request response has a 2xx status code
func (o *PatchConversationsCallParticipantBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations call participant bad request response has a 3xx status code
func (o *PatchConversationsCallParticipantBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations call participant bad request response has a 4xx status code
func (o *PatchConversationsCallParticipantBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations call participant bad request response has a 5xx status code
func (o *PatchConversationsCallParticipantBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations call participant bad request response a status code equal to that given
func (o *PatchConversationsCallParticipantBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchConversationsCallParticipantBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/calls/{conversationId}/participants/{participantId}][%d] patchConversationsCallParticipantBadRequest  %+v", 400, o.Payload)
}

func (o *PatchConversationsCallParticipantBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/calls/{conversationId}/participants/{participantId}][%d] patchConversationsCallParticipantBadRequest  %+v", 400, o.Payload)
}

func (o *PatchConversationsCallParticipantBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallParticipantBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallParticipantUnauthorized creates a PatchConversationsCallParticipantUnauthorized with default headers values
func NewPatchConversationsCallParticipantUnauthorized() *PatchConversationsCallParticipantUnauthorized {
	return &PatchConversationsCallParticipantUnauthorized{}
}

/*
PatchConversationsCallParticipantUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchConversationsCallParticipantUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations call participant unauthorized response has a 2xx status code
func (o *PatchConversationsCallParticipantUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations call participant unauthorized response has a 3xx status code
func (o *PatchConversationsCallParticipantUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations call participant unauthorized response has a 4xx status code
func (o *PatchConversationsCallParticipantUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations call participant unauthorized response has a 5xx status code
func (o *PatchConversationsCallParticipantUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations call participant unauthorized response a status code equal to that given
func (o *PatchConversationsCallParticipantUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchConversationsCallParticipantUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/calls/{conversationId}/participants/{participantId}][%d] patchConversationsCallParticipantUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConversationsCallParticipantUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/calls/{conversationId}/participants/{participantId}][%d] patchConversationsCallParticipantUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConversationsCallParticipantUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallParticipantUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallParticipantForbidden creates a PatchConversationsCallParticipantForbidden with default headers values
func NewPatchConversationsCallParticipantForbidden() *PatchConversationsCallParticipantForbidden {
	return &PatchConversationsCallParticipantForbidden{}
}

/*
PatchConversationsCallParticipantForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PatchConversationsCallParticipantForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations call participant forbidden response has a 2xx status code
func (o *PatchConversationsCallParticipantForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations call participant forbidden response has a 3xx status code
func (o *PatchConversationsCallParticipantForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations call participant forbidden response has a 4xx status code
func (o *PatchConversationsCallParticipantForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations call participant forbidden response has a 5xx status code
func (o *PatchConversationsCallParticipantForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations call participant forbidden response a status code equal to that given
func (o *PatchConversationsCallParticipantForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchConversationsCallParticipantForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/calls/{conversationId}/participants/{participantId}][%d] patchConversationsCallParticipantForbidden  %+v", 403, o.Payload)
}

func (o *PatchConversationsCallParticipantForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/calls/{conversationId}/participants/{participantId}][%d] patchConversationsCallParticipantForbidden  %+v", 403, o.Payload)
}

func (o *PatchConversationsCallParticipantForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallParticipantForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallParticipantNotFound creates a PatchConversationsCallParticipantNotFound with default headers values
func NewPatchConversationsCallParticipantNotFound() *PatchConversationsCallParticipantNotFound {
	return &PatchConversationsCallParticipantNotFound{}
}

/*
PatchConversationsCallParticipantNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PatchConversationsCallParticipantNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations call participant not found response has a 2xx status code
func (o *PatchConversationsCallParticipantNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations call participant not found response has a 3xx status code
func (o *PatchConversationsCallParticipantNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations call participant not found response has a 4xx status code
func (o *PatchConversationsCallParticipantNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations call participant not found response has a 5xx status code
func (o *PatchConversationsCallParticipantNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations call participant not found response a status code equal to that given
func (o *PatchConversationsCallParticipantNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchConversationsCallParticipantNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/calls/{conversationId}/participants/{participantId}][%d] patchConversationsCallParticipantNotFound  %+v", 404, o.Payload)
}

func (o *PatchConversationsCallParticipantNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/calls/{conversationId}/participants/{participantId}][%d] patchConversationsCallParticipantNotFound  %+v", 404, o.Payload)
}

func (o *PatchConversationsCallParticipantNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallParticipantNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallParticipantRequestTimeout creates a PatchConversationsCallParticipantRequestTimeout with default headers values
func NewPatchConversationsCallParticipantRequestTimeout() *PatchConversationsCallParticipantRequestTimeout {
	return &PatchConversationsCallParticipantRequestTimeout{}
}

/*
PatchConversationsCallParticipantRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchConversationsCallParticipantRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations call participant request timeout response has a 2xx status code
func (o *PatchConversationsCallParticipantRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations call participant request timeout response has a 3xx status code
func (o *PatchConversationsCallParticipantRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations call participant request timeout response has a 4xx status code
func (o *PatchConversationsCallParticipantRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations call participant request timeout response has a 5xx status code
func (o *PatchConversationsCallParticipantRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations call participant request timeout response a status code equal to that given
func (o *PatchConversationsCallParticipantRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PatchConversationsCallParticipantRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/calls/{conversationId}/participants/{participantId}][%d] patchConversationsCallParticipantRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchConversationsCallParticipantRequestTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/calls/{conversationId}/participants/{participantId}][%d] patchConversationsCallParticipantRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchConversationsCallParticipantRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallParticipantRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallParticipantRequestEntityTooLarge creates a PatchConversationsCallParticipantRequestEntityTooLarge with default headers values
func NewPatchConversationsCallParticipantRequestEntityTooLarge() *PatchConversationsCallParticipantRequestEntityTooLarge {
	return &PatchConversationsCallParticipantRequestEntityTooLarge{}
}

/*
PatchConversationsCallParticipantRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PatchConversationsCallParticipantRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations call participant request entity too large response has a 2xx status code
func (o *PatchConversationsCallParticipantRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations call participant request entity too large response has a 3xx status code
func (o *PatchConversationsCallParticipantRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations call participant request entity too large response has a 4xx status code
func (o *PatchConversationsCallParticipantRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations call participant request entity too large response has a 5xx status code
func (o *PatchConversationsCallParticipantRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations call participant request entity too large response a status code equal to that given
func (o *PatchConversationsCallParticipantRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PatchConversationsCallParticipantRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/calls/{conversationId}/participants/{participantId}][%d] patchConversationsCallParticipantRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchConversationsCallParticipantRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/calls/{conversationId}/participants/{participantId}][%d] patchConversationsCallParticipantRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchConversationsCallParticipantRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallParticipantRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallParticipantUnsupportedMediaType creates a PatchConversationsCallParticipantUnsupportedMediaType with default headers values
func NewPatchConversationsCallParticipantUnsupportedMediaType() *PatchConversationsCallParticipantUnsupportedMediaType {
	return &PatchConversationsCallParticipantUnsupportedMediaType{}
}

/*
PatchConversationsCallParticipantUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchConversationsCallParticipantUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations call participant unsupported media type response has a 2xx status code
func (o *PatchConversationsCallParticipantUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations call participant unsupported media type response has a 3xx status code
func (o *PatchConversationsCallParticipantUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations call participant unsupported media type response has a 4xx status code
func (o *PatchConversationsCallParticipantUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations call participant unsupported media type response has a 5xx status code
func (o *PatchConversationsCallParticipantUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations call participant unsupported media type response a status code equal to that given
func (o *PatchConversationsCallParticipantUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PatchConversationsCallParticipantUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/calls/{conversationId}/participants/{participantId}][%d] patchConversationsCallParticipantUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchConversationsCallParticipantUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/calls/{conversationId}/participants/{participantId}][%d] patchConversationsCallParticipantUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchConversationsCallParticipantUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallParticipantUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallParticipantTooManyRequests creates a PatchConversationsCallParticipantTooManyRequests with default headers values
func NewPatchConversationsCallParticipantTooManyRequests() *PatchConversationsCallParticipantTooManyRequests {
	return &PatchConversationsCallParticipantTooManyRequests{}
}

/*
PatchConversationsCallParticipantTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchConversationsCallParticipantTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations call participant too many requests response has a 2xx status code
func (o *PatchConversationsCallParticipantTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations call participant too many requests response has a 3xx status code
func (o *PatchConversationsCallParticipantTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations call participant too many requests response has a 4xx status code
func (o *PatchConversationsCallParticipantTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations call participant too many requests response has a 5xx status code
func (o *PatchConversationsCallParticipantTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations call participant too many requests response a status code equal to that given
func (o *PatchConversationsCallParticipantTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchConversationsCallParticipantTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/calls/{conversationId}/participants/{participantId}][%d] patchConversationsCallParticipantTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConversationsCallParticipantTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/calls/{conversationId}/participants/{participantId}][%d] patchConversationsCallParticipantTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConversationsCallParticipantTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallParticipantTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallParticipantInternalServerError creates a PatchConversationsCallParticipantInternalServerError with default headers values
func NewPatchConversationsCallParticipantInternalServerError() *PatchConversationsCallParticipantInternalServerError {
	return &PatchConversationsCallParticipantInternalServerError{}
}

/*
PatchConversationsCallParticipantInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchConversationsCallParticipantInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations call participant internal server error response has a 2xx status code
func (o *PatchConversationsCallParticipantInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations call participant internal server error response has a 3xx status code
func (o *PatchConversationsCallParticipantInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations call participant internal server error response has a 4xx status code
func (o *PatchConversationsCallParticipantInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations call participant internal server error response has a 5xx status code
func (o *PatchConversationsCallParticipantInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations call participant internal server error response a status code equal to that given
func (o *PatchConversationsCallParticipantInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchConversationsCallParticipantInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/calls/{conversationId}/participants/{participantId}][%d] patchConversationsCallParticipantInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchConversationsCallParticipantInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/calls/{conversationId}/participants/{participantId}][%d] patchConversationsCallParticipantInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchConversationsCallParticipantInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallParticipantInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallParticipantServiceUnavailable creates a PatchConversationsCallParticipantServiceUnavailable with default headers values
func NewPatchConversationsCallParticipantServiceUnavailable() *PatchConversationsCallParticipantServiceUnavailable {
	return &PatchConversationsCallParticipantServiceUnavailable{}
}

/*
PatchConversationsCallParticipantServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchConversationsCallParticipantServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations call participant service unavailable response has a 2xx status code
func (o *PatchConversationsCallParticipantServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations call participant service unavailable response has a 3xx status code
func (o *PatchConversationsCallParticipantServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations call participant service unavailable response has a 4xx status code
func (o *PatchConversationsCallParticipantServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations call participant service unavailable response has a 5xx status code
func (o *PatchConversationsCallParticipantServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations call participant service unavailable response a status code equal to that given
func (o *PatchConversationsCallParticipantServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PatchConversationsCallParticipantServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/calls/{conversationId}/participants/{participantId}][%d] patchConversationsCallParticipantServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchConversationsCallParticipantServiceUnavailable) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/calls/{conversationId}/participants/{participantId}][%d] patchConversationsCallParticipantServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchConversationsCallParticipantServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallParticipantServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallParticipantGatewayTimeout creates a PatchConversationsCallParticipantGatewayTimeout with default headers values
func NewPatchConversationsCallParticipantGatewayTimeout() *PatchConversationsCallParticipantGatewayTimeout {
	return &PatchConversationsCallParticipantGatewayTimeout{}
}

/*
PatchConversationsCallParticipantGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PatchConversationsCallParticipantGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations call participant gateway timeout response has a 2xx status code
func (o *PatchConversationsCallParticipantGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations call participant gateway timeout response has a 3xx status code
func (o *PatchConversationsCallParticipantGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations call participant gateway timeout response has a 4xx status code
func (o *PatchConversationsCallParticipantGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations call participant gateway timeout response has a 5xx status code
func (o *PatchConversationsCallParticipantGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations call participant gateway timeout response a status code equal to that given
func (o *PatchConversationsCallParticipantGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PatchConversationsCallParticipantGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/calls/{conversationId}/participants/{participantId}][%d] patchConversationsCallParticipantGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchConversationsCallParticipantGatewayTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/calls/{conversationId}/participants/{participantId}][%d] patchConversationsCallParticipantGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchConversationsCallParticipantGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallParticipantGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

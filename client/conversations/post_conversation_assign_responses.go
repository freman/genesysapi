// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostConversationAssignReader is a Reader for the PostConversationAssign structure.
type PostConversationAssignReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostConversationAssignReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewPostConversationAssignAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostConversationAssignBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostConversationAssignUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostConversationAssignForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostConversationAssignNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostConversationAssignRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostConversationAssignUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostConversationAssignTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostConversationAssignInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostConversationAssignServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostConversationAssignGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostConversationAssignAccepted creates a PostConversationAssignAccepted with default headers values
func NewPostConversationAssignAccepted() *PostConversationAssignAccepted {
	return &PostConversationAssignAccepted{}
}

/*PostConversationAssignAccepted handles this case with default header values.

The manual assignment request was accepted
*/
type PostConversationAssignAccepted struct {
	Payload string
}

func (o *PostConversationAssignAccepted) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/assign][%d] postConversationAssignAccepted  %+v", 202, o.Payload)
}

func (o *PostConversationAssignAccepted) GetPayload() string {
	return o.Payload
}

func (o *PostConversationAssignAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationAssignBadRequest creates a PostConversationAssignBadRequest with default headers values
func NewPostConversationAssignBadRequest() *PostConversationAssignBadRequest {
	return &PostConversationAssignBadRequest{}
}

/*PostConversationAssignBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostConversationAssignBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PostConversationAssignBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/assign][%d] postConversationAssignBadRequest  %+v", 400, o.Payload)
}

func (o *PostConversationAssignBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationAssignBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationAssignUnauthorized creates a PostConversationAssignUnauthorized with default headers values
func NewPostConversationAssignUnauthorized() *PostConversationAssignUnauthorized {
	return &PostConversationAssignUnauthorized{}
}

/*PostConversationAssignUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PostConversationAssignUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PostConversationAssignUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/assign][%d] postConversationAssignUnauthorized  %+v", 401, o.Payload)
}

func (o *PostConversationAssignUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationAssignUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationAssignForbidden creates a PostConversationAssignForbidden with default headers values
func NewPostConversationAssignForbidden() *PostConversationAssignForbidden {
	return &PostConversationAssignForbidden{}
}

/*PostConversationAssignForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PostConversationAssignForbidden struct {
	Payload *models.ErrorBody
}

func (o *PostConversationAssignForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/assign][%d] postConversationAssignForbidden  %+v", 403, o.Payload)
}

func (o *PostConversationAssignForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationAssignForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationAssignNotFound creates a PostConversationAssignNotFound with default headers values
func NewPostConversationAssignNotFound() *PostConversationAssignNotFound {
	return &PostConversationAssignNotFound{}
}

/*PostConversationAssignNotFound handles this case with default header values.

The requested resource was not found.
*/
type PostConversationAssignNotFound struct {
	Payload *models.ErrorBody
}

func (o *PostConversationAssignNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/assign][%d] postConversationAssignNotFound  %+v", 404, o.Payload)
}

func (o *PostConversationAssignNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationAssignNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationAssignRequestEntityTooLarge creates a PostConversationAssignRequestEntityTooLarge with default headers values
func NewPostConversationAssignRequestEntityTooLarge() *PostConversationAssignRequestEntityTooLarge {
	return &PostConversationAssignRequestEntityTooLarge{}
}

/*PostConversationAssignRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type PostConversationAssignRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PostConversationAssignRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/assign][%d] postConversationAssignRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostConversationAssignRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationAssignRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationAssignUnsupportedMediaType creates a PostConversationAssignUnsupportedMediaType with default headers values
func NewPostConversationAssignUnsupportedMediaType() *PostConversationAssignUnsupportedMediaType {
	return &PostConversationAssignUnsupportedMediaType{}
}

/*PostConversationAssignUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostConversationAssignUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PostConversationAssignUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/assign][%d] postConversationAssignUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostConversationAssignUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationAssignUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationAssignTooManyRequests creates a PostConversationAssignTooManyRequests with default headers values
func NewPostConversationAssignTooManyRequests() *PostConversationAssignTooManyRequests {
	return &PostConversationAssignTooManyRequests{}
}

/*PostConversationAssignTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum [%s] requests within [%s] seconds
*/
type PostConversationAssignTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PostConversationAssignTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/assign][%d] postConversationAssignTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostConversationAssignTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationAssignTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationAssignInternalServerError creates a PostConversationAssignInternalServerError with default headers values
func NewPostConversationAssignInternalServerError() *PostConversationAssignInternalServerError {
	return &PostConversationAssignInternalServerError{}
}

/*PostConversationAssignInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostConversationAssignInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PostConversationAssignInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/assign][%d] postConversationAssignInternalServerError  %+v", 500, o.Payload)
}

func (o *PostConversationAssignInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationAssignInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationAssignServiceUnavailable creates a PostConversationAssignServiceUnavailable with default headers values
func NewPostConversationAssignServiceUnavailable() *PostConversationAssignServiceUnavailable {
	return &PostConversationAssignServiceUnavailable{}
}

/*PostConversationAssignServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostConversationAssignServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PostConversationAssignServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/assign][%d] postConversationAssignServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostConversationAssignServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationAssignServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationAssignGatewayTimeout creates a PostConversationAssignGatewayTimeout with default headers values
func NewPostConversationAssignGatewayTimeout() *PostConversationAssignGatewayTimeout {
	return &PostConversationAssignGatewayTimeout{}
}

/*PostConversationAssignGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PostConversationAssignGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PostConversationAssignGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/assign][%d] postConversationAssignGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostConversationAssignGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationAssignGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

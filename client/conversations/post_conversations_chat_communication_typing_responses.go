// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostConversationsChatCommunicationTypingReader is a Reader for the PostConversationsChatCommunicationTyping structure.
type PostConversationsChatCommunicationTypingReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostConversationsChatCommunicationTypingReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostConversationsChatCommunicationTypingOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostConversationsChatCommunicationTypingBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostConversationsChatCommunicationTypingUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostConversationsChatCommunicationTypingForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostConversationsChatCommunicationTypingNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostConversationsChatCommunicationTypingRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostConversationsChatCommunicationTypingRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostConversationsChatCommunicationTypingUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostConversationsChatCommunicationTypingTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostConversationsChatCommunicationTypingInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostConversationsChatCommunicationTypingServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostConversationsChatCommunicationTypingGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostConversationsChatCommunicationTypingOK creates a PostConversationsChatCommunicationTypingOK with default headers values
func NewPostConversationsChatCommunicationTypingOK() *PostConversationsChatCommunicationTypingOK {
	return &PostConversationsChatCommunicationTypingOK{}
}

/*
PostConversationsChatCommunicationTypingOK describes a response with status code 200, with default header values.

successful operation
*/
type PostConversationsChatCommunicationTypingOK struct {
	Payload *models.WebChatTyping
}

// IsSuccess returns true when this post conversations chat communication typing o k response has a 2xx status code
func (o *PostConversationsChatCommunicationTypingOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post conversations chat communication typing o k response has a 3xx status code
func (o *PostConversationsChatCommunicationTypingOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations chat communication typing o k response has a 4xx status code
func (o *PostConversationsChatCommunicationTypingOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post conversations chat communication typing o k response has a 5xx status code
func (o *PostConversationsChatCommunicationTypingOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversations chat communication typing o k response a status code equal to that given
func (o *PostConversationsChatCommunicationTypingOK) IsCode(code int) bool {
	return code == 200
}

func (o *PostConversationsChatCommunicationTypingOK) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/communications/{communicationId}/typing][%d] postConversationsChatCommunicationTypingOK  %+v", 200, o.Payload)
}

func (o *PostConversationsChatCommunicationTypingOK) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/communications/{communicationId}/typing][%d] postConversationsChatCommunicationTypingOK  %+v", 200, o.Payload)
}

func (o *PostConversationsChatCommunicationTypingOK) GetPayload() *models.WebChatTyping {
	return o.Payload
}

func (o *PostConversationsChatCommunicationTypingOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.WebChatTyping)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsChatCommunicationTypingBadRequest creates a PostConversationsChatCommunicationTypingBadRequest with default headers values
func NewPostConversationsChatCommunicationTypingBadRequest() *PostConversationsChatCommunicationTypingBadRequest {
	return &PostConversationsChatCommunicationTypingBadRequest{}
}

/*
PostConversationsChatCommunicationTypingBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostConversationsChatCommunicationTypingBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversations chat communication typing bad request response has a 2xx status code
func (o *PostConversationsChatCommunicationTypingBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversations chat communication typing bad request response has a 3xx status code
func (o *PostConversationsChatCommunicationTypingBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations chat communication typing bad request response has a 4xx status code
func (o *PostConversationsChatCommunicationTypingBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversations chat communication typing bad request response has a 5xx status code
func (o *PostConversationsChatCommunicationTypingBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversations chat communication typing bad request response a status code equal to that given
func (o *PostConversationsChatCommunicationTypingBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PostConversationsChatCommunicationTypingBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/communications/{communicationId}/typing][%d] postConversationsChatCommunicationTypingBadRequest  %+v", 400, o.Payload)
}

func (o *PostConversationsChatCommunicationTypingBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/communications/{communicationId}/typing][%d] postConversationsChatCommunicationTypingBadRequest  %+v", 400, o.Payload)
}

func (o *PostConversationsChatCommunicationTypingBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsChatCommunicationTypingBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsChatCommunicationTypingUnauthorized creates a PostConversationsChatCommunicationTypingUnauthorized with default headers values
func NewPostConversationsChatCommunicationTypingUnauthorized() *PostConversationsChatCommunicationTypingUnauthorized {
	return &PostConversationsChatCommunicationTypingUnauthorized{}
}

/*
PostConversationsChatCommunicationTypingUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PostConversationsChatCommunicationTypingUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversations chat communication typing unauthorized response has a 2xx status code
func (o *PostConversationsChatCommunicationTypingUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversations chat communication typing unauthorized response has a 3xx status code
func (o *PostConversationsChatCommunicationTypingUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations chat communication typing unauthorized response has a 4xx status code
func (o *PostConversationsChatCommunicationTypingUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversations chat communication typing unauthorized response has a 5xx status code
func (o *PostConversationsChatCommunicationTypingUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversations chat communication typing unauthorized response a status code equal to that given
func (o *PostConversationsChatCommunicationTypingUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PostConversationsChatCommunicationTypingUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/communications/{communicationId}/typing][%d] postConversationsChatCommunicationTypingUnauthorized  %+v", 401, o.Payload)
}

func (o *PostConversationsChatCommunicationTypingUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/communications/{communicationId}/typing][%d] postConversationsChatCommunicationTypingUnauthorized  %+v", 401, o.Payload)
}

func (o *PostConversationsChatCommunicationTypingUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsChatCommunicationTypingUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsChatCommunicationTypingForbidden creates a PostConversationsChatCommunicationTypingForbidden with default headers values
func NewPostConversationsChatCommunicationTypingForbidden() *PostConversationsChatCommunicationTypingForbidden {
	return &PostConversationsChatCommunicationTypingForbidden{}
}

/*
PostConversationsChatCommunicationTypingForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PostConversationsChatCommunicationTypingForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversations chat communication typing forbidden response has a 2xx status code
func (o *PostConversationsChatCommunicationTypingForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversations chat communication typing forbidden response has a 3xx status code
func (o *PostConversationsChatCommunicationTypingForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations chat communication typing forbidden response has a 4xx status code
func (o *PostConversationsChatCommunicationTypingForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversations chat communication typing forbidden response has a 5xx status code
func (o *PostConversationsChatCommunicationTypingForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversations chat communication typing forbidden response a status code equal to that given
func (o *PostConversationsChatCommunicationTypingForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PostConversationsChatCommunicationTypingForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/communications/{communicationId}/typing][%d] postConversationsChatCommunicationTypingForbidden  %+v", 403, o.Payload)
}

func (o *PostConversationsChatCommunicationTypingForbidden) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/communications/{communicationId}/typing][%d] postConversationsChatCommunicationTypingForbidden  %+v", 403, o.Payload)
}

func (o *PostConversationsChatCommunicationTypingForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsChatCommunicationTypingForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsChatCommunicationTypingNotFound creates a PostConversationsChatCommunicationTypingNotFound with default headers values
func NewPostConversationsChatCommunicationTypingNotFound() *PostConversationsChatCommunicationTypingNotFound {
	return &PostConversationsChatCommunicationTypingNotFound{}
}

/*
PostConversationsChatCommunicationTypingNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PostConversationsChatCommunicationTypingNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversations chat communication typing not found response has a 2xx status code
func (o *PostConversationsChatCommunicationTypingNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversations chat communication typing not found response has a 3xx status code
func (o *PostConversationsChatCommunicationTypingNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations chat communication typing not found response has a 4xx status code
func (o *PostConversationsChatCommunicationTypingNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversations chat communication typing not found response has a 5xx status code
func (o *PostConversationsChatCommunicationTypingNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversations chat communication typing not found response a status code equal to that given
func (o *PostConversationsChatCommunicationTypingNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PostConversationsChatCommunicationTypingNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/communications/{communicationId}/typing][%d] postConversationsChatCommunicationTypingNotFound  %+v", 404, o.Payload)
}

func (o *PostConversationsChatCommunicationTypingNotFound) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/communications/{communicationId}/typing][%d] postConversationsChatCommunicationTypingNotFound  %+v", 404, o.Payload)
}

func (o *PostConversationsChatCommunicationTypingNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsChatCommunicationTypingNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsChatCommunicationTypingRequestTimeout creates a PostConversationsChatCommunicationTypingRequestTimeout with default headers values
func NewPostConversationsChatCommunicationTypingRequestTimeout() *PostConversationsChatCommunicationTypingRequestTimeout {
	return &PostConversationsChatCommunicationTypingRequestTimeout{}
}

/*
PostConversationsChatCommunicationTypingRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PostConversationsChatCommunicationTypingRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversations chat communication typing request timeout response has a 2xx status code
func (o *PostConversationsChatCommunicationTypingRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversations chat communication typing request timeout response has a 3xx status code
func (o *PostConversationsChatCommunicationTypingRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations chat communication typing request timeout response has a 4xx status code
func (o *PostConversationsChatCommunicationTypingRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversations chat communication typing request timeout response has a 5xx status code
func (o *PostConversationsChatCommunicationTypingRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversations chat communication typing request timeout response a status code equal to that given
func (o *PostConversationsChatCommunicationTypingRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PostConversationsChatCommunicationTypingRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/communications/{communicationId}/typing][%d] postConversationsChatCommunicationTypingRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostConversationsChatCommunicationTypingRequestTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/communications/{communicationId}/typing][%d] postConversationsChatCommunicationTypingRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostConversationsChatCommunicationTypingRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsChatCommunicationTypingRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsChatCommunicationTypingRequestEntityTooLarge creates a PostConversationsChatCommunicationTypingRequestEntityTooLarge with default headers values
func NewPostConversationsChatCommunicationTypingRequestEntityTooLarge() *PostConversationsChatCommunicationTypingRequestEntityTooLarge {
	return &PostConversationsChatCommunicationTypingRequestEntityTooLarge{}
}

/*
PostConversationsChatCommunicationTypingRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PostConversationsChatCommunicationTypingRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversations chat communication typing request entity too large response has a 2xx status code
func (o *PostConversationsChatCommunicationTypingRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversations chat communication typing request entity too large response has a 3xx status code
func (o *PostConversationsChatCommunicationTypingRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations chat communication typing request entity too large response has a 4xx status code
func (o *PostConversationsChatCommunicationTypingRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversations chat communication typing request entity too large response has a 5xx status code
func (o *PostConversationsChatCommunicationTypingRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversations chat communication typing request entity too large response a status code equal to that given
func (o *PostConversationsChatCommunicationTypingRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PostConversationsChatCommunicationTypingRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/communications/{communicationId}/typing][%d] postConversationsChatCommunicationTypingRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostConversationsChatCommunicationTypingRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/communications/{communicationId}/typing][%d] postConversationsChatCommunicationTypingRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostConversationsChatCommunicationTypingRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsChatCommunicationTypingRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsChatCommunicationTypingUnsupportedMediaType creates a PostConversationsChatCommunicationTypingUnsupportedMediaType with default headers values
func NewPostConversationsChatCommunicationTypingUnsupportedMediaType() *PostConversationsChatCommunicationTypingUnsupportedMediaType {
	return &PostConversationsChatCommunicationTypingUnsupportedMediaType{}
}

/*
PostConversationsChatCommunicationTypingUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostConversationsChatCommunicationTypingUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversations chat communication typing unsupported media type response has a 2xx status code
func (o *PostConversationsChatCommunicationTypingUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversations chat communication typing unsupported media type response has a 3xx status code
func (o *PostConversationsChatCommunicationTypingUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations chat communication typing unsupported media type response has a 4xx status code
func (o *PostConversationsChatCommunicationTypingUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversations chat communication typing unsupported media type response has a 5xx status code
func (o *PostConversationsChatCommunicationTypingUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversations chat communication typing unsupported media type response a status code equal to that given
func (o *PostConversationsChatCommunicationTypingUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PostConversationsChatCommunicationTypingUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/communications/{communicationId}/typing][%d] postConversationsChatCommunicationTypingUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostConversationsChatCommunicationTypingUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/communications/{communicationId}/typing][%d] postConversationsChatCommunicationTypingUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostConversationsChatCommunicationTypingUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsChatCommunicationTypingUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsChatCommunicationTypingTooManyRequests creates a PostConversationsChatCommunicationTypingTooManyRequests with default headers values
func NewPostConversationsChatCommunicationTypingTooManyRequests() *PostConversationsChatCommunicationTypingTooManyRequests {
	return &PostConversationsChatCommunicationTypingTooManyRequests{}
}

/*
PostConversationsChatCommunicationTypingTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PostConversationsChatCommunicationTypingTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversations chat communication typing too many requests response has a 2xx status code
func (o *PostConversationsChatCommunicationTypingTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversations chat communication typing too many requests response has a 3xx status code
func (o *PostConversationsChatCommunicationTypingTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations chat communication typing too many requests response has a 4xx status code
func (o *PostConversationsChatCommunicationTypingTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversations chat communication typing too many requests response has a 5xx status code
func (o *PostConversationsChatCommunicationTypingTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversations chat communication typing too many requests response a status code equal to that given
func (o *PostConversationsChatCommunicationTypingTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PostConversationsChatCommunicationTypingTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/communications/{communicationId}/typing][%d] postConversationsChatCommunicationTypingTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostConversationsChatCommunicationTypingTooManyRequests) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/communications/{communicationId}/typing][%d] postConversationsChatCommunicationTypingTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostConversationsChatCommunicationTypingTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsChatCommunicationTypingTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsChatCommunicationTypingInternalServerError creates a PostConversationsChatCommunicationTypingInternalServerError with default headers values
func NewPostConversationsChatCommunicationTypingInternalServerError() *PostConversationsChatCommunicationTypingInternalServerError {
	return &PostConversationsChatCommunicationTypingInternalServerError{}
}

/*
PostConversationsChatCommunicationTypingInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostConversationsChatCommunicationTypingInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversations chat communication typing internal server error response has a 2xx status code
func (o *PostConversationsChatCommunicationTypingInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversations chat communication typing internal server error response has a 3xx status code
func (o *PostConversationsChatCommunicationTypingInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations chat communication typing internal server error response has a 4xx status code
func (o *PostConversationsChatCommunicationTypingInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post conversations chat communication typing internal server error response has a 5xx status code
func (o *PostConversationsChatCommunicationTypingInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post conversations chat communication typing internal server error response a status code equal to that given
func (o *PostConversationsChatCommunicationTypingInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PostConversationsChatCommunicationTypingInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/communications/{communicationId}/typing][%d] postConversationsChatCommunicationTypingInternalServerError  %+v", 500, o.Payload)
}

func (o *PostConversationsChatCommunicationTypingInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/communications/{communicationId}/typing][%d] postConversationsChatCommunicationTypingInternalServerError  %+v", 500, o.Payload)
}

func (o *PostConversationsChatCommunicationTypingInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsChatCommunicationTypingInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsChatCommunicationTypingServiceUnavailable creates a PostConversationsChatCommunicationTypingServiceUnavailable with default headers values
func NewPostConversationsChatCommunicationTypingServiceUnavailable() *PostConversationsChatCommunicationTypingServiceUnavailable {
	return &PostConversationsChatCommunicationTypingServiceUnavailable{}
}

/*
PostConversationsChatCommunicationTypingServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostConversationsChatCommunicationTypingServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversations chat communication typing service unavailable response has a 2xx status code
func (o *PostConversationsChatCommunicationTypingServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversations chat communication typing service unavailable response has a 3xx status code
func (o *PostConversationsChatCommunicationTypingServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations chat communication typing service unavailable response has a 4xx status code
func (o *PostConversationsChatCommunicationTypingServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this post conversations chat communication typing service unavailable response has a 5xx status code
func (o *PostConversationsChatCommunicationTypingServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this post conversations chat communication typing service unavailable response a status code equal to that given
func (o *PostConversationsChatCommunicationTypingServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PostConversationsChatCommunicationTypingServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/communications/{communicationId}/typing][%d] postConversationsChatCommunicationTypingServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostConversationsChatCommunicationTypingServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/communications/{communicationId}/typing][%d] postConversationsChatCommunicationTypingServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostConversationsChatCommunicationTypingServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsChatCommunicationTypingServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsChatCommunicationTypingGatewayTimeout creates a PostConversationsChatCommunicationTypingGatewayTimeout with default headers values
func NewPostConversationsChatCommunicationTypingGatewayTimeout() *PostConversationsChatCommunicationTypingGatewayTimeout {
	return &PostConversationsChatCommunicationTypingGatewayTimeout{}
}

/*
PostConversationsChatCommunicationTypingGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PostConversationsChatCommunicationTypingGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversations chat communication typing gateway timeout response has a 2xx status code
func (o *PostConversationsChatCommunicationTypingGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversations chat communication typing gateway timeout response has a 3xx status code
func (o *PostConversationsChatCommunicationTypingGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations chat communication typing gateway timeout response has a 4xx status code
func (o *PostConversationsChatCommunicationTypingGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this post conversations chat communication typing gateway timeout response has a 5xx status code
func (o *PostConversationsChatCommunicationTypingGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this post conversations chat communication typing gateway timeout response a status code equal to that given
func (o *PostConversationsChatCommunicationTypingGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PostConversationsChatCommunicationTypingGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/communications/{communicationId}/typing][%d] postConversationsChatCommunicationTypingGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostConversationsChatCommunicationTypingGatewayTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/communications/{communicationId}/typing][%d] postConversationsChatCommunicationTypingGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostConversationsChatCommunicationTypingGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsChatCommunicationTypingGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

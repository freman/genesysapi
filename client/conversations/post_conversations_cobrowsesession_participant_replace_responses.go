// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostConversationsCobrowsesessionParticipantReplaceReader is a Reader for the PostConversationsCobrowsesessionParticipantReplace structure.
type PostConversationsCobrowsesessionParticipantReplaceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostConversationsCobrowsesessionParticipantReplaceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewPostConversationsCobrowsesessionParticipantReplaceAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostConversationsCobrowsesessionParticipantReplaceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostConversationsCobrowsesessionParticipantReplaceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostConversationsCobrowsesessionParticipantReplaceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostConversationsCobrowsesessionParticipantReplaceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostConversationsCobrowsesessionParticipantReplaceRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostConversationsCobrowsesessionParticipantReplaceRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostConversationsCobrowsesessionParticipantReplaceUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostConversationsCobrowsesessionParticipantReplaceTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostConversationsCobrowsesessionParticipantReplaceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostConversationsCobrowsesessionParticipantReplaceServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostConversationsCobrowsesessionParticipantReplaceGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostConversationsCobrowsesessionParticipantReplaceAccepted creates a PostConversationsCobrowsesessionParticipantReplaceAccepted with default headers values
func NewPostConversationsCobrowsesessionParticipantReplaceAccepted() *PostConversationsCobrowsesessionParticipantReplaceAccepted {
	return &PostConversationsCobrowsesessionParticipantReplaceAccepted{}
}

/*
PostConversationsCobrowsesessionParticipantReplaceAccepted describes a response with status code 202, with default header values.

Accepted
*/
type PostConversationsCobrowsesessionParticipantReplaceAccepted struct {
}

// IsSuccess returns true when this post conversations cobrowsesession participant replace accepted response has a 2xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post conversations cobrowsesession participant replace accepted response has a 3xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations cobrowsesession participant replace accepted response has a 4xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this post conversations cobrowsesession participant replace accepted response has a 5xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversations cobrowsesession participant replace accepted response a status code equal to that given
func (o *PostConversationsCobrowsesessionParticipantReplaceAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *PostConversationsCobrowsesessionParticipantReplaceAccepted) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/replace][%d] postConversationsCobrowsesessionParticipantReplaceAccepted ", 202)
}

func (o *PostConversationsCobrowsesessionParticipantReplaceAccepted) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/replace][%d] postConversationsCobrowsesessionParticipantReplaceAccepted ", 202)
}

func (o *PostConversationsCobrowsesessionParticipantReplaceAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostConversationsCobrowsesessionParticipantReplaceBadRequest creates a PostConversationsCobrowsesessionParticipantReplaceBadRequest with default headers values
func NewPostConversationsCobrowsesessionParticipantReplaceBadRequest() *PostConversationsCobrowsesessionParticipantReplaceBadRequest {
	return &PostConversationsCobrowsesessionParticipantReplaceBadRequest{}
}

/*
PostConversationsCobrowsesessionParticipantReplaceBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostConversationsCobrowsesessionParticipantReplaceBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversations cobrowsesession participant replace bad request response has a 2xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversations cobrowsesession participant replace bad request response has a 3xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations cobrowsesession participant replace bad request response has a 4xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversations cobrowsesession participant replace bad request response has a 5xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversations cobrowsesession participant replace bad request response a status code equal to that given
func (o *PostConversationsCobrowsesessionParticipantReplaceBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PostConversationsCobrowsesessionParticipantReplaceBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/replace][%d] postConversationsCobrowsesessionParticipantReplaceBadRequest  %+v", 400, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantReplaceBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/replace][%d] postConversationsCobrowsesessionParticipantReplaceBadRequest  %+v", 400, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantReplaceBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsCobrowsesessionParticipantReplaceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsCobrowsesessionParticipantReplaceUnauthorized creates a PostConversationsCobrowsesessionParticipantReplaceUnauthorized with default headers values
func NewPostConversationsCobrowsesessionParticipantReplaceUnauthorized() *PostConversationsCobrowsesessionParticipantReplaceUnauthorized {
	return &PostConversationsCobrowsesessionParticipantReplaceUnauthorized{}
}

/*
PostConversationsCobrowsesessionParticipantReplaceUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PostConversationsCobrowsesessionParticipantReplaceUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversations cobrowsesession participant replace unauthorized response has a 2xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversations cobrowsesession participant replace unauthorized response has a 3xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations cobrowsesession participant replace unauthorized response has a 4xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversations cobrowsesession participant replace unauthorized response has a 5xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversations cobrowsesession participant replace unauthorized response a status code equal to that given
func (o *PostConversationsCobrowsesessionParticipantReplaceUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PostConversationsCobrowsesessionParticipantReplaceUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/replace][%d] postConversationsCobrowsesessionParticipantReplaceUnauthorized  %+v", 401, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantReplaceUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/replace][%d] postConversationsCobrowsesessionParticipantReplaceUnauthorized  %+v", 401, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantReplaceUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsCobrowsesessionParticipantReplaceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsCobrowsesessionParticipantReplaceForbidden creates a PostConversationsCobrowsesessionParticipantReplaceForbidden with default headers values
func NewPostConversationsCobrowsesessionParticipantReplaceForbidden() *PostConversationsCobrowsesessionParticipantReplaceForbidden {
	return &PostConversationsCobrowsesessionParticipantReplaceForbidden{}
}

/*
PostConversationsCobrowsesessionParticipantReplaceForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PostConversationsCobrowsesessionParticipantReplaceForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversations cobrowsesession participant replace forbidden response has a 2xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversations cobrowsesession participant replace forbidden response has a 3xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations cobrowsesession participant replace forbidden response has a 4xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversations cobrowsesession participant replace forbidden response has a 5xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversations cobrowsesession participant replace forbidden response a status code equal to that given
func (o *PostConversationsCobrowsesessionParticipantReplaceForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PostConversationsCobrowsesessionParticipantReplaceForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/replace][%d] postConversationsCobrowsesessionParticipantReplaceForbidden  %+v", 403, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantReplaceForbidden) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/replace][%d] postConversationsCobrowsesessionParticipantReplaceForbidden  %+v", 403, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantReplaceForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsCobrowsesessionParticipantReplaceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsCobrowsesessionParticipantReplaceNotFound creates a PostConversationsCobrowsesessionParticipantReplaceNotFound with default headers values
func NewPostConversationsCobrowsesessionParticipantReplaceNotFound() *PostConversationsCobrowsesessionParticipantReplaceNotFound {
	return &PostConversationsCobrowsesessionParticipantReplaceNotFound{}
}

/*
PostConversationsCobrowsesessionParticipantReplaceNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PostConversationsCobrowsesessionParticipantReplaceNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversations cobrowsesession participant replace not found response has a 2xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversations cobrowsesession participant replace not found response has a 3xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations cobrowsesession participant replace not found response has a 4xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversations cobrowsesession participant replace not found response has a 5xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversations cobrowsesession participant replace not found response a status code equal to that given
func (o *PostConversationsCobrowsesessionParticipantReplaceNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PostConversationsCobrowsesessionParticipantReplaceNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/replace][%d] postConversationsCobrowsesessionParticipantReplaceNotFound  %+v", 404, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantReplaceNotFound) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/replace][%d] postConversationsCobrowsesessionParticipantReplaceNotFound  %+v", 404, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantReplaceNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsCobrowsesessionParticipantReplaceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsCobrowsesessionParticipantReplaceRequestTimeout creates a PostConversationsCobrowsesessionParticipantReplaceRequestTimeout with default headers values
func NewPostConversationsCobrowsesessionParticipantReplaceRequestTimeout() *PostConversationsCobrowsesessionParticipantReplaceRequestTimeout {
	return &PostConversationsCobrowsesessionParticipantReplaceRequestTimeout{}
}

/*
PostConversationsCobrowsesessionParticipantReplaceRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PostConversationsCobrowsesessionParticipantReplaceRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversations cobrowsesession participant replace request timeout response has a 2xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversations cobrowsesession participant replace request timeout response has a 3xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations cobrowsesession participant replace request timeout response has a 4xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversations cobrowsesession participant replace request timeout response has a 5xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversations cobrowsesession participant replace request timeout response a status code equal to that given
func (o *PostConversationsCobrowsesessionParticipantReplaceRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PostConversationsCobrowsesessionParticipantReplaceRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/replace][%d] postConversationsCobrowsesessionParticipantReplaceRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantReplaceRequestTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/replace][%d] postConversationsCobrowsesessionParticipantReplaceRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantReplaceRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsCobrowsesessionParticipantReplaceRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsCobrowsesessionParticipantReplaceRequestEntityTooLarge creates a PostConversationsCobrowsesessionParticipantReplaceRequestEntityTooLarge with default headers values
func NewPostConversationsCobrowsesessionParticipantReplaceRequestEntityTooLarge() *PostConversationsCobrowsesessionParticipantReplaceRequestEntityTooLarge {
	return &PostConversationsCobrowsesessionParticipantReplaceRequestEntityTooLarge{}
}

/*
PostConversationsCobrowsesessionParticipantReplaceRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PostConversationsCobrowsesessionParticipantReplaceRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversations cobrowsesession participant replace request entity too large response has a 2xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversations cobrowsesession participant replace request entity too large response has a 3xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations cobrowsesession participant replace request entity too large response has a 4xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversations cobrowsesession participant replace request entity too large response has a 5xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversations cobrowsesession participant replace request entity too large response a status code equal to that given
func (o *PostConversationsCobrowsesessionParticipantReplaceRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PostConversationsCobrowsesessionParticipantReplaceRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/replace][%d] postConversationsCobrowsesessionParticipantReplaceRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantReplaceRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/replace][%d] postConversationsCobrowsesessionParticipantReplaceRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantReplaceRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsCobrowsesessionParticipantReplaceRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsCobrowsesessionParticipantReplaceUnsupportedMediaType creates a PostConversationsCobrowsesessionParticipantReplaceUnsupportedMediaType with default headers values
func NewPostConversationsCobrowsesessionParticipantReplaceUnsupportedMediaType() *PostConversationsCobrowsesessionParticipantReplaceUnsupportedMediaType {
	return &PostConversationsCobrowsesessionParticipantReplaceUnsupportedMediaType{}
}

/*
PostConversationsCobrowsesessionParticipantReplaceUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostConversationsCobrowsesessionParticipantReplaceUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversations cobrowsesession participant replace unsupported media type response has a 2xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversations cobrowsesession participant replace unsupported media type response has a 3xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations cobrowsesession participant replace unsupported media type response has a 4xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversations cobrowsesession participant replace unsupported media type response has a 5xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversations cobrowsesession participant replace unsupported media type response a status code equal to that given
func (o *PostConversationsCobrowsesessionParticipantReplaceUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PostConversationsCobrowsesessionParticipantReplaceUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/replace][%d] postConversationsCobrowsesessionParticipantReplaceUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantReplaceUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/replace][%d] postConversationsCobrowsesessionParticipantReplaceUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantReplaceUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsCobrowsesessionParticipantReplaceUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsCobrowsesessionParticipantReplaceTooManyRequests creates a PostConversationsCobrowsesessionParticipantReplaceTooManyRequests with default headers values
func NewPostConversationsCobrowsesessionParticipantReplaceTooManyRequests() *PostConversationsCobrowsesessionParticipantReplaceTooManyRequests {
	return &PostConversationsCobrowsesessionParticipantReplaceTooManyRequests{}
}

/*
PostConversationsCobrowsesessionParticipantReplaceTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PostConversationsCobrowsesessionParticipantReplaceTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversations cobrowsesession participant replace too many requests response has a 2xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversations cobrowsesession participant replace too many requests response has a 3xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations cobrowsesession participant replace too many requests response has a 4xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversations cobrowsesession participant replace too many requests response has a 5xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversations cobrowsesession participant replace too many requests response a status code equal to that given
func (o *PostConversationsCobrowsesessionParticipantReplaceTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PostConversationsCobrowsesessionParticipantReplaceTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/replace][%d] postConversationsCobrowsesessionParticipantReplaceTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantReplaceTooManyRequests) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/replace][%d] postConversationsCobrowsesessionParticipantReplaceTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantReplaceTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsCobrowsesessionParticipantReplaceTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsCobrowsesessionParticipantReplaceInternalServerError creates a PostConversationsCobrowsesessionParticipantReplaceInternalServerError with default headers values
func NewPostConversationsCobrowsesessionParticipantReplaceInternalServerError() *PostConversationsCobrowsesessionParticipantReplaceInternalServerError {
	return &PostConversationsCobrowsesessionParticipantReplaceInternalServerError{}
}

/*
PostConversationsCobrowsesessionParticipantReplaceInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostConversationsCobrowsesessionParticipantReplaceInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversations cobrowsesession participant replace internal server error response has a 2xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversations cobrowsesession participant replace internal server error response has a 3xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations cobrowsesession participant replace internal server error response has a 4xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post conversations cobrowsesession participant replace internal server error response has a 5xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post conversations cobrowsesession participant replace internal server error response a status code equal to that given
func (o *PostConversationsCobrowsesessionParticipantReplaceInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PostConversationsCobrowsesessionParticipantReplaceInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/replace][%d] postConversationsCobrowsesessionParticipantReplaceInternalServerError  %+v", 500, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantReplaceInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/replace][%d] postConversationsCobrowsesessionParticipantReplaceInternalServerError  %+v", 500, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantReplaceInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsCobrowsesessionParticipantReplaceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsCobrowsesessionParticipantReplaceServiceUnavailable creates a PostConversationsCobrowsesessionParticipantReplaceServiceUnavailable with default headers values
func NewPostConversationsCobrowsesessionParticipantReplaceServiceUnavailable() *PostConversationsCobrowsesessionParticipantReplaceServiceUnavailable {
	return &PostConversationsCobrowsesessionParticipantReplaceServiceUnavailable{}
}

/*
PostConversationsCobrowsesessionParticipantReplaceServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostConversationsCobrowsesessionParticipantReplaceServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversations cobrowsesession participant replace service unavailable response has a 2xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversations cobrowsesession participant replace service unavailable response has a 3xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations cobrowsesession participant replace service unavailable response has a 4xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this post conversations cobrowsesession participant replace service unavailable response has a 5xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this post conversations cobrowsesession participant replace service unavailable response a status code equal to that given
func (o *PostConversationsCobrowsesessionParticipantReplaceServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PostConversationsCobrowsesessionParticipantReplaceServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/replace][%d] postConversationsCobrowsesessionParticipantReplaceServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantReplaceServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/replace][%d] postConversationsCobrowsesessionParticipantReplaceServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantReplaceServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsCobrowsesessionParticipantReplaceServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsCobrowsesessionParticipantReplaceGatewayTimeout creates a PostConversationsCobrowsesessionParticipantReplaceGatewayTimeout with default headers values
func NewPostConversationsCobrowsesessionParticipantReplaceGatewayTimeout() *PostConversationsCobrowsesessionParticipantReplaceGatewayTimeout {
	return &PostConversationsCobrowsesessionParticipantReplaceGatewayTimeout{}
}

/*
PostConversationsCobrowsesessionParticipantReplaceGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PostConversationsCobrowsesessionParticipantReplaceGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversations cobrowsesession participant replace gateway timeout response has a 2xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversations cobrowsesession participant replace gateway timeout response has a 3xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations cobrowsesession participant replace gateway timeout response has a 4xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this post conversations cobrowsesession participant replace gateway timeout response has a 5xx status code
func (o *PostConversationsCobrowsesessionParticipantReplaceGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this post conversations cobrowsesession participant replace gateway timeout response a status code equal to that given
func (o *PostConversationsCobrowsesessionParticipantReplaceGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PostConversationsCobrowsesessionParticipantReplaceGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/replace][%d] postConversationsCobrowsesessionParticipantReplaceGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantReplaceGatewayTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/replace][%d] postConversationsCobrowsesessionParticipantReplaceGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantReplaceGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsCobrowsesessionParticipantReplaceGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

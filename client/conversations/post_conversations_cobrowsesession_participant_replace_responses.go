// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostConversationsCobrowsesessionParticipantReplaceReader is a Reader for the PostConversationsCobrowsesessionParticipantReplace structure.
type PostConversationsCobrowsesessionParticipantReplaceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostConversationsCobrowsesessionParticipantReplaceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewPostConversationsCobrowsesessionParticipantReplaceAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostConversationsCobrowsesessionParticipantReplaceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostConversationsCobrowsesessionParticipantReplaceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostConversationsCobrowsesessionParticipantReplaceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostConversationsCobrowsesessionParticipantReplaceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostConversationsCobrowsesessionParticipantReplaceRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostConversationsCobrowsesessionParticipantReplaceRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostConversationsCobrowsesessionParticipantReplaceUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostConversationsCobrowsesessionParticipantReplaceTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostConversationsCobrowsesessionParticipantReplaceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostConversationsCobrowsesessionParticipantReplaceServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostConversationsCobrowsesessionParticipantReplaceGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostConversationsCobrowsesessionParticipantReplaceAccepted creates a PostConversationsCobrowsesessionParticipantReplaceAccepted with default headers values
func NewPostConversationsCobrowsesessionParticipantReplaceAccepted() *PostConversationsCobrowsesessionParticipantReplaceAccepted {
	return &PostConversationsCobrowsesessionParticipantReplaceAccepted{}
}

/*PostConversationsCobrowsesessionParticipantReplaceAccepted handles this case with default header values.

Accepted
*/
type PostConversationsCobrowsesessionParticipantReplaceAccepted struct {
}

func (o *PostConversationsCobrowsesessionParticipantReplaceAccepted) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/replace][%d] postConversationsCobrowsesessionParticipantReplaceAccepted ", 202)
}

func (o *PostConversationsCobrowsesessionParticipantReplaceAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostConversationsCobrowsesessionParticipantReplaceBadRequest creates a PostConversationsCobrowsesessionParticipantReplaceBadRequest with default headers values
func NewPostConversationsCobrowsesessionParticipantReplaceBadRequest() *PostConversationsCobrowsesessionParticipantReplaceBadRequest {
	return &PostConversationsCobrowsesessionParticipantReplaceBadRequest{}
}

/*PostConversationsCobrowsesessionParticipantReplaceBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostConversationsCobrowsesessionParticipantReplaceBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PostConversationsCobrowsesessionParticipantReplaceBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/replace][%d] postConversationsCobrowsesessionParticipantReplaceBadRequest  %+v", 400, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantReplaceBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsCobrowsesessionParticipantReplaceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsCobrowsesessionParticipantReplaceUnauthorized creates a PostConversationsCobrowsesessionParticipantReplaceUnauthorized with default headers values
func NewPostConversationsCobrowsesessionParticipantReplaceUnauthorized() *PostConversationsCobrowsesessionParticipantReplaceUnauthorized {
	return &PostConversationsCobrowsesessionParticipantReplaceUnauthorized{}
}

/*PostConversationsCobrowsesessionParticipantReplaceUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PostConversationsCobrowsesessionParticipantReplaceUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PostConversationsCobrowsesessionParticipantReplaceUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/replace][%d] postConversationsCobrowsesessionParticipantReplaceUnauthorized  %+v", 401, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantReplaceUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsCobrowsesessionParticipantReplaceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsCobrowsesessionParticipantReplaceForbidden creates a PostConversationsCobrowsesessionParticipantReplaceForbidden with default headers values
func NewPostConversationsCobrowsesessionParticipantReplaceForbidden() *PostConversationsCobrowsesessionParticipantReplaceForbidden {
	return &PostConversationsCobrowsesessionParticipantReplaceForbidden{}
}

/*PostConversationsCobrowsesessionParticipantReplaceForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PostConversationsCobrowsesessionParticipantReplaceForbidden struct {
	Payload *models.ErrorBody
}

func (o *PostConversationsCobrowsesessionParticipantReplaceForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/replace][%d] postConversationsCobrowsesessionParticipantReplaceForbidden  %+v", 403, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantReplaceForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsCobrowsesessionParticipantReplaceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsCobrowsesessionParticipantReplaceNotFound creates a PostConversationsCobrowsesessionParticipantReplaceNotFound with default headers values
func NewPostConversationsCobrowsesessionParticipantReplaceNotFound() *PostConversationsCobrowsesessionParticipantReplaceNotFound {
	return &PostConversationsCobrowsesessionParticipantReplaceNotFound{}
}

/*PostConversationsCobrowsesessionParticipantReplaceNotFound handles this case with default header values.

The requested resource was not found.
*/
type PostConversationsCobrowsesessionParticipantReplaceNotFound struct {
	Payload *models.ErrorBody
}

func (o *PostConversationsCobrowsesessionParticipantReplaceNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/replace][%d] postConversationsCobrowsesessionParticipantReplaceNotFound  %+v", 404, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantReplaceNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsCobrowsesessionParticipantReplaceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsCobrowsesessionParticipantReplaceRequestTimeout creates a PostConversationsCobrowsesessionParticipantReplaceRequestTimeout with default headers values
func NewPostConversationsCobrowsesessionParticipantReplaceRequestTimeout() *PostConversationsCobrowsesessionParticipantReplaceRequestTimeout {
	return &PostConversationsCobrowsesessionParticipantReplaceRequestTimeout{}
}

/*PostConversationsCobrowsesessionParticipantReplaceRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PostConversationsCobrowsesessionParticipantReplaceRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PostConversationsCobrowsesessionParticipantReplaceRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/replace][%d] postConversationsCobrowsesessionParticipantReplaceRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantReplaceRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsCobrowsesessionParticipantReplaceRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsCobrowsesessionParticipantReplaceRequestEntityTooLarge creates a PostConversationsCobrowsesessionParticipantReplaceRequestEntityTooLarge with default headers values
func NewPostConversationsCobrowsesessionParticipantReplaceRequestEntityTooLarge() *PostConversationsCobrowsesessionParticipantReplaceRequestEntityTooLarge {
	return &PostConversationsCobrowsesessionParticipantReplaceRequestEntityTooLarge{}
}

/*PostConversationsCobrowsesessionParticipantReplaceRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type PostConversationsCobrowsesessionParticipantReplaceRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PostConversationsCobrowsesessionParticipantReplaceRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/replace][%d] postConversationsCobrowsesessionParticipantReplaceRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantReplaceRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsCobrowsesessionParticipantReplaceRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsCobrowsesessionParticipantReplaceUnsupportedMediaType creates a PostConversationsCobrowsesessionParticipantReplaceUnsupportedMediaType with default headers values
func NewPostConversationsCobrowsesessionParticipantReplaceUnsupportedMediaType() *PostConversationsCobrowsesessionParticipantReplaceUnsupportedMediaType {
	return &PostConversationsCobrowsesessionParticipantReplaceUnsupportedMediaType{}
}

/*PostConversationsCobrowsesessionParticipantReplaceUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostConversationsCobrowsesessionParticipantReplaceUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PostConversationsCobrowsesessionParticipantReplaceUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/replace][%d] postConversationsCobrowsesessionParticipantReplaceUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantReplaceUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsCobrowsesessionParticipantReplaceUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsCobrowsesessionParticipantReplaceTooManyRequests creates a PostConversationsCobrowsesessionParticipantReplaceTooManyRequests with default headers values
func NewPostConversationsCobrowsesessionParticipantReplaceTooManyRequests() *PostConversationsCobrowsesessionParticipantReplaceTooManyRequests {
	return &PostConversationsCobrowsesessionParticipantReplaceTooManyRequests{}
}

/*PostConversationsCobrowsesessionParticipantReplaceTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PostConversationsCobrowsesessionParticipantReplaceTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PostConversationsCobrowsesessionParticipantReplaceTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/replace][%d] postConversationsCobrowsesessionParticipantReplaceTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantReplaceTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsCobrowsesessionParticipantReplaceTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsCobrowsesessionParticipantReplaceInternalServerError creates a PostConversationsCobrowsesessionParticipantReplaceInternalServerError with default headers values
func NewPostConversationsCobrowsesessionParticipantReplaceInternalServerError() *PostConversationsCobrowsesessionParticipantReplaceInternalServerError {
	return &PostConversationsCobrowsesessionParticipantReplaceInternalServerError{}
}

/*PostConversationsCobrowsesessionParticipantReplaceInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostConversationsCobrowsesessionParticipantReplaceInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PostConversationsCobrowsesessionParticipantReplaceInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/replace][%d] postConversationsCobrowsesessionParticipantReplaceInternalServerError  %+v", 500, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantReplaceInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsCobrowsesessionParticipantReplaceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsCobrowsesessionParticipantReplaceServiceUnavailable creates a PostConversationsCobrowsesessionParticipantReplaceServiceUnavailable with default headers values
func NewPostConversationsCobrowsesessionParticipantReplaceServiceUnavailable() *PostConversationsCobrowsesessionParticipantReplaceServiceUnavailable {
	return &PostConversationsCobrowsesessionParticipantReplaceServiceUnavailable{}
}

/*PostConversationsCobrowsesessionParticipantReplaceServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostConversationsCobrowsesessionParticipantReplaceServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PostConversationsCobrowsesessionParticipantReplaceServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/replace][%d] postConversationsCobrowsesessionParticipantReplaceServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantReplaceServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsCobrowsesessionParticipantReplaceServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsCobrowsesessionParticipantReplaceGatewayTimeout creates a PostConversationsCobrowsesessionParticipantReplaceGatewayTimeout with default headers values
func NewPostConversationsCobrowsesessionParticipantReplaceGatewayTimeout() *PostConversationsCobrowsesessionParticipantReplaceGatewayTimeout {
	return &PostConversationsCobrowsesessionParticipantReplaceGatewayTimeout{}
}

/*PostConversationsCobrowsesessionParticipantReplaceGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PostConversationsCobrowsesessionParticipantReplaceGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PostConversationsCobrowsesessionParticipantReplaceGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/replace][%d] postConversationsCobrowsesessionParticipantReplaceGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantReplaceGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsCobrowsesessionParticipantReplaceGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetConversationsChatMessagesParams creates a new GetConversationsChatMessagesParams object
// with the default values initialized.
func NewGetConversationsChatMessagesParams() *GetConversationsChatMessagesParams {
	var (
		maxResultsDefault = int32(100)
		sortOrderDefault  = string("ascending")
	)
	return &GetConversationsChatMessagesParams{
		MaxResults: &maxResultsDefault,
		SortOrder:  &sortOrderDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetConversationsChatMessagesParamsWithTimeout creates a new GetConversationsChatMessagesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetConversationsChatMessagesParamsWithTimeout(timeout time.Duration) *GetConversationsChatMessagesParams {
	var (
		maxResultsDefault = int32(100)
		sortOrderDefault  = string("ascending")
	)
	return &GetConversationsChatMessagesParams{
		MaxResults: &maxResultsDefault,
		SortOrder:  &sortOrderDefault,

		timeout: timeout,
	}
}

// NewGetConversationsChatMessagesParamsWithContext creates a new GetConversationsChatMessagesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetConversationsChatMessagesParamsWithContext(ctx context.Context) *GetConversationsChatMessagesParams {
	var (
		maxResultsDefault = int32(100)
		sortOrderDefault  = string("ascending")
	)
	return &GetConversationsChatMessagesParams{
		MaxResults: &maxResultsDefault,
		SortOrder:  &sortOrderDefault,

		Context: ctx,
	}
}

// NewGetConversationsChatMessagesParamsWithHTTPClient creates a new GetConversationsChatMessagesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetConversationsChatMessagesParamsWithHTTPClient(client *http.Client) *GetConversationsChatMessagesParams {
	var (
		maxResultsDefault = int32(100)
		sortOrderDefault  = string("ascending")
	)
	return &GetConversationsChatMessagesParams{
		MaxResults: &maxResultsDefault,
		SortOrder:  &sortOrderDefault,
		HTTPClient: client,
	}
}

/*GetConversationsChatMessagesParams contains all the parameters to send to the API endpoint
for the get conversations chat messages operation typically these are written to a http.Request
*/
type GetConversationsChatMessagesParams struct {

	/*After
	  If specified, get the messages chronologically after the id of this message

	*/
	After *string
	/*Before
	  If specified, get the messages chronologically before the id of this message

	*/
	Before *string
	/*ConversationID
	  conversationId

	*/
	ConversationID string
	/*MaxResults
	  Limit the returned number of messages, up to a maximum of 100

	*/
	MaxResults *int32
	/*SortOrder
	  Sort order

	*/
	SortOrder *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get conversations chat messages params
func (o *GetConversationsChatMessagesParams) WithTimeout(timeout time.Duration) *GetConversationsChatMessagesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get conversations chat messages params
func (o *GetConversationsChatMessagesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get conversations chat messages params
func (o *GetConversationsChatMessagesParams) WithContext(ctx context.Context) *GetConversationsChatMessagesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get conversations chat messages params
func (o *GetConversationsChatMessagesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get conversations chat messages params
func (o *GetConversationsChatMessagesParams) WithHTTPClient(client *http.Client) *GetConversationsChatMessagesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get conversations chat messages params
func (o *GetConversationsChatMessagesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAfter adds the after to the get conversations chat messages params
func (o *GetConversationsChatMessagesParams) WithAfter(after *string) *GetConversationsChatMessagesParams {
	o.SetAfter(after)
	return o
}

// SetAfter adds the after to the get conversations chat messages params
func (o *GetConversationsChatMessagesParams) SetAfter(after *string) {
	o.After = after
}

// WithBefore adds the before to the get conversations chat messages params
func (o *GetConversationsChatMessagesParams) WithBefore(before *string) *GetConversationsChatMessagesParams {
	o.SetBefore(before)
	return o
}

// SetBefore adds the before to the get conversations chat messages params
func (o *GetConversationsChatMessagesParams) SetBefore(before *string) {
	o.Before = before
}

// WithConversationID adds the conversationID to the get conversations chat messages params
func (o *GetConversationsChatMessagesParams) WithConversationID(conversationID string) *GetConversationsChatMessagesParams {
	o.SetConversationID(conversationID)
	return o
}

// SetConversationID adds the conversationId to the get conversations chat messages params
func (o *GetConversationsChatMessagesParams) SetConversationID(conversationID string) {
	o.ConversationID = conversationID
}

// WithMaxResults adds the maxResults to the get conversations chat messages params
func (o *GetConversationsChatMessagesParams) WithMaxResults(maxResults *int32) *GetConversationsChatMessagesParams {
	o.SetMaxResults(maxResults)
	return o
}

// SetMaxResults adds the maxResults to the get conversations chat messages params
func (o *GetConversationsChatMessagesParams) SetMaxResults(maxResults *int32) {
	o.MaxResults = maxResults
}

// WithSortOrder adds the sortOrder to the get conversations chat messages params
func (o *GetConversationsChatMessagesParams) WithSortOrder(sortOrder *string) *GetConversationsChatMessagesParams {
	o.SetSortOrder(sortOrder)
	return o
}

// SetSortOrder adds the sortOrder to the get conversations chat messages params
func (o *GetConversationsChatMessagesParams) SetSortOrder(sortOrder *string) {
	o.SortOrder = sortOrder
}

// WriteToRequest writes these params to a swagger request
func (o *GetConversationsChatMessagesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.After != nil {

		// query param after
		var qrAfter string
		if o.After != nil {
			qrAfter = *o.After
		}
		qAfter := qrAfter
		if qAfter != "" {
			if err := r.SetQueryParam("after", qAfter); err != nil {
				return err
			}
		}

	}

	if o.Before != nil {

		// query param before
		var qrBefore string
		if o.Before != nil {
			qrBefore = *o.Before
		}
		qBefore := qrBefore
		if qBefore != "" {
			if err := r.SetQueryParam("before", qBefore); err != nil {
				return err
			}
		}

	}

	// path param conversationId
	if err := r.SetPathParam("conversationId", o.ConversationID); err != nil {
		return err
	}

	if o.MaxResults != nil {

		// query param maxResults
		var qrMaxResults int32
		if o.MaxResults != nil {
			qrMaxResults = *o.MaxResults
		}
		qMaxResults := swag.FormatInt32(qrMaxResults)
		if qMaxResults != "" {
			if err := r.SetQueryParam("maxResults", qMaxResults); err != nil {
				return err
			}
		}

	}

	if o.SortOrder != nil {

		// query param sortOrder
		var qrSortOrder string
		if o.SortOrder != nil {
			qrSortOrder = *o.SortOrder
		}
		qSortOrder := qrSortOrder
		if qSortOrder != "" {
			if err := r.SetQueryParam("sortOrder", qSortOrder); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

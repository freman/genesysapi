// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchConversationsCobrowsesessionParticipantCommunicationReader is a Reader for the PatchConversationsCobrowsesessionParticipantCommunication structure.
type PatchConversationsCobrowsesessionParticipantCommunicationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchConversationsCobrowsesessionParticipantCommunicationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchConversationsCobrowsesessionParticipantCommunicationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchConversationsCobrowsesessionParticipantCommunicationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchConversationsCobrowsesessionParticipantCommunicationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchConversationsCobrowsesessionParticipantCommunicationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchConversationsCobrowsesessionParticipantCommunicationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchConversationsCobrowsesessionParticipantCommunicationRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchConversationsCobrowsesessionParticipantCommunicationUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchConversationsCobrowsesessionParticipantCommunicationTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchConversationsCobrowsesessionParticipantCommunicationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchConversationsCobrowsesessionParticipantCommunicationServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchConversationsCobrowsesessionParticipantCommunicationGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchConversationsCobrowsesessionParticipantCommunicationOK creates a PatchConversationsCobrowsesessionParticipantCommunicationOK with default headers values
func NewPatchConversationsCobrowsesessionParticipantCommunicationOK() *PatchConversationsCobrowsesessionParticipantCommunicationOK {
	return &PatchConversationsCobrowsesessionParticipantCommunicationOK{}
}

/*PatchConversationsCobrowsesessionParticipantCommunicationOK handles this case with default header values.

successful operation
*/
type PatchConversationsCobrowsesessionParticipantCommunicationOK struct {
	Payload models.Empty
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCobrowsesessionParticipantCommunicationOK  %+v", 200, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationOK) GetPayload() models.Empty {
	return o.Payload
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCobrowsesessionParticipantCommunicationBadRequest creates a PatchConversationsCobrowsesessionParticipantCommunicationBadRequest with default headers values
func NewPatchConversationsCobrowsesessionParticipantCommunicationBadRequest() *PatchConversationsCobrowsesessionParticipantCommunicationBadRequest {
	return &PatchConversationsCobrowsesessionParticipantCommunicationBadRequest{}
}

/*PatchConversationsCobrowsesessionParticipantCommunicationBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchConversationsCobrowsesessionParticipantCommunicationBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCobrowsesessionParticipantCommunicationBadRequest  %+v", 400, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCobrowsesessionParticipantCommunicationUnauthorized creates a PatchConversationsCobrowsesessionParticipantCommunicationUnauthorized with default headers values
func NewPatchConversationsCobrowsesessionParticipantCommunicationUnauthorized() *PatchConversationsCobrowsesessionParticipantCommunicationUnauthorized {
	return &PatchConversationsCobrowsesessionParticipantCommunicationUnauthorized{}
}

/*PatchConversationsCobrowsesessionParticipantCommunicationUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchConversationsCobrowsesessionParticipantCommunicationUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCobrowsesessionParticipantCommunicationUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCobrowsesessionParticipantCommunicationForbidden creates a PatchConversationsCobrowsesessionParticipantCommunicationForbidden with default headers values
func NewPatchConversationsCobrowsesessionParticipantCommunicationForbidden() *PatchConversationsCobrowsesessionParticipantCommunicationForbidden {
	return &PatchConversationsCobrowsesessionParticipantCommunicationForbidden{}
}

/*PatchConversationsCobrowsesessionParticipantCommunicationForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PatchConversationsCobrowsesessionParticipantCommunicationForbidden struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCobrowsesessionParticipantCommunicationForbidden  %+v", 403, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCobrowsesessionParticipantCommunicationNotFound creates a PatchConversationsCobrowsesessionParticipantCommunicationNotFound with default headers values
func NewPatchConversationsCobrowsesessionParticipantCommunicationNotFound() *PatchConversationsCobrowsesessionParticipantCommunicationNotFound {
	return &PatchConversationsCobrowsesessionParticipantCommunicationNotFound{}
}

/*PatchConversationsCobrowsesessionParticipantCommunicationNotFound handles this case with default header values.

The requested resource was not found.
*/
type PatchConversationsCobrowsesessionParticipantCommunicationNotFound struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCobrowsesessionParticipantCommunicationNotFound  %+v", 404, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCobrowsesessionParticipantCommunicationRequestEntityTooLarge creates a PatchConversationsCobrowsesessionParticipantCommunicationRequestEntityTooLarge with default headers values
func NewPatchConversationsCobrowsesessionParticipantCommunicationRequestEntityTooLarge() *PatchConversationsCobrowsesessionParticipantCommunicationRequestEntityTooLarge {
	return &PatchConversationsCobrowsesessionParticipantCommunicationRequestEntityTooLarge{}
}

/*PatchConversationsCobrowsesessionParticipantCommunicationRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type PatchConversationsCobrowsesessionParticipantCommunicationRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCobrowsesessionParticipantCommunicationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCobrowsesessionParticipantCommunicationUnsupportedMediaType creates a PatchConversationsCobrowsesessionParticipantCommunicationUnsupportedMediaType with default headers values
func NewPatchConversationsCobrowsesessionParticipantCommunicationUnsupportedMediaType() *PatchConversationsCobrowsesessionParticipantCommunicationUnsupportedMediaType {
	return &PatchConversationsCobrowsesessionParticipantCommunicationUnsupportedMediaType{}
}

/*PatchConversationsCobrowsesessionParticipantCommunicationUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchConversationsCobrowsesessionParticipantCommunicationUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCobrowsesessionParticipantCommunicationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCobrowsesessionParticipantCommunicationTooManyRequests creates a PatchConversationsCobrowsesessionParticipantCommunicationTooManyRequests with default headers values
func NewPatchConversationsCobrowsesessionParticipantCommunicationTooManyRequests() *PatchConversationsCobrowsesessionParticipantCommunicationTooManyRequests {
	return &PatchConversationsCobrowsesessionParticipantCommunicationTooManyRequests{}
}

/*PatchConversationsCobrowsesessionParticipantCommunicationTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum [%s] requests within [%s] seconds
*/
type PatchConversationsCobrowsesessionParticipantCommunicationTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCobrowsesessionParticipantCommunicationTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCobrowsesessionParticipantCommunicationInternalServerError creates a PatchConversationsCobrowsesessionParticipantCommunicationInternalServerError with default headers values
func NewPatchConversationsCobrowsesessionParticipantCommunicationInternalServerError() *PatchConversationsCobrowsesessionParticipantCommunicationInternalServerError {
	return &PatchConversationsCobrowsesessionParticipantCommunicationInternalServerError{}
}

/*PatchConversationsCobrowsesessionParticipantCommunicationInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchConversationsCobrowsesessionParticipantCommunicationInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCobrowsesessionParticipantCommunicationInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCobrowsesessionParticipantCommunicationServiceUnavailable creates a PatchConversationsCobrowsesessionParticipantCommunicationServiceUnavailable with default headers values
func NewPatchConversationsCobrowsesessionParticipantCommunicationServiceUnavailable() *PatchConversationsCobrowsesessionParticipantCommunicationServiceUnavailable {
	return &PatchConversationsCobrowsesessionParticipantCommunicationServiceUnavailable{}
}

/*PatchConversationsCobrowsesessionParticipantCommunicationServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchConversationsCobrowsesessionParticipantCommunicationServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCobrowsesessionParticipantCommunicationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCobrowsesessionParticipantCommunicationGatewayTimeout creates a PatchConversationsCobrowsesessionParticipantCommunicationGatewayTimeout with default headers values
func NewPatchConversationsCobrowsesessionParticipantCommunicationGatewayTimeout() *PatchConversationsCobrowsesessionParticipantCommunicationGatewayTimeout {
	return &PatchConversationsCobrowsesessionParticipantCommunicationGatewayTimeout{}
}

/*PatchConversationsCobrowsesessionParticipantCommunicationGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PatchConversationsCobrowsesessionParticipantCommunicationGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCobrowsesessionParticipantCommunicationGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

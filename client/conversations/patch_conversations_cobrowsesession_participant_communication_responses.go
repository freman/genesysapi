// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchConversationsCobrowsesessionParticipantCommunicationReader is a Reader for the PatchConversationsCobrowsesessionParticipantCommunication structure.
type PatchConversationsCobrowsesessionParticipantCommunicationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchConversationsCobrowsesessionParticipantCommunicationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchConversationsCobrowsesessionParticipantCommunicationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchConversationsCobrowsesessionParticipantCommunicationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchConversationsCobrowsesessionParticipantCommunicationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchConversationsCobrowsesessionParticipantCommunicationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchConversationsCobrowsesessionParticipantCommunicationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchConversationsCobrowsesessionParticipantCommunicationRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchConversationsCobrowsesessionParticipantCommunicationRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchConversationsCobrowsesessionParticipantCommunicationUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchConversationsCobrowsesessionParticipantCommunicationTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchConversationsCobrowsesessionParticipantCommunicationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchConversationsCobrowsesessionParticipantCommunicationServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchConversationsCobrowsesessionParticipantCommunicationGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchConversationsCobrowsesessionParticipantCommunicationOK creates a PatchConversationsCobrowsesessionParticipantCommunicationOK with default headers values
func NewPatchConversationsCobrowsesessionParticipantCommunicationOK() *PatchConversationsCobrowsesessionParticipantCommunicationOK {
	return &PatchConversationsCobrowsesessionParticipantCommunicationOK{}
}

/*
PatchConversationsCobrowsesessionParticipantCommunicationOK describes a response with status code 200, with default header values.

successful operation
*/
type PatchConversationsCobrowsesessionParticipantCommunicationOK struct {
	Payload models.Empty
}

// IsSuccess returns true when this patch conversations cobrowsesession participant communication o k response has a 2xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch conversations cobrowsesession participant communication o k response has a 3xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations cobrowsesession participant communication o k response has a 4xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations cobrowsesession participant communication o k response has a 5xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations cobrowsesession participant communication o k response a status code equal to that given
func (o *PatchConversationsCobrowsesessionParticipantCommunicationOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCobrowsesessionParticipantCommunicationOK  %+v", 200, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationOK) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCobrowsesessionParticipantCommunicationOK  %+v", 200, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationOK) GetPayload() models.Empty {
	return o.Payload
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCobrowsesessionParticipantCommunicationBadRequest creates a PatchConversationsCobrowsesessionParticipantCommunicationBadRequest with default headers values
func NewPatchConversationsCobrowsesessionParticipantCommunicationBadRequest() *PatchConversationsCobrowsesessionParticipantCommunicationBadRequest {
	return &PatchConversationsCobrowsesessionParticipantCommunicationBadRequest{}
}

/*
PatchConversationsCobrowsesessionParticipantCommunicationBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchConversationsCobrowsesessionParticipantCommunicationBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations cobrowsesession participant communication bad request response has a 2xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations cobrowsesession participant communication bad request response has a 3xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations cobrowsesession participant communication bad request response has a 4xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations cobrowsesession participant communication bad request response has a 5xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations cobrowsesession participant communication bad request response a status code equal to that given
func (o *PatchConversationsCobrowsesessionParticipantCommunicationBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCobrowsesessionParticipantCommunicationBadRequest  %+v", 400, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCobrowsesessionParticipantCommunicationBadRequest  %+v", 400, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCobrowsesessionParticipantCommunicationUnauthorized creates a PatchConversationsCobrowsesessionParticipantCommunicationUnauthorized with default headers values
func NewPatchConversationsCobrowsesessionParticipantCommunicationUnauthorized() *PatchConversationsCobrowsesessionParticipantCommunicationUnauthorized {
	return &PatchConversationsCobrowsesessionParticipantCommunicationUnauthorized{}
}

/*
PatchConversationsCobrowsesessionParticipantCommunicationUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchConversationsCobrowsesessionParticipantCommunicationUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations cobrowsesession participant communication unauthorized response has a 2xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations cobrowsesession participant communication unauthorized response has a 3xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations cobrowsesession participant communication unauthorized response has a 4xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations cobrowsesession participant communication unauthorized response has a 5xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations cobrowsesession participant communication unauthorized response a status code equal to that given
func (o *PatchConversationsCobrowsesessionParticipantCommunicationUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCobrowsesessionParticipantCommunicationUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCobrowsesessionParticipantCommunicationUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCobrowsesessionParticipantCommunicationForbidden creates a PatchConversationsCobrowsesessionParticipantCommunicationForbidden with default headers values
func NewPatchConversationsCobrowsesessionParticipantCommunicationForbidden() *PatchConversationsCobrowsesessionParticipantCommunicationForbidden {
	return &PatchConversationsCobrowsesessionParticipantCommunicationForbidden{}
}

/*
PatchConversationsCobrowsesessionParticipantCommunicationForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PatchConversationsCobrowsesessionParticipantCommunicationForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations cobrowsesession participant communication forbidden response has a 2xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations cobrowsesession participant communication forbidden response has a 3xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations cobrowsesession participant communication forbidden response has a 4xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations cobrowsesession participant communication forbidden response has a 5xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations cobrowsesession participant communication forbidden response a status code equal to that given
func (o *PatchConversationsCobrowsesessionParticipantCommunicationForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCobrowsesessionParticipantCommunicationForbidden  %+v", 403, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCobrowsesessionParticipantCommunicationForbidden  %+v", 403, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCobrowsesessionParticipantCommunicationNotFound creates a PatchConversationsCobrowsesessionParticipantCommunicationNotFound with default headers values
func NewPatchConversationsCobrowsesessionParticipantCommunicationNotFound() *PatchConversationsCobrowsesessionParticipantCommunicationNotFound {
	return &PatchConversationsCobrowsesessionParticipantCommunicationNotFound{}
}

/*
PatchConversationsCobrowsesessionParticipantCommunicationNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PatchConversationsCobrowsesessionParticipantCommunicationNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations cobrowsesession participant communication not found response has a 2xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations cobrowsesession participant communication not found response has a 3xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations cobrowsesession participant communication not found response has a 4xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations cobrowsesession participant communication not found response has a 5xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations cobrowsesession participant communication not found response a status code equal to that given
func (o *PatchConversationsCobrowsesessionParticipantCommunicationNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCobrowsesessionParticipantCommunicationNotFound  %+v", 404, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCobrowsesessionParticipantCommunicationNotFound  %+v", 404, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCobrowsesessionParticipantCommunicationRequestTimeout creates a PatchConversationsCobrowsesessionParticipantCommunicationRequestTimeout with default headers values
func NewPatchConversationsCobrowsesessionParticipantCommunicationRequestTimeout() *PatchConversationsCobrowsesessionParticipantCommunicationRequestTimeout {
	return &PatchConversationsCobrowsesessionParticipantCommunicationRequestTimeout{}
}

/*
PatchConversationsCobrowsesessionParticipantCommunicationRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchConversationsCobrowsesessionParticipantCommunicationRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations cobrowsesession participant communication request timeout response has a 2xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations cobrowsesession participant communication request timeout response has a 3xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations cobrowsesession participant communication request timeout response has a 4xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations cobrowsesession participant communication request timeout response has a 5xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations cobrowsesession participant communication request timeout response a status code equal to that given
func (o *PatchConversationsCobrowsesessionParticipantCommunicationRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCobrowsesessionParticipantCommunicationRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationRequestTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCobrowsesessionParticipantCommunicationRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCobrowsesessionParticipantCommunicationRequestEntityTooLarge creates a PatchConversationsCobrowsesessionParticipantCommunicationRequestEntityTooLarge with default headers values
func NewPatchConversationsCobrowsesessionParticipantCommunicationRequestEntityTooLarge() *PatchConversationsCobrowsesessionParticipantCommunicationRequestEntityTooLarge {
	return &PatchConversationsCobrowsesessionParticipantCommunicationRequestEntityTooLarge{}
}

/*
PatchConversationsCobrowsesessionParticipantCommunicationRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PatchConversationsCobrowsesessionParticipantCommunicationRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations cobrowsesession participant communication request entity too large response has a 2xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations cobrowsesession participant communication request entity too large response has a 3xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations cobrowsesession participant communication request entity too large response has a 4xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations cobrowsesession participant communication request entity too large response has a 5xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations cobrowsesession participant communication request entity too large response a status code equal to that given
func (o *PatchConversationsCobrowsesessionParticipantCommunicationRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCobrowsesessionParticipantCommunicationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCobrowsesessionParticipantCommunicationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCobrowsesessionParticipantCommunicationUnsupportedMediaType creates a PatchConversationsCobrowsesessionParticipantCommunicationUnsupportedMediaType with default headers values
func NewPatchConversationsCobrowsesessionParticipantCommunicationUnsupportedMediaType() *PatchConversationsCobrowsesessionParticipantCommunicationUnsupportedMediaType {
	return &PatchConversationsCobrowsesessionParticipantCommunicationUnsupportedMediaType{}
}

/*
PatchConversationsCobrowsesessionParticipantCommunicationUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchConversationsCobrowsesessionParticipantCommunicationUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations cobrowsesession participant communication unsupported media type response has a 2xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations cobrowsesession participant communication unsupported media type response has a 3xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations cobrowsesession participant communication unsupported media type response has a 4xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations cobrowsesession participant communication unsupported media type response has a 5xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations cobrowsesession participant communication unsupported media type response a status code equal to that given
func (o *PatchConversationsCobrowsesessionParticipantCommunicationUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCobrowsesessionParticipantCommunicationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCobrowsesessionParticipantCommunicationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCobrowsesessionParticipantCommunicationTooManyRequests creates a PatchConversationsCobrowsesessionParticipantCommunicationTooManyRequests with default headers values
func NewPatchConversationsCobrowsesessionParticipantCommunicationTooManyRequests() *PatchConversationsCobrowsesessionParticipantCommunicationTooManyRequests {
	return &PatchConversationsCobrowsesessionParticipantCommunicationTooManyRequests{}
}

/*
PatchConversationsCobrowsesessionParticipantCommunicationTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchConversationsCobrowsesessionParticipantCommunicationTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations cobrowsesession participant communication too many requests response has a 2xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations cobrowsesession participant communication too many requests response has a 3xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations cobrowsesession participant communication too many requests response has a 4xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations cobrowsesession participant communication too many requests response has a 5xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations cobrowsesession participant communication too many requests response a status code equal to that given
func (o *PatchConversationsCobrowsesessionParticipantCommunicationTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCobrowsesessionParticipantCommunicationTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCobrowsesessionParticipantCommunicationTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCobrowsesessionParticipantCommunicationInternalServerError creates a PatchConversationsCobrowsesessionParticipantCommunicationInternalServerError with default headers values
func NewPatchConversationsCobrowsesessionParticipantCommunicationInternalServerError() *PatchConversationsCobrowsesessionParticipantCommunicationInternalServerError {
	return &PatchConversationsCobrowsesessionParticipantCommunicationInternalServerError{}
}

/*
PatchConversationsCobrowsesessionParticipantCommunicationInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchConversationsCobrowsesessionParticipantCommunicationInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations cobrowsesession participant communication internal server error response has a 2xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations cobrowsesession participant communication internal server error response has a 3xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations cobrowsesession participant communication internal server error response has a 4xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations cobrowsesession participant communication internal server error response has a 5xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations cobrowsesession participant communication internal server error response a status code equal to that given
func (o *PatchConversationsCobrowsesessionParticipantCommunicationInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCobrowsesessionParticipantCommunicationInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCobrowsesessionParticipantCommunicationInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCobrowsesessionParticipantCommunicationServiceUnavailable creates a PatchConversationsCobrowsesessionParticipantCommunicationServiceUnavailable with default headers values
func NewPatchConversationsCobrowsesessionParticipantCommunicationServiceUnavailable() *PatchConversationsCobrowsesessionParticipantCommunicationServiceUnavailable {
	return &PatchConversationsCobrowsesessionParticipantCommunicationServiceUnavailable{}
}

/*
PatchConversationsCobrowsesessionParticipantCommunicationServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchConversationsCobrowsesessionParticipantCommunicationServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations cobrowsesession participant communication service unavailable response has a 2xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations cobrowsesession participant communication service unavailable response has a 3xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations cobrowsesession participant communication service unavailable response has a 4xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations cobrowsesession participant communication service unavailable response has a 5xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations cobrowsesession participant communication service unavailable response a status code equal to that given
func (o *PatchConversationsCobrowsesessionParticipantCommunicationServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCobrowsesessionParticipantCommunicationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationServiceUnavailable) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCobrowsesessionParticipantCommunicationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCobrowsesessionParticipantCommunicationGatewayTimeout creates a PatchConversationsCobrowsesessionParticipantCommunicationGatewayTimeout with default headers values
func NewPatchConversationsCobrowsesessionParticipantCommunicationGatewayTimeout() *PatchConversationsCobrowsesessionParticipantCommunicationGatewayTimeout {
	return &PatchConversationsCobrowsesessionParticipantCommunicationGatewayTimeout{}
}

/*
PatchConversationsCobrowsesessionParticipantCommunicationGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PatchConversationsCobrowsesessionParticipantCommunicationGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations cobrowsesession participant communication gateway timeout response has a 2xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations cobrowsesession participant communication gateway timeout response has a 3xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations cobrowsesession participant communication gateway timeout response has a 4xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations cobrowsesession participant communication gateway timeout response has a 5xx status code
func (o *PatchConversationsCobrowsesessionParticipantCommunicationGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations cobrowsesession participant communication gateway timeout response a status code equal to that given
func (o *PatchConversationsCobrowsesessionParticipantCommunicationGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCobrowsesessionParticipantCommunicationGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationGatewayTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCobrowsesessionParticipantCommunicationGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCobrowsesessionParticipantCommunicationGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

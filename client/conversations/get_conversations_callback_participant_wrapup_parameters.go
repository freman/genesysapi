// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetConversationsCallbackParticipantWrapupParams creates a new GetConversationsCallbackParticipantWrapupParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetConversationsCallbackParticipantWrapupParams() *GetConversationsCallbackParticipantWrapupParams {
	return &GetConversationsCallbackParticipantWrapupParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetConversationsCallbackParticipantWrapupParamsWithTimeout creates a new GetConversationsCallbackParticipantWrapupParams object
// with the ability to set a timeout on a request.
func NewGetConversationsCallbackParticipantWrapupParamsWithTimeout(timeout time.Duration) *GetConversationsCallbackParticipantWrapupParams {
	return &GetConversationsCallbackParticipantWrapupParams{
		timeout: timeout,
	}
}

// NewGetConversationsCallbackParticipantWrapupParamsWithContext creates a new GetConversationsCallbackParticipantWrapupParams object
// with the ability to set a context for a request.
func NewGetConversationsCallbackParticipantWrapupParamsWithContext(ctx context.Context) *GetConversationsCallbackParticipantWrapupParams {
	return &GetConversationsCallbackParticipantWrapupParams{
		Context: ctx,
	}
}

// NewGetConversationsCallbackParticipantWrapupParamsWithHTTPClient creates a new GetConversationsCallbackParticipantWrapupParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetConversationsCallbackParticipantWrapupParamsWithHTTPClient(client *http.Client) *GetConversationsCallbackParticipantWrapupParams {
	return &GetConversationsCallbackParticipantWrapupParams{
		HTTPClient: client,
	}
}

/*
GetConversationsCallbackParticipantWrapupParams contains all the parameters to send to the API endpoint

	for the get conversations callback participant wrapup operation.

	Typically these are written to a http.Request.
*/
type GetConversationsCallbackParticipantWrapupParams struct {

	/* ConversationID.

	   conversationId
	*/
	ConversationID string

	/* ParticipantID.

	   participantId
	*/
	ParticipantID string

	/* Provisional.

	   Indicates if the wrap-up code is provisional.
	*/
	Provisional *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get conversations callback participant wrapup params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetConversationsCallbackParticipantWrapupParams) WithDefaults() *GetConversationsCallbackParticipantWrapupParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get conversations callback participant wrapup params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetConversationsCallbackParticipantWrapupParams) SetDefaults() {
	var (
		provisionalDefault = bool(false)
	)

	val := GetConversationsCallbackParticipantWrapupParams{
		Provisional: &provisionalDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get conversations callback participant wrapup params
func (o *GetConversationsCallbackParticipantWrapupParams) WithTimeout(timeout time.Duration) *GetConversationsCallbackParticipantWrapupParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get conversations callback participant wrapup params
func (o *GetConversationsCallbackParticipantWrapupParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get conversations callback participant wrapup params
func (o *GetConversationsCallbackParticipantWrapupParams) WithContext(ctx context.Context) *GetConversationsCallbackParticipantWrapupParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get conversations callback participant wrapup params
func (o *GetConversationsCallbackParticipantWrapupParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get conversations callback participant wrapup params
func (o *GetConversationsCallbackParticipantWrapupParams) WithHTTPClient(client *http.Client) *GetConversationsCallbackParticipantWrapupParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get conversations callback participant wrapup params
func (o *GetConversationsCallbackParticipantWrapupParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConversationID adds the conversationID to the get conversations callback participant wrapup params
func (o *GetConversationsCallbackParticipantWrapupParams) WithConversationID(conversationID string) *GetConversationsCallbackParticipantWrapupParams {
	o.SetConversationID(conversationID)
	return o
}

// SetConversationID adds the conversationId to the get conversations callback participant wrapup params
func (o *GetConversationsCallbackParticipantWrapupParams) SetConversationID(conversationID string) {
	o.ConversationID = conversationID
}

// WithParticipantID adds the participantID to the get conversations callback participant wrapup params
func (o *GetConversationsCallbackParticipantWrapupParams) WithParticipantID(participantID string) *GetConversationsCallbackParticipantWrapupParams {
	o.SetParticipantID(participantID)
	return o
}

// SetParticipantID adds the participantId to the get conversations callback participant wrapup params
func (o *GetConversationsCallbackParticipantWrapupParams) SetParticipantID(participantID string) {
	o.ParticipantID = participantID
}

// WithProvisional adds the provisional to the get conversations callback participant wrapup params
func (o *GetConversationsCallbackParticipantWrapupParams) WithProvisional(provisional *bool) *GetConversationsCallbackParticipantWrapupParams {
	o.SetProvisional(provisional)
	return o
}

// SetProvisional adds the provisional to the get conversations callback participant wrapup params
func (o *GetConversationsCallbackParticipantWrapupParams) SetProvisional(provisional *bool) {
	o.Provisional = provisional
}

// WriteToRequest writes these params to a swagger request
func (o *GetConversationsCallbackParticipantWrapupParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param conversationId
	if err := r.SetPathParam("conversationId", o.ConversationID); err != nil {
		return err
	}

	// path param participantId
	if err := r.SetPathParam("participantId", o.ParticipantID); err != nil {
		return err
	}

	if o.Provisional != nil {

		// query param provisional
		var qrProvisional bool

		if o.Provisional != nil {
			qrProvisional = *o.Provisional
		}
		qProvisional := swag.FormatBool(qrProvisional)
		if qProvisional != "" {

			if err := r.SetQueryParam("provisional", qProvisional); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

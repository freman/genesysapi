// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutConversationsMessagingSupportedcontentDefaultReader is a Reader for the PutConversationsMessagingSupportedcontentDefault structure.
type PutConversationsMessagingSupportedcontentDefaultReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutConversationsMessagingSupportedcontentDefaultReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutConversationsMessagingSupportedcontentDefaultOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutConversationsMessagingSupportedcontentDefaultBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutConversationsMessagingSupportedcontentDefaultUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutConversationsMessagingSupportedcontentDefaultForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutConversationsMessagingSupportedcontentDefaultNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPutConversationsMessagingSupportedcontentDefaultRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutConversationsMessagingSupportedcontentDefaultRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutConversationsMessagingSupportedcontentDefaultUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutConversationsMessagingSupportedcontentDefaultTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutConversationsMessagingSupportedcontentDefaultInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutConversationsMessagingSupportedcontentDefaultServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutConversationsMessagingSupportedcontentDefaultGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutConversationsMessagingSupportedcontentDefaultOK creates a PutConversationsMessagingSupportedcontentDefaultOK with default headers values
func NewPutConversationsMessagingSupportedcontentDefaultOK() *PutConversationsMessagingSupportedcontentDefaultOK {
	return &PutConversationsMessagingSupportedcontentDefaultOK{}
}

/*PutConversationsMessagingSupportedcontentDefaultOK handles this case with default header values.

successful operation
*/
type PutConversationsMessagingSupportedcontentDefaultOK struct {
	Payload *models.SupportedContent
}

func (o *PutConversationsMessagingSupportedcontentDefaultOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/messaging/supportedcontent/default][%d] putConversationsMessagingSupportedcontentDefaultOK  %+v", 200, o.Payload)
}

func (o *PutConversationsMessagingSupportedcontentDefaultOK) GetPayload() *models.SupportedContent {
	return o.Payload
}

func (o *PutConversationsMessagingSupportedcontentDefaultOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SupportedContent)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsMessagingSupportedcontentDefaultBadRequest creates a PutConversationsMessagingSupportedcontentDefaultBadRequest with default headers values
func NewPutConversationsMessagingSupportedcontentDefaultBadRequest() *PutConversationsMessagingSupportedcontentDefaultBadRequest {
	return &PutConversationsMessagingSupportedcontentDefaultBadRequest{}
}

/*PutConversationsMessagingSupportedcontentDefaultBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutConversationsMessagingSupportedcontentDefaultBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PutConversationsMessagingSupportedcontentDefaultBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/messaging/supportedcontent/default][%d] putConversationsMessagingSupportedcontentDefaultBadRequest  %+v", 400, o.Payload)
}

func (o *PutConversationsMessagingSupportedcontentDefaultBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsMessagingSupportedcontentDefaultBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsMessagingSupportedcontentDefaultUnauthorized creates a PutConversationsMessagingSupportedcontentDefaultUnauthorized with default headers values
func NewPutConversationsMessagingSupportedcontentDefaultUnauthorized() *PutConversationsMessagingSupportedcontentDefaultUnauthorized {
	return &PutConversationsMessagingSupportedcontentDefaultUnauthorized{}
}

/*PutConversationsMessagingSupportedcontentDefaultUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PutConversationsMessagingSupportedcontentDefaultUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PutConversationsMessagingSupportedcontentDefaultUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/messaging/supportedcontent/default][%d] putConversationsMessagingSupportedcontentDefaultUnauthorized  %+v", 401, o.Payload)
}

func (o *PutConversationsMessagingSupportedcontentDefaultUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsMessagingSupportedcontentDefaultUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsMessagingSupportedcontentDefaultForbidden creates a PutConversationsMessagingSupportedcontentDefaultForbidden with default headers values
func NewPutConversationsMessagingSupportedcontentDefaultForbidden() *PutConversationsMessagingSupportedcontentDefaultForbidden {
	return &PutConversationsMessagingSupportedcontentDefaultForbidden{}
}

/*PutConversationsMessagingSupportedcontentDefaultForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PutConversationsMessagingSupportedcontentDefaultForbidden struct {
	Payload *models.ErrorBody
}

func (o *PutConversationsMessagingSupportedcontentDefaultForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/messaging/supportedcontent/default][%d] putConversationsMessagingSupportedcontentDefaultForbidden  %+v", 403, o.Payload)
}

func (o *PutConversationsMessagingSupportedcontentDefaultForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsMessagingSupportedcontentDefaultForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsMessagingSupportedcontentDefaultNotFound creates a PutConversationsMessagingSupportedcontentDefaultNotFound with default headers values
func NewPutConversationsMessagingSupportedcontentDefaultNotFound() *PutConversationsMessagingSupportedcontentDefaultNotFound {
	return &PutConversationsMessagingSupportedcontentDefaultNotFound{}
}

/*PutConversationsMessagingSupportedcontentDefaultNotFound handles this case with default header values.

The requested resource was not found.
*/
type PutConversationsMessagingSupportedcontentDefaultNotFound struct {
	Payload *models.ErrorBody
}

func (o *PutConversationsMessagingSupportedcontentDefaultNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/messaging/supportedcontent/default][%d] putConversationsMessagingSupportedcontentDefaultNotFound  %+v", 404, o.Payload)
}

func (o *PutConversationsMessagingSupportedcontentDefaultNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsMessagingSupportedcontentDefaultNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsMessagingSupportedcontentDefaultRequestTimeout creates a PutConversationsMessagingSupportedcontentDefaultRequestTimeout with default headers values
func NewPutConversationsMessagingSupportedcontentDefaultRequestTimeout() *PutConversationsMessagingSupportedcontentDefaultRequestTimeout {
	return &PutConversationsMessagingSupportedcontentDefaultRequestTimeout{}
}

/*PutConversationsMessagingSupportedcontentDefaultRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PutConversationsMessagingSupportedcontentDefaultRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutConversationsMessagingSupportedcontentDefaultRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/messaging/supportedcontent/default][%d] putConversationsMessagingSupportedcontentDefaultRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutConversationsMessagingSupportedcontentDefaultRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsMessagingSupportedcontentDefaultRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsMessagingSupportedcontentDefaultRequestEntityTooLarge creates a PutConversationsMessagingSupportedcontentDefaultRequestEntityTooLarge with default headers values
func NewPutConversationsMessagingSupportedcontentDefaultRequestEntityTooLarge() *PutConversationsMessagingSupportedcontentDefaultRequestEntityTooLarge {
	return &PutConversationsMessagingSupportedcontentDefaultRequestEntityTooLarge{}
}

/*PutConversationsMessagingSupportedcontentDefaultRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PutConversationsMessagingSupportedcontentDefaultRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PutConversationsMessagingSupportedcontentDefaultRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/messaging/supportedcontent/default][%d] putConversationsMessagingSupportedcontentDefaultRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutConversationsMessagingSupportedcontentDefaultRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsMessagingSupportedcontentDefaultRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsMessagingSupportedcontentDefaultUnsupportedMediaType creates a PutConversationsMessagingSupportedcontentDefaultUnsupportedMediaType with default headers values
func NewPutConversationsMessagingSupportedcontentDefaultUnsupportedMediaType() *PutConversationsMessagingSupportedcontentDefaultUnsupportedMediaType {
	return &PutConversationsMessagingSupportedcontentDefaultUnsupportedMediaType{}
}

/*PutConversationsMessagingSupportedcontentDefaultUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutConversationsMessagingSupportedcontentDefaultUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PutConversationsMessagingSupportedcontentDefaultUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/messaging/supportedcontent/default][%d] putConversationsMessagingSupportedcontentDefaultUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutConversationsMessagingSupportedcontentDefaultUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsMessagingSupportedcontentDefaultUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsMessagingSupportedcontentDefaultTooManyRequests creates a PutConversationsMessagingSupportedcontentDefaultTooManyRequests with default headers values
func NewPutConversationsMessagingSupportedcontentDefaultTooManyRequests() *PutConversationsMessagingSupportedcontentDefaultTooManyRequests {
	return &PutConversationsMessagingSupportedcontentDefaultTooManyRequests{}
}

/*PutConversationsMessagingSupportedcontentDefaultTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PutConversationsMessagingSupportedcontentDefaultTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PutConversationsMessagingSupportedcontentDefaultTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/messaging/supportedcontent/default][%d] putConversationsMessagingSupportedcontentDefaultTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutConversationsMessagingSupportedcontentDefaultTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsMessagingSupportedcontentDefaultTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsMessagingSupportedcontentDefaultInternalServerError creates a PutConversationsMessagingSupportedcontentDefaultInternalServerError with default headers values
func NewPutConversationsMessagingSupportedcontentDefaultInternalServerError() *PutConversationsMessagingSupportedcontentDefaultInternalServerError {
	return &PutConversationsMessagingSupportedcontentDefaultInternalServerError{}
}

/*PutConversationsMessagingSupportedcontentDefaultInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutConversationsMessagingSupportedcontentDefaultInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PutConversationsMessagingSupportedcontentDefaultInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/messaging/supportedcontent/default][%d] putConversationsMessagingSupportedcontentDefaultInternalServerError  %+v", 500, o.Payload)
}

func (o *PutConversationsMessagingSupportedcontentDefaultInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsMessagingSupportedcontentDefaultInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsMessagingSupportedcontentDefaultServiceUnavailable creates a PutConversationsMessagingSupportedcontentDefaultServiceUnavailable with default headers values
func NewPutConversationsMessagingSupportedcontentDefaultServiceUnavailable() *PutConversationsMessagingSupportedcontentDefaultServiceUnavailable {
	return &PutConversationsMessagingSupportedcontentDefaultServiceUnavailable{}
}

/*PutConversationsMessagingSupportedcontentDefaultServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutConversationsMessagingSupportedcontentDefaultServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PutConversationsMessagingSupportedcontentDefaultServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/messaging/supportedcontent/default][%d] putConversationsMessagingSupportedcontentDefaultServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutConversationsMessagingSupportedcontentDefaultServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsMessagingSupportedcontentDefaultServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsMessagingSupportedcontentDefaultGatewayTimeout creates a PutConversationsMessagingSupportedcontentDefaultGatewayTimeout with default headers values
func NewPutConversationsMessagingSupportedcontentDefaultGatewayTimeout() *PutConversationsMessagingSupportedcontentDefaultGatewayTimeout {
	return &PutConversationsMessagingSupportedcontentDefaultGatewayTimeout{}
}

/*PutConversationsMessagingSupportedcontentDefaultGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PutConversationsMessagingSupportedcontentDefaultGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutConversationsMessagingSupportedcontentDefaultGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/messaging/supportedcontent/default][%d] putConversationsMessagingSupportedcontentDefaultGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutConversationsMessagingSupportedcontentDefaultGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsMessagingSupportedcontentDefaultGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostConversationDisconnectReader is a Reader for the PostConversationDisconnect structure.
type PostConversationDisconnectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostConversationDisconnectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewPostConversationDisconnectAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostConversationDisconnectBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostConversationDisconnectUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostConversationDisconnectForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostConversationDisconnectNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostConversationDisconnectRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostConversationDisconnectRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostConversationDisconnectUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostConversationDisconnectTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostConversationDisconnectInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostConversationDisconnectServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostConversationDisconnectGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostConversationDisconnectAccepted creates a PostConversationDisconnectAccepted with default headers values
func NewPostConversationDisconnectAccepted() *PostConversationDisconnectAccepted {
	return &PostConversationDisconnectAccepted{}
}

/*PostConversationDisconnectAccepted handles this case with default header values.

Accepted
*/
type PostConversationDisconnectAccepted struct {
	Payload string
}

func (o *PostConversationDisconnectAccepted) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/disconnect][%d] postConversationDisconnectAccepted  %+v", 202, o.Payload)
}

func (o *PostConversationDisconnectAccepted) GetPayload() string {
	return o.Payload
}

func (o *PostConversationDisconnectAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationDisconnectBadRequest creates a PostConversationDisconnectBadRequest with default headers values
func NewPostConversationDisconnectBadRequest() *PostConversationDisconnectBadRequest {
	return &PostConversationDisconnectBadRequest{}
}

/*PostConversationDisconnectBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostConversationDisconnectBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PostConversationDisconnectBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/disconnect][%d] postConversationDisconnectBadRequest  %+v", 400, o.Payload)
}

func (o *PostConversationDisconnectBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationDisconnectBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationDisconnectUnauthorized creates a PostConversationDisconnectUnauthorized with default headers values
func NewPostConversationDisconnectUnauthorized() *PostConversationDisconnectUnauthorized {
	return &PostConversationDisconnectUnauthorized{}
}

/*PostConversationDisconnectUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PostConversationDisconnectUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PostConversationDisconnectUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/disconnect][%d] postConversationDisconnectUnauthorized  %+v", 401, o.Payload)
}

func (o *PostConversationDisconnectUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationDisconnectUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationDisconnectForbidden creates a PostConversationDisconnectForbidden with default headers values
func NewPostConversationDisconnectForbidden() *PostConversationDisconnectForbidden {
	return &PostConversationDisconnectForbidden{}
}

/*PostConversationDisconnectForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PostConversationDisconnectForbidden struct {
	Payload *models.ErrorBody
}

func (o *PostConversationDisconnectForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/disconnect][%d] postConversationDisconnectForbidden  %+v", 403, o.Payload)
}

func (o *PostConversationDisconnectForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationDisconnectForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationDisconnectNotFound creates a PostConversationDisconnectNotFound with default headers values
func NewPostConversationDisconnectNotFound() *PostConversationDisconnectNotFound {
	return &PostConversationDisconnectNotFound{}
}

/*PostConversationDisconnectNotFound handles this case with default header values.

The requested resource was not found.
*/
type PostConversationDisconnectNotFound struct {
	Payload *models.ErrorBody
}

func (o *PostConversationDisconnectNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/disconnect][%d] postConversationDisconnectNotFound  %+v", 404, o.Payload)
}

func (o *PostConversationDisconnectNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationDisconnectNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationDisconnectRequestTimeout creates a PostConversationDisconnectRequestTimeout with default headers values
func NewPostConversationDisconnectRequestTimeout() *PostConversationDisconnectRequestTimeout {
	return &PostConversationDisconnectRequestTimeout{}
}

/*PostConversationDisconnectRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PostConversationDisconnectRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PostConversationDisconnectRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/disconnect][%d] postConversationDisconnectRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostConversationDisconnectRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationDisconnectRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationDisconnectRequestEntityTooLarge creates a PostConversationDisconnectRequestEntityTooLarge with default headers values
func NewPostConversationDisconnectRequestEntityTooLarge() *PostConversationDisconnectRequestEntityTooLarge {
	return &PostConversationDisconnectRequestEntityTooLarge{}
}

/*PostConversationDisconnectRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type PostConversationDisconnectRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PostConversationDisconnectRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/disconnect][%d] postConversationDisconnectRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostConversationDisconnectRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationDisconnectRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationDisconnectUnsupportedMediaType creates a PostConversationDisconnectUnsupportedMediaType with default headers values
func NewPostConversationDisconnectUnsupportedMediaType() *PostConversationDisconnectUnsupportedMediaType {
	return &PostConversationDisconnectUnsupportedMediaType{}
}

/*PostConversationDisconnectUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostConversationDisconnectUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PostConversationDisconnectUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/disconnect][%d] postConversationDisconnectUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostConversationDisconnectUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationDisconnectUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationDisconnectTooManyRequests creates a PostConversationDisconnectTooManyRequests with default headers values
func NewPostConversationDisconnectTooManyRequests() *PostConversationDisconnectTooManyRequests {
	return &PostConversationDisconnectTooManyRequests{}
}

/*PostConversationDisconnectTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PostConversationDisconnectTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PostConversationDisconnectTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/disconnect][%d] postConversationDisconnectTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostConversationDisconnectTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationDisconnectTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationDisconnectInternalServerError creates a PostConversationDisconnectInternalServerError with default headers values
func NewPostConversationDisconnectInternalServerError() *PostConversationDisconnectInternalServerError {
	return &PostConversationDisconnectInternalServerError{}
}

/*PostConversationDisconnectInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostConversationDisconnectInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PostConversationDisconnectInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/disconnect][%d] postConversationDisconnectInternalServerError  %+v", 500, o.Payload)
}

func (o *PostConversationDisconnectInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationDisconnectInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationDisconnectServiceUnavailable creates a PostConversationDisconnectServiceUnavailable with default headers values
func NewPostConversationDisconnectServiceUnavailable() *PostConversationDisconnectServiceUnavailable {
	return &PostConversationDisconnectServiceUnavailable{}
}

/*PostConversationDisconnectServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostConversationDisconnectServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PostConversationDisconnectServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/disconnect][%d] postConversationDisconnectServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostConversationDisconnectServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationDisconnectServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationDisconnectGatewayTimeout creates a PostConversationDisconnectGatewayTimeout with default headers values
func NewPostConversationDisconnectGatewayTimeout() *PostConversationDisconnectGatewayTimeout {
	return &PostConversationDisconnectGatewayTimeout{}
}

/*PostConversationDisconnectGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PostConversationDisconnectGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PostConversationDisconnectGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/disconnect][%d] postConversationDisconnectGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostConversationDisconnectGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationDisconnectGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

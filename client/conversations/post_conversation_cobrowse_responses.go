// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostConversationCobrowseReader is a Reader for the PostConversationCobrowse structure.
type PostConversationCobrowseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostConversationCobrowseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostConversationCobrowseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostConversationCobrowseBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostConversationCobrowseUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostConversationCobrowseForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostConversationCobrowseNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostConversationCobrowseRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostConversationCobrowseRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostConversationCobrowseUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostConversationCobrowseTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostConversationCobrowseInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostConversationCobrowseServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostConversationCobrowseGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostConversationCobrowseOK creates a PostConversationCobrowseOK with default headers values
func NewPostConversationCobrowseOK() *PostConversationCobrowseOK {
	return &PostConversationCobrowseOK{}
}

/*
PostConversationCobrowseOK describes a response with status code 200, with default header values.

successful operation
*/
type PostConversationCobrowseOK struct {
	Payload *models.CobrowseWebMessagingSession
}

// IsSuccess returns true when this post conversation cobrowse o k response has a 2xx status code
func (o *PostConversationCobrowseOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post conversation cobrowse o k response has a 3xx status code
func (o *PostConversationCobrowseOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversation cobrowse o k response has a 4xx status code
func (o *PostConversationCobrowseOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post conversation cobrowse o k response has a 5xx status code
func (o *PostConversationCobrowseOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversation cobrowse o k response a status code equal to that given
func (o *PostConversationCobrowseOK) IsCode(code int) bool {
	return code == 200
}

func (o *PostConversationCobrowseOK) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/cobrowse][%d] postConversationCobrowseOK  %+v", 200, o.Payload)
}

func (o *PostConversationCobrowseOK) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/cobrowse][%d] postConversationCobrowseOK  %+v", 200, o.Payload)
}

func (o *PostConversationCobrowseOK) GetPayload() *models.CobrowseWebMessagingSession {
	return o.Payload
}

func (o *PostConversationCobrowseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CobrowseWebMessagingSession)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationCobrowseBadRequest creates a PostConversationCobrowseBadRequest with default headers values
func NewPostConversationCobrowseBadRequest() *PostConversationCobrowseBadRequest {
	return &PostConversationCobrowseBadRequest{}
}

/*
PostConversationCobrowseBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostConversationCobrowseBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversation cobrowse bad request response has a 2xx status code
func (o *PostConversationCobrowseBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversation cobrowse bad request response has a 3xx status code
func (o *PostConversationCobrowseBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversation cobrowse bad request response has a 4xx status code
func (o *PostConversationCobrowseBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversation cobrowse bad request response has a 5xx status code
func (o *PostConversationCobrowseBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversation cobrowse bad request response a status code equal to that given
func (o *PostConversationCobrowseBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PostConversationCobrowseBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/cobrowse][%d] postConversationCobrowseBadRequest  %+v", 400, o.Payload)
}

func (o *PostConversationCobrowseBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/cobrowse][%d] postConversationCobrowseBadRequest  %+v", 400, o.Payload)
}

func (o *PostConversationCobrowseBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationCobrowseBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationCobrowseUnauthorized creates a PostConversationCobrowseUnauthorized with default headers values
func NewPostConversationCobrowseUnauthorized() *PostConversationCobrowseUnauthorized {
	return &PostConversationCobrowseUnauthorized{}
}

/*
PostConversationCobrowseUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PostConversationCobrowseUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversation cobrowse unauthorized response has a 2xx status code
func (o *PostConversationCobrowseUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversation cobrowse unauthorized response has a 3xx status code
func (o *PostConversationCobrowseUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversation cobrowse unauthorized response has a 4xx status code
func (o *PostConversationCobrowseUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversation cobrowse unauthorized response has a 5xx status code
func (o *PostConversationCobrowseUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversation cobrowse unauthorized response a status code equal to that given
func (o *PostConversationCobrowseUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PostConversationCobrowseUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/cobrowse][%d] postConversationCobrowseUnauthorized  %+v", 401, o.Payload)
}

func (o *PostConversationCobrowseUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/cobrowse][%d] postConversationCobrowseUnauthorized  %+v", 401, o.Payload)
}

func (o *PostConversationCobrowseUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationCobrowseUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationCobrowseForbidden creates a PostConversationCobrowseForbidden with default headers values
func NewPostConversationCobrowseForbidden() *PostConversationCobrowseForbidden {
	return &PostConversationCobrowseForbidden{}
}

/*
PostConversationCobrowseForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PostConversationCobrowseForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversation cobrowse forbidden response has a 2xx status code
func (o *PostConversationCobrowseForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversation cobrowse forbidden response has a 3xx status code
func (o *PostConversationCobrowseForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversation cobrowse forbidden response has a 4xx status code
func (o *PostConversationCobrowseForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversation cobrowse forbidden response has a 5xx status code
func (o *PostConversationCobrowseForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversation cobrowse forbidden response a status code equal to that given
func (o *PostConversationCobrowseForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PostConversationCobrowseForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/cobrowse][%d] postConversationCobrowseForbidden  %+v", 403, o.Payload)
}

func (o *PostConversationCobrowseForbidden) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/cobrowse][%d] postConversationCobrowseForbidden  %+v", 403, o.Payload)
}

func (o *PostConversationCobrowseForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationCobrowseForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationCobrowseNotFound creates a PostConversationCobrowseNotFound with default headers values
func NewPostConversationCobrowseNotFound() *PostConversationCobrowseNotFound {
	return &PostConversationCobrowseNotFound{}
}

/*
PostConversationCobrowseNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PostConversationCobrowseNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversation cobrowse not found response has a 2xx status code
func (o *PostConversationCobrowseNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversation cobrowse not found response has a 3xx status code
func (o *PostConversationCobrowseNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversation cobrowse not found response has a 4xx status code
func (o *PostConversationCobrowseNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversation cobrowse not found response has a 5xx status code
func (o *PostConversationCobrowseNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversation cobrowse not found response a status code equal to that given
func (o *PostConversationCobrowseNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PostConversationCobrowseNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/cobrowse][%d] postConversationCobrowseNotFound  %+v", 404, o.Payload)
}

func (o *PostConversationCobrowseNotFound) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/cobrowse][%d] postConversationCobrowseNotFound  %+v", 404, o.Payload)
}

func (o *PostConversationCobrowseNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationCobrowseNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationCobrowseRequestTimeout creates a PostConversationCobrowseRequestTimeout with default headers values
func NewPostConversationCobrowseRequestTimeout() *PostConversationCobrowseRequestTimeout {
	return &PostConversationCobrowseRequestTimeout{}
}

/*
PostConversationCobrowseRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PostConversationCobrowseRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversation cobrowse request timeout response has a 2xx status code
func (o *PostConversationCobrowseRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversation cobrowse request timeout response has a 3xx status code
func (o *PostConversationCobrowseRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversation cobrowse request timeout response has a 4xx status code
func (o *PostConversationCobrowseRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversation cobrowse request timeout response has a 5xx status code
func (o *PostConversationCobrowseRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversation cobrowse request timeout response a status code equal to that given
func (o *PostConversationCobrowseRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PostConversationCobrowseRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/cobrowse][%d] postConversationCobrowseRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostConversationCobrowseRequestTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/cobrowse][%d] postConversationCobrowseRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostConversationCobrowseRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationCobrowseRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationCobrowseRequestEntityTooLarge creates a PostConversationCobrowseRequestEntityTooLarge with default headers values
func NewPostConversationCobrowseRequestEntityTooLarge() *PostConversationCobrowseRequestEntityTooLarge {
	return &PostConversationCobrowseRequestEntityTooLarge{}
}

/*
PostConversationCobrowseRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PostConversationCobrowseRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversation cobrowse request entity too large response has a 2xx status code
func (o *PostConversationCobrowseRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversation cobrowse request entity too large response has a 3xx status code
func (o *PostConversationCobrowseRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversation cobrowse request entity too large response has a 4xx status code
func (o *PostConversationCobrowseRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversation cobrowse request entity too large response has a 5xx status code
func (o *PostConversationCobrowseRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversation cobrowse request entity too large response a status code equal to that given
func (o *PostConversationCobrowseRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PostConversationCobrowseRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/cobrowse][%d] postConversationCobrowseRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostConversationCobrowseRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/cobrowse][%d] postConversationCobrowseRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostConversationCobrowseRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationCobrowseRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationCobrowseUnsupportedMediaType creates a PostConversationCobrowseUnsupportedMediaType with default headers values
func NewPostConversationCobrowseUnsupportedMediaType() *PostConversationCobrowseUnsupportedMediaType {
	return &PostConversationCobrowseUnsupportedMediaType{}
}

/*
PostConversationCobrowseUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostConversationCobrowseUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversation cobrowse unsupported media type response has a 2xx status code
func (o *PostConversationCobrowseUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversation cobrowse unsupported media type response has a 3xx status code
func (o *PostConversationCobrowseUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversation cobrowse unsupported media type response has a 4xx status code
func (o *PostConversationCobrowseUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversation cobrowse unsupported media type response has a 5xx status code
func (o *PostConversationCobrowseUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversation cobrowse unsupported media type response a status code equal to that given
func (o *PostConversationCobrowseUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PostConversationCobrowseUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/cobrowse][%d] postConversationCobrowseUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostConversationCobrowseUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/cobrowse][%d] postConversationCobrowseUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostConversationCobrowseUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationCobrowseUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationCobrowseTooManyRequests creates a PostConversationCobrowseTooManyRequests with default headers values
func NewPostConversationCobrowseTooManyRequests() *PostConversationCobrowseTooManyRequests {
	return &PostConversationCobrowseTooManyRequests{}
}

/*
PostConversationCobrowseTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PostConversationCobrowseTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversation cobrowse too many requests response has a 2xx status code
func (o *PostConversationCobrowseTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversation cobrowse too many requests response has a 3xx status code
func (o *PostConversationCobrowseTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversation cobrowse too many requests response has a 4xx status code
func (o *PostConversationCobrowseTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversation cobrowse too many requests response has a 5xx status code
func (o *PostConversationCobrowseTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversation cobrowse too many requests response a status code equal to that given
func (o *PostConversationCobrowseTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PostConversationCobrowseTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/cobrowse][%d] postConversationCobrowseTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostConversationCobrowseTooManyRequests) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/cobrowse][%d] postConversationCobrowseTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostConversationCobrowseTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationCobrowseTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationCobrowseInternalServerError creates a PostConversationCobrowseInternalServerError with default headers values
func NewPostConversationCobrowseInternalServerError() *PostConversationCobrowseInternalServerError {
	return &PostConversationCobrowseInternalServerError{}
}

/*
PostConversationCobrowseInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostConversationCobrowseInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversation cobrowse internal server error response has a 2xx status code
func (o *PostConversationCobrowseInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversation cobrowse internal server error response has a 3xx status code
func (o *PostConversationCobrowseInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversation cobrowse internal server error response has a 4xx status code
func (o *PostConversationCobrowseInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post conversation cobrowse internal server error response has a 5xx status code
func (o *PostConversationCobrowseInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post conversation cobrowse internal server error response a status code equal to that given
func (o *PostConversationCobrowseInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PostConversationCobrowseInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/cobrowse][%d] postConversationCobrowseInternalServerError  %+v", 500, o.Payload)
}

func (o *PostConversationCobrowseInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/cobrowse][%d] postConversationCobrowseInternalServerError  %+v", 500, o.Payload)
}

func (o *PostConversationCobrowseInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationCobrowseInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationCobrowseServiceUnavailable creates a PostConversationCobrowseServiceUnavailable with default headers values
func NewPostConversationCobrowseServiceUnavailable() *PostConversationCobrowseServiceUnavailable {
	return &PostConversationCobrowseServiceUnavailable{}
}

/*
PostConversationCobrowseServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostConversationCobrowseServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversation cobrowse service unavailable response has a 2xx status code
func (o *PostConversationCobrowseServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversation cobrowse service unavailable response has a 3xx status code
func (o *PostConversationCobrowseServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversation cobrowse service unavailable response has a 4xx status code
func (o *PostConversationCobrowseServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this post conversation cobrowse service unavailable response has a 5xx status code
func (o *PostConversationCobrowseServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this post conversation cobrowse service unavailable response a status code equal to that given
func (o *PostConversationCobrowseServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PostConversationCobrowseServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/cobrowse][%d] postConversationCobrowseServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostConversationCobrowseServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/cobrowse][%d] postConversationCobrowseServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostConversationCobrowseServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationCobrowseServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationCobrowseGatewayTimeout creates a PostConversationCobrowseGatewayTimeout with default headers values
func NewPostConversationCobrowseGatewayTimeout() *PostConversationCobrowseGatewayTimeout {
	return &PostConversationCobrowseGatewayTimeout{}
}

/*
PostConversationCobrowseGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PostConversationCobrowseGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversation cobrowse gateway timeout response has a 2xx status code
func (o *PostConversationCobrowseGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversation cobrowse gateway timeout response has a 3xx status code
func (o *PostConversationCobrowseGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversation cobrowse gateway timeout response has a 4xx status code
func (o *PostConversationCobrowseGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this post conversation cobrowse gateway timeout response has a 5xx status code
func (o *PostConversationCobrowseGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this post conversation cobrowse gateway timeout response a status code equal to that given
func (o *PostConversationCobrowseGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PostConversationCobrowseGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/cobrowse][%d] postConversationCobrowseGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostConversationCobrowseGatewayTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/cobrowse][%d] postConversationCobrowseGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostConversationCobrowseGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationCobrowseGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

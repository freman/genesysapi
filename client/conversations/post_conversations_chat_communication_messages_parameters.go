// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// NewPostConversationsChatCommunicationMessagesParams creates a new PostConversationsChatCommunicationMessagesParams object
// with the default values initialized.
func NewPostConversationsChatCommunicationMessagesParams() *PostConversationsChatCommunicationMessagesParams {
	var ()
	return &PostConversationsChatCommunicationMessagesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostConversationsChatCommunicationMessagesParamsWithTimeout creates a new PostConversationsChatCommunicationMessagesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostConversationsChatCommunicationMessagesParamsWithTimeout(timeout time.Duration) *PostConversationsChatCommunicationMessagesParams {
	var ()
	return &PostConversationsChatCommunicationMessagesParams{

		timeout: timeout,
	}
}

// NewPostConversationsChatCommunicationMessagesParamsWithContext creates a new PostConversationsChatCommunicationMessagesParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostConversationsChatCommunicationMessagesParamsWithContext(ctx context.Context) *PostConversationsChatCommunicationMessagesParams {
	var ()
	return &PostConversationsChatCommunicationMessagesParams{

		Context: ctx,
	}
}

// NewPostConversationsChatCommunicationMessagesParamsWithHTTPClient creates a new PostConversationsChatCommunicationMessagesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostConversationsChatCommunicationMessagesParamsWithHTTPClient(client *http.Client) *PostConversationsChatCommunicationMessagesParams {
	var ()
	return &PostConversationsChatCommunicationMessagesParams{
		HTTPClient: client,
	}
}

/*PostConversationsChatCommunicationMessagesParams contains all the parameters to send to the API endpoint
for the post conversations chat communication messages operation typically these are written to a http.Request
*/
type PostConversationsChatCommunicationMessagesParams struct {

	/*Body
	  Message

	*/
	Body *models.CreateWebChatMessageRequest
	/*CommunicationID
	  communicationId

	*/
	CommunicationID string
	/*ConversationID
	  conversationId

	*/
	ConversationID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post conversations chat communication messages params
func (o *PostConversationsChatCommunicationMessagesParams) WithTimeout(timeout time.Duration) *PostConversationsChatCommunicationMessagesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post conversations chat communication messages params
func (o *PostConversationsChatCommunicationMessagesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post conversations chat communication messages params
func (o *PostConversationsChatCommunicationMessagesParams) WithContext(ctx context.Context) *PostConversationsChatCommunicationMessagesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post conversations chat communication messages params
func (o *PostConversationsChatCommunicationMessagesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post conversations chat communication messages params
func (o *PostConversationsChatCommunicationMessagesParams) WithHTTPClient(client *http.Client) *PostConversationsChatCommunicationMessagesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post conversations chat communication messages params
func (o *PostConversationsChatCommunicationMessagesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the post conversations chat communication messages params
func (o *PostConversationsChatCommunicationMessagesParams) WithBody(body *models.CreateWebChatMessageRequest) *PostConversationsChatCommunicationMessagesParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the post conversations chat communication messages params
func (o *PostConversationsChatCommunicationMessagesParams) SetBody(body *models.CreateWebChatMessageRequest) {
	o.Body = body
}

// WithCommunicationID adds the communicationID to the post conversations chat communication messages params
func (o *PostConversationsChatCommunicationMessagesParams) WithCommunicationID(communicationID string) *PostConversationsChatCommunicationMessagesParams {
	o.SetCommunicationID(communicationID)
	return o
}

// SetCommunicationID adds the communicationId to the post conversations chat communication messages params
func (o *PostConversationsChatCommunicationMessagesParams) SetCommunicationID(communicationID string) {
	o.CommunicationID = communicationID
}

// WithConversationID adds the conversationID to the post conversations chat communication messages params
func (o *PostConversationsChatCommunicationMessagesParams) WithConversationID(conversationID string) *PostConversationsChatCommunicationMessagesParams {
	o.SetConversationID(conversationID)
	return o
}

// SetConversationID adds the conversationId to the post conversations chat communication messages params
func (o *PostConversationsChatCommunicationMessagesParams) SetConversationID(conversationID string) {
	o.ConversationID = conversationID
}

// WriteToRequest writes these params to a swagger request
func (o *PostConversationsChatCommunicationMessagesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param communicationId
	if err := r.SetPathParam("communicationId", o.CommunicationID); err != nil {
		return err
	}

	// path param conversationId
	if err := r.SetPathParam("conversationId", o.ConversationID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

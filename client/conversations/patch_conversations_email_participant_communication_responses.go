// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchConversationsEmailParticipantCommunicationReader is a Reader for the PatchConversationsEmailParticipantCommunication structure.
type PatchConversationsEmailParticipantCommunicationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchConversationsEmailParticipantCommunicationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchConversationsEmailParticipantCommunicationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchConversationsEmailParticipantCommunicationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchConversationsEmailParticipantCommunicationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchConversationsEmailParticipantCommunicationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchConversationsEmailParticipantCommunicationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchConversationsEmailParticipantCommunicationRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchConversationsEmailParticipantCommunicationRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchConversationsEmailParticipantCommunicationUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchConversationsEmailParticipantCommunicationTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchConversationsEmailParticipantCommunicationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchConversationsEmailParticipantCommunicationServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchConversationsEmailParticipantCommunicationGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchConversationsEmailParticipantCommunicationOK creates a PatchConversationsEmailParticipantCommunicationOK with default headers values
func NewPatchConversationsEmailParticipantCommunicationOK() *PatchConversationsEmailParticipantCommunicationOK {
	return &PatchConversationsEmailParticipantCommunicationOK{}
}

/*
PatchConversationsEmailParticipantCommunicationOK describes a response with status code 200, with default header values.

successful operation
*/
type PatchConversationsEmailParticipantCommunicationOK struct {
	Payload models.Empty
}

// IsSuccess returns true when this patch conversations email participant communication o k response has a 2xx status code
func (o *PatchConversationsEmailParticipantCommunicationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch conversations email participant communication o k response has a 3xx status code
func (o *PatchConversationsEmailParticipantCommunicationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations email participant communication o k response has a 4xx status code
func (o *PatchConversationsEmailParticipantCommunicationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations email participant communication o k response has a 5xx status code
func (o *PatchConversationsEmailParticipantCommunicationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations email participant communication o k response a status code equal to that given
func (o *PatchConversationsEmailParticipantCommunicationOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchConversationsEmailParticipantCommunicationOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsEmailParticipantCommunicationOK  %+v", 200, o.Payload)
}

func (o *PatchConversationsEmailParticipantCommunicationOK) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsEmailParticipantCommunicationOK  %+v", 200, o.Payload)
}

func (o *PatchConversationsEmailParticipantCommunicationOK) GetPayload() models.Empty {
	return o.Payload
}

func (o *PatchConversationsEmailParticipantCommunicationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsEmailParticipantCommunicationBadRequest creates a PatchConversationsEmailParticipantCommunicationBadRequest with default headers values
func NewPatchConversationsEmailParticipantCommunicationBadRequest() *PatchConversationsEmailParticipantCommunicationBadRequest {
	return &PatchConversationsEmailParticipantCommunicationBadRequest{}
}

/*
PatchConversationsEmailParticipantCommunicationBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchConversationsEmailParticipantCommunicationBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations email participant communication bad request response has a 2xx status code
func (o *PatchConversationsEmailParticipantCommunicationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations email participant communication bad request response has a 3xx status code
func (o *PatchConversationsEmailParticipantCommunicationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations email participant communication bad request response has a 4xx status code
func (o *PatchConversationsEmailParticipantCommunicationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations email participant communication bad request response has a 5xx status code
func (o *PatchConversationsEmailParticipantCommunicationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations email participant communication bad request response a status code equal to that given
func (o *PatchConversationsEmailParticipantCommunicationBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchConversationsEmailParticipantCommunicationBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsEmailParticipantCommunicationBadRequest  %+v", 400, o.Payload)
}

func (o *PatchConversationsEmailParticipantCommunicationBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsEmailParticipantCommunicationBadRequest  %+v", 400, o.Payload)
}

func (o *PatchConversationsEmailParticipantCommunicationBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsEmailParticipantCommunicationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsEmailParticipantCommunicationUnauthorized creates a PatchConversationsEmailParticipantCommunicationUnauthorized with default headers values
func NewPatchConversationsEmailParticipantCommunicationUnauthorized() *PatchConversationsEmailParticipantCommunicationUnauthorized {
	return &PatchConversationsEmailParticipantCommunicationUnauthorized{}
}

/*
PatchConversationsEmailParticipantCommunicationUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchConversationsEmailParticipantCommunicationUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations email participant communication unauthorized response has a 2xx status code
func (o *PatchConversationsEmailParticipantCommunicationUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations email participant communication unauthorized response has a 3xx status code
func (o *PatchConversationsEmailParticipantCommunicationUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations email participant communication unauthorized response has a 4xx status code
func (o *PatchConversationsEmailParticipantCommunicationUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations email participant communication unauthorized response has a 5xx status code
func (o *PatchConversationsEmailParticipantCommunicationUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations email participant communication unauthorized response a status code equal to that given
func (o *PatchConversationsEmailParticipantCommunicationUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchConversationsEmailParticipantCommunicationUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsEmailParticipantCommunicationUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConversationsEmailParticipantCommunicationUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsEmailParticipantCommunicationUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConversationsEmailParticipantCommunicationUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsEmailParticipantCommunicationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsEmailParticipantCommunicationForbidden creates a PatchConversationsEmailParticipantCommunicationForbidden with default headers values
func NewPatchConversationsEmailParticipantCommunicationForbidden() *PatchConversationsEmailParticipantCommunicationForbidden {
	return &PatchConversationsEmailParticipantCommunicationForbidden{}
}

/*
PatchConversationsEmailParticipantCommunicationForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PatchConversationsEmailParticipantCommunicationForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations email participant communication forbidden response has a 2xx status code
func (o *PatchConversationsEmailParticipantCommunicationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations email participant communication forbidden response has a 3xx status code
func (o *PatchConversationsEmailParticipantCommunicationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations email participant communication forbidden response has a 4xx status code
func (o *PatchConversationsEmailParticipantCommunicationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations email participant communication forbidden response has a 5xx status code
func (o *PatchConversationsEmailParticipantCommunicationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations email participant communication forbidden response a status code equal to that given
func (o *PatchConversationsEmailParticipantCommunicationForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchConversationsEmailParticipantCommunicationForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsEmailParticipantCommunicationForbidden  %+v", 403, o.Payload)
}

func (o *PatchConversationsEmailParticipantCommunicationForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsEmailParticipantCommunicationForbidden  %+v", 403, o.Payload)
}

func (o *PatchConversationsEmailParticipantCommunicationForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsEmailParticipantCommunicationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsEmailParticipantCommunicationNotFound creates a PatchConversationsEmailParticipantCommunicationNotFound with default headers values
func NewPatchConversationsEmailParticipantCommunicationNotFound() *PatchConversationsEmailParticipantCommunicationNotFound {
	return &PatchConversationsEmailParticipantCommunicationNotFound{}
}

/*
PatchConversationsEmailParticipantCommunicationNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PatchConversationsEmailParticipantCommunicationNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations email participant communication not found response has a 2xx status code
func (o *PatchConversationsEmailParticipantCommunicationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations email participant communication not found response has a 3xx status code
func (o *PatchConversationsEmailParticipantCommunicationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations email participant communication not found response has a 4xx status code
func (o *PatchConversationsEmailParticipantCommunicationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations email participant communication not found response has a 5xx status code
func (o *PatchConversationsEmailParticipantCommunicationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations email participant communication not found response a status code equal to that given
func (o *PatchConversationsEmailParticipantCommunicationNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchConversationsEmailParticipantCommunicationNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsEmailParticipantCommunicationNotFound  %+v", 404, o.Payload)
}

func (o *PatchConversationsEmailParticipantCommunicationNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsEmailParticipantCommunicationNotFound  %+v", 404, o.Payload)
}

func (o *PatchConversationsEmailParticipantCommunicationNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsEmailParticipantCommunicationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsEmailParticipantCommunicationRequestTimeout creates a PatchConversationsEmailParticipantCommunicationRequestTimeout with default headers values
func NewPatchConversationsEmailParticipantCommunicationRequestTimeout() *PatchConversationsEmailParticipantCommunicationRequestTimeout {
	return &PatchConversationsEmailParticipantCommunicationRequestTimeout{}
}

/*
PatchConversationsEmailParticipantCommunicationRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchConversationsEmailParticipantCommunicationRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations email participant communication request timeout response has a 2xx status code
func (o *PatchConversationsEmailParticipantCommunicationRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations email participant communication request timeout response has a 3xx status code
func (o *PatchConversationsEmailParticipantCommunicationRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations email participant communication request timeout response has a 4xx status code
func (o *PatchConversationsEmailParticipantCommunicationRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations email participant communication request timeout response has a 5xx status code
func (o *PatchConversationsEmailParticipantCommunicationRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations email participant communication request timeout response a status code equal to that given
func (o *PatchConversationsEmailParticipantCommunicationRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PatchConversationsEmailParticipantCommunicationRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsEmailParticipantCommunicationRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchConversationsEmailParticipantCommunicationRequestTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsEmailParticipantCommunicationRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchConversationsEmailParticipantCommunicationRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsEmailParticipantCommunicationRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsEmailParticipantCommunicationRequestEntityTooLarge creates a PatchConversationsEmailParticipantCommunicationRequestEntityTooLarge with default headers values
func NewPatchConversationsEmailParticipantCommunicationRequestEntityTooLarge() *PatchConversationsEmailParticipantCommunicationRequestEntityTooLarge {
	return &PatchConversationsEmailParticipantCommunicationRequestEntityTooLarge{}
}

/*
PatchConversationsEmailParticipantCommunicationRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PatchConversationsEmailParticipantCommunicationRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations email participant communication request entity too large response has a 2xx status code
func (o *PatchConversationsEmailParticipantCommunicationRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations email participant communication request entity too large response has a 3xx status code
func (o *PatchConversationsEmailParticipantCommunicationRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations email participant communication request entity too large response has a 4xx status code
func (o *PatchConversationsEmailParticipantCommunicationRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations email participant communication request entity too large response has a 5xx status code
func (o *PatchConversationsEmailParticipantCommunicationRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations email participant communication request entity too large response a status code equal to that given
func (o *PatchConversationsEmailParticipantCommunicationRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PatchConversationsEmailParticipantCommunicationRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsEmailParticipantCommunicationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchConversationsEmailParticipantCommunicationRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsEmailParticipantCommunicationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchConversationsEmailParticipantCommunicationRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsEmailParticipantCommunicationRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsEmailParticipantCommunicationUnsupportedMediaType creates a PatchConversationsEmailParticipantCommunicationUnsupportedMediaType with default headers values
func NewPatchConversationsEmailParticipantCommunicationUnsupportedMediaType() *PatchConversationsEmailParticipantCommunicationUnsupportedMediaType {
	return &PatchConversationsEmailParticipantCommunicationUnsupportedMediaType{}
}

/*
PatchConversationsEmailParticipantCommunicationUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchConversationsEmailParticipantCommunicationUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations email participant communication unsupported media type response has a 2xx status code
func (o *PatchConversationsEmailParticipantCommunicationUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations email participant communication unsupported media type response has a 3xx status code
func (o *PatchConversationsEmailParticipantCommunicationUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations email participant communication unsupported media type response has a 4xx status code
func (o *PatchConversationsEmailParticipantCommunicationUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations email participant communication unsupported media type response has a 5xx status code
func (o *PatchConversationsEmailParticipantCommunicationUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations email participant communication unsupported media type response a status code equal to that given
func (o *PatchConversationsEmailParticipantCommunicationUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PatchConversationsEmailParticipantCommunicationUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsEmailParticipantCommunicationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchConversationsEmailParticipantCommunicationUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsEmailParticipantCommunicationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchConversationsEmailParticipantCommunicationUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsEmailParticipantCommunicationUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsEmailParticipantCommunicationTooManyRequests creates a PatchConversationsEmailParticipantCommunicationTooManyRequests with default headers values
func NewPatchConversationsEmailParticipantCommunicationTooManyRequests() *PatchConversationsEmailParticipantCommunicationTooManyRequests {
	return &PatchConversationsEmailParticipantCommunicationTooManyRequests{}
}

/*
PatchConversationsEmailParticipantCommunicationTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchConversationsEmailParticipantCommunicationTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations email participant communication too many requests response has a 2xx status code
func (o *PatchConversationsEmailParticipantCommunicationTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations email participant communication too many requests response has a 3xx status code
func (o *PatchConversationsEmailParticipantCommunicationTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations email participant communication too many requests response has a 4xx status code
func (o *PatchConversationsEmailParticipantCommunicationTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations email participant communication too many requests response has a 5xx status code
func (o *PatchConversationsEmailParticipantCommunicationTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations email participant communication too many requests response a status code equal to that given
func (o *PatchConversationsEmailParticipantCommunicationTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchConversationsEmailParticipantCommunicationTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsEmailParticipantCommunicationTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConversationsEmailParticipantCommunicationTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsEmailParticipantCommunicationTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConversationsEmailParticipantCommunicationTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsEmailParticipantCommunicationTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsEmailParticipantCommunicationInternalServerError creates a PatchConversationsEmailParticipantCommunicationInternalServerError with default headers values
func NewPatchConversationsEmailParticipantCommunicationInternalServerError() *PatchConversationsEmailParticipantCommunicationInternalServerError {
	return &PatchConversationsEmailParticipantCommunicationInternalServerError{}
}

/*
PatchConversationsEmailParticipantCommunicationInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchConversationsEmailParticipantCommunicationInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations email participant communication internal server error response has a 2xx status code
func (o *PatchConversationsEmailParticipantCommunicationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations email participant communication internal server error response has a 3xx status code
func (o *PatchConversationsEmailParticipantCommunicationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations email participant communication internal server error response has a 4xx status code
func (o *PatchConversationsEmailParticipantCommunicationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations email participant communication internal server error response has a 5xx status code
func (o *PatchConversationsEmailParticipantCommunicationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations email participant communication internal server error response a status code equal to that given
func (o *PatchConversationsEmailParticipantCommunicationInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchConversationsEmailParticipantCommunicationInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsEmailParticipantCommunicationInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchConversationsEmailParticipantCommunicationInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsEmailParticipantCommunicationInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchConversationsEmailParticipantCommunicationInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsEmailParticipantCommunicationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsEmailParticipantCommunicationServiceUnavailable creates a PatchConversationsEmailParticipantCommunicationServiceUnavailable with default headers values
func NewPatchConversationsEmailParticipantCommunicationServiceUnavailable() *PatchConversationsEmailParticipantCommunicationServiceUnavailable {
	return &PatchConversationsEmailParticipantCommunicationServiceUnavailable{}
}

/*
PatchConversationsEmailParticipantCommunicationServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchConversationsEmailParticipantCommunicationServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations email participant communication service unavailable response has a 2xx status code
func (o *PatchConversationsEmailParticipantCommunicationServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations email participant communication service unavailable response has a 3xx status code
func (o *PatchConversationsEmailParticipantCommunicationServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations email participant communication service unavailable response has a 4xx status code
func (o *PatchConversationsEmailParticipantCommunicationServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations email participant communication service unavailable response has a 5xx status code
func (o *PatchConversationsEmailParticipantCommunicationServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations email participant communication service unavailable response a status code equal to that given
func (o *PatchConversationsEmailParticipantCommunicationServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PatchConversationsEmailParticipantCommunicationServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsEmailParticipantCommunicationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchConversationsEmailParticipantCommunicationServiceUnavailable) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsEmailParticipantCommunicationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchConversationsEmailParticipantCommunicationServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsEmailParticipantCommunicationServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsEmailParticipantCommunicationGatewayTimeout creates a PatchConversationsEmailParticipantCommunicationGatewayTimeout with default headers values
func NewPatchConversationsEmailParticipantCommunicationGatewayTimeout() *PatchConversationsEmailParticipantCommunicationGatewayTimeout {
	return &PatchConversationsEmailParticipantCommunicationGatewayTimeout{}
}

/*
PatchConversationsEmailParticipantCommunicationGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PatchConversationsEmailParticipantCommunicationGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations email participant communication gateway timeout response has a 2xx status code
func (o *PatchConversationsEmailParticipantCommunicationGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations email participant communication gateway timeout response has a 3xx status code
func (o *PatchConversationsEmailParticipantCommunicationGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations email participant communication gateway timeout response has a 4xx status code
func (o *PatchConversationsEmailParticipantCommunicationGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations email participant communication gateway timeout response has a 5xx status code
func (o *PatchConversationsEmailParticipantCommunicationGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations email participant communication gateway timeout response a status code equal to that given
func (o *PatchConversationsEmailParticipantCommunicationGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PatchConversationsEmailParticipantCommunicationGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsEmailParticipantCommunicationGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchConversationsEmailParticipantCommunicationGatewayTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsEmailParticipantCommunicationGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchConversationsEmailParticipantCommunicationGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsEmailParticipantCommunicationGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutConversationsChatRecordingstateReader is a Reader for the PutConversationsChatRecordingstate structure.
type PutConversationsChatRecordingstateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutConversationsChatRecordingstateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutConversationsChatRecordingstateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewPutConversationsChatRecordingstateAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutConversationsChatRecordingstateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutConversationsChatRecordingstateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutConversationsChatRecordingstateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutConversationsChatRecordingstateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPutConversationsChatRecordingstateRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutConversationsChatRecordingstateRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutConversationsChatRecordingstateUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutConversationsChatRecordingstateTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutConversationsChatRecordingstateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutConversationsChatRecordingstateServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutConversationsChatRecordingstateGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutConversationsChatRecordingstateOK creates a PutConversationsChatRecordingstateOK with default headers values
func NewPutConversationsChatRecordingstateOK() *PutConversationsChatRecordingstateOK {
	return &PutConversationsChatRecordingstateOK{}
}

/*PutConversationsChatRecordingstateOK handles this case with default header values.

successful operation
*/
type PutConversationsChatRecordingstateOK struct {
	Payload string
}

func (o *PutConversationsChatRecordingstateOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/chats/{conversationId}/recordingstate][%d] putConversationsChatRecordingstateOK  %+v", 200, o.Payload)
}

func (o *PutConversationsChatRecordingstateOK) GetPayload() string {
	return o.Payload
}

func (o *PutConversationsChatRecordingstateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsChatRecordingstateAccepted creates a PutConversationsChatRecordingstateAccepted with default headers values
func NewPutConversationsChatRecordingstateAccepted() *PutConversationsChatRecordingstateAccepted {
	return &PutConversationsChatRecordingstateAccepted{}
}

/*PutConversationsChatRecordingstateAccepted handles this case with default header values.

Accepted - when pausing or resuming recordings (Secure Pause)
*/
type PutConversationsChatRecordingstateAccepted struct {
	Payload string
}

func (o *PutConversationsChatRecordingstateAccepted) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/chats/{conversationId}/recordingstate][%d] putConversationsChatRecordingstateAccepted  %+v", 202, o.Payload)
}

func (o *PutConversationsChatRecordingstateAccepted) GetPayload() string {
	return o.Payload
}

func (o *PutConversationsChatRecordingstateAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsChatRecordingstateBadRequest creates a PutConversationsChatRecordingstateBadRequest with default headers values
func NewPutConversationsChatRecordingstateBadRequest() *PutConversationsChatRecordingstateBadRequest {
	return &PutConversationsChatRecordingstateBadRequest{}
}

/*PutConversationsChatRecordingstateBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutConversationsChatRecordingstateBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PutConversationsChatRecordingstateBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/chats/{conversationId}/recordingstate][%d] putConversationsChatRecordingstateBadRequest  %+v", 400, o.Payload)
}

func (o *PutConversationsChatRecordingstateBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsChatRecordingstateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsChatRecordingstateUnauthorized creates a PutConversationsChatRecordingstateUnauthorized with default headers values
func NewPutConversationsChatRecordingstateUnauthorized() *PutConversationsChatRecordingstateUnauthorized {
	return &PutConversationsChatRecordingstateUnauthorized{}
}

/*PutConversationsChatRecordingstateUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PutConversationsChatRecordingstateUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PutConversationsChatRecordingstateUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/chats/{conversationId}/recordingstate][%d] putConversationsChatRecordingstateUnauthorized  %+v", 401, o.Payload)
}

func (o *PutConversationsChatRecordingstateUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsChatRecordingstateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsChatRecordingstateForbidden creates a PutConversationsChatRecordingstateForbidden with default headers values
func NewPutConversationsChatRecordingstateForbidden() *PutConversationsChatRecordingstateForbidden {
	return &PutConversationsChatRecordingstateForbidden{}
}

/*PutConversationsChatRecordingstateForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PutConversationsChatRecordingstateForbidden struct {
	Payload *models.ErrorBody
}

func (o *PutConversationsChatRecordingstateForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/chats/{conversationId}/recordingstate][%d] putConversationsChatRecordingstateForbidden  %+v", 403, o.Payload)
}

func (o *PutConversationsChatRecordingstateForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsChatRecordingstateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsChatRecordingstateNotFound creates a PutConversationsChatRecordingstateNotFound with default headers values
func NewPutConversationsChatRecordingstateNotFound() *PutConversationsChatRecordingstateNotFound {
	return &PutConversationsChatRecordingstateNotFound{}
}

/*PutConversationsChatRecordingstateNotFound handles this case with default header values.

The requested resource was not found.
*/
type PutConversationsChatRecordingstateNotFound struct {
	Payload *models.ErrorBody
}

func (o *PutConversationsChatRecordingstateNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/chats/{conversationId}/recordingstate][%d] putConversationsChatRecordingstateNotFound  %+v", 404, o.Payload)
}

func (o *PutConversationsChatRecordingstateNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsChatRecordingstateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsChatRecordingstateRequestTimeout creates a PutConversationsChatRecordingstateRequestTimeout with default headers values
func NewPutConversationsChatRecordingstateRequestTimeout() *PutConversationsChatRecordingstateRequestTimeout {
	return &PutConversationsChatRecordingstateRequestTimeout{}
}

/*PutConversationsChatRecordingstateRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PutConversationsChatRecordingstateRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutConversationsChatRecordingstateRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/chats/{conversationId}/recordingstate][%d] putConversationsChatRecordingstateRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutConversationsChatRecordingstateRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsChatRecordingstateRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsChatRecordingstateRequestEntityTooLarge creates a PutConversationsChatRecordingstateRequestEntityTooLarge with default headers values
func NewPutConversationsChatRecordingstateRequestEntityTooLarge() *PutConversationsChatRecordingstateRequestEntityTooLarge {
	return &PutConversationsChatRecordingstateRequestEntityTooLarge{}
}

/*PutConversationsChatRecordingstateRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PutConversationsChatRecordingstateRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PutConversationsChatRecordingstateRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/chats/{conversationId}/recordingstate][%d] putConversationsChatRecordingstateRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutConversationsChatRecordingstateRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsChatRecordingstateRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsChatRecordingstateUnsupportedMediaType creates a PutConversationsChatRecordingstateUnsupportedMediaType with default headers values
func NewPutConversationsChatRecordingstateUnsupportedMediaType() *PutConversationsChatRecordingstateUnsupportedMediaType {
	return &PutConversationsChatRecordingstateUnsupportedMediaType{}
}

/*PutConversationsChatRecordingstateUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutConversationsChatRecordingstateUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PutConversationsChatRecordingstateUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/chats/{conversationId}/recordingstate][%d] putConversationsChatRecordingstateUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutConversationsChatRecordingstateUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsChatRecordingstateUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsChatRecordingstateTooManyRequests creates a PutConversationsChatRecordingstateTooManyRequests with default headers values
func NewPutConversationsChatRecordingstateTooManyRequests() *PutConversationsChatRecordingstateTooManyRequests {
	return &PutConversationsChatRecordingstateTooManyRequests{}
}

/*PutConversationsChatRecordingstateTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PutConversationsChatRecordingstateTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PutConversationsChatRecordingstateTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/chats/{conversationId}/recordingstate][%d] putConversationsChatRecordingstateTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutConversationsChatRecordingstateTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsChatRecordingstateTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsChatRecordingstateInternalServerError creates a PutConversationsChatRecordingstateInternalServerError with default headers values
func NewPutConversationsChatRecordingstateInternalServerError() *PutConversationsChatRecordingstateInternalServerError {
	return &PutConversationsChatRecordingstateInternalServerError{}
}

/*PutConversationsChatRecordingstateInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutConversationsChatRecordingstateInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PutConversationsChatRecordingstateInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/chats/{conversationId}/recordingstate][%d] putConversationsChatRecordingstateInternalServerError  %+v", 500, o.Payload)
}

func (o *PutConversationsChatRecordingstateInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsChatRecordingstateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsChatRecordingstateServiceUnavailable creates a PutConversationsChatRecordingstateServiceUnavailable with default headers values
func NewPutConversationsChatRecordingstateServiceUnavailable() *PutConversationsChatRecordingstateServiceUnavailable {
	return &PutConversationsChatRecordingstateServiceUnavailable{}
}

/*PutConversationsChatRecordingstateServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutConversationsChatRecordingstateServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PutConversationsChatRecordingstateServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/chats/{conversationId}/recordingstate][%d] putConversationsChatRecordingstateServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutConversationsChatRecordingstateServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsChatRecordingstateServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsChatRecordingstateGatewayTimeout creates a PutConversationsChatRecordingstateGatewayTimeout with default headers values
func NewPutConversationsChatRecordingstateGatewayTimeout() *PutConversationsChatRecordingstateGatewayTimeout {
	return &PutConversationsChatRecordingstateGatewayTimeout{}
}

/*PutConversationsChatRecordingstateGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PutConversationsChatRecordingstateGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutConversationsChatRecordingstateGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/chats/{conversationId}/recordingstate][%d] putConversationsChatRecordingstateGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutConversationsChatRecordingstateGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsChatRecordingstateGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

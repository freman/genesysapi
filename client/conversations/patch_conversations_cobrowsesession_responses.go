// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchConversationsCobrowsesessionReader is a Reader for the PatchConversationsCobrowsesession structure.
type PatchConversationsCobrowsesessionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchConversationsCobrowsesessionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchConversationsCobrowsesessionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchConversationsCobrowsesessionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchConversationsCobrowsesessionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchConversationsCobrowsesessionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchConversationsCobrowsesessionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchConversationsCobrowsesessionRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchConversationsCobrowsesessionUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchConversationsCobrowsesessionTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchConversationsCobrowsesessionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchConversationsCobrowsesessionServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchConversationsCobrowsesessionGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchConversationsCobrowsesessionOK creates a PatchConversationsCobrowsesessionOK with default headers values
func NewPatchConversationsCobrowsesessionOK() *PatchConversationsCobrowsesessionOK {
	return &PatchConversationsCobrowsesessionOK{}
}

/*PatchConversationsCobrowsesessionOK handles this case with default header values.

successful operation
*/
type PatchConversationsCobrowsesessionOK struct {
	Payload *models.Conversation
}

func (o *PatchConversationsCobrowsesessionOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}][%d] patchConversationsCobrowsesessionOK  %+v", 200, o.Payload)
}

func (o *PatchConversationsCobrowsesessionOK) GetPayload() *models.Conversation {
	return o.Payload
}

func (o *PatchConversationsCobrowsesessionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Conversation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCobrowsesessionBadRequest creates a PatchConversationsCobrowsesessionBadRequest with default headers values
func NewPatchConversationsCobrowsesessionBadRequest() *PatchConversationsCobrowsesessionBadRequest {
	return &PatchConversationsCobrowsesessionBadRequest{}
}

/*PatchConversationsCobrowsesessionBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchConversationsCobrowsesessionBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsCobrowsesessionBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}][%d] patchConversationsCobrowsesessionBadRequest  %+v", 400, o.Payload)
}

func (o *PatchConversationsCobrowsesessionBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCobrowsesessionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCobrowsesessionUnauthorized creates a PatchConversationsCobrowsesessionUnauthorized with default headers values
func NewPatchConversationsCobrowsesessionUnauthorized() *PatchConversationsCobrowsesessionUnauthorized {
	return &PatchConversationsCobrowsesessionUnauthorized{}
}

/*PatchConversationsCobrowsesessionUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchConversationsCobrowsesessionUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsCobrowsesessionUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}][%d] patchConversationsCobrowsesessionUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConversationsCobrowsesessionUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCobrowsesessionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCobrowsesessionForbidden creates a PatchConversationsCobrowsesessionForbidden with default headers values
func NewPatchConversationsCobrowsesessionForbidden() *PatchConversationsCobrowsesessionForbidden {
	return &PatchConversationsCobrowsesessionForbidden{}
}

/*PatchConversationsCobrowsesessionForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PatchConversationsCobrowsesessionForbidden struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsCobrowsesessionForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}][%d] patchConversationsCobrowsesessionForbidden  %+v", 403, o.Payload)
}

func (o *PatchConversationsCobrowsesessionForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCobrowsesessionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCobrowsesessionNotFound creates a PatchConversationsCobrowsesessionNotFound with default headers values
func NewPatchConversationsCobrowsesessionNotFound() *PatchConversationsCobrowsesessionNotFound {
	return &PatchConversationsCobrowsesessionNotFound{}
}

/*PatchConversationsCobrowsesessionNotFound handles this case with default header values.

The requested resource was not found.
*/
type PatchConversationsCobrowsesessionNotFound struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsCobrowsesessionNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}][%d] patchConversationsCobrowsesessionNotFound  %+v", 404, o.Payload)
}

func (o *PatchConversationsCobrowsesessionNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCobrowsesessionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCobrowsesessionRequestEntityTooLarge creates a PatchConversationsCobrowsesessionRequestEntityTooLarge with default headers values
func NewPatchConversationsCobrowsesessionRequestEntityTooLarge() *PatchConversationsCobrowsesessionRequestEntityTooLarge {
	return &PatchConversationsCobrowsesessionRequestEntityTooLarge{}
}

/*PatchConversationsCobrowsesessionRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type PatchConversationsCobrowsesessionRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsCobrowsesessionRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}][%d] patchConversationsCobrowsesessionRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchConversationsCobrowsesessionRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCobrowsesessionRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCobrowsesessionUnsupportedMediaType creates a PatchConversationsCobrowsesessionUnsupportedMediaType with default headers values
func NewPatchConversationsCobrowsesessionUnsupportedMediaType() *PatchConversationsCobrowsesessionUnsupportedMediaType {
	return &PatchConversationsCobrowsesessionUnsupportedMediaType{}
}

/*PatchConversationsCobrowsesessionUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchConversationsCobrowsesessionUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsCobrowsesessionUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}][%d] patchConversationsCobrowsesessionUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchConversationsCobrowsesessionUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCobrowsesessionUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCobrowsesessionTooManyRequests creates a PatchConversationsCobrowsesessionTooManyRequests with default headers values
func NewPatchConversationsCobrowsesessionTooManyRequests() *PatchConversationsCobrowsesessionTooManyRequests {
	return &PatchConversationsCobrowsesessionTooManyRequests{}
}

/*PatchConversationsCobrowsesessionTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum [%s] requests within [%s] seconds
*/
type PatchConversationsCobrowsesessionTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsCobrowsesessionTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}][%d] patchConversationsCobrowsesessionTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConversationsCobrowsesessionTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCobrowsesessionTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCobrowsesessionInternalServerError creates a PatchConversationsCobrowsesessionInternalServerError with default headers values
func NewPatchConversationsCobrowsesessionInternalServerError() *PatchConversationsCobrowsesessionInternalServerError {
	return &PatchConversationsCobrowsesessionInternalServerError{}
}

/*PatchConversationsCobrowsesessionInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchConversationsCobrowsesessionInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsCobrowsesessionInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}][%d] patchConversationsCobrowsesessionInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchConversationsCobrowsesessionInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCobrowsesessionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCobrowsesessionServiceUnavailable creates a PatchConversationsCobrowsesessionServiceUnavailable with default headers values
func NewPatchConversationsCobrowsesessionServiceUnavailable() *PatchConversationsCobrowsesessionServiceUnavailable {
	return &PatchConversationsCobrowsesessionServiceUnavailable{}
}

/*PatchConversationsCobrowsesessionServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchConversationsCobrowsesessionServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsCobrowsesessionServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}][%d] patchConversationsCobrowsesessionServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchConversationsCobrowsesessionServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCobrowsesessionServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCobrowsesessionGatewayTimeout creates a PatchConversationsCobrowsesessionGatewayTimeout with default headers values
func NewPatchConversationsCobrowsesessionGatewayTimeout() *PatchConversationsCobrowsesessionGatewayTimeout {
	return &PatchConversationsCobrowsesessionGatewayTimeout{}
}

/*PatchConversationsCobrowsesessionGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PatchConversationsCobrowsesessionGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsCobrowsesessionGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}][%d] patchConversationsCobrowsesessionGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchConversationsCobrowsesessionGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCobrowsesessionGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

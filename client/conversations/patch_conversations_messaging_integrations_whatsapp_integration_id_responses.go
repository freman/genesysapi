// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchConversationsMessagingIntegrationsWhatsappIntegrationIDReader is a Reader for the PatchConversationsMessagingIntegrationsWhatsappIntegrationID structure.
type PatchConversationsMessagingIntegrationsWhatsappIntegrationIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchConversationsMessagingIntegrationsWhatsappIntegrationIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewPatchConversationsMessagingIntegrationsWhatsappIntegrationIDAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchConversationsMessagingIntegrationsWhatsappIntegrationIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchConversationsMessagingIntegrationsWhatsappIntegrationIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchConversationsMessagingIntegrationsWhatsappIntegrationIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchConversationsMessagingIntegrationsWhatsappIntegrationIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchConversationsMessagingIntegrationsWhatsappIntegrationIDRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchConversationsMessagingIntegrationsWhatsappIntegrationIDRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchConversationsMessagingIntegrationsWhatsappIntegrationIDUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchConversationsMessagingIntegrationsWhatsappIntegrationIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchConversationsMessagingIntegrationsWhatsappIntegrationIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchConversationsMessagingIntegrationsWhatsappIntegrationIDServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchConversationsMessagingIntegrationsWhatsappIntegrationIDGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchConversationsMessagingIntegrationsWhatsappIntegrationIDOK creates a PatchConversationsMessagingIntegrationsWhatsappIntegrationIDOK with default headers values
func NewPatchConversationsMessagingIntegrationsWhatsappIntegrationIDOK() *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDOK {
	return &PatchConversationsMessagingIntegrationsWhatsappIntegrationIDOK{}
}

/*
PatchConversationsMessagingIntegrationsWhatsappIntegrationIDOK describes a response with status code 200, with default header values.

successful operation
*/
type PatchConversationsMessagingIntegrationsWhatsappIntegrationIDOK struct {
	Payload *models.WhatsAppIntegration
}

// IsSuccess returns true when this patch conversations messaging integrations whatsapp integration Id o k response has a 2xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch conversations messaging integrations whatsapp integration Id o k response has a 3xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations messaging integrations whatsapp integration Id o k response has a 4xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations messaging integrations whatsapp integration Id o k response has a 5xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations messaging integrations whatsapp integration Id o k response a status code equal to that given
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/whatsapp/{integrationId}][%d] patchConversationsMessagingIntegrationsWhatsappIntegrationIdOK  %+v", 200, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDOK) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/whatsapp/{integrationId}][%d] patchConversationsMessagingIntegrationsWhatsappIntegrationIdOK  %+v", 200, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDOK) GetPayload() *models.WhatsAppIntegration {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.WhatsAppIntegration)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingIntegrationsWhatsappIntegrationIDAccepted creates a PatchConversationsMessagingIntegrationsWhatsappIntegrationIDAccepted with default headers values
func NewPatchConversationsMessagingIntegrationsWhatsappIntegrationIDAccepted() *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDAccepted {
	return &PatchConversationsMessagingIntegrationsWhatsappIntegrationIDAccepted{}
}

/*
	PatchConversationsMessagingIntegrationsWhatsappIntegrationIDAccepted describes a response with status code 202, with default header values.

	Processing Request - If request was to Activate, do a GET checking for activationStatus set to CodeSent.

If request was to Confirm, do a GET checking for the integration status set to Active
*/
type PatchConversationsMessagingIntegrationsWhatsappIntegrationIDAccepted struct {
	Payload *models.WhatsAppIntegration
}

// IsSuccess returns true when this patch conversations messaging integrations whatsapp integration Id accepted response has a 2xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch conversations messaging integrations whatsapp integration Id accepted response has a 3xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations messaging integrations whatsapp integration Id accepted response has a 4xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations messaging integrations whatsapp integration Id accepted response has a 5xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations messaging integrations whatsapp integration Id accepted response a status code equal to that given
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDAccepted) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/whatsapp/{integrationId}][%d] patchConversationsMessagingIntegrationsWhatsappIntegrationIdAccepted  %+v", 202, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDAccepted) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/whatsapp/{integrationId}][%d] patchConversationsMessagingIntegrationsWhatsappIntegrationIdAccepted  %+v", 202, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDAccepted) GetPayload() *models.WhatsAppIntegration {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.WhatsAppIntegration)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingIntegrationsWhatsappIntegrationIDBadRequest creates a PatchConversationsMessagingIntegrationsWhatsappIntegrationIDBadRequest with default headers values
func NewPatchConversationsMessagingIntegrationsWhatsappIntegrationIDBadRequest() *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDBadRequest {
	return &PatchConversationsMessagingIntegrationsWhatsappIntegrationIDBadRequest{}
}

/*
PatchConversationsMessagingIntegrationsWhatsappIntegrationIDBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchConversationsMessagingIntegrationsWhatsappIntegrationIDBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations messaging integrations whatsapp integration Id bad request response has a 2xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations messaging integrations whatsapp integration Id bad request response has a 3xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations messaging integrations whatsapp integration Id bad request response has a 4xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations messaging integrations whatsapp integration Id bad request response has a 5xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations messaging integrations whatsapp integration Id bad request response a status code equal to that given
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/whatsapp/{integrationId}][%d] patchConversationsMessagingIntegrationsWhatsappIntegrationIdBadRequest  %+v", 400, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/whatsapp/{integrationId}][%d] patchConversationsMessagingIntegrationsWhatsappIntegrationIdBadRequest  %+v", 400, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingIntegrationsWhatsappIntegrationIDUnauthorized creates a PatchConversationsMessagingIntegrationsWhatsappIntegrationIDUnauthorized with default headers values
func NewPatchConversationsMessagingIntegrationsWhatsappIntegrationIDUnauthorized() *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDUnauthorized {
	return &PatchConversationsMessagingIntegrationsWhatsappIntegrationIDUnauthorized{}
}

/*
PatchConversationsMessagingIntegrationsWhatsappIntegrationIDUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchConversationsMessagingIntegrationsWhatsappIntegrationIDUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations messaging integrations whatsapp integration Id unauthorized response has a 2xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations messaging integrations whatsapp integration Id unauthorized response has a 3xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations messaging integrations whatsapp integration Id unauthorized response has a 4xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations messaging integrations whatsapp integration Id unauthorized response has a 5xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations messaging integrations whatsapp integration Id unauthorized response a status code equal to that given
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/whatsapp/{integrationId}][%d] patchConversationsMessagingIntegrationsWhatsappIntegrationIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/whatsapp/{integrationId}][%d] patchConversationsMessagingIntegrationsWhatsappIntegrationIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingIntegrationsWhatsappIntegrationIDForbidden creates a PatchConversationsMessagingIntegrationsWhatsappIntegrationIDForbidden with default headers values
func NewPatchConversationsMessagingIntegrationsWhatsappIntegrationIDForbidden() *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDForbidden {
	return &PatchConversationsMessagingIntegrationsWhatsappIntegrationIDForbidden{}
}

/*
PatchConversationsMessagingIntegrationsWhatsappIntegrationIDForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PatchConversationsMessagingIntegrationsWhatsappIntegrationIDForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations messaging integrations whatsapp integration Id forbidden response has a 2xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations messaging integrations whatsapp integration Id forbidden response has a 3xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations messaging integrations whatsapp integration Id forbidden response has a 4xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations messaging integrations whatsapp integration Id forbidden response has a 5xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations messaging integrations whatsapp integration Id forbidden response a status code equal to that given
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/whatsapp/{integrationId}][%d] patchConversationsMessagingIntegrationsWhatsappIntegrationIdForbidden  %+v", 403, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/whatsapp/{integrationId}][%d] patchConversationsMessagingIntegrationsWhatsappIntegrationIdForbidden  %+v", 403, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingIntegrationsWhatsappIntegrationIDNotFound creates a PatchConversationsMessagingIntegrationsWhatsappIntegrationIDNotFound with default headers values
func NewPatchConversationsMessagingIntegrationsWhatsappIntegrationIDNotFound() *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDNotFound {
	return &PatchConversationsMessagingIntegrationsWhatsappIntegrationIDNotFound{}
}

/*
PatchConversationsMessagingIntegrationsWhatsappIntegrationIDNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PatchConversationsMessagingIntegrationsWhatsappIntegrationIDNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations messaging integrations whatsapp integration Id not found response has a 2xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations messaging integrations whatsapp integration Id not found response has a 3xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations messaging integrations whatsapp integration Id not found response has a 4xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations messaging integrations whatsapp integration Id not found response has a 5xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations messaging integrations whatsapp integration Id not found response a status code equal to that given
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/whatsapp/{integrationId}][%d] patchConversationsMessagingIntegrationsWhatsappIntegrationIdNotFound  %+v", 404, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/whatsapp/{integrationId}][%d] patchConversationsMessagingIntegrationsWhatsappIntegrationIdNotFound  %+v", 404, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingIntegrationsWhatsappIntegrationIDRequestTimeout creates a PatchConversationsMessagingIntegrationsWhatsappIntegrationIDRequestTimeout with default headers values
func NewPatchConversationsMessagingIntegrationsWhatsappIntegrationIDRequestTimeout() *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDRequestTimeout {
	return &PatchConversationsMessagingIntegrationsWhatsappIntegrationIDRequestTimeout{}
}

/*
PatchConversationsMessagingIntegrationsWhatsappIntegrationIDRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchConversationsMessagingIntegrationsWhatsappIntegrationIDRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations messaging integrations whatsapp integration Id request timeout response has a 2xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations messaging integrations whatsapp integration Id request timeout response has a 3xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations messaging integrations whatsapp integration Id request timeout response has a 4xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations messaging integrations whatsapp integration Id request timeout response has a 5xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations messaging integrations whatsapp integration Id request timeout response a status code equal to that given
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/whatsapp/{integrationId}][%d] patchConversationsMessagingIntegrationsWhatsappIntegrationIdRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDRequestTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/whatsapp/{integrationId}][%d] patchConversationsMessagingIntegrationsWhatsappIntegrationIdRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingIntegrationsWhatsappIntegrationIDRequestEntityTooLarge creates a PatchConversationsMessagingIntegrationsWhatsappIntegrationIDRequestEntityTooLarge with default headers values
func NewPatchConversationsMessagingIntegrationsWhatsappIntegrationIDRequestEntityTooLarge() *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDRequestEntityTooLarge {
	return &PatchConversationsMessagingIntegrationsWhatsappIntegrationIDRequestEntityTooLarge{}
}

/*
PatchConversationsMessagingIntegrationsWhatsappIntegrationIDRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PatchConversationsMessagingIntegrationsWhatsappIntegrationIDRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations messaging integrations whatsapp integration Id request entity too large response has a 2xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations messaging integrations whatsapp integration Id request entity too large response has a 3xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations messaging integrations whatsapp integration Id request entity too large response has a 4xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations messaging integrations whatsapp integration Id request entity too large response has a 5xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations messaging integrations whatsapp integration Id request entity too large response a status code equal to that given
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/whatsapp/{integrationId}][%d] patchConversationsMessagingIntegrationsWhatsappIntegrationIdRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/whatsapp/{integrationId}][%d] patchConversationsMessagingIntegrationsWhatsappIntegrationIdRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingIntegrationsWhatsappIntegrationIDUnsupportedMediaType creates a PatchConversationsMessagingIntegrationsWhatsappIntegrationIDUnsupportedMediaType with default headers values
func NewPatchConversationsMessagingIntegrationsWhatsappIntegrationIDUnsupportedMediaType() *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDUnsupportedMediaType {
	return &PatchConversationsMessagingIntegrationsWhatsappIntegrationIDUnsupportedMediaType{}
}

/*
PatchConversationsMessagingIntegrationsWhatsappIntegrationIDUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchConversationsMessagingIntegrationsWhatsappIntegrationIDUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations messaging integrations whatsapp integration Id unsupported media type response has a 2xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations messaging integrations whatsapp integration Id unsupported media type response has a 3xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations messaging integrations whatsapp integration Id unsupported media type response has a 4xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations messaging integrations whatsapp integration Id unsupported media type response has a 5xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations messaging integrations whatsapp integration Id unsupported media type response a status code equal to that given
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/whatsapp/{integrationId}][%d] patchConversationsMessagingIntegrationsWhatsappIntegrationIdUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/whatsapp/{integrationId}][%d] patchConversationsMessagingIntegrationsWhatsappIntegrationIdUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingIntegrationsWhatsappIntegrationIDTooManyRequests creates a PatchConversationsMessagingIntegrationsWhatsappIntegrationIDTooManyRequests with default headers values
func NewPatchConversationsMessagingIntegrationsWhatsappIntegrationIDTooManyRequests() *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDTooManyRequests {
	return &PatchConversationsMessagingIntegrationsWhatsappIntegrationIDTooManyRequests{}
}

/*
PatchConversationsMessagingIntegrationsWhatsappIntegrationIDTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchConversationsMessagingIntegrationsWhatsappIntegrationIDTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations messaging integrations whatsapp integration Id too many requests response has a 2xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations messaging integrations whatsapp integration Id too many requests response has a 3xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations messaging integrations whatsapp integration Id too many requests response has a 4xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations messaging integrations whatsapp integration Id too many requests response has a 5xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations messaging integrations whatsapp integration Id too many requests response a status code equal to that given
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/whatsapp/{integrationId}][%d] patchConversationsMessagingIntegrationsWhatsappIntegrationIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/whatsapp/{integrationId}][%d] patchConversationsMessagingIntegrationsWhatsappIntegrationIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingIntegrationsWhatsappIntegrationIDInternalServerError creates a PatchConversationsMessagingIntegrationsWhatsappIntegrationIDInternalServerError with default headers values
func NewPatchConversationsMessagingIntegrationsWhatsappIntegrationIDInternalServerError() *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDInternalServerError {
	return &PatchConversationsMessagingIntegrationsWhatsappIntegrationIDInternalServerError{}
}

/*
PatchConversationsMessagingIntegrationsWhatsappIntegrationIDInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchConversationsMessagingIntegrationsWhatsappIntegrationIDInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations messaging integrations whatsapp integration Id internal server error response has a 2xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations messaging integrations whatsapp integration Id internal server error response has a 3xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations messaging integrations whatsapp integration Id internal server error response has a 4xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations messaging integrations whatsapp integration Id internal server error response has a 5xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations messaging integrations whatsapp integration Id internal server error response a status code equal to that given
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/whatsapp/{integrationId}][%d] patchConversationsMessagingIntegrationsWhatsappIntegrationIdInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/whatsapp/{integrationId}][%d] patchConversationsMessagingIntegrationsWhatsappIntegrationIdInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingIntegrationsWhatsappIntegrationIDServiceUnavailable creates a PatchConversationsMessagingIntegrationsWhatsappIntegrationIDServiceUnavailable with default headers values
func NewPatchConversationsMessagingIntegrationsWhatsappIntegrationIDServiceUnavailable() *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDServiceUnavailable {
	return &PatchConversationsMessagingIntegrationsWhatsappIntegrationIDServiceUnavailable{}
}

/*
PatchConversationsMessagingIntegrationsWhatsappIntegrationIDServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchConversationsMessagingIntegrationsWhatsappIntegrationIDServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations messaging integrations whatsapp integration Id service unavailable response has a 2xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations messaging integrations whatsapp integration Id service unavailable response has a 3xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations messaging integrations whatsapp integration Id service unavailable response has a 4xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations messaging integrations whatsapp integration Id service unavailable response has a 5xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations messaging integrations whatsapp integration Id service unavailable response a status code equal to that given
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/whatsapp/{integrationId}][%d] patchConversationsMessagingIntegrationsWhatsappIntegrationIdServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDServiceUnavailable) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/whatsapp/{integrationId}][%d] patchConversationsMessagingIntegrationsWhatsappIntegrationIdServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingIntegrationsWhatsappIntegrationIDGatewayTimeout creates a PatchConversationsMessagingIntegrationsWhatsappIntegrationIDGatewayTimeout with default headers values
func NewPatchConversationsMessagingIntegrationsWhatsappIntegrationIDGatewayTimeout() *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDGatewayTimeout {
	return &PatchConversationsMessagingIntegrationsWhatsappIntegrationIDGatewayTimeout{}
}

/*
PatchConversationsMessagingIntegrationsWhatsappIntegrationIDGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PatchConversationsMessagingIntegrationsWhatsappIntegrationIDGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations messaging integrations whatsapp integration Id gateway timeout response has a 2xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations messaging integrations whatsapp integration Id gateway timeout response has a 3xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations messaging integrations whatsapp integration Id gateway timeout response has a 4xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations messaging integrations whatsapp integration Id gateway timeout response has a 5xx status code
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations messaging integrations whatsapp integration Id gateway timeout response a status code equal to that given
func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/whatsapp/{integrationId}][%d] patchConversationsMessagingIntegrationsWhatsappIntegrationIdGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDGatewayTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/whatsapp/{integrationId}][%d] patchConversationsMessagingIntegrationsWhatsappIntegrationIdGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsWhatsappIntegrationIDGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

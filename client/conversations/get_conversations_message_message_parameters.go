// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetConversationsMessageMessageParams creates a new GetConversationsMessageMessageParams object
// with the default values initialized.
func NewGetConversationsMessageMessageParams() *GetConversationsMessageMessageParams {
	var (
		useNormalizedMessageDefault = bool(false)
	)
	return &GetConversationsMessageMessageParams{
		UseNormalizedMessage: &useNormalizedMessageDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetConversationsMessageMessageParamsWithTimeout creates a new GetConversationsMessageMessageParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetConversationsMessageMessageParamsWithTimeout(timeout time.Duration) *GetConversationsMessageMessageParams {
	var (
		useNormalizedMessageDefault = bool(false)
	)
	return &GetConversationsMessageMessageParams{
		UseNormalizedMessage: &useNormalizedMessageDefault,

		timeout: timeout,
	}
}

// NewGetConversationsMessageMessageParamsWithContext creates a new GetConversationsMessageMessageParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetConversationsMessageMessageParamsWithContext(ctx context.Context) *GetConversationsMessageMessageParams {
	var (
		useNormalizedMessageDefault = bool(false)
	)
	return &GetConversationsMessageMessageParams{
		UseNormalizedMessage: &useNormalizedMessageDefault,

		Context: ctx,
	}
}

// NewGetConversationsMessageMessageParamsWithHTTPClient creates a new GetConversationsMessageMessageParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetConversationsMessageMessageParamsWithHTTPClient(client *http.Client) *GetConversationsMessageMessageParams {
	var (
		useNormalizedMessageDefault = bool(false)
	)
	return &GetConversationsMessageMessageParams{
		UseNormalizedMessage: &useNormalizedMessageDefault,
		HTTPClient:           client,
	}
}

/*GetConversationsMessageMessageParams contains all the parameters to send to the API endpoint
for the get conversations message message operation typically these are written to a http.Request
*/
type GetConversationsMessageMessageParams struct {

	/*ConversationID
	  conversationId

	*/
	ConversationID string
	/*MessageID
	  messageId

	*/
	MessageID string
	/*UseNormalizedMessage
	  If true, response removes deprecated fields (textBody, media, stickers)

	*/
	UseNormalizedMessage *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get conversations message message params
func (o *GetConversationsMessageMessageParams) WithTimeout(timeout time.Duration) *GetConversationsMessageMessageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get conversations message message params
func (o *GetConversationsMessageMessageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get conversations message message params
func (o *GetConversationsMessageMessageParams) WithContext(ctx context.Context) *GetConversationsMessageMessageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get conversations message message params
func (o *GetConversationsMessageMessageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get conversations message message params
func (o *GetConversationsMessageMessageParams) WithHTTPClient(client *http.Client) *GetConversationsMessageMessageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get conversations message message params
func (o *GetConversationsMessageMessageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConversationID adds the conversationID to the get conversations message message params
func (o *GetConversationsMessageMessageParams) WithConversationID(conversationID string) *GetConversationsMessageMessageParams {
	o.SetConversationID(conversationID)
	return o
}

// SetConversationID adds the conversationId to the get conversations message message params
func (o *GetConversationsMessageMessageParams) SetConversationID(conversationID string) {
	o.ConversationID = conversationID
}

// WithMessageID adds the messageID to the get conversations message message params
func (o *GetConversationsMessageMessageParams) WithMessageID(messageID string) *GetConversationsMessageMessageParams {
	o.SetMessageID(messageID)
	return o
}

// SetMessageID adds the messageId to the get conversations message message params
func (o *GetConversationsMessageMessageParams) SetMessageID(messageID string) {
	o.MessageID = messageID
}

// WithUseNormalizedMessage adds the useNormalizedMessage to the get conversations message message params
func (o *GetConversationsMessageMessageParams) WithUseNormalizedMessage(useNormalizedMessage *bool) *GetConversationsMessageMessageParams {
	o.SetUseNormalizedMessage(useNormalizedMessage)
	return o
}

// SetUseNormalizedMessage adds the useNormalizedMessage to the get conversations message message params
func (o *GetConversationsMessageMessageParams) SetUseNormalizedMessage(useNormalizedMessage *bool) {
	o.UseNormalizedMessage = useNormalizedMessage
}

// WriteToRequest writes these params to a swagger request
func (o *GetConversationsMessageMessageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param conversationId
	if err := r.SetPathParam("conversationId", o.ConversationID); err != nil {
		return err
	}

	// path param messageId
	if err := r.SetPathParam("messageId", o.MessageID); err != nil {
		return err
	}

	if o.UseNormalizedMessage != nil {

		// query param useNormalizedMessage
		var qrUseNormalizedMessage bool
		if o.UseNormalizedMessage != nil {
			qrUseNormalizedMessage = *o.UseNormalizedMessage
		}
		qUseNormalizedMessage := swag.FormatBool(qrUseNormalizedMessage)
		if qUseNormalizedMessage != "" {
			if err := r.SetQueryParam("useNormalizedMessage", qUseNormalizedMessage); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

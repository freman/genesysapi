// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchConversationsChatParticipantAttributesReader is a Reader for the PatchConversationsChatParticipantAttributes structure.
type PatchConversationsChatParticipantAttributesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchConversationsChatParticipantAttributesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewPatchConversationsChatParticipantAttributesAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchConversationsChatParticipantAttributesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchConversationsChatParticipantAttributesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchConversationsChatParticipantAttributesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchConversationsChatParticipantAttributesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchConversationsChatParticipantAttributesRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchConversationsChatParticipantAttributesRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchConversationsChatParticipantAttributesUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchConversationsChatParticipantAttributesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchConversationsChatParticipantAttributesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchConversationsChatParticipantAttributesServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchConversationsChatParticipantAttributesGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchConversationsChatParticipantAttributesAccepted creates a PatchConversationsChatParticipantAttributesAccepted with default headers values
func NewPatchConversationsChatParticipantAttributesAccepted() *PatchConversationsChatParticipantAttributesAccepted {
	return &PatchConversationsChatParticipantAttributesAccepted{}
}

/*
PatchConversationsChatParticipantAttributesAccepted describes a response with status code 202, with default header values.

Accepted
*/
type PatchConversationsChatParticipantAttributesAccepted struct {
}

// IsSuccess returns true when this patch conversations chat participant attributes accepted response has a 2xx status code
func (o *PatchConversationsChatParticipantAttributesAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch conversations chat participant attributes accepted response has a 3xx status code
func (o *PatchConversationsChatParticipantAttributesAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations chat participant attributes accepted response has a 4xx status code
func (o *PatchConversationsChatParticipantAttributesAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations chat participant attributes accepted response has a 5xx status code
func (o *PatchConversationsChatParticipantAttributesAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations chat participant attributes accepted response a status code equal to that given
func (o *PatchConversationsChatParticipantAttributesAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *PatchConversationsChatParticipantAttributesAccepted) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsChatParticipantAttributesAccepted ", 202)
}

func (o *PatchConversationsChatParticipantAttributesAccepted) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsChatParticipantAttributesAccepted ", 202)
}

func (o *PatchConversationsChatParticipantAttributesAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchConversationsChatParticipantAttributesBadRequest creates a PatchConversationsChatParticipantAttributesBadRequest with default headers values
func NewPatchConversationsChatParticipantAttributesBadRequest() *PatchConversationsChatParticipantAttributesBadRequest {
	return &PatchConversationsChatParticipantAttributesBadRequest{}
}

/*
PatchConversationsChatParticipantAttributesBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchConversationsChatParticipantAttributesBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations chat participant attributes bad request response has a 2xx status code
func (o *PatchConversationsChatParticipantAttributesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations chat participant attributes bad request response has a 3xx status code
func (o *PatchConversationsChatParticipantAttributesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations chat participant attributes bad request response has a 4xx status code
func (o *PatchConversationsChatParticipantAttributesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations chat participant attributes bad request response has a 5xx status code
func (o *PatchConversationsChatParticipantAttributesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations chat participant attributes bad request response a status code equal to that given
func (o *PatchConversationsChatParticipantAttributesBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchConversationsChatParticipantAttributesBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsChatParticipantAttributesBadRequest  %+v", 400, o.Payload)
}

func (o *PatchConversationsChatParticipantAttributesBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsChatParticipantAttributesBadRequest  %+v", 400, o.Payload)
}

func (o *PatchConversationsChatParticipantAttributesBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsChatParticipantAttributesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsChatParticipantAttributesUnauthorized creates a PatchConversationsChatParticipantAttributesUnauthorized with default headers values
func NewPatchConversationsChatParticipantAttributesUnauthorized() *PatchConversationsChatParticipantAttributesUnauthorized {
	return &PatchConversationsChatParticipantAttributesUnauthorized{}
}

/*
PatchConversationsChatParticipantAttributesUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchConversationsChatParticipantAttributesUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations chat participant attributes unauthorized response has a 2xx status code
func (o *PatchConversationsChatParticipantAttributesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations chat participant attributes unauthorized response has a 3xx status code
func (o *PatchConversationsChatParticipantAttributesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations chat participant attributes unauthorized response has a 4xx status code
func (o *PatchConversationsChatParticipantAttributesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations chat participant attributes unauthorized response has a 5xx status code
func (o *PatchConversationsChatParticipantAttributesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations chat participant attributes unauthorized response a status code equal to that given
func (o *PatchConversationsChatParticipantAttributesUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchConversationsChatParticipantAttributesUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsChatParticipantAttributesUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConversationsChatParticipantAttributesUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsChatParticipantAttributesUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConversationsChatParticipantAttributesUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsChatParticipantAttributesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsChatParticipantAttributesForbidden creates a PatchConversationsChatParticipantAttributesForbidden with default headers values
func NewPatchConversationsChatParticipantAttributesForbidden() *PatchConversationsChatParticipantAttributesForbidden {
	return &PatchConversationsChatParticipantAttributesForbidden{}
}

/*
PatchConversationsChatParticipantAttributesForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PatchConversationsChatParticipantAttributesForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations chat participant attributes forbidden response has a 2xx status code
func (o *PatchConversationsChatParticipantAttributesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations chat participant attributes forbidden response has a 3xx status code
func (o *PatchConversationsChatParticipantAttributesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations chat participant attributes forbidden response has a 4xx status code
func (o *PatchConversationsChatParticipantAttributesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations chat participant attributes forbidden response has a 5xx status code
func (o *PatchConversationsChatParticipantAttributesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations chat participant attributes forbidden response a status code equal to that given
func (o *PatchConversationsChatParticipantAttributesForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchConversationsChatParticipantAttributesForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsChatParticipantAttributesForbidden  %+v", 403, o.Payload)
}

func (o *PatchConversationsChatParticipantAttributesForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsChatParticipantAttributesForbidden  %+v", 403, o.Payload)
}

func (o *PatchConversationsChatParticipantAttributesForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsChatParticipantAttributesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsChatParticipantAttributesNotFound creates a PatchConversationsChatParticipantAttributesNotFound with default headers values
func NewPatchConversationsChatParticipantAttributesNotFound() *PatchConversationsChatParticipantAttributesNotFound {
	return &PatchConversationsChatParticipantAttributesNotFound{}
}

/*
PatchConversationsChatParticipantAttributesNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PatchConversationsChatParticipantAttributesNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations chat participant attributes not found response has a 2xx status code
func (o *PatchConversationsChatParticipantAttributesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations chat participant attributes not found response has a 3xx status code
func (o *PatchConversationsChatParticipantAttributesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations chat participant attributes not found response has a 4xx status code
func (o *PatchConversationsChatParticipantAttributesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations chat participant attributes not found response has a 5xx status code
func (o *PatchConversationsChatParticipantAttributesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations chat participant attributes not found response a status code equal to that given
func (o *PatchConversationsChatParticipantAttributesNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchConversationsChatParticipantAttributesNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsChatParticipantAttributesNotFound  %+v", 404, o.Payload)
}

func (o *PatchConversationsChatParticipantAttributesNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsChatParticipantAttributesNotFound  %+v", 404, o.Payload)
}

func (o *PatchConversationsChatParticipantAttributesNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsChatParticipantAttributesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsChatParticipantAttributesRequestTimeout creates a PatchConversationsChatParticipantAttributesRequestTimeout with default headers values
func NewPatchConversationsChatParticipantAttributesRequestTimeout() *PatchConversationsChatParticipantAttributesRequestTimeout {
	return &PatchConversationsChatParticipantAttributesRequestTimeout{}
}

/*
PatchConversationsChatParticipantAttributesRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchConversationsChatParticipantAttributesRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations chat participant attributes request timeout response has a 2xx status code
func (o *PatchConversationsChatParticipantAttributesRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations chat participant attributes request timeout response has a 3xx status code
func (o *PatchConversationsChatParticipantAttributesRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations chat participant attributes request timeout response has a 4xx status code
func (o *PatchConversationsChatParticipantAttributesRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations chat participant attributes request timeout response has a 5xx status code
func (o *PatchConversationsChatParticipantAttributesRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations chat participant attributes request timeout response a status code equal to that given
func (o *PatchConversationsChatParticipantAttributesRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PatchConversationsChatParticipantAttributesRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsChatParticipantAttributesRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchConversationsChatParticipantAttributesRequestTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsChatParticipantAttributesRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchConversationsChatParticipantAttributesRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsChatParticipantAttributesRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsChatParticipantAttributesRequestEntityTooLarge creates a PatchConversationsChatParticipantAttributesRequestEntityTooLarge with default headers values
func NewPatchConversationsChatParticipantAttributesRequestEntityTooLarge() *PatchConversationsChatParticipantAttributesRequestEntityTooLarge {
	return &PatchConversationsChatParticipantAttributesRequestEntityTooLarge{}
}

/*
PatchConversationsChatParticipantAttributesRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PatchConversationsChatParticipantAttributesRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations chat participant attributes request entity too large response has a 2xx status code
func (o *PatchConversationsChatParticipantAttributesRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations chat participant attributes request entity too large response has a 3xx status code
func (o *PatchConversationsChatParticipantAttributesRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations chat participant attributes request entity too large response has a 4xx status code
func (o *PatchConversationsChatParticipantAttributesRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations chat participant attributes request entity too large response has a 5xx status code
func (o *PatchConversationsChatParticipantAttributesRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations chat participant attributes request entity too large response a status code equal to that given
func (o *PatchConversationsChatParticipantAttributesRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PatchConversationsChatParticipantAttributesRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsChatParticipantAttributesRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchConversationsChatParticipantAttributesRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsChatParticipantAttributesRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchConversationsChatParticipantAttributesRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsChatParticipantAttributesRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsChatParticipantAttributesUnsupportedMediaType creates a PatchConversationsChatParticipantAttributesUnsupportedMediaType with default headers values
func NewPatchConversationsChatParticipantAttributesUnsupportedMediaType() *PatchConversationsChatParticipantAttributesUnsupportedMediaType {
	return &PatchConversationsChatParticipantAttributesUnsupportedMediaType{}
}

/*
PatchConversationsChatParticipantAttributesUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchConversationsChatParticipantAttributesUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations chat participant attributes unsupported media type response has a 2xx status code
func (o *PatchConversationsChatParticipantAttributesUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations chat participant attributes unsupported media type response has a 3xx status code
func (o *PatchConversationsChatParticipantAttributesUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations chat participant attributes unsupported media type response has a 4xx status code
func (o *PatchConversationsChatParticipantAttributesUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations chat participant attributes unsupported media type response has a 5xx status code
func (o *PatchConversationsChatParticipantAttributesUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations chat participant attributes unsupported media type response a status code equal to that given
func (o *PatchConversationsChatParticipantAttributesUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PatchConversationsChatParticipantAttributesUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsChatParticipantAttributesUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchConversationsChatParticipantAttributesUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsChatParticipantAttributesUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchConversationsChatParticipantAttributesUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsChatParticipantAttributesUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsChatParticipantAttributesTooManyRequests creates a PatchConversationsChatParticipantAttributesTooManyRequests with default headers values
func NewPatchConversationsChatParticipantAttributesTooManyRequests() *PatchConversationsChatParticipantAttributesTooManyRequests {
	return &PatchConversationsChatParticipantAttributesTooManyRequests{}
}

/*
PatchConversationsChatParticipantAttributesTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchConversationsChatParticipantAttributesTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations chat participant attributes too many requests response has a 2xx status code
func (o *PatchConversationsChatParticipantAttributesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations chat participant attributes too many requests response has a 3xx status code
func (o *PatchConversationsChatParticipantAttributesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations chat participant attributes too many requests response has a 4xx status code
func (o *PatchConversationsChatParticipantAttributesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations chat participant attributes too many requests response has a 5xx status code
func (o *PatchConversationsChatParticipantAttributesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations chat participant attributes too many requests response a status code equal to that given
func (o *PatchConversationsChatParticipantAttributesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchConversationsChatParticipantAttributesTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsChatParticipantAttributesTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConversationsChatParticipantAttributesTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsChatParticipantAttributesTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConversationsChatParticipantAttributesTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsChatParticipantAttributesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsChatParticipantAttributesInternalServerError creates a PatchConversationsChatParticipantAttributesInternalServerError with default headers values
func NewPatchConversationsChatParticipantAttributesInternalServerError() *PatchConversationsChatParticipantAttributesInternalServerError {
	return &PatchConversationsChatParticipantAttributesInternalServerError{}
}

/*
PatchConversationsChatParticipantAttributesInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchConversationsChatParticipantAttributesInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations chat participant attributes internal server error response has a 2xx status code
func (o *PatchConversationsChatParticipantAttributesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations chat participant attributes internal server error response has a 3xx status code
func (o *PatchConversationsChatParticipantAttributesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations chat participant attributes internal server error response has a 4xx status code
func (o *PatchConversationsChatParticipantAttributesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations chat participant attributes internal server error response has a 5xx status code
func (o *PatchConversationsChatParticipantAttributesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations chat participant attributes internal server error response a status code equal to that given
func (o *PatchConversationsChatParticipantAttributesInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchConversationsChatParticipantAttributesInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsChatParticipantAttributesInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchConversationsChatParticipantAttributesInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsChatParticipantAttributesInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchConversationsChatParticipantAttributesInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsChatParticipantAttributesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsChatParticipantAttributesServiceUnavailable creates a PatchConversationsChatParticipantAttributesServiceUnavailable with default headers values
func NewPatchConversationsChatParticipantAttributesServiceUnavailable() *PatchConversationsChatParticipantAttributesServiceUnavailable {
	return &PatchConversationsChatParticipantAttributesServiceUnavailable{}
}

/*
PatchConversationsChatParticipantAttributesServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchConversationsChatParticipantAttributesServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations chat participant attributes service unavailable response has a 2xx status code
func (o *PatchConversationsChatParticipantAttributesServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations chat participant attributes service unavailable response has a 3xx status code
func (o *PatchConversationsChatParticipantAttributesServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations chat participant attributes service unavailable response has a 4xx status code
func (o *PatchConversationsChatParticipantAttributesServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations chat participant attributes service unavailable response has a 5xx status code
func (o *PatchConversationsChatParticipantAttributesServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations chat participant attributes service unavailable response a status code equal to that given
func (o *PatchConversationsChatParticipantAttributesServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PatchConversationsChatParticipantAttributesServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsChatParticipantAttributesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchConversationsChatParticipantAttributesServiceUnavailable) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsChatParticipantAttributesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchConversationsChatParticipantAttributesServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsChatParticipantAttributesServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsChatParticipantAttributesGatewayTimeout creates a PatchConversationsChatParticipantAttributesGatewayTimeout with default headers values
func NewPatchConversationsChatParticipantAttributesGatewayTimeout() *PatchConversationsChatParticipantAttributesGatewayTimeout {
	return &PatchConversationsChatParticipantAttributesGatewayTimeout{}
}

/*
PatchConversationsChatParticipantAttributesGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PatchConversationsChatParticipantAttributesGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations chat participant attributes gateway timeout response has a 2xx status code
func (o *PatchConversationsChatParticipantAttributesGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations chat participant attributes gateway timeout response has a 3xx status code
func (o *PatchConversationsChatParticipantAttributesGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations chat participant attributes gateway timeout response has a 4xx status code
func (o *PatchConversationsChatParticipantAttributesGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations chat participant attributes gateway timeout response has a 5xx status code
func (o *PatchConversationsChatParticipantAttributesGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations chat participant attributes gateway timeout response a status code equal to that given
func (o *PatchConversationsChatParticipantAttributesGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PatchConversationsChatParticipantAttributesGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsChatParticipantAttributesGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchConversationsChatParticipantAttributesGatewayTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsChatParticipantAttributesGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchConversationsChatParticipantAttributesGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsChatParticipantAttributesGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchConversationsCallbackParticipantReader is a Reader for the PatchConversationsCallbackParticipant structure.
type PatchConversationsCallbackParticipantReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchConversationsCallbackParticipantReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewPatchConversationsCallbackParticipantAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchConversationsCallbackParticipantBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchConversationsCallbackParticipantUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchConversationsCallbackParticipantForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchConversationsCallbackParticipantNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchConversationsCallbackParticipantRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchConversationsCallbackParticipantRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchConversationsCallbackParticipantUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchConversationsCallbackParticipantTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchConversationsCallbackParticipantInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchConversationsCallbackParticipantServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchConversationsCallbackParticipantGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchConversationsCallbackParticipantAccepted creates a PatchConversationsCallbackParticipantAccepted with default headers values
func NewPatchConversationsCallbackParticipantAccepted() *PatchConversationsCallbackParticipantAccepted {
	return &PatchConversationsCallbackParticipantAccepted{}
}

/*
PatchConversationsCallbackParticipantAccepted describes a response with status code 202, with default header values.

Accepted
*/
type PatchConversationsCallbackParticipantAccepted struct {
}

// IsSuccess returns true when this patch conversations callback participant accepted response has a 2xx status code
func (o *PatchConversationsCallbackParticipantAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch conversations callback participant accepted response has a 3xx status code
func (o *PatchConversationsCallbackParticipantAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations callback participant accepted response has a 4xx status code
func (o *PatchConversationsCallbackParticipantAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations callback participant accepted response has a 5xx status code
func (o *PatchConversationsCallbackParticipantAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations callback participant accepted response a status code equal to that given
func (o *PatchConversationsCallbackParticipantAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *PatchConversationsCallbackParticipantAccepted) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}][%d] patchConversationsCallbackParticipantAccepted ", 202)
}

func (o *PatchConversationsCallbackParticipantAccepted) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}][%d] patchConversationsCallbackParticipantAccepted ", 202)
}

func (o *PatchConversationsCallbackParticipantAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchConversationsCallbackParticipantBadRequest creates a PatchConversationsCallbackParticipantBadRequest with default headers values
func NewPatchConversationsCallbackParticipantBadRequest() *PatchConversationsCallbackParticipantBadRequest {
	return &PatchConversationsCallbackParticipantBadRequest{}
}

/*
PatchConversationsCallbackParticipantBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchConversationsCallbackParticipantBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations callback participant bad request response has a 2xx status code
func (o *PatchConversationsCallbackParticipantBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations callback participant bad request response has a 3xx status code
func (o *PatchConversationsCallbackParticipantBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations callback participant bad request response has a 4xx status code
func (o *PatchConversationsCallbackParticipantBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations callback participant bad request response has a 5xx status code
func (o *PatchConversationsCallbackParticipantBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations callback participant bad request response a status code equal to that given
func (o *PatchConversationsCallbackParticipantBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchConversationsCallbackParticipantBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}][%d] patchConversationsCallbackParticipantBadRequest  %+v", 400, o.Payload)
}

func (o *PatchConversationsCallbackParticipantBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}][%d] patchConversationsCallbackParticipantBadRequest  %+v", 400, o.Payload)
}

func (o *PatchConversationsCallbackParticipantBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallbackParticipantBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallbackParticipantUnauthorized creates a PatchConversationsCallbackParticipantUnauthorized with default headers values
func NewPatchConversationsCallbackParticipantUnauthorized() *PatchConversationsCallbackParticipantUnauthorized {
	return &PatchConversationsCallbackParticipantUnauthorized{}
}

/*
PatchConversationsCallbackParticipantUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchConversationsCallbackParticipantUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations callback participant unauthorized response has a 2xx status code
func (o *PatchConversationsCallbackParticipantUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations callback participant unauthorized response has a 3xx status code
func (o *PatchConversationsCallbackParticipantUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations callback participant unauthorized response has a 4xx status code
func (o *PatchConversationsCallbackParticipantUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations callback participant unauthorized response has a 5xx status code
func (o *PatchConversationsCallbackParticipantUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations callback participant unauthorized response a status code equal to that given
func (o *PatchConversationsCallbackParticipantUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchConversationsCallbackParticipantUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}][%d] patchConversationsCallbackParticipantUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConversationsCallbackParticipantUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}][%d] patchConversationsCallbackParticipantUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConversationsCallbackParticipantUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallbackParticipantUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallbackParticipantForbidden creates a PatchConversationsCallbackParticipantForbidden with default headers values
func NewPatchConversationsCallbackParticipantForbidden() *PatchConversationsCallbackParticipantForbidden {
	return &PatchConversationsCallbackParticipantForbidden{}
}

/*
PatchConversationsCallbackParticipantForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PatchConversationsCallbackParticipantForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations callback participant forbidden response has a 2xx status code
func (o *PatchConversationsCallbackParticipantForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations callback participant forbidden response has a 3xx status code
func (o *PatchConversationsCallbackParticipantForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations callback participant forbidden response has a 4xx status code
func (o *PatchConversationsCallbackParticipantForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations callback participant forbidden response has a 5xx status code
func (o *PatchConversationsCallbackParticipantForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations callback participant forbidden response a status code equal to that given
func (o *PatchConversationsCallbackParticipantForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchConversationsCallbackParticipantForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}][%d] patchConversationsCallbackParticipantForbidden  %+v", 403, o.Payload)
}

func (o *PatchConversationsCallbackParticipantForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}][%d] patchConversationsCallbackParticipantForbidden  %+v", 403, o.Payload)
}

func (o *PatchConversationsCallbackParticipantForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallbackParticipantForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallbackParticipantNotFound creates a PatchConversationsCallbackParticipantNotFound with default headers values
func NewPatchConversationsCallbackParticipantNotFound() *PatchConversationsCallbackParticipantNotFound {
	return &PatchConversationsCallbackParticipantNotFound{}
}

/*
PatchConversationsCallbackParticipantNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PatchConversationsCallbackParticipantNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations callback participant not found response has a 2xx status code
func (o *PatchConversationsCallbackParticipantNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations callback participant not found response has a 3xx status code
func (o *PatchConversationsCallbackParticipantNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations callback participant not found response has a 4xx status code
func (o *PatchConversationsCallbackParticipantNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations callback participant not found response has a 5xx status code
func (o *PatchConversationsCallbackParticipantNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations callback participant not found response a status code equal to that given
func (o *PatchConversationsCallbackParticipantNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchConversationsCallbackParticipantNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}][%d] patchConversationsCallbackParticipantNotFound  %+v", 404, o.Payload)
}

func (o *PatchConversationsCallbackParticipantNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}][%d] patchConversationsCallbackParticipantNotFound  %+v", 404, o.Payload)
}

func (o *PatchConversationsCallbackParticipantNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallbackParticipantNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallbackParticipantRequestTimeout creates a PatchConversationsCallbackParticipantRequestTimeout with default headers values
func NewPatchConversationsCallbackParticipantRequestTimeout() *PatchConversationsCallbackParticipantRequestTimeout {
	return &PatchConversationsCallbackParticipantRequestTimeout{}
}

/*
PatchConversationsCallbackParticipantRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchConversationsCallbackParticipantRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations callback participant request timeout response has a 2xx status code
func (o *PatchConversationsCallbackParticipantRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations callback participant request timeout response has a 3xx status code
func (o *PatchConversationsCallbackParticipantRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations callback participant request timeout response has a 4xx status code
func (o *PatchConversationsCallbackParticipantRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations callback participant request timeout response has a 5xx status code
func (o *PatchConversationsCallbackParticipantRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations callback participant request timeout response a status code equal to that given
func (o *PatchConversationsCallbackParticipantRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PatchConversationsCallbackParticipantRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}][%d] patchConversationsCallbackParticipantRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchConversationsCallbackParticipantRequestTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}][%d] patchConversationsCallbackParticipantRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchConversationsCallbackParticipantRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallbackParticipantRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallbackParticipantRequestEntityTooLarge creates a PatchConversationsCallbackParticipantRequestEntityTooLarge with default headers values
func NewPatchConversationsCallbackParticipantRequestEntityTooLarge() *PatchConversationsCallbackParticipantRequestEntityTooLarge {
	return &PatchConversationsCallbackParticipantRequestEntityTooLarge{}
}

/*
PatchConversationsCallbackParticipantRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PatchConversationsCallbackParticipantRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations callback participant request entity too large response has a 2xx status code
func (o *PatchConversationsCallbackParticipantRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations callback participant request entity too large response has a 3xx status code
func (o *PatchConversationsCallbackParticipantRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations callback participant request entity too large response has a 4xx status code
func (o *PatchConversationsCallbackParticipantRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations callback participant request entity too large response has a 5xx status code
func (o *PatchConversationsCallbackParticipantRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations callback participant request entity too large response a status code equal to that given
func (o *PatchConversationsCallbackParticipantRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PatchConversationsCallbackParticipantRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}][%d] patchConversationsCallbackParticipantRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchConversationsCallbackParticipantRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}][%d] patchConversationsCallbackParticipantRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchConversationsCallbackParticipantRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallbackParticipantRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallbackParticipantUnsupportedMediaType creates a PatchConversationsCallbackParticipantUnsupportedMediaType with default headers values
func NewPatchConversationsCallbackParticipantUnsupportedMediaType() *PatchConversationsCallbackParticipantUnsupportedMediaType {
	return &PatchConversationsCallbackParticipantUnsupportedMediaType{}
}

/*
PatchConversationsCallbackParticipantUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchConversationsCallbackParticipantUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations callback participant unsupported media type response has a 2xx status code
func (o *PatchConversationsCallbackParticipantUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations callback participant unsupported media type response has a 3xx status code
func (o *PatchConversationsCallbackParticipantUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations callback participant unsupported media type response has a 4xx status code
func (o *PatchConversationsCallbackParticipantUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations callback participant unsupported media type response has a 5xx status code
func (o *PatchConversationsCallbackParticipantUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations callback participant unsupported media type response a status code equal to that given
func (o *PatchConversationsCallbackParticipantUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PatchConversationsCallbackParticipantUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}][%d] patchConversationsCallbackParticipantUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchConversationsCallbackParticipantUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}][%d] patchConversationsCallbackParticipantUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchConversationsCallbackParticipantUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallbackParticipantUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallbackParticipantTooManyRequests creates a PatchConversationsCallbackParticipantTooManyRequests with default headers values
func NewPatchConversationsCallbackParticipantTooManyRequests() *PatchConversationsCallbackParticipantTooManyRequests {
	return &PatchConversationsCallbackParticipantTooManyRequests{}
}

/*
PatchConversationsCallbackParticipantTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchConversationsCallbackParticipantTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations callback participant too many requests response has a 2xx status code
func (o *PatchConversationsCallbackParticipantTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations callback participant too many requests response has a 3xx status code
func (o *PatchConversationsCallbackParticipantTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations callback participant too many requests response has a 4xx status code
func (o *PatchConversationsCallbackParticipantTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations callback participant too many requests response has a 5xx status code
func (o *PatchConversationsCallbackParticipantTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations callback participant too many requests response a status code equal to that given
func (o *PatchConversationsCallbackParticipantTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchConversationsCallbackParticipantTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}][%d] patchConversationsCallbackParticipantTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConversationsCallbackParticipantTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}][%d] patchConversationsCallbackParticipantTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConversationsCallbackParticipantTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallbackParticipantTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallbackParticipantInternalServerError creates a PatchConversationsCallbackParticipantInternalServerError with default headers values
func NewPatchConversationsCallbackParticipantInternalServerError() *PatchConversationsCallbackParticipantInternalServerError {
	return &PatchConversationsCallbackParticipantInternalServerError{}
}

/*
PatchConversationsCallbackParticipantInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchConversationsCallbackParticipantInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations callback participant internal server error response has a 2xx status code
func (o *PatchConversationsCallbackParticipantInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations callback participant internal server error response has a 3xx status code
func (o *PatchConversationsCallbackParticipantInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations callback participant internal server error response has a 4xx status code
func (o *PatchConversationsCallbackParticipantInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations callback participant internal server error response has a 5xx status code
func (o *PatchConversationsCallbackParticipantInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations callback participant internal server error response a status code equal to that given
func (o *PatchConversationsCallbackParticipantInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchConversationsCallbackParticipantInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}][%d] patchConversationsCallbackParticipantInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchConversationsCallbackParticipantInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}][%d] patchConversationsCallbackParticipantInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchConversationsCallbackParticipantInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallbackParticipantInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallbackParticipantServiceUnavailable creates a PatchConversationsCallbackParticipantServiceUnavailable with default headers values
func NewPatchConversationsCallbackParticipantServiceUnavailable() *PatchConversationsCallbackParticipantServiceUnavailable {
	return &PatchConversationsCallbackParticipantServiceUnavailable{}
}

/*
PatchConversationsCallbackParticipantServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchConversationsCallbackParticipantServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations callback participant service unavailable response has a 2xx status code
func (o *PatchConversationsCallbackParticipantServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations callback participant service unavailable response has a 3xx status code
func (o *PatchConversationsCallbackParticipantServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations callback participant service unavailable response has a 4xx status code
func (o *PatchConversationsCallbackParticipantServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations callback participant service unavailable response has a 5xx status code
func (o *PatchConversationsCallbackParticipantServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations callback participant service unavailable response a status code equal to that given
func (o *PatchConversationsCallbackParticipantServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PatchConversationsCallbackParticipantServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}][%d] patchConversationsCallbackParticipantServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchConversationsCallbackParticipantServiceUnavailable) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}][%d] patchConversationsCallbackParticipantServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchConversationsCallbackParticipantServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallbackParticipantServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallbackParticipantGatewayTimeout creates a PatchConversationsCallbackParticipantGatewayTimeout with default headers values
func NewPatchConversationsCallbackParticipantGatewayTimeout() *PatchConversationsCallbackParticipantGatewayTimeout {
	return &PatchConversationsCallbackParticipantGatewayTimeout{}
}

/*
PatchConversationsCallbackParticipantGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PatchConversationsCallbackParticipantGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations callback participant gateway timeout response has a 2xx status code
func (o *PatchConversationsCallbackParticipantGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations callback participant gateway timeout response has a 3xx status code
func (o *PatchConversationsCallbackParticipantGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations callback participant gateway timeout response has a 4xx status code
func (o *PatchConversationsCallbackParticipantGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations callback participant gateway timeout response has a 5xx status code
func (o *PatchConversationsCallbackParticipantGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations callback participant gateway timeout response a status code equal to that given
func (o *PatchConversationsCallbackParticipantGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PatchConversationsCallbackParticipantGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}][%d] patchConversationsCallbackParticipantGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchConversationsCallbackParticipantGatewayTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}][%d] patchConversationsCallbackParticipantGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchConversationsCallbackParticipantGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallbackParticipantGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

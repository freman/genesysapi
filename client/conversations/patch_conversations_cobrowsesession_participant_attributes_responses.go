// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchConversationsCobrowsesessionParticipantAttributesReader is a Reader for the PatchConversationsCobrowsesessionParticipantAttributes structure.
type PatchConversationsCobrowsesessionParticipantAttributesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchConversationsCobrowsesessionParticipantAttributesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewPatchConversationsCobrowsesessionParticipantAttributesAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchConversationsCobrowsesessionParticipantAttributesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchConversationsCobrowsesessionParticipantAttributesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchConversationsCobrowsesessionParticipantAttributesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchConversationsCobrowsesessionParticipantAttributesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchConversationsCobrowsesessionParticipantAttributesRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchConversationsCobrowsesessionParticipantAttributesRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchConversationsCobrowsesessionParticipantAttributesUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchConversationsCobrowsesessionParticipantAttributesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchConversationsCobrowsesessionParticipantAttributesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchConversationsCobrowsesessionParticipantAttributesServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchConversationsCobrowsesessionParticipantAttributesGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchConversationsCobrowsesessionParticipantAttributesAccepted creates a PatchConversationsCobrowsesessionParticipantAttributesAccepted with default headers values
func NewPatchConversationsCobrowsesessionParticipantAttributesAccepted() *PatchConversationsCobrowsesessionParticipantAttributesAccepted {
	return &PatchConversationsCobrowsesessionParticipantAttributesAccepted{}
}

/*
PatchConversationsCobrowsesessionParticipantAttributesAccepted describes a response with status code 202, with default header values.

Accepted
*/
type PatchConversationsCobrowsesessionParticipantAttributesAccepted struct {
}

// IsSuccess returns true when this patch conversations cobrowsesession participant attributes accepted response has a 2xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch conversations cobrowsesession participant attributes accepted response has a 3xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations cobrowsesession participant attributes accepted response has a 4xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations cobrowsesession participant attributes accepted response has a 5xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations cobrowsesession participant attributes accepted response a status code equal to that given
func (o *PatchConversationsCobrowsesessionParticipantAttributesAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesAccepted) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsCobrowsesessionParticipantAttributesAccepted ", 202)
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesAccepted) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsCobrowsesessionParticipantAttributesAccepted ", 202)
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchConversationsCobrowsesessionParticipantAttributesBadRequest creates a PatchConversationsCobrowsesessionParticipantAttributesBadRequest with default headers values
func NewPatchConversationsCobrowsesessionParticipantAttributesBadRequest() *PatchConversationsCobrowsesessionParticipantAttributesBadRequest {
	return &PatchConversationsCobrowsesessionParticipantAttributesBadRequest{}
}

/*
PatchConversationsCobrowsesessionParticipantAttributesBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchConversationsCobrowsesessionParticipantAttributesBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations cobrowsesession participant attributes bad request response has a 2xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations cobrowsesession participant attributes bad request response has a 3xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations cobrowsesession participant attributes bad request response has a 4xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations cobrowsesession participant attributes bad request response has a 5xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations cobrowsesession participant attributes bad request response a status code equal to that given
func (o *PatchConversationsCobrowsesessionParticipantAttributesBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsCobrowsesessionParticipantAttributesBadRequest  %+v", 400, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsCobrowsesessionParticipantAttributesBadRequest  %+v", 400, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCobrowsesessionParticipantAttributesUnauthorized creates a PatchConversationsCobrowsesessionParticipantAttributesUnauthorized with default headers values
func NewPatchConversationsCobrowsesessionParticipantAttributesUnauthorized() *PatchConversationsCobrowsesessionParticipantAttributesUnauthorized {
	return &PatchConversationsCobrowsesessionParticipantAttributesUnauthorized{}
}

/*
PatchConversationsCobrowsesessionParticipantAttributesUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchConversationsCobrowsesessionParticipantAttributesUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations cobrowsesession participant attributes unauthorized response has a 2xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations cobrowsesession participant attributes unauthorized response has a 3xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations cobrowsesession participant attributes unauthorized response has a 4xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations cobrowsesession participant attributes unauthorized response has a 5xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations cobrowsesession participant attributes unauthorized response a status code equal to that given
func (o *PatchConversationsCobrowsesessionParticipantAttributesUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsCobrowsesessionParticipantAttributesUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsCobrowsesessionParticipantAttributesUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCobrowsesessionParticipantAttributesForbidden creates a PatchConversationsCobrowsesessionParticipantAttributesForbidden with default headers values
func NewPatchConversationsCobrowsesessionParticipantAttributesForbidden() *PatchConversationsCobrowsesessionParticipantAttributesForbidden {
	return &PatchConversationsCobrowsesessionParticipantAttributesForbidden{}
}

/*
PatchConversationsCobrowsesessionParticipantAttributesForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PatchConversationsCobrowsesessionParticipantAttributesForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations cobrowsesession participant attributes forbidden response has a 2xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations cobrowsesession participant attributes forbidden response has a 3xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations cobrowsesession participant attributes forbidden response has a 4xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations cobrowsesession participant attributes forbidden response has a 5xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations cobrowsesession participant attributes forbidden response a status code equal to that given
func (o *PatchConversationsCobrowsesessionParticipantAttributesForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsCobrowsesessionParticipantAttributesForbidden  %+v", 403, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsCobrowsesessionParticipantAttributesForbidden  %+v", 403, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCobrowsesessionParticipantAttributesNotFound creates a PatchConversationsCobrowsesessionParticipantAttributesNotFound with default headers values
func NewPatchConversationsCobrowsesessionParticipantAttributesNotFound() *PatchConversationsCobrowsesessionParticipantAttributesNotFound {
	return &PatchConversationsCobrowsesessionParticipantAttributesNotFound{}
}

/*
PatchConversationsCobrowsesessionParticipantAttributesNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PatchConversationsCobrowsesessionParticipantAttributesNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations cobrowsesession participant attributes not found response has a 2xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations cobrowsesession participant attributes not found response has a 3xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations cobrowsesession participant attributes not found response has a 4xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations cobrowsesession participant attributes not found response has a 5xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations cobrowsesession participant attributes not found response a status code equal to that given
func (o *PatchConversationsCobrowsesessionParticipantAttributesNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsCobrowsesessionParticipantAttributesNotFound  %+v", 404, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsCobrowsesessionParticipantAttributesNotFound  %+v", 404, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCobrowsesessionParticipantAttributesRequestTimeout creates a PatchConversationsCobrowsesessionParticipantAttributesRequestTimeout with default headers values
func NewPatchConversationsCobrowsesessionParticipantAttributesRequestTimeout() *PatchConversationsCobrowsesessionParticipantAttributesRequestTimeout {
	return &PatchConversationsCobrowsesessionParticipantAttributesRequestTimeout{}
}

/*
PatchConversationsCobrowsesessionParticipantAttributesRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchConversationsCobrowsesessionParticipantAttributesRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations cobrowsesession participant attributes request timeout response has a 2xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations cobrowsesession participant attributes request timeout response has a 3xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations cobrowsesession participant attributes request timeout response has a 4xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations cobrowsesession participant attributes request timeout response has a 5xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations cobrowsesession participant attributes request timeout response a status code equal to that given
func (o *PatchConversationsCobrowsesessionParticipantAttributesRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsCobrowsesessionParticipantAttributesRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesRequestTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsCobrowsesessionParticipantAttributesRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCobrowsesessionParticipantAttributesRequestEntityTooLarge creates a PatchConversationsCobrowsesessionParticipantAttributesRequestEntityTooLarge with default headers values
func NewPatchConversationsCobrowsesessionParticipantAttributesRequestEntityTooLarge() *PatchConversationsCobrowsesessionParticipantAttributesRequestEntityTooLarge {
	return &PatchConversationsCobrowsesessionParticipantAttributesRequestEntityTooLarge{}
}

/*
PatchConversationsCobrowsesessionParticipantAttributesRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PatchConversationsCobrowsesessionParticipantAttributesRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations cobrowsesession participant attributes request entity too large response has a 2xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations cobrowsesession participant attributes request entity too large response has a 3xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations cobrowsesession participant attributes request entity too large response has a 4xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations cobrowsesession participant attributes request entity too large response has a 5xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations cobrowsesession participant attributes request entity too large response a status code equal to that given
func (o *PatchConversationsCobrowsesessionParticipantAttributesRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsCobrowsesessionParticipantAttributesRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsCobrowsesessionParticipantAttributesRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCobrowsesessionParticipantAttributesUnsupportedMediaType creates a PatchConversationsCobrowsesessionParticipantAttributesUnsupportedMediaType with default headers values
func NewPatchConversationsCobrowsesessionParticipantAttributesUnsupportedMediaType() *PatchConversationsCobrowsesessionParticipantAttributesUnsupportedMediaType {
	return &PatchConversationsCobrowsesessionParticipantAttributesUnsupportedMediaType{}
}

/*
PatchConversationsCobrowsesessionParticipantAttributesUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchConversationsCobrowsesessionParticipantAttributesUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations cobrowsesession participant attributes unsupported media type response has a 2xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations cobrowsesession participant attributes unsupported media type response has a 3xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations cobrowsesession participant attributes unsupported media type response has a 4xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations cobrowsesession participant attributes unsupported media type response has a 5xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations cobrowsesession participant attributes unsupported media type response a status code equal to that given
func (o *PatchConversationsCobrowsesessionParticipantAttributesUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsCobrowsesessionParticipantAttributesUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsCobrowsesessionParticipantAttributesUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCobrowsesessionParticipantAttributesTooManyRequests creates a PatchConversationsCobrowsesessionParticipantAttributesTooManyRequests with default headers values
func NewPatchConversationsCobrowsesessionParticipantAttributesTooManyRequests() *PatchConversationsCobrowsesessionParticipantAttributesTooManyRequests {
	return &PatchConversationsCobrowsesessionParticipantAttributesTooManyRequests{}
}

/*
PatchConversationsCobrowsesessionParticipantAttributesTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchConversationsCobrowsesessionParticipantAttributesTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations cobrowsesession participant attributes too many requests response has a 2xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations cobrowsesession participant attributes too many requests response has a 3xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations cobrowsesession participant attributes too many requests response has a 4xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations cobrowsesession participant attributes too many requests response has a 5xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations cobrowsesession participant attributes too many requests response a status code equal to that given
func (o *PatchConversationsCobrowsesessionParticipantAttributesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsCobrowsesessionParticipantAttributesTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsCobrowsesessionParticipantAttributesTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCobrowsesessionParticipantAttributesInternalServerError creates a PatchConversationsCobrowsesessionParticipantAttributesInternalServerError with default headers values
func NewPatchConversationsCobrowsesessionParticipantAttributesInternalServerError() *PatchConversationsCobrowsesessionParticipantAttributesInternalServerError {
	return &PatchConversationsCobrowsesessionParticipantAttributesInternalServerError{}
}

/*
PatchConversationsCobrowsesessionParticipantAttributesInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchConversationsCobrowsesessionParticipantAttributesInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations cobrowsesession participant attributes internal server error response has a 2xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations cobrowsesession participant attributes internal server error response has a 3xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations cobrowsesession participant attributes internal server error response has a 4xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations cobrowsesession participant attributes internal server error response has a 5xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations cobrowsesession participant attributes internal server error response a status code equal to that given
func (o *PatchConversationsCobrowsesessionParticipantAttributesInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsCobrowsesessionParticipantAttributesInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsCobrowsesessionParticipantAttributesInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCobrowsesessionParticipantAttributesServiceUnavailable creates a PatchConversationsCobrowsesessionParticipantAttributesServiceUnavailable with default headers values
func NewPatchConversationsCobrowsesessionParticipantAttributesServiceUnavailable() *PatchConversationsCobrowsesessionParticipantAttributesServiceUnavailable {
	return &PatchConversationsCobrowsesessionParticipantAttributesServiceUnavailable{}
}

/*
PatchConversationsCobrowsesessionParticipantAttributesServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchConversationsCobrowsesessionParticipantAttributesServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations cobrowsesession participant attributes service unavailable response has a 2xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations cobrowsesession participant attributes service unavailable response has a 3xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations cobrowsesession participant attributes service unavailable response has a 4xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations cobrowsesession participant attributes service unavailable response has a 5xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations cobrowsesession participant attributes service unavailable response a status code equal to that given
func (o *PatchConversationsCobrowsesessionParticipantAttributesServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsCobrowsesessionParticipantAttributesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesServiceUnavailable) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsCobrowsesessionParticipantAttributesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCobrowsesessionParticipantAttributesGatewayTimeout creates a PatchConversationsCobrowsesessionParticipantAttributesGatewayTimeout with default headers values
func NewPatchConversationsCobrowsesessionParticipantAttributesGatewayTimeout() *PatchConversationsCobrowsesessionParticipantAttributesGatewayTimeout {
	return &PatchConversationsCobrowsesessionParticipantAttributesGatewayTimeout{}
}

/*
PatchConversationsCobrowsesessionParticipantAttributesGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PatchConversationsCobrowsesessionParticipantAttributesGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations cobrowsesession participant attributes gateway timeout response has a 2xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations cobrowsesession participant attributes gateway timeout response has a 3xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations cobrowsesession participant attributes gateway timeout response has a 4xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations cobrowsesession participant attributes gateway timeout response has a 5xx status code
func (o *PatchConversationsCobrowsesessionParticipantAttributesGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations cobrowsesession participant attributes gateway timeout response a status code equal to that given
func (o *PatchConversationsCobrowsesessionParticipantAttributesGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsCobrowsesessionParticipantAttributesGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesGatewayTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/attributes][%d] patchConversationsCobrowsesessionParticipantAttributesGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCobrowsesessionParticipantAttributesGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

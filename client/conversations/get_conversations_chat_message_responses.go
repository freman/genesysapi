// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetConversationsChatMessageReader is a Reader for the GetConversationsChatMessage structure.
type GetConversationsChatMessageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetConversationsChatMessageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetConversationsChatMessageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetConversationsChatMessageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetConversationsChatMessageUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetConversationsChatMessageForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetConversationsChatMessageNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetConversationsChatMessageRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetConversationsChatMessageRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetConversationsChatMessageUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetConversationsChatMessageTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetConversationsChatMessageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetConversationsChatMessageServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetConversationsChatMessageGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetConversationsChatMessageOK creates a GetConversationsChatMessageOK with default headers values
func NewGetConversationsChatMessageOK() *GetConversationsChatMessageOK {
	return &GetConversationsChatMessageOK{}
}

/*
GetConversationsChatMessageOK describes a response with status code 200, with default header values.

successful operation
*/
type GetConversationsChatMessageOK struct {
	Payload *models.WebChatMessage
}

// IsSuccess returns true when this get conversations chat message o k response has a 2xx status code
func (o *GetConversationsChatMessageOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get conversations chat message o k response has a 3xx status code
func (o *GetConversationsChatMessageOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get conversations chat message o k response has a 4xx status code
func (o *GetConversationsChatMessageOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get conversations chat message o k response has a 5xx status code
func (o *GetConversationsChatMessageOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get conversations chat message o k response a status code equal to that given
func (o *GetConversationsChatMessageOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetConversationsChatMessageOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/chats/{conversationId}/messages/{messageId}][%d] getConversationsChatMessageOK  %+v", 200, o.Payload)
}

func (o *GetConversationsChatMessageOK) String() string {
	return fmt.Sprintf("[GET /api/v2/conversations/chats/{conversationId}/messages/{messageId}][%d] getConversationsChatMessageOK  %+v", 200, o.Payload)
}

func (o *GetConversationsChatMessageOK) GetPayload() *models.WebChatMessage {
	return o.Payload
}

func (o *GetConversationsChatMessageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.WebChatMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversationsChatMessageBadRequest creates a GetConversationsChatMessageBadRequest with default headers values
func NewGetConversationsChatMessageBadRequest() *GetConversationsChatMessageBadRequest {
	return &GetConversationsChatMessageBadRequest{}
}

/*
GetConversationsChatMessageBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetConversationsChatMessageBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get conversations chat message bad request response has a 2xx status code
func (o *GetConversationsChatMessageBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get conversations chat message bad request response has a 3xx status code
func (o *GetConversationsChatMessageBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get conversations chat message bad request response has a 4xx status code
func (o *GetConversationsChatMessageBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get conversations chat message bad request response has a 5xx status code
func (o *GetConversationsChatMessageBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get conversations chat message bad request response a status code equal to that given
func (o *GetConversationsChatMessageBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetConversationsChatMessageBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/chats/{conversationId}/messages/{messageId}][%d] getConversationsChatMessageBadRequest  %+v", 400, o.Payload)
}

func (o *GetConversationsChatMessageBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/conversations/chats/{conversationId}/messages/{messageId}][%d] getConversationsChatMessageBadRequest  %+v", 400, o.Payload)
}

func (o *GetConversationsChatMessageBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConversationsChatMessageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversationsChatMessageUnauthorized creates a GetConversationsChatMessageUnauthorized with default headers values
func NewGetConversationsChatMessageUnauthorized() *GetConversationsChatMessageUnauthorized {
	return &GetConversationsChatMessageUnauthorized{}
}

/*
GetConversationsChatMessageUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetConversationsChatMessageUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get conversations chat message unauthorized response has a 2xx status code
func (o *GetConversationsChatMessageUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get conversations chat message unauthorized response has a 3xx status code
func (o *GetConversationsChatMessageUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get conversations chat message unauthorized response has a 4xx status code
func (o *GetConversationsChatMessageUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get conversations chat message unauthorized response has a 5xx status code
func (o *GetConversationsChatMessageUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get conversations chat message unauthorized response a status code equal to that given
func (o *GetConversationsChatMessageUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetConversationsChatMessageUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/chats/{conversationId}/messages/{messageId}][%d] getConversationsChatMessageUnauthorized  %+v", 401, o.Payload)
}

func (o *GetConversationsChatMessageUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/conversations/chats/{conversationId}/messages/{messageId}][%d] getConversationsChatMessageUnauthorized  %+v", 401, o.Payload)
}

func (o *GetConversationsChatMessageUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConversationsChatMessageUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversationsChatMessageForbidden creates a GetConversationsChatMessageForbidden with default headers values
func NewGetConversationsChatMessageForbidden() *GetConversationsChatMessageForbidden {
	return &GetConversationsChatMessageForbidden{}
}

/*
GetConversationsChatMessageForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetConversationsChatMessageForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get conversations chat message forbidden response has a 2xx status code
func (o *GetConversationsChatMessageForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get conversations chat message forbidden response has a 3xx status code
func (o *GetConversationsChatMessageForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get conversations chat message forbidden response has a 4xx status code
func (o *GetConversationsChatMessageForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get conversations chat message forbidden response has a 5xx status code
func (o *GetConversationsChatMessageForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get conversations chat message forbidden response a status code equal to that given
func (o *GetConversationsChatMessageForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetConversationsChatMessageForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/chats/{conversationId}/messages/{messageId}][%d] getConversationsChatMessageForbidden  %+v", 403, o.Payload)
}

func (o *GetConversationsChatMessageForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/conversations/chats/{conversationId}/messages/{messageId}][%d] getConversationsChatMessageForbidden  %+v", 403, o.Payload)
}

func (o *GetConversationsChatMessageForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConversationsChatMessageForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversationsChatMessageNotFound creates a GetConversationsChatMessageNotFound with default headers values
func NewGetConversationsChatMessageNotFound() *GetConversationsChatMessageNotFound {
	return &GetConversationsChatMessageNotFound{}
}

/*
GetConversationsChatMessageNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetConversationsChatMessageNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get conversations chat message not found response has a 2xx status code
func (o *GetConversationsChatMessageNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get conversations chat message not found response has a 3xx status code
func (o *GetConversationsChatMessageNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get conversations chat message not found response has a 4xx status code
func (o *GetConversationsChatMessageNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get conversations chat message not found response has a 5xx status code
func (o *GetConversationsChatMessageNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get conversations chat message not found response a status code equal to that given
func (o *GetConversationsChatMessageNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetConversationsChatMessageNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/chats/{conversationId}/messages/{messageId}][%d] getConversationsChatMessageNotFound  %+v", 404, o.Payload)
}

func (o *GetConversationsChatMessageNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/conversations/chats/{conversationId}/messages/{messageId}][%d] getConversationsChatMessageNotFound  %+v", 404, o.Payload)
}

func (o *GetConversationsChatMessageNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConversationsChatMessageNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversationsChatMessageRequestTimeout creates a GetConversationsChatMessageRequestTimeout with default headers values
func NewGetConversationsChatMessageRequestTimeout() *GetConversationsChatMessageRequestTimeout {
	return &GetConversationsChatMessageRequestTimeout{}
}

/*
GetConversationsChatMessageRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetConversationsChatMessageRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get conversations chat message request timeout response has a 2xx status code
func (o *GetConversationsChatMessageRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get conversations chat message request timeout response has a 3xx status code
func (o *GetConversationsChatMessageRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get conversations chat message request timeout response has a 4xx status code
func (o *GetConversationsChatMessageRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get conversations chat message request timeout response has a 5xx status code
func (o *GetConversationsChatMessageRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get conversations chat message request timeout response a status code equal to that given
func (o *GetConversationsChatMessageRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetConversationsChatMessageRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/chats/{conversationId}/messages/{messageId}][%d] getConversationsChatMessageRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetConversationsChatMessageRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/conversations/chats/{conversationId}/messages/{messageId}][%d] getConversationsChatMessageRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetConversationsChatMessageRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConversationsChatMessageRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversationsChatMessageRequestEntityTooLarge creates a GetConversationsChatMessageRequestEntityTooLarge with default headers values
func NewGetConversationsChatMessageRequestEntityTooLarge() *GetConversationsChatMessageRequestEntityTooLarge {
	return &GetConversationsChatMessageRequestEntityTooLarge{}
}

/*
GetConversationsChatMessageRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type GetConversationsChatMessageRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get conversations chat message request entity too large response has a 2xx status code
func (o *GetConversationsChatMessageRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get conversations chat message request entity too large response has a 3xx status code
func (o *GetConversationsChatMessageRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get conversations chat message request entity too large response has a 4xx status code
func (o *GetConversationsChatMessageRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get conversations chat message request entity too large response has a 5xx status code
func (o *GetConversationsChatMessageRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get conversations chat message request entity too large response a status code equal to that given
func (o *GetConversationsChatMessageRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetConversationsChatMessageRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/chats/{conversationId}/messages/{messageId}][%d] getConversationsChatMessageRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetConversationsChatMessageRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/conversations/chats/{conversationId}/messages/{messageId}][%d] getConversationsChatMessageRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetConversationsChatMessageRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConversationsChatMessageRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversationsChatMessageUnsupportedMediaType creates a GetConversationsChatMessageUnsupportedMediaType with default headers values
func NewGetConversationsChatMessageUnsupportedMediaType() *GetConversationsChatMessageUnsupportedMediaType {
	return &GetConversationsChatMessageUnsupportedMediaType{}
}

/*
GetConversationsChatMessageUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetConversationsChatMessageUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get conversations chat message unsupported media type response has a 2xx status code
func (o *GetConversationsChatMessageUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get conversations chat message unsupported media type response has a 3xx status code
func (o *GetConversationsChatMessageUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get conversations chat message unsupported media type response has a 4xx status code
func (o *GetConversationsChatMessageUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get conversations chat message unsupported media type response has a 5xx status code
func (o *GetConversationsChatMessageUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get conversations chat message unsupported media type response a status code equal to that given
func (o *GetConversationsChatMessageUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetConversationsChatMessageUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/chats/{conversationId}/messages/{messageId}][%d] getConversationsChatMessageUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetConversationsChatMessageUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/conversations/chats/{conversationId}/messages/{messageId}][%d] getConversationsChatMessageUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetConversationsChatMessageUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConversationsChatMessageUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversationsChatMessageTooManyRequests creates a GetConversationsChatMessageTooManyRequests with default headers values
func NewGetConversationsChatMessageTooManyRequests() *GetConversationsChatMessageTooManyRequests {
	return &GetConversationsChatMessageTooManyRequests{}
}

/*
GetConversationsChatMessageTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetConversationsChatMessageTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get conversations chat message too many requests response has a 2xx status code
func (o *GetConversationsChatMessageTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get conversations chat message too many requests response has a 3xx status code
func (o *GetConversationsChatMessageTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get conversations chat message too many requests response has a 4xx status code
func (o *GetConversationsChatMessageTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get conversations chat message too many requests response has a 5xx status code
func (o *GetConversationsChatMessageTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get conversations chat message too many requests response a status code equal to that given
func (o *GetConversationsChatMessageTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetConversationsChatMessageTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/chats/{conversationId}/messages/{messageId}][%d] getConversationsChatMessageTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetConversationsChatMessageTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/conversations/chats/{conversationId}/messages/{messageId}][%d] getConversationsChatMessageTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetConversationsChatMessageTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConversationsChatMessageTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversationsChatMessageInternalServerError creates a GetConversationsChatMessageInternalServerError with default headers values
func NewGetConversationsChatMessageInternalServerError() *GetConversationsChatMessageInternalServerError {
	return &GetConversationsChatMessageInternalServerError{}
}

/*
GetConversationsChatMessageInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetConversationsChatMessageInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get conversations chat message internal server error response has a 2xx status code
func (o *GetConversationsChatMessageInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get conversations chat message internal server error response has a 3xx status code
func (o *GetConversationsChatMessageInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get conversations chat message internal server error response has a 4xx status code
func (o *GetConversationsChatMessageInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get conversations chat message internal server error response has a 5xx status code
func (o *GetConversationsChatMessageInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get conversations chat message internal server error response a status code equal to that given
func (o *GetConversationsChatMessageInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetConversationsChatMessageInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/chats/{conversationId}/messages/{messageId}][%d] getConversationsChatMessageInternalServerError  %+v", 500, o.Payload)
}

func (o *GetConversationsChatMessageInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/conversations/chats/{conversationId}/messages/{messageId}][%d] getConversationsChatMessageInternalServerError  %+v", 500, o.Payload)
}

func (o *GetConversationsChatMessageInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConversationsChatMessageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversationsChatMessageServiceUnavailable creates a GetConversationsChatMessageServiceUnavailable with default headers values
func NewGetConversationsChatMessageServiceUnavailable() *GetConversationsChatMessageServiceUnavailable {
	return &GetConversationsChatMessageServiceUnavailable{}
}

/*
GetConversationsChatMessageServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetConversationsChatMessageServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get conversations chat message service unavailable response has a 2xx status code
func (o *GetConversationsChatMessageServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get conversations chat message service unavailable response has a 3xx status code
func (o *GetConversationsChatMessageServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get conversations chat message service unavailable response has a 4xx status code
func (o *GetConversationsChatMessageServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get conversations chat message service unavailable response has a 5xx status code
func (o *GetConversationsChatMessageServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get conversations chat message service unavailable response a status code equal to that given
func (o *GetConversationsChatMessageServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetConversationsChatMessageServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/chats/{conversationId}/messages/{messageId}][%d] getConversationsChatMessageServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetConversationsChatMessageServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/conversations/chats/{conversationId}/messages/{messageId}][%d] getConversationsChatMessageServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetConversationsChatMessageServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConversationsChatMessageServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversationsChatMessageGatewayTimeout creates a GetConversationsChatMessageGatewayTimeout with default headers values
func NewGetConversationsChatMessageGatewayTimeout() *GetConversationsChatMessageGatewayTimeout {
	return &GetConversationsChatMessageGatewayTimeout{}
}

/*
GetConversationsChatMessageGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetConversationsChatMessageGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get conversations chat message gateway timeout response has a 2xx status code
func (o *GetConversationsChatMessageGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get conversations chat message gateway timeout response has a 3xx status code
func (o *GetConversationsChatMessageGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get conversations chat message gateway timeout response has a 4xx status code
func (o *GetConversationsChatMessageGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get conversations chat message gateway timeout response has a 5xx status code
func (o *GetConversationsChatMessageGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get conversations chat message gateway timeout response a status code equal to that given
func (o *GetConversationsChatMessageGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetConversationsChatMessageGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/chats/{conversationId}/messages/{messageId}][%d] getConversationsChatMessageGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetConversationsChatMessageGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/conversations/chats/{conversationId}/messages/{messageId}][%d] getConversationsChatMessageGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetConversationsChatMessageGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConversationsChatMessageGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

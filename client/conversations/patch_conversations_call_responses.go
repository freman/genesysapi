// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchConversationsCallReader is a Reader for the PatchConversationsCall structure.
type PatchConversationsCallReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchConversationsCallReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchConversationsCallOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewPatchConversationsCallAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchConversationsCallBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchConversationsCallUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchConversationsCallForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchConversationsCallNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchConversationsCallRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchConversationsCallRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchConversationsCallUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchConversationsCallTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchConversationsCallInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchConversationsCallServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchConversationsCallGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchConversationsCallOK creates a PatchConversationsCallOK with default headers values
func NewPatchConversationsCallOK() *PatchConversationsCallOK {
	return &PatchConversationsCallOK{}
}

/*PatchConversationsCallOK handles this case with default header values.

successful operation
*/
type PatchConversationsCallOK struct {
	Payload *models.Conversation
}

func (o *PatchConversationsCallOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/calls/{conversationId}][%d] patchConversationsCallOK  %+v", 200, o.Payload)
}

func (o *PatchConversationsCallOK) GetPayload() *models.Conversation {
	return o.Payload
}

func (o *PatchConversationsCallOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Conversation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallAccepted creates a PatchConversationsCallAccepted with default headers values
func NewPatchConversationsCallAccepted() *PatchConversationsCallAccepted {
	return &PatchConversationsCallAccepted{}
}

/*PatchConversationsCallAccepted handles this case with default header values.

Accepted - when pausing or resuming recordings (Secure Pause)
*/
type PatchConversationsCallAccepted struct {
	Payload *models.Conversation
}

func (o *PatchConversationsCallAccepted) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/calls/{conversationId}][%d] patchConversationsCallAccepted  %+v", 202, o.Payload)
}

func (o *PatchConversationsCallAccepted) GetPayload() *models.Conversation {
	return o.Payload
}

func (o *PatchConversationsCallAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Conversation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallBadRequest creates a PatchConversationsCallBadRequest with default headers values
func NewPatchConversationsCallBadRequest() *PatchConversationsCallBadRequest {
	return &PatchConversationsCallBadRequest{}
}

/*PatchConversationsCallBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchConversationsCallBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsCallBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/calls/{conversationId}][%d] patchConversationsCallBadRequest  %+v", 400, o.Payload)
}

func (o *PatchConversationsCallBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallUnauthorized creates a PatchConversationsCallUnauthorized with default headers values
func NewPatchConversationsCallUnauthorized() *PatchConversationsCallUnauthorized {
	return &PatchConversationsCallUnauthorized{}
}

/*PatchConversationsCallUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchConversationsCallUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsCallUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/calls/{conversationId}][%d] patchConversationsCallUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConversationsCallUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallForbidden creates a PatchConversationsCallForbidden with default headers values
func NewPatchConversationsCallForbidden() *PatchConversationsCallForbidden {
	return &PatchConversationsCallForbidden{}
}

/*PatchConversationsCallForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PatchConversationsCallForbidden struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsCallForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/calls/{conversationId}][%d] patchConversationsCallForbidden  %+v", 403, o.Payload)
}

func (o *PatchConversationsCallForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallNotFound creates a PatchConversationsCallNotFound with default headers values
func NewPatchConversationsCallNotFound() *PatchConversationsCallNotFound {
	return &PatchConversationsCallNotFound{}
}

/*PatchConversationsCallNotFound handles this case with default header values.

The requested resource was not found.
*/
type PatchConversationsCallNotFound struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsCallNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/calls/{conversationId}][%d] patchConversationsCallNotFound  %+v", 404, o.Payload)
}

func (o *PatchConversationsCallNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallRequestTimeout creates a PatchConversationsCallRequestTimeout with default headers values
func NewPatchConversationsCallRequestTimeout() *PatchConversationsCallRequestTimeout {
	return &PatchConversationsCallRequestTimeout{}
}

/*PatchConversationsCallRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchConversationsCallRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsCallRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/calls/{conversationId}][%d] patchConversationsCallRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchConversationsCallRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallRequestEntityTooLarge creates a PatchConversationsCallRequestEntityTooLarge with default headers values
func NewPatchConversationsCallRequestEntityTooLarge() *PatchConversationsCallRequestEntityTooLarge {
	return &PatchConversationsCallRequestEntityTooLarge{}
}

/*PatchConversationsCallRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type PatchConversationsCallRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsCallRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/calls/{conversationId}][%d] patchConversationsCallRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchConversationsCallRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallUnsupportedMediaType creates a PatchConversationsCallUnsupportedMediaType with default headers values
func NewPatchConversationsCallUnsupportedMediaType() *PatchConversationsCallUnsupportedMediaType {
	return &PatchConversationsCallUnsupportedMediaType{}
}

/*PatchConversationsCallUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchConversationsCallUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsCallUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/calls/{conversationId}][%d] patchConversationsCallUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchConversationsCallUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallTooManyRequests creates a PatchConversationsCallTooManyRequests with default headers values
func NewPatchConversationsCallTooManyRequests() *PatchConversationsCallTooManyRequests {
	return &PatchConversationsCallTooManyRequests{}
}

/*PatchConversationsCallTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchConversationsCallTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsCallTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/calls/{conversationId}][%d] patchConversationsCallTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConversationsCallTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallInternalServerError creates a PatchConversationsCallInternalServerError with default headers values
func NewPatchConversationsCallInternalServerError() *PatchConversationsCallInternalServerError {
	return &PatchConversationsCallInternalServerError{}
}

/*PatchConversationsCallInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchConversationsCallInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsCallInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/calls/{conversationId}][%d] patchConversationsCallInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchConversationsCallInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallServiceUnavailable creates a PatchConversationsCallServiceUnavailable with default headers values
func NewPatchConversationsCallServiceUnavailable() *PatchConversationsCallServiceUnavailable {
	return &PatchConversationsCallServiceUnavailable{}
}

/*PatchConversationsCallServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchConversationsCallServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsCallServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/calls/{conversationId}][%d] patchConversationsCallServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchConversationsCallServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallGatewayTimeout creates a PatchConversationsCallGatewayTimeout with default headers values
func NewPatchConversationsCallGatewayTimeout() *PatchConversationsCallGatewayTimeout {
	return &PatchConversationsCallGatewayTimeout{}
}

/*PatchConversationsCallGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PatchConversationsCallGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsCallGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/calls/{conversationId}][%d] patchConversationsCallGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchConversationsCallGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

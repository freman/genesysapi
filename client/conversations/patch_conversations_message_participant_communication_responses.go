// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchConversationsMessageParticipantCommunicationReader is a Reader for the PatchConversationsMessageParticipantCommunication structure.
type PatchConversationsMessageParticipantCommunicationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchConversationsMessageParticipantCommunicationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchConversationsMessageParticipantCommunicationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchConversationsMessageParticipantCommunicationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchConversationsMessageParticipantCommunicationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchConversationsMessageParticipantCommunicationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchConversationsMessageParticipantCommunicationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchConversationsMessageParticipantCommunicationRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchConversationsMessageParticipantCommunicationRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchConversationsMessageParticipantCommunicationUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchConversationsMessageParticipantCommunicationTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchConversationsMessageParticipantCommunicationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchConversationsMessageParticipantCommunicationServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchConversationsMessageParticipantCommunicationGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchConversationsMessageParticipantCommunicationOK creates a PatchConversationsMessageParticipantCommunicationOK with default headers values
func NewPatchConversationsMessageParticipantCommunicationOK() *PatchConversationsMessageParticipantCommunicationOK {
	return &PatchConversationsMessageParticipantCommunicationOK{}
}

/*
PatchConversationsMessageParticipantCommunicationOK describes a response with status code 200, with default header values.

successful operation
*/
type PatchConversationsMessageParticipantCommunicationOK struct {
	Payload models.Empty
}

// IsSuccess returns true when this patch conversations message participant communication o k response has a 2xx status code
func (o *PatchConversationsMessageParticipantCommunicationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch conversations message participant communication o k response has a 3xx status code
func (o *PatchConversationsMessageParticipantCommunicationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations message participant communication o k response has a 4xx status code
func (o *PatchConversationsMessageParticipantCommunicationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations message participant communication o k response has a 5xx status code
func (o *PatchConversationsMessageParticipantCommunicationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations message participant communication o k response a status code equal to that given
func (o *PatchConversationsMessageParticipantCommunicationOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchConversationsMessageParticipantCommunicationOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messages/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsMessageParticipantCommunicationOK  %+v", 200, o.Payload)
}

func (o *PatchConversationsMessageParticipantCommunicationOK) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messages/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsMessageParticipantCommunicationOK  %+v", 200, o.Payload)
}

func (o *PatchConversationsMessageParticipantCommunicationOK) GetPayload() models.Empty {
	return o.Payload
}

func (o *PatchConversationsMessageParticipantCommunicationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessageParticipantCommunicationBadRequest creates a PatchConversationsMessageParticipantCommunicationBadRequest with default headers values
func NewPatchConversationsMessageParticipantCommunicationBadRequest() *PatchConversationsMessageParticipantCommunicationBadRequest {
	return &PatchConversationsMessageParticipantCommunicationBadRequest{}
}

/*
PatchConversationsMessageParticipantCommunicationBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchConversationsMessageParticipantCommunicationBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations message participant communication bad request response has a 2xx status code
func (o *PatchConversationsMessageParticipantCommunicationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations message participant communication bad request response has a 3xx status code
func (o *PatchConversationsMessageParticipantCommunicationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations message participant communication bad request response has a 4xx status code
func (o *PatchConversationsMessageParticipantCommunicationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations message participant communication bad request response has a 5xx status code
func (o *PatchConversationsMessageParticipantCommunicationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations message participant communication bad request response a status code equal to that given
func (o *PatchConversationsMessageParticipantCommunicationBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchConversationsMessageParticipantCommunicationBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messages/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsMessageParticipantCommunicationBadRequest  %+v", 400, o.Payload)
}

func (o *PatchConversationsMessageParticipantCommunicationBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messages/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsMessageParticipantCommunicationBadRequest  %+v", 400, o.Payload)
}

func (o *PatchConversationsMessageParticipantCommunicationBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessageParticipantCommunicationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessageParticipantCommunicationUnauthorized creates a PatchConversationsMessageParticipantCommunicationUnauthorized with default headers values
func NewPatchConversationsMessageParticipantCommunicationUnauthorized() *PatchConversationsMessageParticipantCommunicationUnauthorized {
	return &PatchConversationsMessageParticipantCommunicationUnauthorized{}
}

/*
PatchConversationsMessageParticipantCommunicationUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchConversationsMessageParticipantCommunicationUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations message participant communication unauthorized response has a 2xx status code
func (o *PatchConversationsMessageParticipantCommunicationUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations message participant communication unauthorized response has a 3xx status code
func (o *PatchConversationsMessageParticipantCommunicationUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations message participant communication unauthorized response has a 4xx status code
func (o *PatchConversationsMessageParticipantCommunicationUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations message participant communication unauthorized response has a 5xx status code
func (o *PatchConversationsMessageParticipantCommunicationUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations message participant communication unauthorized response a status code equal to that given
func (o *PatchConversationsMessageParticipantCommunicationUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchConversationsMessageParticipantCommunicationUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messages/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsMessageParticipantCommunicationUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConversationsMessageParticipantCommunicationUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messages/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsMessageParticipantCommunicationUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConversationsMessageParticipantCommunicationUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessageParticipantCommunicationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessageParticipantCommunicationForbidden creates a PatchConversationsMessageParticipantCommunicationForbidden with default headers values
func NewPatchConversationsMessageParticipantCommunicationForbidden() *PatchConversationsMessageParticipantCommunicationForbidden {
	return &PatchConversationsMessageParticipantCommunicationForbidden{}
}

/*
PatchConversationsMessageParticipantCommunicationForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PatchConversationsMessageParticipantCommunicationForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations message participant communication forbidden response has a 2xx status code
func (o *PatchConversationsMessageParticipantCommunicationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations message participant communication forbidden response has a 3xx status code
func (o *PatchConversationsMessageParticipantCommunicationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations message participant communication forbidden response has a 4xx status code
func (o *PatchConversationsMessageParticipantCommunicationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations message participant communication forbidden response has a 5xx status code
func (o *PatchConversationsMessageParticipantCommunicationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations message participant communication forbidden response a status code equal to that given
func (o *PatchConversationsMessageParticipantCommunicationForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchConversationsMessageParticipantCommunicationForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messages/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsMessageParticipantCommunicationForbidden  %+v", 403, o.Payload)
}

func (o *PatchConversationsMessageParticipantCommunicationForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messages/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsMessageParticipantCommunicationForbidden  %+v", 403, o.Payload)
}

func (o *PatchConversationsMessageParticipantCommunicationForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessageParticipantCommunicationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessageParticipantCommunicationNotFound creates a PatchConversationsMessageParticipantCommunicationNotFound with default headers values
func NewPatchConversationsMessageParticipantCommunicationNotFound() *PatchConversationsMessageParticipantCommunicationNotFound {
	return &PatchConversationsMessageParticipantCommunicationNotFound{}
}

/*
PatchConversationsMessageParticipantCommunicationNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PatchConversationsMessageParticipantCommunicationNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations message participant communication not found response has a 2xx status code
func (o *PatchConversationsMessageParticipantCommunicationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations message participant communication not found response has a 3xx status code
func (o *PatchConversationsMessageParticipantCommunicationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations message participant communication not found response has a 4xx status code
func (o *PatchConversationsMessageParticipantCommunicationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations message participant communication not found response has a 5xx status code
func (o *PatchConversationsMessageParticipantCommunicationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations message participant communication not found response a status code equal to that given
func (o *PatchConversationsMessageParticipantCommunicationNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchConversationsMessageParticipantCommunicationNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messages/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsMessageParticipantCommunicationNotFound  %+v", 404, o.Payload)
}

func (o *PatchConversationsMessageParticipantCommunicationNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messages/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsMessageParticipantCommunicationNotFound  %+v", 404, o.Payload)
}

func (o *PatchConversationsMessageParticipantCommunicationNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessageParticipantCommunicationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessageParticipantCommunicationRequestTimeout creates a PatchConversationsMessageParticipantCommunicationRequestTimeout with default headers values
func NewPatchConversationsMessageParticipantCommunicationRequestTimeout() *PatchConversationsMessageParticipantCommunicationRequestTimeout {
	return &PatchConversationsMessageParticipantCommunicationRequestTimeout{}
}

/*
PatchConversationsMessageParticipantCommunicationRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchConversationsMessageParticipantCommunicationRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations message participant communication request timeout response has a 2xx status code
func (o *PatchConversationsMessageParticipantCommunicationRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations message participant communication request timeout response has a 3xx status code
func (o *PatchConversationsMessageParticipantCommunicationRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations message participant communication request timeout response has a 4xx status code
func (o *PatchConversationsMessageParticipantCommunicationRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations message participant communication request timeout response has a 5xx status code
func (o *PatchConversationsMessageParticipantCommunicationRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations message participant communication request timeout response a status code equal to that given
func (o *PatchConversationsMessageParticipantCommunicationRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PatchConversationsMessageParticipantCommunicationRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messages/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsMessageParticipantCommunicationRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchConversationsMessageParticipantCommunicationRequestTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messages/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsMessageParticipantCommunicationRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchConversationsMessageParticipantCommunicationRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessageParticipantCommunicationRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessageParticipantCommunicationRequestEntityTooLarge creates a PatchConversationsMessageParticipantCommunicationRequestEntityTooLarge with default headers values
func NewPatchConversationsMessageParticipantCommunicationRequestEntityTooLarge() *PatchConversationsMessageParticipantCommunicationRequestEntityTooLarge {
	return &PatchConversationsMessageParticipantCommunicationRequestEntityTooLarge{}
}

/*
PatchConversationsMessageParticipantCommunicationRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PatchConversationsMessageParticipantCommunicationRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations message participant communication request entity too large response has a 2xx status code
func (o *PatchConversationsMessageParticipantCommunicationRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations message participant communication request entity too large response has a 3xx status code
func (o *PatchConversationsMessageParticipantCommunicationRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations message participant communication request entity too large response has a 4xx status code
func (o *PatchConversationsMessageParticipantCommunicationRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations message participant communication request entity too large response has a 5xx status code
func (o *PatchConversationsMessageParticipantCommunicationRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations message participant communication request entity too large response a status code equal to that given
func (o *PatchConversationsMessageParticipantCommunicationRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PatchConversationsMessageParticipantCommunicationRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messages/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsMessageParticipantCommunicationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchConversationsMessageParticipantCommunicationRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messages/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsMessageParticipantCommunicationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchConversationsMessageParticipantCommunicationRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessageParticipantCommunicationRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessageParticipantCommunicationUnsupportedMediaType creates a PatchConversationsMessageParticipantCommunicationUnsupportedMediaType with default headers values
func NewPatchConversationsMessageParticipantCommunicationUnsupportedMediaType() *PatchConversationsMessageParticipantCommunicationUnsupportedMediaType {
	return &PatchConversationsMessageParticipantCommunicationUnsupportedMediaType{}
}

/*
PatchConversationsMessageParticipantCommunicationUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchConversationsMessageParticipantCommunicationUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations message participant communication unsupported media type response has a 2xx status code
func (o *PatchConversationsMessageParticipantCommunicationUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations message participant communication unsupported media type response has a 3xx status code
func (o *PatchConversationsMessageParticipantCommunicationUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations message participant communication unsupported media type response has a 4xx status code
func (o *PatchConversationsMessageParticipantCommunicationUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations message participant communication unsupported media type response has a 5xx status code
func (o *PatchConversationsMessageParticipantCommunicationUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations message participant communication unsupported media type response a status code equal to that given
func (o *PatchConversationsMessageParticipantCommunicationUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PatchConversationsMessageParticipantCommunicationUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messages/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsMessageParticipantCommunicationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchConversationsMessageParticipantCommunicationUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messages/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsMessageParticipantCommunicationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchConversationsMessageParticipantCommunicationUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessageParticipantCommunicationUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessageParticipantCommunicationTooManyRequests creates a PatchConversationsMessageParticipantCommunicationTooManyRequests with default headers values
func NewPatchConversationsMessageParticipantCommunicationTooManyRequests() *PatchConversationsMessageParticipantCommunicationTooManyRequests {
	return &PatchConversationsMessageParticipantCommunicationTooManyRequests{}
}

/*
PatchConversationsMessageParticipantCommunicationTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchConversationsMessageParticipantCommunicationTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations message participant communication too many requests response has a 2xx status code
func (o *PatchConversationsMessageParticipantCommunicationTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations message participant communication too many requests response has a 3xx status code
func (o *PatchConversationsMessageParticipantCommunicationTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations message participant communication too many requests response has a 4xx status code
func (o *PatchConversationsMessageParticipantCommunicationTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations message participant communication too many requests response has a 5xx status code
func (o *PatchConversationsMessageParticipantCommunicationTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations message participant communication too many requests response a status code equal to that given
func (o *PatchConversationsMessageParticipantCommunicationTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchConversationsMessageParticipantCommunicationTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messages/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsMessageParticipantCommunicationTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConversationsMessageParticipantCommunicationTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messages/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsMessageParticipantCommunicationTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConversationsMessageParticipantCommunicationTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessageParticipantCommunicationTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessageParticipantCommunicationInternalServerError creates a PatchConversationsMessageParticipantCommunicationInternalServerError with default headers values
func NewPatchConversationsMessageParticipantCommunicationInternalServerError() *PatchConversationsMessageParticipantCommunicationInternalServerError {
	return &PatchConversationsMessageParticipantCommunicationInternalServerError{}
}

/*
PatchConversationsMessageParticipantCommunicationInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchConversationsMessageParticipantCommunicationInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations message participant communication internal server error response has a 2xx status code
func (o *PatchConversationsMessageParticipantCommunicationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations message participant communication internal server error response has a 3xx status code
func (o *PatchConversationsMessageParticipantCommunicationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations message participant communication internal server error response has a 4xx status code
func (o *PatchConversationsMessageParticipantCommunicationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations message participant communication internal server error response has a 5xx status code
func (o *PatchConversationsMessageParticipantCommunicationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations message participant communication internal server error response a status code equal to that given
func (o *PatchConversationsMessageParticipantCommunicationInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchConversationsMessageParticipantCommunicationInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messages/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsMessageParticipantCommunicationInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchConversationsMessageParticipantCommunicationInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messages/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsMessageParticipantCommunicationInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchConversationsMessageParticipantCommunicationInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessageParticipantCommunicationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessageParticipantCommunicationServiceUnavailable creates a PatchConversationsMessageParticipantCommunicationServiceUnavailable with default headers values
func NewPatchConversationsMessageParticipantCommunicationServiceUnavailable() *PatchConversationsMessageParticipantCommunicationServiceUnavailable {
	return &PatchConversationsMessageParticipantCommunicationServiceUnavailable{}
}

/*
PatchConversationsMessageParticipantCommunicationServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchConversationsMessageParticipantCommunicationServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations message participant communication service unavailable response has a 2xx status code
func (o *PatchConversationsMessageParticipantCommunicationServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations message participant communication service unavailable response has a 3xx status code
func (o *PatchConversationsMessageParticipantCommunicationServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations message participant communication service unavailable response has a 4xx status code
func (o *PatchConversationsMessageParticipantCommunicationServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations message participant communication service unavailable response has a 5xx status code
func (o *PatchConversationsMessageParticipantCommunicationServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations message participant communication service unavailable response a status code equal to that given
func (o *PatchConversationsMessageParticipantCommunicationServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PatchConversationsMessageParticipantCommunicationServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messages/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsMessageParticipantCommunicationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchConversationsMessageParticipantCommunicationServiceUnavailable) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messages/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsMessageParticipantCommunicationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchConversationsMessageParticipantCommunicationServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessageParticipantCommunicationServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessageParticipantCommunicationGatewayTimeout creates a PatchConversationsMessageParticipantCommunicationGatewayTimeout with default headers values
func NewPatchConversationsMessageParticipantCommunicationGatewayTimeout() *PatchConversationsMessageParticipantCommunicationGatewayTimeout {
	return &PatchConversationsMessageParticipantCommunicationGatewayTimeout{}
}

/*
PatchConversationsMessageParticipantCommunicationGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PatchConversationsMessageParticipantCommunicationGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations message participant communication gateway timeout response has a 2xx status code
func (o *PatchConversationsMessageParticipantCommunicationGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations message participant communication gateway timeout response has a 3xx status code
func (o *PatchConversationsMessageParticipantCommunicationGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations message participant communication gateway timeout response has a 4xx status code
func (o *PatchConversationsMessageParticipantCommunicationGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations message participant communication gateway timeout response has a 5xx status code
func (o *PatchConversationsMessageParticipantCommunicationGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations message participant communication gateway timeout response a status code equal to that given
func (o *PatchConversationsMessageParticipantCommunicationGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PatchConversationsMessageParticipantCommunicationGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messages/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsMessageParticipantCommunicationGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchConversationsMessageParticipantCommunicationGatewayTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messages/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsMessageParticipantCommunicationGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchConversationsMessageParticipantCommunicationGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessageParticipantCommunicationGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

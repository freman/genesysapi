// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostConversationsCobrowsesessionParticipantCommunicationWrapupReader is a Reader for the PostConversationsCobrowsesessionParticipantCommunicationWrapup structure.
type PostConversationsCobrowsesessionParticipantCommunicationWrapupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewPostConversationsCobrowsesessionParticipantCommunicationWrapupAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostConversationsCobrowsesessionParticipantCommunicationWrapupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostConversationsCobrowsesessionParticipantCommunicationWrapupUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostConversationsCobrowsesessionParticipantCommunicationWrapupForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostConversationsCobrowsesessionParticipantCommunicationWrapupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostConversationsCobrowsesessionParticipantCommunicationWrapupRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostConversationsCobrowsesessionParticipantCommunicationWrapupRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostConversationsCobrowsesessionParticipantCommunicationWrapupUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostConversationsCobrowsesessionParticipantCommunicationWrapupTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostConversationsCobrowsesessionParticipantCommunicationWrapupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostConversationsCobrowsesessionParticipantCommunicationWrapupServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostConversationsCobrowsesessionParticipantCommunicationWrapupGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostConversationsCobrowsesessionParticipantCommunicationWrapupAccepted creates a PostConversationsCobrowsesessionParticipantCommunicationWrapupAccepted with default headers values
func NewPostConversationsCobrowsesessionParticipantCommunicationWrapupAccepted() *PostConversationsCobrowsesessionParticipantCommunicationWrapupAccepted {
	return &PostConversationsCobrowsesessionParticipantCommunicationWrapupAccepted{}
}

/*
PostConversationsCobrowsesessionParticipantCommunicationWrapupAccepted describes a response with status code 202, with default header values.

Accepted
*/
type PostConversationsCobrowsesessionParticipantCommunicationWrapupAccepted struct {
}

// IsSuccess returns true when this post conversations cobrowsesession participant communication wrapup accepted response has a 2xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post conversations cobrowsesession participant communication wrapup accepted response has a 3xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations cobrowsesession participant communication wrapup accepted response has a 4xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this post conversations cobrowsesession participant communication wrapup accepted response has a 5xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversations cobrowsesession participant communication wrapup accepted response a status code equal to that given
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupAccepted) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsCobrowsesessionParticipantCommunicationWrapupAccepted ", 202)
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupAccepted) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsCobrowsesessionParticipantCommunicationWrapupAccepted ", 202)
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostConversationsCobrowsesessionParticipantCommunicationWrapupBadRequest creates a PostConversationsCobrowsesessionParticipantCommunicationWrapupBadRequest with default headers values
func NewPostConversationsCobrowsesessionParticipantCommunicationWrapupBadRequest() *PostConversationsCobrowsesessionParticipantCommunicationWrapupBadRequest {
	return &PostConversationsCobrowsesessionParticipantCommunicationWrapupBadRequest{}
}

/*
PostConversationsCobrowsesessionParticipantCommunicationWrapupBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostConversationsCobrowsesessionParticipantCommunicationWrapupBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversations cobrowsesession participant communication wrapup bad request response has a 2xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversations cobrowsesession participant communication wrapup bad request response has a 3xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations cobrowsesession participant communication wrapup bad request response has a 4xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversations cobrowsesession participant communication wrapup bad request response has a 5xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversations cobrowsesession participant communication wrapup bad request response a status code equal to that given
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsCobrowsesessionParticipantCommunicationWrapupBadRequest  %+v", 400, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsCobrowsesessionParticipantCommunicationWrapupBadRequest  %+v", 400, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsCobrowsesessionParticipantCommunicationWrapupUnauthorized creates a PostConversationsCobrowsesessionParticipantCommunicationWrapupUnauthorized with default headers values
func NewPostConversationsCobrowsesessionParticipantCommunicationWrapupUnauthorized() *PostConversationsCobrowsesessionParticipantCommunicationWrapupUnauthorized {
	return &PostConversationsCobrowsesessionParticipantCommunicationWrapupUnauthorized{}
}

/*
PostConversationsCobrowsesessionParticipantCommunicationWrapupUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PostConversationsCobrowsesessionParticipantCommunicationWrapupUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversations cobrowsesession participant communication wrapup unauthorized response has a 2xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversations cobrowsesession participant communication wrapup unauthorized response has a 3xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations cobrowsesession participant communication wrapup unauthorized response has a 4xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversations cobrowsesession participant communication wrapup unauthorized response has a 5xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversations cobrowsesession participant communication wrapup unauthorized response a status code equal to that given
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsCobrowsesessionParticipantCommunicationWrapupUnauthorized  %+v", 401, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsCobrowsesessionParticipantCommunicationWrapupUnauthorized  %+v", 401, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsCobrowsesessionParticipantCommunicationWrapupForbidden creates a PostConversationsCobrowsesessionParticipantCommunicationWrapupForbidden with default headers values
func NewPostConversationsCobrowsesessionParticipantCommunicationWrapupForbidden() *PostConversationsCobrowsesessionParticipantCommunicationWrapupForbidden {
	return &PostConversationsCobrowsesessionParticipantCommunicationWrapupForbidden{}
}

/*
PostConversationsCobrowsesessionParticipantCommunicationWrapupForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PostConversationsCobrowsesessionParticipantCommunicationWrapupForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversations cobrowsesession participant communication wrapup forbidden response has a 2xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversations cobrowsesession participant communication wrapup forbidden response has a 3xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations cobrowsesession participant communication wrapup forbidden response has a 4xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversations cobrowsesession participant communication wrapup forbidden response has a 5xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversations cobrowsesession participant communication wrapup forbidden response a status code equal to that given
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsCobrowsesessionParticipantCommunicationWrapupForbidden  %+v", 403, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupForbidden) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsCobrowsesessionParticipantCommunicationWrapupForbidden  %+v", 403, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsCobrowsesessionParticipantCommunicationWrapupNotFound creates a PostConversationsCobrowsesessionParticipantCommunicationWrapupNotFound with default headers values
func NewPostConversationsCobrowsesessionParticipantCommunicationWrapupNotFound() *PostConversationsCobrowsesessionParticipantCommunicationWrapupNotFound {
	return &PostConversationsCobrowsesessionParticipantCommunicationWrapupNotFound{}
}

/*
PostConversationsCobrowsesessionParticipantCommunicationWrapupNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PostConversationsCobrowsesessionParticipantCommunicationWrapupNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversations cobrowsesession participant communication wrapup not found response has a 2xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversations cobrowsesession participant communication wrapup not found response has a 3xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations cobrowsesession participant communication wrapup not found response has a 4xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversations cobrowsesession participant communication wrapup not found response has a 5xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversations cobrowsesession participant communication wrapup not found response a status code equal to that given
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsCobrowsesessionParticipantCommunicationWrapupNotFound  %+v", 404, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupNotFound) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsCobrowsesessionParticipantCommunicationWrapupNotFound  %+v", 404, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsCobrowsesessionParticipantCommunicationWrapupRequestTimeout creates a PostConversationsCobrowsesessionParticipantCommunicationWrapupRequestTimeout with default headers values
func NewPostConversationsCobrowsesessionParticipantCommunicationWrapupRequestTimeout() *PostConversationsCobrowsesessionParticipantCommunicationWrapupRequestTimeout {
	return &PostConversationsCobrowsesessionParticipantCommunicationWrapupRequestTimeout{}
}

/*
PostConversationsCobrowsesessionParticipantCommunicationWrapupRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PostConversationsCobrowsesessionParticipantCommunicationWrapupRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversations cobrowsesession participant communication wrapup request timeout response has a 2xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversations cobrowsesession participant communication wrapup request timeout response has a 3xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations cobrowsesession participant communication wrapup request timeout response has a 4xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversations cobrowsesession participant communication wrapup request timeout response has a 5xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversations cobrowsesession participant communication wrapup request timeout response a status code equal to that given
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsCobrowsesessionParticipantCommunicationWrapupRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupRequestTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsCobrowsesessionParticipantCommunicationWrapupRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsCobrowsesessionParticipantCommunicationWrapupRequestEntityTooLarge creates a PostConversationsCobrowsesessionParticipantCommunicationWrapupRequestEntityTooLarge with default headers values
func NewPostConversationsCobrowsesessionParticipantCommunicationWrapupRequestEntityTooLarge() *PostConversationsCobrowsesessionParticipantCommunicationWrapupRequestEntityTooLarge {
	return &PostConversationsCobrowsesessionParticipantCommunicationWrapupRequestEntityTooLarge{}
}

/*
PostConversationsCobrowsesessionParticipantCommunicationWrapupRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PostConversationsCobrowsesessionParticipantCommunicationWrapupRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversations cobrowsesession participant communication wrapup request entity too large response has a 2xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversations cobrowsesession participant communication wrapup request entity too large response has a 3xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations cobrowsesession participant communication wrapup request entity too large response has a 4xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversations cobrowsesession participant communication wrapup request entity too large response has a 5xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversations cobrowsesession participant communication wrapup request entity too large response a status code equal to that given
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsCobrowsesessionParticipantCommunicationWrapupRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsCobrowsesessionParticipantCommunicationWrapupRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsCobrowsesessionParticipantCommunicationWrapupUnsupportedMediaType creates a PostConversationsCobrowsesessionParticipantCommunicationWrapupUnsupportedMediaType with default headers values
func NewPostConversationsCobrowsesessionParticipantCommunicationWrapupUnsupportedMediaType() *PostConversationsCobrowsesessionParticipantCommunicationWrapupUnsupportedMediaType {
	return &PostConversationsCobrowsesessionParticipantCommunicationWrapupUnsupportedMediaType{}
}

/*
PostConversationsCobrowsesessionParticipantCommunicationWrapupUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostConversationsCobrowsesessionParticipantCommunicationWrapupUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversations cobrowsesession participant communication wrapup unsupported media type response has a 2xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversations cobrowsesession participant communication wrapup unsupported media type response has a 3xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations cobrowsesession participant communication wrapup unsupported media type response has a 4xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversations cobrowsesession participant communication wrapup unsupported media type response has a 5xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversations cobrowsesession participant communication wrapup unsupported media type response a status code equal to that given
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsCobrowsesessionParticipantCommunicationWrapupUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsCobrowsesessionParticipantCommunicationWrapupUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsCobrowsesessionParticipantCommunicationWrapupTooManyRequests creates a PostConversationsCobrowsesessionParticipantCommunicationWrapupTooManyRequests with default headers values
func NewPostConversationsCobrowsesessionParticipantCommunicationWrapupTooManyRequests() *PostConversationsCobrowsesessionParticipantCommunicationWrapupTooManyRequests {
	return &PostConversationsCobrowsesessionParticipantCommunicationWrapupTooManyRequests{}
}

/*
PostConversationsCobrowsesessionParticipantCommunicationWrapupTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PostConversationsCobrowsesessionParticipantCommunicationWrapupTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversations cobrowsesession participant communication wrapup too many requests response has a 2xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversations cobrowsesession participant communication wrapup too many requests response has a 3xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations cobrowsesession participant communication wrapup too many requests response has a 4xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversations cobrowsesession participant communication wrapup too many requests response has a 5xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversations cobrowsesession participant communication wrapup too many requests response a status code equal to that given
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsCobrowsesessionParticipantCommunicationWrapupTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupTooManyRequests) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsCobrowsesessionParticipantCommunicationWrapupTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsCobrowsesessionParticipantCommunicationWrapupInternalServerError creates a PostConversationsCobrowsesessionParticipantCommunicationWrapupInternalServerError with default headers values
func NewPostConversationsCobrowsesessionParticipantCommunicationWrapupInternalServerError() *PostConversationsCobrowsesessionParticipantCommunicationWrapupInternalServerError {
	return &PostConversationsCobrowsesessionParticipantCommunicationWrapupInternalServerError{}
}

/*
PostConversationsCobrowsesessionParticipantCommunicationWrapupInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostConversationsCobrowsesessionParticipantCommunicationWrapupInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversations cobrowsesession participant communication wrapup internal server error response has a 2xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversations cobrowsesession participant communication wrapup internal server error response has a 3xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations cobrowsesession participant communication wrapup internal server error response has a 4xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post conversations cobrowsesession participant communication wrapup internal server error response has a 5xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post conversations cobrowsesession participant communication wrapup internal server error response a status code equal to that given
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsCobrowsesessionParticipantCommunicationWrapupInternalServerError  %+v", 500, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsCobrowsesessionParticipantCommunicationWrapupInternalServerError  %+v", 500, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsCobrowsesessionParticipantCommunicationWrapupServiceUnavailable creates a PostConversationsCobrowsesessionParticipantCommunicationWrapupServiceUnavailable with default headers values
func NewPostConversationsCobrowsesessionParticipantCommunicationWrapupServiceUnavailable() *PostConversationsCobrowsesessionParticipantCommunicationWrapupServiceUnavailable {
	return &PostConversationsCobrowsesessionParticipantCommunicationWrapupServiceUnavailable{}
}

/*
PostConversationsCobrowsesessionParticipantCommunicationWrapupServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostConversationsCobrowsesessionParticipantCommunicationWrapupServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversations cobrowsesession participant communication wrapup service unavailable response has a 2xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversations cobrowsesession participant communication wrapup service unavailable response has a 3xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations cobrowsesession participant communication wrapup service unavailable response has a 4xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this post conversations cobrowsesession participant communication wrapup service unavailable response has a 5xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this post conversations cobrowsesession participant communication wrapup service unavailable response a status code equal to that given
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsCobrowsesessionParticipantCommunicationWrapupServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsCobrowsesessionParticipantCommunicationWrapupServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsCobrowsesessionParticipantCommunicationWrapupGatewayTimeout creates a PostConversationsCobrowsesessionParticipantCommunicationWrapupGatewayTimeout with default headers values
func NewPostConversationsCobrowsesessionParticipantCommunicationWrapupGatewayTimeout() *PostConversationsCobrowsesessionParticipantCommunicationWrapupGatewayTimeout {
	return &PostConversationsCobrowsesessionParticipantCommunicationWrapupGatewayTimeout{}
}

/*
PostConversationsCobrowsesessionParticipantCommunicationWrapupGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PostConversationsCobrowsesessionParticipantCommunicationWrapupGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversations cobrowsesession participant communication wrapup gateway timeout response has a 2xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversations cobrowsesession participant communication wrapup gateway timeout response has a 3xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations cobrowsesession participant communication wrapup gateway timeout response has a 4xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this post conversations cobrowsesession participant communication wrapup gateway timeout response has a 5xx status code
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this post conversations cobrowsesession participant communication wrapup gateway timeout response a status code equal to that given
func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsCobrowsesessionParticipantCommunicationWrapupGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupGatewayTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsCobrowsesessionParticipantCommunicationWrapupGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsCobrowsesessionParticipantCommunicationWrapupGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

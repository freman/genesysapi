// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutConversationsCobrowsesessionRecordingstateReader is a Reader for the PutConversationsCobrowsesessionRecordingstate structure.
type PutConversationsCobrowsesessionRecordingstateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutConversationsCobrowsesessionRecordingstateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutConversationsCobrowsesessionRecordingstateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewPutConversationsCobrowsesessionRecordingstateAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutConversationsCobrowsesessionRecordingstateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutConversationsCobrowsesessionRecordingstateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutConversationsCobrowsesessionRecordingstateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutConversationsCobrowsesessionRecordingstateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPutConversationsCobrowsesessionRecordingstateRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutConversationsCobrowsesessionRecordingstateRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutConversationsCobrowsesessionRecordingstateUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutConversationsCobrowsesessionRecordingstateTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutConversationsCobrowsesessionRecordingstateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutConversationsCobrowsesessionRecordingstateServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutConversationsCobrowsesessionRecordingstateGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutConversationsCobrowsesessionRecordingstateOK creates a PutConversationsCobrowsesessionRecordingstateOK with default headers values
func NewPutConversationsCobrowsesessionRecordingstateOK() *PutConversationsCobrowsesessionRecordingstateOK {
	return &PutConversationsCobrowsesessionRecordingstateOK{}
}

/*PutConversationsCobrowsesessionRecordingstateOK handles this case with default header values.

successful operation
*/
type PutConversationsCobrowsesessionRecordingstateOK struct {
	Payload string
}

func (o *PutConversationsCobrowsesessionRecordingstateOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/cobrowsesessions/{conversationId}/recordingstate][%d] putConversationsCobrowsesessionRecordingstateOK  %+v", 200, o.Payload)
}

func (o *PutConversationsCobrowsesessionRecordingstateOK) GetPayload() string {
	return o.Payload
}

func (o *PutConversationsCobrowsesessionRecordingstateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsCobrowsesessionRecordingstateAccepted creates a PutConversationsCobrowsesessionRecordingstateAccepted with default headers values
func NewPutConversationsCobrowsesessionRecordingstateAccepted() *PutConversationsCobrowsesessionRecordingstateAccepted {
	return &PutConversationsCobrowsesessionRecordingstateAccepted{}
}

/*PutConversationsCobrowsesessionRecordingstateAccepted handles this case with default header values.

Accepted - when pausing or resuming recordings (Secure Pause)
*/
type PutConversationsCobrowsesessionRecordingstateAccepted struct {
	Payload string
}

func (o *PutConversationsCobrowsesessionRecordingstateAccepted) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/cobrowsesessions/{conversationId}/recordingstate][%d] putConversationsCobrowsesessionRecordingstateAccepted  %+v", 202, o.Payload)
}

func (o *PutConversationsCobrowsesessionRecordingstateAccepted) GetPayload() string {
	return o.Payload
}

func (o *PutConversationsCobrowsesessionRecordingstateAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsCobrowsesessionRecordingstateBadRequest creates a PutConversationsCobrowsesessionRecordingstateBadRequest with default headers values
func NewPutConversationsCobrowsesessionRecordingstateBadRequest() *PutConversationsCobrowsesessionRecordingstateBadRequest {
	return &PutConversationsCobrowsesessionRecordingstateBadRequest{}
}

/*PutConversationsCobrowsesessionRecordingstateBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutConversationsCobrowsesessionRecordingstateBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PutConversationsCobrowsesessionRecordingstateBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/cobrowsesessions/{conversationId}/recordingstate][%d] putConversationsCobrowsesessionRecordingstateBadRequest  %+v", 400, o.Payload)
}

func (o *PutConversationsCobrowsesessionRecordingstateBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsCobrowsesessionRecordingstateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsCobrowsesessionRecordingstateUnauthorized creates a PutConversationsCobrowsesessionRecordingstateUnauthorized with default headers values
func NewPutConversationsCobrowsesessionRecordingstateUnauthorized() *PutConversationsCobrowsesessionRecordingstateUnauthorized {
	return &PutConversationsCobrowsesessionRecordingstateUnauthorized{}
}

/*PutConversationsCobrowsesessionRecordingstateUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PutConversationsCobrowsesessionRecordingstateUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PutConversationsCobrowsesessionRecordingstateUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/cobrowsesessions/{conversationId}/recordingstate][%d] putConversationsCobrowsesessionRecordingstateUnauthorized  %+v", 401, o.Payload)
}

func (o *PutConversationsCobrowsesessionRecordingstateUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsCobrowsesessionRecordingstateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsCobrowsesessionRecordingstateForbidden creates a PutConversationsCobrowsesessionRecordingstateForbidden with default headers values
func NewPutConversationsCobrowsesessionRecordingstateForbidden() *PutConversationsCobrowsesessionRecordingstateForbidden {
	return &PutConversationsCobrowsesessionRecordingstateForbidden{}
}

/*PutConversationsCobrowsesessionRecordingstateForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PutConversationsCobrowsesessionRecordingstateForbidden struct {
	Payload *models.ErrorBody
}

func (o *PutConversationsCobrowsesessionRecordingstateForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/cobrowsesessions/{conversationId}/recordingstate][%d] putConversationsCobrowsesessionRecordingstateForbidden  %+v", 403, o.Payload)
}

func (o *PutConversationsCobrowsesessionRecordingstateForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsCobrowsesessionRecordingstateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsCobrowsesessionRecordingstateNotFound creates a PutConversationsCobrowsesessionRecordingstateNotFound with default headers values
func NewPutConversationsCobrowsesessionRecordingstateNotFound() *PutConversationsCobrowsesessionRecordingstateNotFound {
	return &PutConversationsCobrowsesessionRecordingstateNotFound{}
}

/*PutConversationsCobrowsesessionRecordingstateNotFound handles this case with default header values.

The requested resource was not found.
*/
type PutConversationsCobrowsesessionRecordingstateNotFound struct {
	Payload *models.ErrorBody
}

func (o *PutConversationsCobrowsesessionRecordingstateNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/cobrowsesessions/{conversationId}/recordingstate][%d] putConversationsCobrowsesessionRecordingstateNotFound  %+v", 404, o.Payload)
}

func (o *PutConversationsCobrowsesessionRecordingstateNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsCobrowsesessionRecordingstateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsCobrowsesessionRecordingstateRequestTimeout creates a PutConversationsCobrowsesessionRecordingstateRequestTimeout with default headers values
func NewPutConversationsCobrowsesessionRecordingstateRequestTimeout() *PutConversationsCobrowsesessionRecordingstateRequestTimeout {
	return &PutConversationsCobrowsesessionRecordingstateRequestTimeout{}
}

/*PutConversationsCobrowsesessionRecordingstateRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PutConversationsCobrowsesessionRecordingstateRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutConversationsCobrowsesessionRecordingstateRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/cobrowsesessions/{conversationId}/recordingstate][%d] putConversationsCobrowsesessionRecordingstateRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutConversationsCobrowsesessionRecordingstateRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsCobrowsesessionRecordingstateRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsCobrowsesessionRecordingstateRequestEntityTooLarge creates a PutConversationsCobrowsesessionRecordingstateRequestEntityTooLarge with default headers values
func NewPutConversationsCobrowsesessionRecordingstateRequestEntityTooLarge() *PutConversationsCobrowsesessionRecordingstateRequestEntityTooLarge {
	return &PutConversationsCobrowsesessionRecordingstateRequestEntityTooLarge{}
}

/*PutConversationsCobrowsesessionRecordingstateRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PutConversationsCobrowsesessionRecordingstateRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PutConversationsCobrowsesessionRecordingstateRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/cobrowsesessions/{conversationId}/recordingstate][%d] putConversationsCobrowsesessionRecordingstateRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutConversationsCobrowsesessionRecordingstateRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsCobrowsesessionRecordingstateRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsCobrowsesessionRecordingstateUnsupportedMediaType creates a PutConversationsCobrowsesessionRecordingstateUnsupportedMediaType with default headers values
func NewPutConversationsCobrowsesessionRecordingstateUnsupportedMediaType() *PutConversationsCobrowsesessionRecordingstateUnsupportedMediaType {
	return &PutConversationsCobrowsesessionRecordingstateUnsupportedMediaType{}
}

/*PutConversationsCobrowsesessionRecordingstateUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutConversationsCobrowsesessionRecordingstateUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PutConversationsCobrowsesessionRecordingstateUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/cobrowsesessions/{conversationId}/recordingstate][%d] putConversationsCobrowsesessionRecordingstateUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutConversationsCobrowsesessionRecordingstateUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsCobrowsesessionRecordingstateUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsCobrowsesessionRecordingstateTooManyRequests creates a PutConversationsCobrowsesessionRecordingstateTooManyRequests with default headers values
func NewPutConversationsCobrowsesessionRecordingstateTooManyRequests() *PutConversationsCobrowsesessionRecordingstateTooManyRequests {
	return &PutConversationsCobrowsesessionRecordingstateTooManyRequests{}
}

/*PutConversationsCobrowsesessionRecordingstateTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PutConversationsCobrowsesessionRecordingstateTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PutConversationsCobrowsesessionRecordingstateTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/cobrowsesessions/{conversationId}/recordingstate][%d] putConversationsCobrowsesessionRecordingstateTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutConversationsCobrowsesessionRecordingstateTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsCobrowsesessionRecordingstateTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsCobrowsesessionRecordingstateInternalServerError creates a PutConversationsCobrowsesessionRecordingstateInternalServerError with default headers values
func NewPutConversationsCobrowsesessionRecordingstateInternalServerError() *PutConversationsCobrowsesessionRecordingstateInternalServerError {
	return &PutConversationsCobrowsesessionRecordingstateInternalServerError{}
}

/*PutConversationsCobrowsesessionRecordingstateInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutConversationsCobrowsesessionRecordingstateInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PutConversationsCobrowsesessionRecordingstateInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/cobrowsesessions/{conversationId}/recordingstate][%d] putConversationsCobrowsesessionRecordingstateInternalServerError  %+v", 500, o.Payload)
}

func (o *PutConversationsCobrowsesessionRecordingstateInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsCobrowsesessionRecordingstateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsCobrowsesessionRecordingstateServiceUnavailable creates a PutConversationsCobrowsesessionRecordingstateServiceUnavailable with default headers values
func NewPutConversationsCobrowsesessionRecordingstateServiceUnavailable() *PutConversationsCobrowsesessionRecordingstateServiceUnavailable {
	return &PutConversationsCobrowsesessionRecordingstateServiceUnavailable{}
}

/*PutConversationsCobrowsesessionRecordingstateServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutConversationsCobrowsesessionRecordingstateServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PutConversationsCobrowsesessionRecordingstateServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/cobrowsesessions/{conversationId}/recordingstate][%d] putConversationsCobrowsesessionRecordingstateServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutConversationsCobrowsesessionRecordingstateServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsCobrowsesessionRecordingstateServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsCobrowsesessionRecordingstateGatewayTimeout creates a PutConversationsCobrowsesessionRecordingstateGatewayTimeout with default headers values
func NewPutConversationsCobrowsesessionRecordingstateGatewayTimeout() *PutConversationsCobrowsesessionRecordingstateGatewayTimeout {
	return &PutConversationsCobrowsesessionRecordingstateGatewayTimeout{}
}

/*PutConversationsCobrowsesessionRecordingstateGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PutConversationsCobrowsesessionRecordingstateGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutConversationsCobrowsesessionRecordingstateGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/cobrowsesessions/{conversationId}/recordingstate][%d] putConversationsCobrowsesessionRecordingstateGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutConversationsCobrowsesessionRecordingstateGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsCobrowsesessionRecordingstateGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchConversationsMessagingIntegrationsOpenIntegrationIDReader is a Reader for the PatchConversationsMessagingIntegrationsOpenIntegrationID structure.
type PatchConversationsMessagingIntegrationsOpenIntegrationIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchConversationsMessagingIntegrationsOpenIntegrationIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchConversationsMessagingIntegrationsOpenIntegrationIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchConversationsMessagingIntegrationsOpenIntegrationIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchConversationsMessagingIntegrationsOpenIntegrationIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchConversationsMessagingIntegrationsOpenIntegrationIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchConversationsMessagingIntegrationsOpenIntegrationIDRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchConversationsMessagingIntegrationsOpenIntegrationIDRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchConversationsMessagingIntegrationsOpenIntegrationIDUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchConversationsMessagingIntegrationsOpenIntegrationIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchConversationsMessagingIntegrationsOpenIntegrationIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchConversationsMessagingIntegrationsOpenIntegrationIDServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchConversationsMessagingIntegrationsOpenIntegrationIDGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchConversationsMessagingIntegrationsOpenIntegrationIDOK creates a PatchConversationsMessagingIntegrationsOpenIntegrationIDOK with default headers values
func NewPatchConversationsMessagingIntegrationsOpenIntegrationIDOK() *PatchConversationsMessagingIntegrationsOpenIntegrationIDOK {
	return &PatchConversationsMessagingIntegrationsOpenIntegrationIDOK{}
}

/*
PatchConversationsMessagingIntegrationsOpenIntegrationIDOK describes a response with status code 200, with default header values.

successful operation
*/
type PatchConversationsMessagingIntegrationsOpenIntegrationIDOK struct {
	Payload *models.OpenIntegration
}

// IsSuccess returns true when this patch conversations messaging integrations open integration Id o k response has a 2xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch conversations messaging integrations open integration Id o k response has a 3xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations messaging integrations open integration Id o k response has a 4xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations messaging integrations open integration Id o k response has a 5xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations messaging integrations open integration Id o k response a status code equal to that given
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/open/{integrationId}][%d] patchConversationsMessagingIntegrationsOpenIntegrationIdOK  %+v", 200, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDOK) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/open/{integrationId}][%d] patchConversationsMessagingIntegrationsOpenIntegrationIdOK  %+v", 200, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDOK) GetPayload() *models.OpenIntegration {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OpenIntegration)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingIntegrationsOpenIntegrationIDBadRequest creates a PatchConversationsMessagingIntegrationsOpenIntegrationIDBadRequest with default headers values
func NewPatchConversationsMessagingIntegrationsOpenIntegrationIDBadRequest() *PatchConversationsMessagingIntegrationsOpenIntegrationIDBadRequest {
	return &PatchConversationsMessagingIntegrationsOpenIntegrationIDBadRequest{}
}

/*
PatchConversationsMessagingIntegrationsOpenIntegrationIDBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchConversationsMessagingIntegrationsOpenIntegrationIDBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations messaging integrations open integration Id bad request response has a 2xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations messaging integrations open integration Id bad request response has a 3xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations messaging integrations open integration Id bad request response has a 4xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations messaging integrations open integration Id bad request response has a 5xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations messaging integrations open integration Id bad request response a status code equal to that given
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/open/{integrationId}][%d] patchConversationsMessagingIntegrationsOpenIntegrationIdBadRequest  %+v", 400, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/open/{integrationId}][%d] patchConversationsMessagingIntegrationsOpenIntegrationIdBadRequest  %+v", 400, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingIntegrationsOpenIntegrationIDUnauthorized creates a PatchConversationsMessagingIntegrationsOpenIntegrationIDUnauthorized with default headers values
func NewPatchConversationsMessagingIntegrationsOpenIntegrationIDUnauthorized() *PatchConversationsMessagingIntegrationsOpenIntegrationIDUnauthorized {
	return &PatchConversationsMessagingIntegrationsOpenIntegrationIDUnauthorized{}
}

/*
PatchConversationsMessagingIntegrationsOpenIntegrationIDUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchConversationsMessagingIntegrationsOpenIntegrationIDUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations messaging integrations open integration Id unauthorized response has a 2xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations messaging integrations open integration Id unauthorized response has a 3xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations messaging integrations open integration Id unauthorized response has a 4xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations messaging integrations open integration Id unauthorized response has a 5xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations messaging integrations open integration Id unauthorized response a status code equal to that given
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/open/{integrationId}][%d] patchConversationsMessagingIntegrationsOpenIntegrationIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/open/{integrationId}][%d] patchConversationsMessagingIntegrationsOpenIntegrationIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingIntegrationsOpenIntegrationIDForbidden creates a PatchConversationsMessagingIntegrationsOpenIntegrationIDForbidden with default headers values
func NewPatchConversationsMessagingIntegrationsOpenIntegrationIDForbidden() *PatchConversationsMessagingIntegrationsOpenIntegrationIDForbidden {
	return &PatchConversationsMessagingIntegrationsOpenIntegrationIDForbidden{}
}

/*
PatchConversationsMessagingIntegrationsOpenIntegrationIDForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PatchConversationsMessagingIntegrationsOpenIntegrationIDForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations messaging integrations open integration Id forbidden response has a 2xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations messaging integrations open integration Id forbidden response has a 3xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations messaging integrations open integration Id forbidden response has a 4xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations messaging integrations open integration Id forbidden response has a 5xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations messaging integrations open integration Id forbidden response a status code equal to that given
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/open/{integrationId}][%d] patchConversationsMessagingIntegrationsOpenIntegrationIdForbidden  %+v", 403, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/open/{integrationId}][%d] patchConversationsMessagingIntegrationsOpenIntegrationIdForbidden  %+v", 403, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingIntegrationsOpenIntegrationIDNotFound creates a PatchConversationsMessagingIntegrationsOpenIntegrationIDNotFound with default headers values
func NewPatchConversationsMessagingIntegrationsOpenIntegrationIDNotFound() *PatchConversationsMessagingIntegrationsOpenIntegrationIDNotFound {
	return &PatchConversationsMessagingIntegrationsOpenIntegrationIDNotFound{}
}

/*
PatchConversationsMessagingIntegrationsOpenIntegrationIDNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PatchConversationsMessagingIntegrationsOpenIntegrationIDNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations messaging integrations open integration Id not found response has a 2xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations messaging integrations open integration Id not found response has a 3xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations messaging integrations open integration Id not found response has a 4xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations messaging integrations open integration Id not found response has a 5xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations messaging integrations open integration Id not found response a status code equal to that given
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/open/{integrationId}][%d] patchConversationsMessagingIntegrationsOpenIntegrationIdNotFound  %+v", 404, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/open/{integrationId}][%d] patchConversationsMessagingIntegrationsOpenIntegrationIdNotFound  %+v", 404, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingIntegrationsOpenIntegrationIDRequestTimeout creates a PatchConversationsMessagingIntegrationsOpenIntegrationIDRequestTimeout with default headers values
func NewPatchConversationsMessagingIntegrationsOpenIntegrationIDRequestTimeout() *PatchConversationsMessagingIntegrationsOpenIntegrationIDRequestTimeout {
	return &PatchConversationsMessagingIntegrationsOpenIntegrationIDRequestTimeout{}
}

/*
PatchConversationsMessagingIntegrationsOpenIntegrationIDRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchConversationsMessagingIntegrationsOpenIntegrationIDRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations messaging integrations open integration Id request timeout response has a 2xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations messaging integrations open integration Id request timeout response has a 3xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations messaging integrations open integration Id request timeout response has a 4xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations messaging integrations open integration Id request timeout response has a 5xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations messaging integrations open integration Id request timeout response a status code equal to that given
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/open/{integrationId}][%d] patchConversationsMessagingIntegrationsOpenIntegrationIdRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDRequestTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/open/{integrationId}][%d] patchConversationsMessagingIntegrationsOpenIntegrationIdRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingIntegrationsOpenIntegrationIDRequestEntityTooLarge creates a PatchConversationsMessagingIntegrationsOpenIntegrationIDRequestEntityTooLarge with default headers values
func NewPatchConversationsMessagingIntegrationsOpenIntegrationIDRequestEntityTooLarge() *PatchConversationsMessagingIntegrationsOpenIntegrationIDRequestEntityTooLarge {
	return &PatchConversationsMessagingIntegrationsOpenIntegrationIDRequestEntityTooLarge{}
}

/*
PatchConversationsMessagingIntegrationsOpenIntegrationIDRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PatchConversationsMessagingIntegrationsOpenIntegrationIDRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations messaging integrations open integration Id request entity too large response has a 2xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations messaging integrations open integration Id request entity too large response has a 3xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations messaging integrations open integration Id request entity too large response has a 4xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations messaging integrations open integration Id request entity too large response has a 5xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations messaging integrations open integration Id request entity too large response a status code equal to that given
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/open/{integrationId}][%d] patchConversationsMessagingIntegrationsOpenIntegrationIdRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/open/{integrationId}][%d] patchConversationsMessagingIntegrationsOpenIntegrationIdRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingIntegrationsOpenIntegrationIDUnsupportedMediaType creates a PatchConversationsMessagingIntegrationsOpenIntegrationIDUnsupportedMediaType with default headers values
func NewPatchConversationsMessagingIntegrationsOpenIntegrationIDUnsupportedMediaType() *PatchConversationsMessagingIntegrationsOpenIntegrationIDUnsupportedMediaType {
	return &PatchConversationsMessagingIntegrationsOpenIntegrationIDUnsupportedMediaType{}
}

/*
PatchConversationsMessagingIntegrationsOpenIntegrationIDUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchConversationsMessagingIntegrationsOpenIntegrationIDUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations messaging integrations open integration Id unsupported media type response has a 2xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations messaging integrations open integration Id unsupported media type response has a 3xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations messaging integrations open integration Id unsupported media type response has a 4xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations messaging integrations open integration Id unsupported media type response has a 5xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations messaging integrations open integration Id unsupported media type response a status code equal to that given
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/open/{integrationId}][%d] patchConversationsMessagingIntegrationsOpenIntegrationIdUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/open/{integrationId}][%d] patchConversationsMessagingIntegrationsOpenIntegrationIdUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingIntegrationsOpenIntegrationIDTooManyRequests creates a PatchConversationsMessagingIntegrationsOpenIntegrationIDTooManyRequests with default headers values
func NewPatchConversationsMessagingIntegrationsOpenIntegrationIDTooManyRequests() *PatchConversationsMessagingIntegrationsOpenIntegrationIDTooManyRequests {
	return &PatchConversationsMessagingIntegrationsOpenIntegrationIDTooManyRequests{}
}

/*
PatchConversationsMessagingIntegrationsOpenIntegrationIDTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchConversationsMessagingIntegrationsOpenIntegrationIDTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations messaging integrations open integration Id too many requests response has a 2xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations messaging integrations open integration Id too many requests response has a 3xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations messaging integrations open integration Id too many requests response has a 4xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations messaging integrations open integration Id too many requests response has a 5xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations messaging integrations open integration Id too many requests response a status code equal to that given
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/open/{integrationId}][%d] patchConversationsMessagingIntegrationsOpenIntegrationIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/open/{integrationId}][%d] patchConversationsMessagingIntegrationsOpenIntegrationIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingIntegrationsOpenIntegrationIDInternalServerError creates a PatchConversationsMessagingIntegrationsOpenIntegrationIDInternalServerError with default headers values
func NewPatchConversationsMessagingIntegrationsOpenIntegrationIDInternalServerError() *PatchConversationsMessagingIntegrationsOpenIntegrationIDInternalServerError {
	return &PatchConversationsMessagingIntegrationsOpenIntegrationIDInternalServerError{}
}

/*
PatchConversationsMessagingIntegrationsOpenIntegrationIDInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchConversationsMessagingIntegrationsOpenIntegrationIDInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations messaging integrations open integration Id internal server error response has a 2xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations messaging integrations open integration Id internal server error response has a 3xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations messaging integrations open integration Id internal server error response has a 4xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations messaging integrations open integration Id internal server error response has a 5xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations messaging integrations open integration Id internal server error response a status code equal to that given
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/open/{integrationId}][%d] patchConversationsMessagingIntegrationsOpenIntegrationIdInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/open/{integrationId}][%d] patchConversationsMessagingIntegrationsOpenIntegrationIdInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingIntegrationsOpenIntegrationIDServiceUnavailable creates a PatchConversationsMessagingIntegrationsOpenIntegrationIDServiceUnavailable with default headers values
func NewPatchConversationsMessagingIntegrationsOpenIntegrationIDServiceUnavailable() *PatchConversationsMessagingIntegrationsOpenIntegrationIDServiceUnavailable {
	return &PatchConversationsMessagingIntegrationsOpenIntegrationIDServiceUnavailable{}
}

/*
PatchConversationsMessagingIntegrationsOpenIntegrationIDServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchConversationsMessagingIntegrationsOpenIntegrationIDServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations messaging integrations open integration Id service unavailable response has a 2xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations messaging integrations open integration Id service unavailable response has a 3xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations messaging integrations open integration Id service unavailable response has a 4xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations messaging integrations open integration Id service unavailable response has a 5xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations messaging integrations open integration Id service unavailable response a status code equal to that given
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/open/{integrationId}][%d] patchConversationsMessagingIntegrationsOpenIntegrationIdServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDServiceUnavailable) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/open/{integrationId}][%d] patchConversationsMessagingIntegrationsOpenIntegrationIdServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingIntegrationsOpenIntegrationIDGatewayTimeout creates a PatchConversationsMessagingIntegrationsOpenIntegrationIDGatewayTimeout with default headers values
func NewPatchConversationsMessagingIntegrationsOpenIntegrationIDGatewayTimeout() *PatchConversationsMessagingIntegrationsOpenIntegrationIDGatewayTimeout {
	return &PatchConversationsMessagingIntegrationsOpenIntegrationIDGatewayTimeout{}
}

/*
PatchConversationsMessagingIntegrationsOpenIntegrationIDGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PatchConversationsMessagingIntegrationsOpenIntegrationIDGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations messaging integrations open integration Id gateway timeout response has a 2xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations messaging integrations open integration Id gateway timeout response has a 3xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations messaging integrations open integration Id gateway timeout response has a 4xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations messaging integrations open integration Id gateway timeout response has a 5xx status code
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations messaging integrations open integration Id gateway timeout response a status code equal to that given
func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/open/{integrationId}][%d] patchConversationsMessagingIntegrationsOpenIntegrationIdGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDGatewayTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/open/{integrationId}][%d] patchConversationsMessagingIntegrationsOpenIntegrationIdGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsOpenIntegrationIDGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

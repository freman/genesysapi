// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchConversationsMessagingIntegrationsFacebookIntegrationIDReader is a Reader for the PatchConversationsMessagingIntegrationsFacebookIntegrationID structure.
type PatchConversationsMessagingIntegrationsFacebookIntegrationIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchConversationsMessagingIntegrationsFacebookIntegrationIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchConversationsMessagingIntegrationsFacebookIntegrationIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchConversationsMessagingIntegrationsFacebookIntegrationIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchConversationsMessagingIntegrationsFacebookIntegrationIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchConversationsMessagingIntegrationsFacebookIntegrationIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchConversationsMessagingIntegrationsFacebookIntegrationIDRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchConversationsMessagingIntegrationsFacebookIntegrationIDRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchConversationsMessagingIntegrationsFacebookIntegrationIDUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchConversationsMessagingIntegrationsFacebookIntegrationIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchConversationsMessagingIntegrationsFacebookIntegrationIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchConversationsMessagingIntegrationsFacebookIntegrationIDServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchConversationsMessagingIntegrationsFacebookIntegrationIDGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchConversationsMessagingIntegrationsFacebookIntegrationIDOK creates a PatchConversationsMessagingIntegrationsFacebookIntegrationIDOK with default headers values
func NewPatchConversationsMessagingIntegrationsFacebookIntegrationIDOK() *PatchConversationsMessagingIntegrationsFacebookIntegrationIDOK {
	return &PatchConversationsMessagingIntegrationsFacebookIntegrationIDOK{}
}

/*
PatchConversationsMessagingIntegrationsFacebookIntegrationIDOK describes a response with status code 200, with default header values.

successful operation
*/
type PatchConversationsMessagingIntegrationsFacebookIntegrationIDOK struct {
	Payload *models.FacebookIntegration
}

// IsSuccess returns true when this patch conversations messaging integrations facebook integration Id o k response has a 2xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch conversations messaging integrations facebook integration Id o k response has a 3xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations messaging integrations facebook integration Id o k response has a 4xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations messaging integrations facebook integration Id o k response has a 5xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations messaging integrations facebook integration Id o k response a status code equal to that given
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/facebook/{integrationId}][%d] patchConversationsMessagingIntegrationsFacebookIntegrationIdOK  %+v", 200, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDOK) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/facebook/{integrationId}][%d] patchConversationsMessagingIntegrationsFacebookIntegrationIdOK  %+v", 200, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDOK) GetPayload() *models.FacebookIntegration {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FacebookIntegration)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingIntegrationsFacebookIntegrationIDBadRequest creates a PatchConversationsMessagingIntegrationsFacebookIntegrationIDBadRequest with default headers values
func NewPatchConversationsMessagingIntegrationsFacebookIntegrationIDBadRequest() *PatchConversationsMessagingIntegrationsFacebookIntegrationIDBadRequest {
	return &PatchConversationsMessagingIntegrationsFacebookIntegrationIDBadRequest{}
}

/*
PatchConversationsMessagingIntegrationsFacebookIntegrationIDBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchConversationsMessagingIntegrationsFacebookIntegrationIDBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations messaging integrations facebook integration Id bad request response has a 2xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations messaging integrations facebook integration Id bad request response has a 3xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations messaging integrations facebook integration Id bad request response has a 4xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations messaging integrations facebook integration Id bad request response has a 5xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations messaging integrations facebook integration Id bad request response a status code equal to that given
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/facebook/{integrationId}][%d] patchConversationsMessagingIntegrationsFacebookIntegrationIdBadRequest  %+v", 400, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/facebook/{integrationId}][%d] patchConversationsMessagingIntegrationsFacebookIntegrationIdBadRequest  %+v", 400, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingIntegrationsFacebookIntegrationIDUnauthorized creates a PatchConversationsMessagingIntegrationsFacebookIntegrationIDUnauthorized with default headers values
func NewPatchConversationsMessagingIntegrationsFacebookIntegrationIDUnauthorized() *PatchConversationsMessagingIntegrationsFacebookIntegrationIDUnauthorized {
	return &PatchConversationsMessagingIntegrationsFacebookIntegrationIDUnauthorized{}
}

/*
PatchConversationsMessagingIntegrationsFacebookIntegrationIDUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchConversationsMessagingIntegrationsFacebookIntegrationIDUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations messaging integrations facebook integration Id unauthorized response has a 2xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations messaging integrations facebook integration Id unauthorized response has a 3xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations messaging integrations facebook integration Id unauthorized response has a 4xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations messaging integrations facebook integration Id unauthorized response has a 5xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations messaging integrations facebook integration Id unauthorized response a status code equal to that given
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/facebook/{integrationId}][%d] patchConversationsMessagingIntegrationsFacebookIntegrationIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/facebook/{integrationId}][%d] patchConversationsMessagingIntegrationsFacebookIntegrationIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingIntegrationsFacebookIntegrationIDForbidden creates a PatchConversationsMessagingIntegrationsFacebookIntegrationIDForbidden with default headers values
func NewPatchConversationsMessagingIntegrationsFacebookIntegrationIDForbidden() *PatchConversationsMessagingIntegrationsFacebookIntegrationIDForbidden {
	return &PatchConversationsMessagingIntegrationsFacebookIntegrationIDForbidden{}
}

/*
PatchConversationsMessagingIntegrationsFacebookIntegrationIDForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PatchConversationsMessagingIntegrationsFacebookIntegrationIDForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations messaging integrations facebook integration Id forbidden response has a 2xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations messaging integrations facebook integration Id forbidden response has a 3xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations messaging integrations facebook integration Id forbidden response has a 4xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations messaging integrations facebook integration Id forbidden response has a 5xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations messaging integrations facebook integration Id forbidden response a status code equal to that given
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/facebook/{integrationId}][%d] patchConversationsMessagingIntegrationsFacebookIntegrationIdForbidden  %+v", 403, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/facebook/{integrationId}][%d] patchConversationsMessagingIntegrationsFacebookIntegrationIdForbidden  %+v", 403, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingIntegrationsFacebookIntegrationIDNotFound creates a PatchConversationsMessagingIntegrationsFacebookIntegrationIDNotFound with default headers values
func NewPatchConversationsMessagingIntegrationsFacebookIntegrationIDNotFound() *PatchConversationsMessagingIntegrationsFacebookIntegrationIDNotFound {
	return &PatchConversationsMessagingIntegrationsFacebookIntegrationIDNotFound{}
}

/*
PatchConversationsMessagingIntegrationsFacebookIntegrationIDNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PatchConversationsMessagingIntegrationsFacebookIntegrationIDNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations messaging integrations facebook integration Id not found response has a 2xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations messaging integrations facebook integration Id not found response has a 3xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations messaging integrations facebook integration Id not found response has a 4xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations messaging integrations facebook integration Id not found response has a 5xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations messaging integrations facebook integration Id not found response a status code equal to that given
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/facebook/{integrationId}][%d] patchConversationsMessagingIntegrationsFacebookIntegrationIdNotFound  %+v", 404, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/facebook/{integrationId}][%d] patchConversationsMessagingIntegrationsFacebookIntegrationIdNotFound  %+v", 404, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingIntegrationsFacebookIntegrationIDRequestTimeout creates a PatchConversationsMessagingIntegrationsFacebookIntegrationIDRequestTimeout with default headers values
func NewPatchConversationsMessagingIntegrationsFacebookIntegrationIDRequestTimeout() *PatchConversationsMessagingIntegrationsFacebookIntegrationIDRequestTimeout {
	return &PatchConversationsMessagingIntegrationsFacebookIntegrationIDRequestTimeout{}
}

/*
PatchConversationsMessagingIntegrationsFacebookIntegrationIDRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchConversationsMessagingIntegrationsFacebookIntegrationIDRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations messaging integrations facebook integration Id request timeout response has a 2xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations messaging integrations facebook integration Id request timeout response has a 3xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations messaging integrations facebook integration Id request timeout response has a 4xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations messaging integrations facebook integration Id request timeout response has a 5xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations messaging integrations facebook integration Id request timeout response a status code equal to that given
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/facebook/{integrationId}][%d] patchConversationsMessagingIntegrationsFacebookIntegrationIdRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDRequestTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/facebook/{integrationId}][%d] patchConversationsMessagingIntegrationsFacebookIntegrationIdRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingIntegrationsFacebookIntegrationIDRequestEntityTooLarge creates a PatchConversationsMessagingIntegrationsFacebookIntegrationIDRequestEntityTooLarge with default headers values
func NewPatchConversationsMessagingIntegrationsFacebookIntegrationIDRequestEntityTooLarge() *PatchConversationsMessagingIntegrationsFacebookIntegrationIDRequestEntityTooLarge {
	return &PatchConversationsMessagingIntegrationsFacebookIntegrationIDRequestEntityTooLarge{}
}

/*
PatchConversationsMessagingIntegrationsFacebookIntegrationIDRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PatchConversationsMessagingIntegrationsFacebookIntegrationIDRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations messaging integrations facebook integration Id request entity too large response has a 2xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations messaging integrations facebook integration Id request entity too large response has a 3xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations messaging integrations facebook integration Id request entity too large response has a 4xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations messaging integrations facebook integration Id request entity too large response has a 5xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations messaging integrations facebook integration Id request entity too large response a status code equal to that given
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/facebook/{integrationId}][%d] patchConversationsMessagingIntegrationsFacebookIntegrationIdRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/facebook/{integrationId}][%d] patchConversationsMessagingIntegrationsFacebookIntegrationIdRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingIntegrationsFacebookIntegrationIDUnsupportedMediaType creates a PatchConversationsMessagingIntegrationsFacebookIntegrationIDUnsupportedMediaType with default headers values
func NewPatchConversationsMessagingIntegrationsFacebookIntegrationIDUnsupportedMediaType() *PatchConversationsMessagingIntegrationsFacebookIntegrationIDUnsupportedMediaType {
	return &PatchConversationsMessagingIntegrationsFacebookIntegrationIDUnsupportedMediaType{}
}

/*
PatchConversationsMessagingIntegrationsFacebookIntegrationIDUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchConversationsMessagingIntegrationsFacebookIntegrationIDUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations messaging integrations facebook integration Id unsupported media type response has a 2xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations messaging integrations facebook integration Id unsupported media type response has a 3xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations messaging integrations facebook integration Id unsupported media type response has a 4xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations messaging integrations facebook integration Id unsupported media type response has a 5xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations messaging integrations facebook integration Id unsupported media type response a status code equal to that given
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/facebook/{integrationId}][%d] patchConversationsMessagingIntegrationsFacebookIntegrationIdUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/facebook/{integrationId}][%d] patchConversationsMessagingIntegrationsFacebookIntegrationIdUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingIntegrationsFacebookIntegrationIDTooManyRequests creates a PatchConversationsMessagingIntegrationsFacebookIntegrationIDTooManyRequests with default headers values
func NewPatchConversationsMessagingIntegrationsFacebookIntegrationIDTooManyRequests() *PatchConversationsMessagingIntegrationsFacebookIntegrationIDTooManyRequests {
	return &PatchConversationsMessagingIntegrationsFacebookIntegrationIDTooManyRequests{}
}

/*
PatchConversationsMessagingIntegrationsFacebookIntegrationIDTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchConversationsMessagingIntegrationsFacebookIntegrationIDTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations messaging integrations facebook integration Id too many requests response has a 2xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations messaging integrations facebook integration Id too many requests response has a 3xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations messaging integrations facebook integration Id too many requests response has a 4xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations messaging integrations facebook integration Id too many requests response has a 5xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations messaging integrations facebook integration Id too many requests response a status code equal to that given
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/facebook/{integrationId}][%d] patchConversationsMessagingIntegrationsFacebookIntegrationIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/facebook/{integrationId}][%d] patchConversationsMessagingIntegrationsFacebookIntegrationIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingIntegrationsFacebookIntegrationIDInternalServerError creates a PatchConversationsMessagingIntegrationsFacebookIntegrationIDInternalServerError with default headers values
func NewPatchConversationsMessagingIntegrationsFacebookIntegrationIDInternalServerError() *PatchConversationsMessagingIntegrationsFacebookIntegrationIDInternalServerError {
	return &PatchConversationsMessagingIntegrationsFacebookIntegrationIDInternalServerError{}
}

/*
PatchConversationsMessagingIntegrationsFacebookIntegrationIDInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchConversationsMessagingIntegrationsFacebookIntegrationIDInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations messaging integrations facebook integration Id internal server error response has a 2xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations messaging integrations facebook integration Id internal server error response has a 3xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations messaging integrations facebook integration Id internal server error response has a 4xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations messaging integrations facebook integration Id internal server error response has a 5xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations messaging integrations facebook integration Id internal server error response a status code equal to that given
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/facebook/{integrationId}][%d] patchConversationsMessagingIntegrationsFacebookIntegrationIdInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/facebook/{integrationId}][%d] patchConversationsMessagingIntegrationsFacebookIntegrationIdInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingIntegrationsFacebookIntegrationIDServiceUnavailable creates a PatchConversationsMessagingIntegrationsFacebookIntegrationIDServiceUnavailable with default headers values
func NewPatchConversationsMessagingIntegrationsFacebookIntegrationIDServiceUnavailable() *PatchConversationsMessagingIntegrationsFacebookIntegrationIDServiceUnavailable {
	return &PatchConversationsMessagingIntegrationsFacebookIntegrationIDServiceUnavailable{}
}

/*
PatchConversationsMessagingIntegrationsFacebookIntegrationIDServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchConversationsMessagingIntegrationsFacebookIntegrationIDServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations messaging integrations facebook integration Id service unavailable response has a 2xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations messaging integrations facebook integration Id service unavailable response has a 3xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations messaging integrations facebook integration Id service unavailable response has a 4xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations messaging integrations facebook integration Id service unavailable response has a 5xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations messaging integrations facebook integration Id service unavailable response a status code equal to that given
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/facebook/{integrationId}][%d] patchConversationsMessagingIntegrationsFacebookIntegrationIdServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDServiceUnavailable) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/facebook/{integrationId}][%d] patchConversationsMessagingIntegrationsFacebookIntegrationIdServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingIntegrationsFacebookIntegrationIDGatewayTimeout creates a PatchConversationsMessagingIntegrationsFacebookIntegrationIDGatewayTimeout with default headers values
func NewPatchConversationsMessagingIntegrationsFacebookIntegrationIDGatewayTimeout() *PatchConversationsMessagingIntegrationsFacebookIntegrationIDGatewayTimeout {
	return &PatchConversationsMessagingIntegrationsFacebookIntegrationIDGatewayTimeout{}
}

/*
PatchConversationsMessagingIntegrationsFacebookIntegrationIDGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PatchConversationsMessagingIntegrationsFacebookIntegrationIDGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations messaging integrations facebook integration Id gateway timeout response has a 2xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations messaging integrations facebook integration Id gateway timeout response has a 3xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations messaging integrations facebook integration Id gateway timeout response has a 4xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations messaging integrations facebook integration Id gateway timeout response has a 5xx status code
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations messaging integrations facebook integration Id gateway timeout response a status code equal to that given
func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/facebook/{integrationId}][%d] patchConversationsMessagingIntegrationsFacebookIntegrationIdGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDGatewayTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/facebook/{integrationId}][%d] patchConversationsMessagingIntegrationsFacebookIntegrationIdGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsFacebookIntegrationIDGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutConversationTagsReader is a Reader for the PutConversationTags structure.
type PutConversationTagsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutConversationTagsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewPutConversationTagsAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutConversationTagsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutConversationTagsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutConversationTagsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutConversationTagsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPutConversationTagsRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutConversationTagsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutConversationTagsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutConversationTagsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutConversationTagsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutConversationTagsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutConversationTagsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutConversationTagsAccepted creates a PutConversationTagsAccepted with default headers values
func NewPutConversationTagsAccepted() *PutConversationTagsAccepted {
	return &PutConversationTagsAccepted{}
}

/*
PutConversationTagsAccepted describes a response with status code 202, with default header values.

The tags update request was accepted.
*/
type PutConversationTagsAccepted struct {
	Payload string
}

// IsSuccess returns true when this put conversation tags accepted response has a 2xx status code
func (o *PutConversationTagsAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put conversation tags accepted response has a 3xx status code
func (o *PutConversationTagsAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put conversation tags accepted response has a 4xx status code
func (o *PutConversationTagsAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this put conversation tags accepted response has a 5xx status code
func (o *PutConversationTagsAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this put conversation tags accepted response a status code equal to that given
func (o *PutConversationTagsAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *PutConversationTagsAccepted) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/tags][%d] putConversationTagsAccepted  %+v", 202, o.Payload)
}

func (o *PutConversationTagsAccepted) String() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/tags][%d] putConversationTagsAccepted  %+v", 202, o.Payload)
}

func (o *PutConversationTagsAccepted) GetPayload() string {
	return o.Payload
}

func (o *PutConversationTagsAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationTagsBadRequest creates a PutConversationTagsBadRequest with default headers values
func NewPutConversationTagsBadRequest() *PutConversationTagsBadRequest {
	return &PutConversationTagsBadRequest{}
}

/*
PutConversationTagsBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutConversationTagsBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put conversation tags bad request response has a 2xx status code
func (o *PutConversationTagsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put conversation tags bad request response has a 3xx status code
func (o *PutConversationTagsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put conversation tags bad request response has a 4xx status code
func (o *PutConversationTagsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put conversation tags bad request response has a 5xx status code
func (o *PutConversationTagsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put conversation tags bad request response a status code equal to that given
func (o *PutConversationTagsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PutConversationTagsBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/tags][%d] putConversationTagsBadRequest  %+v", 400, o.Payload)
}

func (o *PutConversationTagsBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/tags][%d] putConversationTagsBadRequest  %+v", 400, o.Payload)
}

func (o *PutConversationTagsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationTagsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationTagsUnauthorized creates a PutConversationTagsUnauthorized with default headers values
func NewPutConversationTagsUnauthorized() *PutConversationTagsUnauthorized {
	return &PutConversationTagsUnauthorized{}
}

/*
PutConversationTagsUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PutConversationTagsUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put conversation tags unauthorized response has a 2xx status code
func (o *PutConversationTagsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put conversation tags unauthorized response has a 3xx status code
func (o *PutConversationTagsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put conversation tags unauthorized response has a 4xx status code
func (o *PutConversationTagsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put conversation tags unauthorized response has a 5xx status code
func (o *PutConversationTagsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put conversation tags unauthorized response a status code equal to that given
func (o *PutConversationTagsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PutConversationTagsUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/tags][%d] putConversationTagsUnauthorized  %+v", 401, o.Payload)
}

func (o *PutConversationTagsUnauthorized) String() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/tags][%d] putConversationTagsUnauthorized  %+v", 401, o.Payload)
}

func (o *PutConversationTagsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationTagsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationTagsForbidden creates a PutConversationTagsForbidden with default headers values
func NewPutConversationTagsForbidden() *PutConversationTagsForbidden {
	return &PutConversationTagsForbidden{}
}

/*
PutConversationTagsForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PutConversationTagsForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put conversation tags forbidden response has a 2xx status code
func (o *PutConversationTagsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put conversation tags forbidden response has a 3xx status code
func (o *PutConversationTagsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put conversation tags forbidden response has a 4xx status code
func (o *PutConversationTagsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put conversation tags forbidden response has a 5xx status code
func (o *PutConversationTagsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put conversation tags forbidden response a status code equal to that given
func (o *PutConversationTagsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PutConversationTagsForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/tags][%d] putConversationTagsForbidden  %+v", 403, o.Payload)
}

func (o *PutConversationTagsForbidden) String() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/tags][%d] putConversationTagsForbidden  %+v", 403, o.Payload)
}

func (o *PutConversationTagsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationTagsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationTagsNotFound creates a PutConversationTagsNotFound with default headers values
func NewPutConversationTagsNotFound() *PutConversationTagsNotFound {
	return &PutConversationTagsNotFound{}
}

/*
PutConversationTagsNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PutConversationTagsNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put conversation tags not found response has a 2xx status code
func (o *PutConversationTagsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put conversation tags not found response has a 3xx status code
func (o *PutConversationTagsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put conversation tags not found response has a 4xx status code
func (o *PutConversationTagsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put conversation tags not found response has a 5xx status code
func (o *PutConversationTagsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put conversation tags not found response a status code equal to that given
func (o *PutConversationTagsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PutConversationTagsNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/tags][%d] putConversationTagsNotFound  %+v", 404, o.Payload)
}

func (o *PutConversationTagsNotFound) String() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/tags][%d] putConversationTagsNotFound  %+v", 404, o.Payload)
}

func (o *PutConversationTagsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationTagsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationTagsRequestTimeout creates a PutConversationTagsRequestTimeout with default headers values
func NewPutConversationTagsRequestTimeout() *PutConversationTagsRequestTimeout {
	return &PutConversationTagsRequestTimeout{}
}

/*
PutConversationTagsRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PutConversationTagsRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put conversation tags request timeout response has a 2xx status code
func (o *PutConversationTagsRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put conversation tags request timeout response has a 3xx status code
func (o *PutConversationTagsRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put conversation tags request timeout response has a 4xx status code
func (o *PutConversationTagsRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this put conversation tags request timeout response has a 5xx status code
func (o *PutConversationTagsRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this put conversation tags request timeout response a status code equal to that given
func (o *PutConversationTagsRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PutConversationTagsRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/tags][%d] putConversationTagsRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutConversationTagsRequestTimeout) String() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/tags][%d] putConversationTagsRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutConversationTagsRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationTagsRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationTagsRequestEntityTooLarge creates a PutConversationTagsRequestEntityTooLarge with default headers values
func NewPutConversationTagsRequestEntityTooLarge() *PutConversationTagsRequestEntityTooLarge {
	return &PutConversationTagsRequestEntityTooLarge{}
}

/*
PutConversationTagsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PutConversationTagsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put conversation tags request entity too large response has a 2xx status code
func (o *PutConversationTagsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put conversation tags request entity too large response has a 3xx status code
func (o *PutConversationTagsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put conversation tags request entity too large response has a 4xx status code
func (o *PutConversationTagsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this put conversation tags request entity too large response has a 5xx status code
func (o *PutConversationTagsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this put conversation tags request entity too large response a status code equal to that given
func (o *PutConversationTagsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PutConversationTagsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/tags][%d] putConversationTagsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutConversationTagsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/tags][%d] putConversationTagsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutConversationTagsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationTagsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationTagsUnsupportedMediaType creates a PutConversationTagsUnsupportedMediaType with default headers values
func NewPutConversationTagsUnsupportedMediaType() *PutConversationTagsUnsupportedMediaType {
	return &PutConversationTagsUnsupportedMediaType{}
}

/*
PutConversationTagsUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutConversationTagsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put conversation tags unsupported media type response has a 2xx status code
func (o *PutConversationTagsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put conversation tags unsupported media type response has a 3xx status code
func (o *PutConversationTagsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put conversation tags unsupported media type response has a 4xx status code
func (o *PutConversationTagsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this put conversation tags unsupported media type response has a 5xx status code
func (o *PutConversationTagsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this put conversation tags unsupported media type response a status code equal to that given
func (o *PutConversationTagsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PutConversationTagsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/tags][%d] putConversationTagsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutConversationTagsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/tags][%d] putConversationTagsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutConversationTagsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationTagsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationTagsTooManyRequests creates a PutConversationTagsTooManyRequests with default headers values
func NewPutConversationTagsTooManyRequests() *PutConversationTagsTooManyRequests {
	return &PutConversationTagsTooManyRequests{}
}

/*
PutConversationTagsTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PutConversationTagsTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put conversation tags too many requests response has a 2xx status code
func (o *PutConversationTagsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put conversation tags too many requests response has a 3xx status code
func (o *PutConversationTagsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put conversation tags too many requests response has a 4xx status code
func (o *PutConversationTagsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this put conversation tags too many requests response has a 5xx status code
func (o *PutConversationTagsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this put conversation tags too many requests response a status code equal to that given
func (o *PutConversationTagsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PutConversationTagsTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/tags][%d] putConversationTagsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutConversationTagsTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/tags][%d] putConversationTagsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutConversationTagsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationTagsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationTagsInternalServerError creates a PutConversationTagsInternalServerError with default headers values
func NewPutConversationTagsInternalServerError() *PutConversationTagsInternalServerError {
	return &PutConversationTagsInternalServerError{}
}

/*
PutConversationTagsInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutConversationTagsInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put conversation tags internal server error response has a 2xx status code
func (o *PutConversationTagsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put conversation tags internal server error response has a 3xx status code
func (o *PutConversationTagsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put conversation tags internal server error response has a 4xx status code
func (o *PutConversationTagsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this put conversation tags internal server error response has a 5xx status code
func (o *PutConversationTagsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this put conversation tags internal server error response a status code equal to that given
func (o *PutConversationTagsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PutConversationTagsInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/tags][%d] putConversationTagsInternalServerError  %+v", 500, o.Payload)
}

func (o *PutConversationTagsInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/tags][%d] putConversationTagsInternalServerError  %+v", 500, o.Payload)
}

func (o *PutConversationTagsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationTagsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationTagsServiceUnavailable creates a PutConversationTagsServiceUnavailable with default headers values
func NewPutConversationTagsServiceUnavailable() *PutConversationTagsServiceUnavailable {
	return &PutConversationTagsServiceUnavailable{}
}

/*
PutConversationTagsServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutConversationTagsServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put conversation tags service unavailable response has a 2xx status code
func (o *PutConversationTagsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put conversation tags service unavailable response has a 3xx status code
func (o *PutConversationTagsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put conversation tags service unavailable response has a 4xx status code
func (o *PutConversationTagsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this put conversation tags service unavailable response has a 5xx status code
func (o *PutConversationTagsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this put conversation tags service unavailable response a status code equal to that given
func (o *PutConversationTagsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PutConversationTagsServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/tags][%d] putConversationTagsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutConversationTagsServiceUnavailable) String() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/tags][%d] putConversationTagsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutConversationTagsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationTagsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationTagsGatewayTimeout creates a PutConversationTagsGatewayTimeout with default headers values
func NewPutConversationTagsGatewayTimeout() *PutConversationTagsGatewayTimeout {
	return &PutConversationTagsGatewayTimeout{}
}

/*
PutConversationTagsGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PutConversationTagsGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put conversation tags gateway timeout response has a 2xx status code
func (o *PutConversationTagsGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put conversation tags gateway timeout response has a 3xx status code
func (o *PutConversationTagsGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put conversation tags gateway timeout response has a 4xx status code
func (o *PutConversationTagsGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this put conversation tags gateway timeout response has a 5xx status code
func (o *PutConversationTagsGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this put conversation tags gateway timeout response a status code equal to that given
func (o *PutConversationTagsGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PutConversationTagsGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/tags][%d] putConversationTagsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutConversationTagsGatewayTimeout) String() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/{conversationId}/tags][%d] putConversationTagsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutConversationTagsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationTagsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

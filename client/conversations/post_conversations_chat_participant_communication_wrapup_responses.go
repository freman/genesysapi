// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostConversationsChatParticipantCommunicationWrapupReader is a Reader for the PostConversationsChatParticipantCommunicationWrapup structure.
type PostConversationsChatParticipantCommunicationWrapupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostConversationsChatParticipantCommunicationWrapupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewPostConversationsChatParticipantCommunicationWrapupAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostConversationsChatParticipantCommunicationWrapupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostConversationsChatParticipantCommunicationWrapupUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostConversationsChatParticipantCommunicationWrapupForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostConversationsChatParticipantCommunicationWrapupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostConversationsChatParticipantCommunicationWrapupRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostConversationsChatParticipantCommunicationWrapupRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostConversationsChatParticipantCommunicationWrapupUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostConversationsChatParticipantCommunicationWrapupTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostConversationsChatParticipantCommunicationWrapupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostConversationsChatParticipantCommunicationWrapupServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostConversationsChatParticipantCommunicationWrapupGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostConversationsChatParticipantCommunicationWrapupAccepted creates a PostConversationsChatParticipantCommunicationWrapupAccepted with default headers values
func NewPostConversationsChatParticipantCommunicationWrapupAccepted() *PostConversationsChatParticipantCommunicationWrapupAccepted {
	return &PostConversationsChatParticipantCommunicationWrapupAccepted{}
}

/*
PostConversationsChatParticipantCommunicationWrapupAccepted describes a response with status code 202, with default header values.

Accepted
*/
type PostConversationsChatParticipantCommunicationWrapupAccepted struct {
}

// IsSuccess returns true when this post conversations chat participant communication wrapup accepted response has a 2xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post conversations chat participant communication wrapup accepted response has a 3xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations chat participant communication wrapup accepted response has a 4xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this post conversations chat participant communication wrapup accepted response has a 5xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversations chat participant communication wrapup accepted response a status code equal to that given
func (o *PostConversationsChatParticipantCommunicationWrapupAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *PostConversationsChatParticipantCommunicationWrapupAccepted) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsChatParticipantCommunicationWrapupAccepted ", 202)
}

func (o *PostConversationsChatParticipantCommunicationWrapupAccepted) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsChatParticipantCommunicationWrapupAccepted ", 202)
}

func (o *PostConversationsChatParticipantCommunicationWrapupAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostConversationsChatParticipantCommunicationWrapupBadRequest creates a PostConversationsChatParticipantCommunicationWrapupBadRequest with default headers values
func NewPostConversationsChatParticipantCommunicationWrapupBadRequest() *PostConversationsChatParticipantCommunicationWrapupBadRequest {
	return &PostConversationsChatParticipantCommunicationWrapupBadRequest{}
}

/*
PostConversationsChatParticipantCommunicationWrapupBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostConversationsChatParticipantCommunicationWrapupBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversations chat participant communication wrapup bad request response has a 2xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversations chat participant communication wrapup bad request response has a 3xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations chat participant communication wrapup bad request response has a 4xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversations chat participant communication wrapup bad request response has a 5xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversations chat participant communication wrapup bad request response a status code equal to that given
func (o *PostConversationsChatParticipantCommunicationWrapupBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PostConversationsChatParticipantCommunicationWrapupBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsChatParticipantCommunicationWrapupBadRequest  %+v", 400, o.Payload)
}

func (o *PostConversationsChatParticipantCommunicationWrapupBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsChatParticipantCommunicationWrapupBadRequest  %+v", 400, o.Payload)
}

func (o *PostConversationsChatParticipantCommunicationWrapupBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsChatParticipantCommunicationWrapupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsChatParticipantCommunicationWrapupUnauthorized creates a PostConversationsChatParticipantCommunicationWrapupUnauthorized with default headers values
func NewPostConversationsChatParticipantCommunicationWrapupUnauthorized() *PostConversationsChatParticipantCommunicationWrapupUnauthorized {
	return &PostConversationsChatParticipantCommunicationWrapupUnauthorized{}
}

/*
PostConversationsChatParticipantCommunicationWrapupUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PostConversationsChatParticipantCommunicationWrapupUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversations chat participant communication wrapup unauthorized response has a 2xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversations chat participant communication wrapup unauthorized response has a 3xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations chat participant communication wrapup unauthorized response has a 4xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversations chat participant communication wrapup unauthorized response has a 5xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversations chat participant communication wrapup unauthorized response a status code equal to that given
func (o *PostConversationsChatParticipantCommunicationWrapupUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PostConversationsChatParticipantCommunicationWrapupUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsChatParticipantCommunicationWrapupUnauthorized  %+v", 401, o.Payload)
}

func (o *PostConversationsChatParticipantCommunicationWrapupUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsChatParticipantCommunicationWrapupUnauthorized  %+v", 401, o.Payload)
}

func (o *PostConversationsChatParticipantCommunicationWrapupUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsChatParticipantCommunicationWrapupUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsChatParticipantCommunicationWrapupForbidden creates a PostConversationsChatParticipantCommunicationWrapupForbidden with default headers values
func NewPostConversationsChatParticipantCommunicationWrapupForbidden() *PostConversationsChatParticipantCommunicationWrapupForbidden {
	return &PostConversationsChatParticipantCommunicationWrapupForbidden{}
}

/*
PostConversationsChatParticipantCommunicationWrapupForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PostConversationsChatParticipantCommunicationWrapupForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversations chat participant communication wrapup forbidden response has a 2xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversations chat participant communication wrapup forbidden response has a 3xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations chat participant communication wrapup forbidden response has a 4xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversations chat participant communication wrapup forbidden response has a 5xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversations chat participant communication wrapup forbidden response a status code equal to that given
func (o *PostConversationsChatParticipantCommunicationWrapupForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PostConversationsChatParticipantCommunicationWrapupForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsChatParticipantCommunicationWrapupForbidden  %+v", 403, o.Payload)
}

func (o *PostConversationsChatParticipantCommunicationWrapupForbidden) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsChatParticipantCommunicationWrapupForbidden  %+v", 403, o.Payload)
}

func (o *PostConversationsChatParticipantCommunicationWrapupForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsChatParticipantCommunicationWrapupForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsChatParticipantCommunicationWrapupNotFound creates a PostConversationsChatParticipantCommunicationWrapupNotFound with default headers values
func NewPostConversationsChatParticipantCommunicationWrapupNotFound() *PostConversationsChatParticipantCommunicationWrapupNotFound {
	return &PostConversationsChatParticipantCommunicationWrapupNotFound{}
}

/*
PostConversationsChatParticipantCommunicationWrapupNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PostConversationsChatParticipantCommunicationWrapupNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversations chat participant communication wrapup not found response has a 2xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversations chat participant communication wrapup not found response has a 3xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations chat participant communication wrapup not found response has a 4xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversations chat participant communication wrapup not found response has a 5xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversations chat participant communication wrapup not found response a status code equal to that given
func (o *PostConversationsChatParticipantCommunicationWrapupNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PostConversationsChatParticipantCommunicationWrapupNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsChatParticipantCommunicationWrapupNotFound  %+v", 404, o.Payload)
}

func (o *PostConversationsChatParticipantCommunicationWrapupNotFound) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsChatParticipantCommunicationWrapupNotFound  %+v", 404, o.Payload)
}

func (o *PostConversationsChatParticipantCommunicationWrapupNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsChatParticipantCommunicationWrapupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsChatParticipantCommunicationWrapupRequestTimeout creates a PostConversationsChatParticipantCommunicationWrapupRequestTimeout with default headers values
func NewPostConversationsChatParticipantCommunicationWrapupRequestTimeout() *PostConversationsChatParticipantCommunicationWrapupRequestTimeout {
	return &PostConversationsChatParticipantCommunicationWrapupRequestTimeout{}
}

/*
PostConversationsChatParticipantCommunicationWrapupRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PostConversationsChatParticipantCommunicationWrapupRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversations chat participant communication wrapup request timeout response has a 2xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversations chat participant communication wrapup request timeout response has a 3xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations chat participant communication wrapup request timeout response has a 4xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversations chat participant communication wrapup request timeout response has a 5xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversations chat participant communication wrapup request timeout response a status code equal to that given
func (o *PostConversationsChatParticipantCommunicationWrapupRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PostConversationsChatParticipantCommunicationWrapupRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsChatParticipantCommunicationWrapupRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostConversationsChatParticipantCommunicationWrapupRequestTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsChatParticipantCommunicationWrapupRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostConversationsChatParticipantCommunicationWrapupRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsChatParticipantCommunicationWrapupRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsChatParticipantCommunicationWrapupRequestEntityTooLarge creates a PostConversationsChatParticipantCommunicationWrapupRequestEntityTooLarge with default headers values
func NewPostConversationsChatParticipantCommunicationWrapupRequestEntityTooLarge() *PostConversationsChatParticipantCommunicationWrapupRequestEntityTooLarge {
	return &PostConversationsChatParticipantCommunicationWrapupRequestEntityTooLarge{}
}

/*
PostConversationsChatParticipantCommunicationWrapupRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PostConversationsChatParticipantCommunicationWrapupRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversations chat participant communication wrapup request entity too large response has a 2xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversations chat participant communication wrapup request entity too large response has a 3xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations chat participant communication wrapup request entity too large response has a 4xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversations chat participant communication wrapup request entity too large response has a 5xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversations chat participant communication wrapup request entity too large response a status code equal to that given
func (o *PostConversationsChatParticipantCommunicationWrapupRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PostConversationsChatParticipantCommunicationWrapupRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsChatParticipantCommunicationWrapupRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostConversationsChatParticipantCommunicationWrapupRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsChatParticipantCommunicationWrapupRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostConversationsChatParticipantCommunicationWrapupRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsChatParticipantCommunicationWrapupRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsChatParticipantCommunicationWrapupUnsupportedMediaType creates a PostConversationsChatParticipantCommunicationWrapupUnsupportedMediaType with default headers values
func NewPostConversationsChatParticipantCommunicationWrapupUnsupportedMediaType() *PostConversationsChatParticipantCommunicationWrapupUnsupportedMediaType {
	return &PostConversationsChatParticipantCommunicationWrapupUnsupportedMediaType{}
}

/*
PostConversationsChatParticipantCommunicationWrapupUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostConversationsChatParticipantCommunicationWrapupUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversations chat participant communication wrapup unsupported media type response has a 2xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversations chat participant communication wrapup unsupported media type response has a 3xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations chat participant communication wrapup unsupported media type response has a 4xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversations chat participant communication wrapup unsupported media type response has a 5xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversations chat participant communication wrapup unsupported media type response a status code equal to that given
func (o *PostConversationsChatParticipantCommunicationWrapupUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PostConversationsChatParticipantCommunicationWrapupUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsChatParticipantCommunicationWrapupUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostConversationsChatParticipantCommunicationWrapupUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsChatParticipantCommunicationWrapupUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostConversationsChatParticipantCommunicationWrapupUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsChatParticipantCommunicationWrapupUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsChatParticipantCommunicationWrapupTooManyRequests creates a PostConversationsChatParticipantCommunicationWrapupTooManyRequests with default headers values
func NewPostConversationsChatParticipantCommunicationWrapupTooManyRequests() *PostConversationsChatParticipantCommunicationWrapupTooManyRequests {
	return &PostConversationsChatParticipantCommunicationWrapupTooManyRequests{}
}

/*
PostConversationsChatParticipantCommunicationWrapupTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PostConversationsChatParticipantCommunicationWrapupTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversations chat participant communication wrapup too many requests response has a 2xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversations chat participant communication wrapup too many requests response has a 3xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations chat participant communication wrapup too many requests response has a 4xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversations chat participant communication wrapup too many requests response has a 5xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversations chat participant communication wrapup too many requests response a status code equal to that given
func (o *PostConversationsChatParticipantCommunicationWrapupTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PostConversationsChatParticipantCommunicationWrapupTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsChatParticipantCommunicationWrapupTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostConversationsChatParticipantCommunicationWrapupTooManyRequests) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsChatParticipantCommunicationWrapupTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostConversationsChatParticipantCommunicationWrapupTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsChatParticipantCommunicationWrapupTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsChatParticipantCommunicationWrapupInternalServerError creates a PostConversationsChatParticipantCommunicationWrapupInternalServerError with default headers values
func NewPostConversationsChatParticipantCommunicationWrapupInternalServerError() *PostConversationsChatParticipantCommunicationWrapupInternalServerError {
	return &PostConversationsChatParticipantCommunicationWrapupInternalServerError{}
}

/*
PostConversationsChatParticipantCommunicationWrapupInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostConversationsChatParticipantCommunicationWrapupInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversations chat participant communication wrapup internal server error response has a 2xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversations chat participant communication wrapup internal server error response has a 3xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations chat participant communication wrapup internal server error response has a 4xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post conversations chat participant communication wrapup internal server error response has a 5xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post conversations chat participant communication wrapup internal server error response a status code equal to that given
func (o *PostConversationsChatParticipantCommunicationWrapupInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PostConversationsChatParticipantCommunicationWrapupInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsChatParticipantCommunicationWrapupInternalServerError  %+v", 500, o.Payload)
}

func (o *PostConversationsChatParticipantCommunicationWrapupInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsChatParticipantCommunicationWrapupInternalServerError  %+v", 500, o.Payload)
}

func (o *PostConversationsChatParticipantCommunicationWrapupInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsChatParticipantCommunicationWrapupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsChatParticipantCommunicationWrapupServiceUnavailable creates a PostConversationsChatParticipantCommunicationWrapupServiceUnavailable with default headers values
func NewPostConversationsChatParticipantCommunicationWrapupServiceUnavailable() *PostConversationsChatParticipantCommunicationWrapupServiceUnavailable {
	return &PostConversationsChatParticipantCommunicationWrapupServiceUnavailable{}
}

/*
PostConversationsChatParticipantCommunicationWrapupServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostConversationsChatParticipantCommunicationWrapupServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversations chat participant communication wrapup service unavailable response has a 2xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversations chat participant communication wrapup service unavailable response has a 3xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations chat participant communication wrapup service unavailable response has a 4xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this post conversations chat participant communication wrapup service unavailable response has a 5xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this post conversations chat participant communication wrapup service unavailable response a status code equal to that given
func (o *PostConversationsChatParticipantCommunicationWrapupServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PostConversationsChatParticipantCommunicationWrapupServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsChatParticipantCommunicationWrapupServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostConversationsChatParticipantCommunicationWrapupServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsChatParticipantCommunicationWrapupServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostConversationsChatParticipantCommunicationWrapupServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsChatParticipantCommunicationWrapupServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationsChatParticipantCommunicationWrapupGatewayTimeout creates a PostConversationsChatParticipantCommunicationWrapupGatewayTimeout with default headers values
func NewPostConversationsChatParticipantCommunicationWrapupGatewayTimeout() *PostConversationsChatParticipantCommunicationWrapupGatewayTimeout {
	return &PostConversationsChatParticipantCommunicationWrapupGatewayTimeout{}
}

/*
PostConversationsChatParticipantCommunicationWrapupGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PostConversationsChatParticipantCommunicationWrapupGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversations chat participant communication wrapup gateway timeout response has a 2xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversations chat participant communication wrapup gateway timeout response has a 3xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversations chat participant communication wrapup gateway timeout response has a 4xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this post conversations chat participant communication wrapup gateway timeout response has a 5xx status code
func (o *PostConversationsChatParticipantCommunicationWrapupGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this post conversations chat participant communication wrapup gateway timeout response a status code equal to that given
func (o *PostConversationsChatParticipantCommunicationWrapupGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PostConversationsChatParticipantCommunicationWrapupGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsChatParticipantCommunicationWrapupGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostConversationsChatParticipantCommunicationWrapupGatewayTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/chats/{conversationId}/participants/{participantId}/communications/{communicationId}/wrapup][%d] postConversationsChatParticipantCommunicationWrapupGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostConversationsChatParticipantCommunicationWrapupGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationsChatParticipantCommunicationWrapupGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

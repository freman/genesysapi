// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchConversationsCallbackParticipantCommunicationReader is a Reader for the PatchConversationsCallbackParticipantCommunication structure.
type PatchConversationsCallbackParticipantCommunicationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchConversationsCallbackParticipantCommunicationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchConversationsCallbackParticipantCommunicationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchConversationsCallbackParticipantCommunicationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchConversationsCallbackParticipantCommunicationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchConversationsCallbackParticipantCommunicationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchConversationsCallbackParticipantCommunicationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchConversationsCallbackParticipantCommunicationRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchConversationsCallbackParticipantCommunicationRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchConversationsCallbackParticipantCommunicationUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchConversationsCallbackParticipantCommunicationTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchConversationsCallbackParticipantCommunicationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchConversationsCallbackParticipantCommunicationServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchConversationsCallbackParticipantCommunicationGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchConversationsCallbackParticipantCommunicationOK creates a PatchConversationsCallbackParticipantCommunicationOK with default headers values
func NewPatchConversationsCallbackParticipantCommunicationOK() *PatchConversationsCallbackParticipantCommunicationOK {
	return &PatchConversationsCallbackParticipantCommunicationOK{}
}

/*
PatchConversationsCallbackParticipantCommunicationOK describes a response with status code 200, with default header values.

successful operation
*/
type PatchConversationsCallbackParticipantCommunicationOK struct {
	Payload models.Empty
}

// IsSuccess returns true when this patch conversations callback participant communication o k response has a 2xx status code
func (o *PatchConversationsCallbackParticipantCommunicationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch conversations callback participant communication o k response has a 3xx status code
func (o *PatchConversationsCallbackParticipantCommunicationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations callback participant communication o k response has a 4xx status code
func (o *PatchConversationsCallbackParticipantCommunicationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations callback participant communication o k response has a 5xx status code
func (o *PatchConversationsCallbackParticipantCommunicationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations callback participant communication o k response a status code equal to that given
func (o *PatchConversationsCallbackParticipantCommunicationOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchConversationsCallbackParticipantCommunicationOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCallbackParticipantCommunicationOK  %+v", 200, o.Payload)
}

func (o *PatchConversationsCallbackParticipantCommunicationOK) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCallbackParticipantCommunicationOK  %+v", 200, o.Payload)
}

func (o *PatchConversationsCallbackParticipantCommunicationOK) GetPayload() models.Empty {
	return o.Payload
}

func (o *PatchConversationsCallbackParticipantCommunicationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallbackParticipantCommunicationBadRequest creates a PatchConversationsCallbackParticipantCommunicationBadRequest with default headers values
func NewPatchConversationsCallbackParticipantCommunicationBadRequest() *PatchConversationsCallbackParticipantCommunicationBadRequest {
	return &PatchConversationsCallbackParticipantCommunicationBadRequest{}
}

/*
PatchConversationsCallbackParticipantCommunicationBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchConversationsCallbackParticipantCommunicationBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations callback participant communication bad request response has a 2xx status code
func (o *PatchConversationsCallbackParticipantCommunicationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations callback participant communication bad request response has a 3xx status code
func (o *PatchConversationsCallbackParticipantCommunicationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations callback participant communication bad request response has a 4xx status code
func (o *PatchConversationsCallbackParticipantCommunicationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations callback participant communication bad request response has a 5xx status code
func (o *PatchConversationsCallbackParticipantCommunicationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations callback participant communication bad request response a status code equal to that given
func (o *PatchConversationsCallbackParticipantCommunicationBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchConversationsCallbackParticipantCommunicationBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCallbackParticipantCommunicationBadRequest  %+v", 400, o.Payload)
}

func (o *PatchConversationsCallbackParticipantCommunicationBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCallbackParticipantCommunicationBadRequest  %+v", 400, o.Payload)
}

func (o *PatchConversationsCallbackParticipantCommunicationBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallbackParticipantCommunicationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallbackParticipantCommunicationUnauthorized creates a PatchConversationsCallbackParticipantCommunicationUnauthorized with default headers values
func NewPatchConversationsCallbackParticipantCommunicationUnauthorized() *PatchConversationsCallbackParticipantCommunicationUnauthorized {
	return &PatchConversationsCallbackParticipantCommunicationUnauthorized{}
}

/*
PatchConversationsCallbackParticipantCommunicationUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchConversationsCallbackParticipantCommunicationUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations callback participant communication unauthorized response has a 2xx status code
func (o *PatchConversationsCallbackParticipantCommunicationUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations callback participant communication unauthorized response has a 3xx status code
func (o *PatchConversationsCallbackParticipantCommunicationUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations callback participant communication unauthorized response has a 4xx status code
func (o *PatchConversationsCallbackParticipantCommunicationUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations callback participant communication unauthorized response has a 5xx status code
func (o *PatchConversationsCallbackParticipantCommunicationUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations callback participant communication unauthorized response a status code equal to that given
func (o *PatchConversationsCallbackParticipantCommunicationUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchConversationsCallbackParticipantCommunicationUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCallbackParticipantCommunicationUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConversationsCallbackParticipantCommunicationUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCallbackParticipantCommunicationUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConversationsCallbackParticipantCommunicationUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallbackParticipantCommunicationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallbackParticipantCommunicationForbidden creates a PatchConversationsCallbackParticipantCommunicationForbidden with default headers values
func NewPatchConversationsCallbackParticipantCommunicationForbidden() *PatchConversationsCallbackParticipantCommunicationForbidden {
	return &PatchConversationsCallbackParticipantCommunicationForbidden{}
}

/*
PatchConversationsCallbackParticipantCommunicationForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PatchConversationsCallbackParticipantCommunicationForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations callback participant communication forbidden response has a 2xx status code
func (o *PatchConversationsCallbackParticipantCommunicationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations callback participant communication forbidden response has a 3xx status code
func (o *PatchConversationsCallbackParticipantCommunicationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations callback participant communication forbidden response has a 4xx status code
func (o *PatchConversationsCallbackParticipantCommunicationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations callback participant communication forbidden response has a 5xx status code
func (o *PatchConversationsCallbackParticipantCommunicationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations callback participant communication forbidden response a status code equal to that given
func (o *PatchConversationsCallbackParticipantCommunicationForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchConversationsCallbackParticipantCommunicationForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCallbackParticipantCommunicationForbidden  %+v", 403, o.Payload)
}

func (o *PatchConversationsCallbackParticipantCommunicationForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCallbackParticipantCommunicationForbidden  %+v", 403, o.Payload)
}

func (o *PatchConversationsCallbackParticipantCommunicationForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallbackParticipantCommunicationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallbackParticipantCommunicationNotFound creates a PatchConversationsCallbackParticipantCommunicationNotFound with default headers values
func NewPatchConversationsCallbackParticipantCommunicationNotFound() *PatchConversationsCallbackParticipantCommunicationNotFound {
	return &PatchConversationsCallbackParticipantCommunicationNotFound{}
}

/*
PatchConversationsCallbackParticipantCommunicationNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PatchConversationsCallbackParticipantCommunicationNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations callback participant communication not found response has a 2xx status code
func (o *PatchConversationsCallbackParticipantCommunicationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations callback participant communication not found response has a 3xx status code
func (o *PatchConversationsCallbackParticipantCommunicationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations callback participant communication not found response has a 4xx status code
func (o *PatchConversationsCallbackParticipantCommunicationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations callback participant communication not found response has a 5xx status code
func (o *PatchConversationsCallbackParticipantCommunicationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations callback participant communication not found response a status code equal to that given
func (o *PatchConversationsCallbackParticipantCommunicationNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchConversationsCallbackParticipantCommunicationNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCallbackParticipantCommunicationNotFound  %+v", 404, o.Payload)
}

func (o *PatchConversationsCallbackParticipantCommunicationNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCallbackParticipantCommunicationNotFound  %+v", 404, o.Payload)
}

func (o *PatchConversationsCallbackParticipantCommunicationNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallbackParticipantCommunicationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallbackParticipantCommunicationRequestTimeout creates a PatchConversationsCallbackParticipantCommunicationRequestTimeout with default headers values
func NewPatchConversationsCallbackParticipantCommunicationRequestTimeout() *PatchConversationsCallbackParticipantCommunicationRequestTimeout {
	return &PatchConversationsCallbackParticipantCommunicationRequestTimeout{}
}

/*
PatchConversationsCallbackParticipantCommunicationRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchConversationsCallbackParticipantCommunicationRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations callback participant communication request timeout response has a 2xx status code
func (o *PatchConversationsCallbackParticipantCommunicationRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations callback participant communication request timeout response has a 3xx status code
func (o *PatchConversationsCallbackParticipantCommunicationRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations callback participant communication request timeout response has a 4xx status code
func (o *PatchConversationsCallbackParticipantCommunicationRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations callback participant communication request timeout response has a 5xx status code
func (o *PatchConversationsCallbackParticipantCommunicationRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations callback participant communication request timeout response a status code equal to that given
func (o *PatchConversationsCallbackParticipantCommunicationRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PatchConversationsCallbackParticipantCommunicationRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCallbackParticipantCommunicationRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchConversationsCallbackParticipantCommunicationRequestTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCallbackParticipantCommunicationRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchConversationsCallbackParticipantCommunicationRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallbackParticipantCommunicationRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallbackParticipantCommunicationRequestEntityTooLarge creates a PatchConversationsCallbackParticipantCommunicationRequestEntityTooLarge with default headers values
func NewPatchConversationsCallbackParticipantCommunicationRequestEntityTooLarge() *PatchConversationsCallbackParticipantCommunicationRequestEntityTooLarge {
	return &PatchConversationsCallbackParticipantCommunicationRequestEntityTooLarge{}
}

/*
PatchConversationsCallbackParticipantCommunicationRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PatchConversationsCallbackParticipantCommunicationRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations callback participant communication request entity too large response has a 2xx status code
func (o *PatchConversationsCallbackParticipantCommunicationRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations callback participant communication request entity too large response has a 3xx status code
func (o *PatchConversationsCallbackParticipantCommunicationRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations callback participant communication request entity too large response has a 4xx status code
func (o *PatchConversationsCallbackParticipantCommunicationRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations callback participant communication request entity too large response has a 5xx status code
func (o *PatchConversationsCallbackParticipantCommunicationRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations callback participant communication request entity too large response a status code equal to that given
func (o *PatchConversationsCallbackParticipantCommunicationRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PatchConversationsCallbackParticipantCommunicationRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCallbackParticipantCommunicationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchConversationsCallbackParticipantCommunicationRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCallbackParticipantCommunicationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchConversationsCallbackParticipantCommunicationRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallbackParticipantCommunicationRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallbackParticipantCommunicationUnsupportedMediaType creates a PatchConversationsCallbackParticipantCommunicationUnsupportedMediaType with default headers values
func NewPatchConversationsCallbackParticipantCommunicationUnsupportedMediaType() *PatchConversationsCallbackParticipantCommunicationUnsupportedMediaType {
	return &PatchConversationsCallbackParticipantCommunicationUnsupportedMediaType{}
}

/*
PatchConversationsCallbackParticipantCommunicationUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchConversationsCallbackParticipantCommunicationUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations callback participant communication unsupported media type response has a 2xx status code
func (o *PatchConversationsCallbackParticipantCommunicationUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations callback participant communication unsupported media type response has a 3xx status code
func (o *PatchConversationsCallbackParticipantCommunicationUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations callback participant communication unsupported media type response has a 4xx status code
func (o *PatchConversationsCallbackParticipantCommunicationUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations callback participant communication unsupported media type response has a 5xx status code
func (o *PatchConversationsCallbackParticipantCommunicationUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations callback participant communication unsupported media type response a status code equal to that given
func (o *PatchConversationsCallbackParticipantCommunicationUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PatchConversationsCallbackParticipantCommunicationUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCallbackParticipantCommunicationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchConversationsCallbackParticipantCommunicationUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCallbackParticipantCommunicationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchConversationsCallbackParticipantCommunicationUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallbackParticipantCommunicationUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallbackParticipantCommunicationTooManyRequests creates a PatchConversationsCallbackParticipantCommunicationTooManyRequests with default headers values
func NewPatchConversationsCallbackParticipantCommunicationTooManyRequests() *PatchConversationsCallbackParticipantCommunicationTooManyRequests {
	return &PatchConversationsCallbackParticipantCommunicationTooManyRequests{}
}

/*
PatchConversationsCallbackParticipantCommunicationTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchConversationsCallbackParticipantCommunicationTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations callback participant communication too many requests response has a 2xx status code
func (o *PatchConversationsCallbackParticipantCommunicationTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations callback participant communication too many requests response has a 3xx status code
func (o *PatchConversationsCallbackParticipantCommunicationTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations callback participant communication too many requests response has a 4xx status code
func (o *PatchConversationsCallbackParticipantCommunicationTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations callback participant communication too many requests response has a 5xx status code
func (o *PatchConversationsCallbackParticipantCommunicationTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations callback participant communication too many requests response a status code equal to that given
func (o *PatchConversationsCallbackParticipantCommunicationTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchConversationsCallbackParticipantCommunicationTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCallbackParticipantCommunicationTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConversationsCallbackParticipantCommunicationTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCallbackParticipantCommunicationTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConversationsCallbackParticipantCommunicationTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallbackParticipantCommunicationTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallbackParticipantCommunicationInternalServerError creates a PatchConversationsCallbackParticipantCommunicationInternalServerError with default headers values
func NewPatchConversationsCallbackParticipantCommunicationInternalServerError() *PatchConversationsCallbackParticipantCommunicationInternalServerError {
	return &PatchConversationsCallbackParticipantCommunicationInternalServerError{}
}

/*
PatchConversationsCallbackParticipantCommunicationInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchConversationsCallbackParticipantCommunicationInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations callback participant communication internal server error response has a 2xx status code
func (o *PatchConversationsCallbackParticipantCommunicationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations callback participant communication internal server error response has a 3xx status code
func (o *PatchConversationsCallbackParticipantCommunicationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations callback participant communication internal server error response has a 4xx status code
func (o *PatchConversationsCallbackParticipantCommunicationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations callback participant communication internal server error response has a 5xx status code
func (o *PatchConversationsCallbackParticipantCommunicationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations callback participant communication internal server error response a status code equal to that given
func (o *PatchConversationsCallbackParticipantCommunicationInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchConversationsCallbackParticipantCommunicationInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCallbackParticipantCommunicationInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchConversationsCallbackParticipantCommunicationInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCallbackParticipantCommunicationInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchConversationsCallbackParticipantCommunicationInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallbackParticipantCommunicationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallbackParticipantCommunicationServiceUnavailable creates a PatchConversationsCallbackParticipantCommunicationServiceUnavailable with default headers values
func NewPatchConversationsCallbackParticipantCommunicationServiceUnavailable() *PatchConversationsCallbackParticipantCommunicationServiceUnavailable {
	return &PatchConversationsCallbackParticipantCommunicationServiceUnavailable{}
}

/*
PatchConversationsCallbackParticipantCommunicationServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchConversationsCallbackParticipantCommunicationServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations callback participant communication service unavailable response has a 2xx status code
func (o *PatchConversationsCallbackParticipantCommunicationServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations callback participant communication service unavailable response has a 3xx status code
func (o *PatchConversationsCallbackParticipantCommunicationServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations callback participant communication service unavailable response has a 4xx status code
func (o *PatchConversationsCallbackParticipantCommunicationServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations callback participant communication service unavailable response has a 5xx status code
func (o *PatchConversationsCallbackParticipantCommunicationServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations callback participant communication service unavailable response a status code equal to that given
func (o *PatchConversationsCallbackParticipantCommunicationServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PatchConversationsCallbackParticipantCommunicationServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCallbackParticipantCommunicationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchConversationsCallbackParticipantCommunicationServiceUnavailable) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCallbackParticipantCommunicationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchConversationsCallbackParticipantCommunicationServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallbackParticipantCommunicationServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallbackParticipantCommunicationGatewayTimeout creates a PatchConversationsCallbackParticipantCommunicationGatewayTimeout with default headers values
func NewPatchConversationsCallbackParticipantCommunicationGatewayTimeout() *PatchConversationsCallbackParticipantCommunicationGatewayTimeout {
	return &PatchConversationsCallbackParticipantCommunicationGatewayTimeout{}
}

/*
PatchConversationsCallbackParticipantCommunicationGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PatchConversationsCallbackParticipantCommunicationGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations callback participant communication gateway timeout response has a 2xx status code
func (o *PatchConversationsCallbackParticipantCommunicationGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations callback participant communication gateway timeout response has a 3xx status code
func (o *PatchConversationsCallbackParticipantCommunicationGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations callback participant communication gateway timeout response has a 4xx status code
func (o *PatchConversationsCallbackParticipantCommunicationGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations callback participant communication gateway timeout response has a 5xx status code
func (o *PatchConversationsCallbackParticipantCommunicationGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations callback participant communication gateway timeout response a status code equal to that given
func (o *PatchConversationsCallbackParticipantCommunicationGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PatchConversationsCallbackParticipantCommunicationGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCallbackParticipantCommunicationGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchConversationsCallbackParticipantCommunicationGatewayTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/communications/{communicationId}][%d] patchConversationsCallbackParticipantCommunicationGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchConversationsCallbackParticipantCommunicationGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallbackParticipantCommunicationGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

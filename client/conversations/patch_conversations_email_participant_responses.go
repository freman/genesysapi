// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchConversationsEmailParticipantReader is a Reader for the PatchConversationsEmailParticipant structure.
type PatchConversationsEmailParticipantReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchConversationsEmailParticipantReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewPatchConversationsEmailParticipantAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchConversationsEmailParticipantBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchConversationsEmailParticipantUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchConversationsEmailParticipantForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchConversationsEmailParticipantNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchConversationsEmailParticipantRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchConversationsEmailParticipantRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchConversationsEmailParticipantUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchConversationsEmailParticipantTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchConversationsEmailParticipantInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchConversationsEmailParticipantServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchConversationsEmailParticipantGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchConversationsEmailParticipantAccepted creates a PatchConversationsEmailParticipantAccepted with default headers values
func NewPatchConversationsEmailParticipantAccepted() *PatchConversationsEmailParticipantAccepted {
	return &PatchConversationsEmailParticipantAccepted{}
}

/*
PatchConversationsEmailParticipantAccepted describes a response with status code 202, with default header values.

Accepted
*/
type PatchConversationsEmailParticipantAccepted struct {
}

// IsSuccess returns true when this patch conversations email participant accepted response has a 2xx status code
func (o *PatchConversationsEmailParticipantAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch conversations email participant accepted response has a 3xx status code
func (o *PatchConversationsEmailParticipantAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations email participant accepted response has a 4xx status code
func (o *PatchConversationsEmailParticipantAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations email participant accepted response has a 5xx status code
func (o *PatchConversationsEmailParticipantAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations email participant accepted response a status code equal to that given
func (o *PatchConversationsEmailParticipantAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *PatchConversationsEmailParticipantAccepted) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}][%d] patchConversationsEmailParticipantAccepted ", 202)
}

func (o *PatchConversationsEmailParticipantAccepted) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}][%d] patchConversationsEmailParticipantAccepted ", 202)
}

func (o *PatchConversationsEmailParticipantAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchConversationsEmailParticipantBadRequest creates a PatchConversationsEmailParticipantBadRequest with default headers values
func NewPatchConversationsEmailParticipantBadRequest() *PatchConversationsEmailParticipantBadRequest {
	return &PatchConversationsEmailParticipantBadRequest{}
}

/*
PatchConversationsEmailParticipantBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchConversationsEmailParticipantBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations email participant bad request response has a 2xx status code
func (o *PatchConversationsEmailParticipantBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations email participant bad request response has a 3xx status code
func (o *PatchConversationsEmailParticipantBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations email participant bad request response has a 4xx status code
func (o *PatchConversationsEmailParticipantBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations email participant bad request response has a 5xx status code
func (o *PatchConversationsEmailParticipantBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations email participant bad request response a status code equal to that given
func (o *PatchConversationsEmailParticipantBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchConversationsEmailParticipantBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}][%d] patchConversationsEmailParticipantBadRequest  %+v", 400, o.Payload)
}

func (o *PatchConversationsEmailParticipantBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}][%d] patchConversationsEmailParticipantBadRequest  %+v", 400, o.Payload)
}

func (o *PatchConversationsEmailParticipantBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsEmailParticipantBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsEmailParticipantUnauthorized creates a PatchConversationsEmailParticipantUnauthorized with default headers values
func NewPatchConversationsEmailParticipantUnauthorized() *PatchConversationsEmailParticipantUnauthorized {
	return &PatchConversationsEmailParticipantUnauthorized{}
}

/*
PatchConversationsEmailParticipantUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchConversationsEmailParticipantUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations email participant unauthorized response has a 2xx status code
func (o *PatchConversationsEmailParticipantUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations email participant unauthorized response has a 3xx status code
func (o *PatchConversationsEmailParticipantUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations email participant unauthorized response has a 4xx status code
func (o *PatchConversationsEmailParticipantUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations email participant unauthorized response has a 5xx status code
func (o *PatchConversationsEmailParticipantUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations email participant unauthorized response a status code equal to that given
func (o *PatchConversationsEmailParticipantUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchConversationsEmailParticipantUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}][%d] patchConversationsEmailParticipantUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConversationsEmailParticipantUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}][%d] patchConversationsEmailParticipantUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConversationsEmailParticipantUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsEmailParticipantUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsEmailParticipantForbidden creates a PatchConversationsEmailParticipantForbidden with default headers values
func NewPatchConversationsEmailParticipantForbidden() *PatchConversationsEmailParticipantForbidden {
	return &PatchConversationsEmailParticipantForbidden{}
}

/*
PatchConversationsEmailParticipantForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PatchConversationsEmailParticipantForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations email participant forbidden response has a 2xx status code
func (o *PatchConversationsEmailParticipantForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations email participant forbidden response has a 3xx status code
func (o *PatchConversationsEmailParticipantForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations email participant forbidden response has a 4xx status code
func (o *PatchConversationsEmailParticipantForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations email participant forbidden response has a 5xx status code
func (o *PatchConversationsEmailParticipantForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations email participant forbidden response a status code equal to that given
func (o *PatchConversationsEmailParticipantForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchConversationsEmailParticipantForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}][%d] patchConversationsEmailParticipantForbidden  %+v", 403, o.Payload)
}

func (o *PatchConversationsEmailParticipantForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}][%d] patchConversationsEmailParticipantForbidden  %+v", 403, o.Payload)
}

func (o *PatchConversationsEmailParticipantForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsEmailParticipantForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsEmailParticipantNotFound creates a PatchConversationsEmailParticipantNotFound with default headers values
func NewPatchConversationsEmailParticipantNotFound() *PatchConversationsEmailParticipantNotFound {
	return &PatchConversationsEmailParticipantNotFound{}
}

/*
PatchConversationsEmailParticipantNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PatchConversationsEmailParticipantNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations email participant not found response has a 2xx status code
func (o *PatchConversationsEmailParticipantNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations email participant not found response has a 3xx status code
func (o *PatchConversationsEmailParticipantNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations email participant not found response has a 4xx status code
func (o *PatchConversationsEmailParticipantNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations email participant not found response has a 5xx status code
func (o *PatchConversationsEmailParticipantNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations email participant not found response a status code equal to that given
func (o *PatchConversationsEmailParticipantNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchConversationsEmailParticipantNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}][%d] patchConversationsEmailParticipantNotFound  %+v", 404, o.Payload)
}

func (o *PatchConversationsEmailParticipantNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}][%d] patchConversationsEmailParticipantNotFound  %+v", 404, o.Payload)
}

func (o *PatchConversationsEmailParticipantNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsEmailParticipantNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsEmailParticipantRequestTimeout creates a PatchConversationsEmailParticipantRequestTimeout with default headers values
func NewPatchConversationsEmailParticipantRequestTimeout() *PatchConversationsEmailParticipantRequestTimeout {
	return &PatchConversationsEmailParticipantRequestTimeout{}
}

/*
PatchConversationsEmailParticipantRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchConversationsEmailParticipantRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations email participant request timeout response has a 2xx status code
func (o *PatchConversationsEmailParticipantRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations email participant request timeout response has a 3xx status code
func (o *PatchConversationsEmailParticipantRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations email participant request timeout response has a 4xx status code
func (o *PatchConversationsEmailParticipantRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations email participant request timeout response has a 5xx status code
func (o *PatchConversationsEmailParticipantRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations email participant request timeout response a status code equal to that given
func (o *PatchConversationsEmailParticipantRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PatchConversationsEmailParticipantRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}][%d] patchConversationsEmailParticipantRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchConversationsEmailParticipantRequestTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}][%d] patchConversationsEmailParticipantRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchConversationsEmailParticipantRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsEmailParticipantRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsEmailParticipantRequestEntityTooLarge creates a PatchConversationsEmailParticipantRequestEntityTooLarge with default headers values
func NewPatchConversationsEmailParticipantRequestEntityTooLarge() *PatchConversationsEmailParticipantRequestEntityTooLarge {
	return &PatchConversationsEmailParticipantRequestEntityTooLarge{}
}

/*
PatchConversationsEmailParticipantRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PatchConversationsEmailParticipantRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations email participant request entity too large response has a 2xx status code
func (o *PatchConversationsEmailParticipantRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations email participant request entity too large response has a 3xx status code
func (o *PatchConversationsEmailParticipantRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations email participant request entity too large response has a 4xx status code
func (o *PatchConversationsEmailParticipantRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations email participant request entity too large response has a 5xx status code
func (o *PatchConversationsEmailParticipantRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations email participant request entity too large response a status code equal to that given
func (o *PatchConversationsEmailParticipantRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PatchConversationsEmailParticipantRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}][%d] patchConversationsEmailParticipantRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchConversationsEmailParticipantRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}][%d] patchConversationsEmailParticipantRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchConversationsEmailParticipantRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsEmailParticipantRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsEmailParticipantUnsupportedMediaType creates a PatchConversationsEmailParticipantUnsupportedMediaType with default headers values
func NewPatchConversationsEmailParticipantUnsupportedMediaType() *PatchConversationsEmailParticipantUnsupportedMediaType {
	return &PatchConversationsEmailParticipantUnsupportedMediaType{}
}

/*
PatchConversationsEmailParticipantUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchConversationsEmailParticipantUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations email participant unsupported media type response has a 2xx status code
func (o *PatchConversationsEmailParticipantUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations email participant unsupported media type response has a 3xx status code
func (o *PatchConversationsEmailParticipantUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations email participant unsupported media type response has a 4xx status code
func (o *PatchConversationsEmailParticipantUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations email participant unsupported media type response has a 5xx status code
func (o *PatchConversationsEmailParticipantUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations email participant unsupported media type response a status code equal to that given
func (o *PatchConversationsEmailParticipantUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PatchConversationsEmailParticipantUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}][%d] patchConversationsEmailParticipantUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchConversationsEmailParticipantUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}][%d] patchConversationsEmailParticipantUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchConversationsEmailParticipantUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsEmailParticipantUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsEmailParticipantTooManyRequests creates a PatchConversationsEmailParticipantTooManyRequests with default headers values
func NewPatchConversationsEmailParticipantTooManyRequests() *PatchConversationsEmailParticipantTooManyRequests {
	return &PatchConversationsEmailParticipantTooManyRequests{}
}

/*
PatchConversationsEmailParticipantTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchConversationsEmailParticipantTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations email participant too many requests response has a 2xx status code
func (o *PatchConversationsEmailParticipantTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations email participant too many requests response has a 3xx status code
func (o *PatchConversationsEmailParticipantTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations email participant too many requests response has a 4xx status code
func (o *PatchConversationsEmailParticipantTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations email participant too many requests response has a 5xx status code
func (o *PatchConversationsEmailParticipantTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations email participant too many requests response a status code equal to that given
func (o *PatchConversationsEmailParticipantTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchConversationsEmailParticipantTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}][%d] patchConversationsEmailParticipantTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConversationsEmailParticipantTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}][%d] patchConversationsEmailParticipantTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConversationsEmailParticipantTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsEmailParticipantTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsEmailParticipantInternalServerError creates a PatchConversationsEmailParticipantInternalServerError with default headers values
func NewPatchConversationsEmailParticipantInternalServerError() *PatchConversationsEmailParticipantInternalServerError {
	return &PatchConversationsEmailParticipantInternalServerError{}
}

/*
PatchConversationsEmailParticipantInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchConversationsEmailParticipantInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations email participant internal server error response has a 2xx status code
func (o *PatchConversationsEmailParticipantInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations email participant internal server error response has a 3xx status code
func (o *PatchConversationsEmailParticipantInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations email participant internal server error response has a 4xx status code
func (o *PatchConversationsEmailParticipantInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations email participant internal server error response has a 5xx status code
func (o *PatchConversationsEmailParticipantInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations email participant internal server error response a status code equal to that given
func (o *PatchConversationsEmailParticipantInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchConversationsEmailParticipantInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}][%d] patchConversationsEmailParticipantInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchConversationsEmailParticipantInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}][%d] patchConversationsEmailParticipantInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchConversationsEmailParticipantInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsEmailParticipantInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsEmailParticipantServiceUnavailable creates a PatchConversationsEmailParticipantServiceUnavailable with default headers values
func NewPatchConversationsEmailParticipantServiceUnavailable() *PatchConversationsEmailParticipantServiceUnavailable {
	return &PatchConversationsEmailParticipantServiceUnavailable{}
}

/*
PatchConversationsEmailParticipantServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchConversationsEmailParticipantServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations email participant service unavailable response has a 2xx status code
func (o *PatchConversationsEmailParticipantServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations email participant service unavailable response has a 3xx status code
func (o *PatchConversationsEmailParticipantServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations email participant service unavailable response has a 4xx status code
func (o *PatchConversationsEmailParticipantServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations email participant service unavailable response has a 5xx status code
func (o *PatchConversationsEmailParticipantServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations email participant service unavailable response a status code equal to that given
func (o *PatchConversationsEmailParticipantServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PatchConversationsEmailParticipantServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}][%d] patchConversationsEmailParticipantServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchConversationsEmailParticipantServiceUnavailable) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}][%d] patchConversationsEmailParticipantServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchConversationsEmailParticipantServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsEmailParticipantServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsEmailParticipantGatewayTimeout creates a PatchConversationsEmailParticipantGatewayTimeout with default headers values
func NewPatchConversationsEmailParticipantGatewayTimeout() *PatchConversationsEmailParticipantGatewayTimeout {
	return &PatchConversationsEmailParticipantGatewayTimeout{}
}

/*
PatchConversationsEmailParticipantGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PatchConversationsEmailParticipantGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations email participant gateway timeout response has a 2xx status code
func (o *PatchConversationsEmailParticipantGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations email participant gateway timeout response has a 3xx status code
func (o *PatchConversationsEmailParticipantGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations email participant gateway timeout response has a 4xx status code
func (o *PatchConversationsEmailParticipantGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations email participant gateway timeout response has a 5xx status code
func (o *PatchConversationsEmailParticipantGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations email participant gateway timeout response a status code equal to that given
func (o *PatchConversationsEmailParticipantGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PatchConversationsEmailParticipantGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}][%d] patchConversationsEmailParticipantGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchConversationsEmailParticipantGatewayTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}][%d] patchConversationsEmailParticipantGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchConversationsEmailParticipantGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsEmailParticipantGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

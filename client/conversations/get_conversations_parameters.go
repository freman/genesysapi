// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetConversationsParams creates a new GetConversationsParams object
// with the default values initialized.
func NewGetConversationsParams() *GetConversationsParams {
	var ()
	return &GetConversationsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetConversationsParamsWithTimeout creates a new GetConversationsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetConversationsParamsWithTimeout(timeout time.Duration) *GetConversationsParams {
	var ()
	return &GetConversationsParams{

		timeout: timeout,
	}
}

// NewGetConversationsParamsWithContext creates a new GetConversationsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetConversationsParamsWithContext(ctx context.Context) *GetConversationsParams {
	var ()
	return &GetConversationsParams{

		Context: ctx,
	}
}

// NewGetConversationsParamsWithHTTPClient creates a new GetConversationsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetConversationsParamsWithHTTPClient(client *http.Client) *GetConversationsParams {
	var ()
	return &GetConversationsParams{
		HTTPClient: client,
	}
}

/*GetConversationsParams contains all the parameters to send to the API endpoint
for the get conversations operation typically these are written to a http.Request
*/
type GetConversationsParams struct {

	/*CommunicationType
	  Call or Chat communication filtering

	*/
	CommunicationType *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get conversations params
func (o *GetConversationsParams) WithTimeout(timeout time.Duration) *GetConversationsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get conversations params
func (o *GetConversationsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get conversations params
func (o *GetConversationsParams) WithContext(ctx context.Context) *GetConversationsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get conversations params
func (o *GetConversationsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get conversations params
func (o *GetConversationsParams) WithHTTPClient(client *http.Client) *GetConversationsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get conversations params
func (o *GetConversationsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCommunicationType adds the communicationType to the get conversations params
func (o *GetConversationsParams) WithCommunicationType(communicationType *string) *GetConversationsParams {
	o.SetCommunicationType(communicationType)
	return o
}

// SetCommunicationType adds the communicationType to the get conversations params
func (o *GetConversationsParams) SetCommunicationType(communicationType *string) {
	o.CommunicationType = communicationType
}

// WriteToRequest writes these params to a swagger request
func (o *GetConversationsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CommunicationType != nil {

		// query param communicationType
		var qrCommunicationType string
		if o.CommunicationType != nil {
			qrCommunicationType = *o.CommunicationType
		}
		qCommunicationType := qrCommunicationType
		if qCommunicationType != "" {
			if err := r.SetQueryParam("communicationType", qCommunicationType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchConversationsChatParticipantReader is a Reader for the PatchConversationsChatParticipant structure.
type PatchConversationsChatParticipantReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchConversationsChatParticipantReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewPatchConversationsChatParticipantAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchConversationsChatParticipantBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchConversationsChatParticipantUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchConversationsChatParticipantForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchConversationsChatParticipantNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchConversationsChatParticipantRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchConversationsChatParticipantRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchConversationsChatParticipantUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchConversationsChatParticipantTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchConversationsChatParticipantInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchConversationsChatParticipantServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchConversationsChatParticipantGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchConversationsChatParticipantAccepted creates a PatchConversationsChatParticipantAccepted with default headers values
func NewPatchConversationsChatParticipantAccepted() *PatchConversationsChatParticipantAccepted {
	return &PatchConversationsChatParticipantAccepted{}
}

/*
PatchConversationsChatParticipantAccepted describes a response with status code 202, with default header values.

Accepted
*/
type PatchConversationsChatParticipantAccepted struct {
}

// IsSuccess returns true when this patch conversations chat participant accepted response has a 2xx status code
func (o *PatchConversationsChatParticipantAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch conversations chat participant accepted response has a 3xx status code
func (o *PatchConversationsChatParticipantAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations chat participant accepted response has a 4xx status code
func (o *PatchConversationsChatParticipantAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations chat participant accepted response has a 5xx status code
func (o *PatchConversationsChatParticipantAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations chat participant accepted response a status code equal to that given
func (o *PatchConversationsChatParticipantAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *PatchConversationsChatParticipantAccepted) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}][%d] patchConversationsChatParticipantAccepted ", 202)
}

func (o *PatchConversationsChatParticipantAccepted) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}][%d] patchConversationsChatParticipantAccepted ", 202)
}

func (o *PatchConversationsChatParticipantAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchConversationsChatParticipantBadRequest creates a PatchConversationsChatParticipantBadRequest with default headers values
func NewPatchConversationsChatParticipantBadRequest() *PatchConversationsChatParticipantBadRequest {
	return &PatchConversationsChatParticipantBadRequest{}
}

/*
PatchConversationsChatParticipantBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchConversationsChatParticipantBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations chat participant bad request response has a 2xx status code
func (o *PatchConversationsChatParticipantBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations chat participant bad request response has a 3xx status code
func (o *PatchConversationsChatParticipantBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations chat participant bad request response has a 4xx status code
func (o *PatchConversationsChatParticipantBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations chat participant bad request response has a 5xx status code
func (o *PatchConversationsChatParticipantBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations chat participant bad request response a status code equal to that given
func (o *PatchConversationsChatParticipantBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchConversationsChatParticipantBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}][%d] patchConversationsChatParticipantBadRequest  %+v", 400, o.Payload)
}

func (o *PatchConversationsChatParticipantBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}][%d] patchConversationsChatParticipantBadRequest  %+v", 400, o.Payload)
}

func (o *PatchConversationsChatParticipantBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsChatParticipantBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsChatParticipantUnauthorized creates a PatchConversationsChatParticipantUnauthorized with default headers values
func NewPatchConversationsChatParticipantUnauthorized() *PatchConversationsChatParticipantUnauthorized {
	return &PatchConversationsChatParticipantUnauthorized{}
}

/*
PatchConversationsChatParticipantUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchConversationsChatParticipantUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations chat participant unauthorized response has a 2xx status code
func (o *PatchConversationsChatParticipantUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations chat participant unauthorized response has a 3xx status code
func (o *PatchConversationsChatParticipantUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations chat participant unauthorized response has a 4xx status code
func (o *PatchConversationsChatParticipantUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations chat participant unauthorized response has a 5xx status code
func (o *PatchConversationsChatParticipantUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations chat participant unauthorized response a status code equal to that given
func (o *PatchConversationsChatParticipantUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchConversationsChatParticipantUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}][%d] patchConversationsChatParticipantUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConversationsChatParticipantUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}][%d] patchConversationsChatParticipantUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConversationsChatParticipantUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsChatParticipantUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsChatParticipantForbidden creates a PatchConversationsChatParticipantForbidden with default headers values
func NewPatchConversationsChatParticipantForbidden() *PatchConversationsChatParticipantForbidden {
	return &PatchConversationsChatParticipantForbidden{}
}

/*
PatchConversationsChatParticipantForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PatchConversationsChatParticipantForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations chat participant forbidden response has a 2xx status code
func (o *PatchConversationsChatParticipantForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations chat participant forbidden response has a 3xx status code
func (o *PatchConversationsChatParticipantForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations chat participant forbidden response has a 4xx status code
func (o *PatchConversationsChatParticipantForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations chat participant forbidden response has a 5xx status code
func (o *PatchConversationsChatParticipantForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations chat participant forbidden response a status code equal to that given
func (o *PatchConversationsChatParticipantForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchConversationsChatParticipantForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}][%d] patchConversationsChatParticipantForbidden  %+v", 403, o.Payload)
}

func (o *PatchConversationsChatParticipantForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}][%d] patchConversationsChatParticipantForbidden  %+v", 403, o.Payload)
}

func (o *PatchConversationsChatParticipantForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsChatParticipantForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsChatParticipantNotFound creates a PatchConversationsChatParticipantNotFound with default headers values
func NewPatchConversationsChatParticipantNotFound() *PatchConversationsChatParticipantNotFound {
	return &PatchConversationsChatParticipantNotFound{}
}

/*
PatchConversationsChatParticipantNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PatchConversationsChatParticipantNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations chat participant not found response has a 2xx status code
func (o *PatchConversationsChatParticipantNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations chat participant not found response has a 3xx status code
func (o *PatchConversationsChatParticipantNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations chat participant not found response has a 4xx status code
func (o *PatchConversationsChatParticipantNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations chat participant not found response has a 5xx status code
func (o *PatchConversationsChatParticipantNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations chat participant not found response a status code equal to that given
func (o *PatchConversationsChatParticipantNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchConversationsChatParticipantNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}][%d] patchConversationsChatParticipantNotFound  %+v", 404, o.Payload)
}

func (o *PatchConversationsChatParticipantNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}][%d] patchConversationsChatParticipantNotFound  %+v", 404, o.Payload)
}

func (o *PatchConversationsChatParticipantNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsChatParticipantNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsChatParticipantRequestTimeout creates a PatchConversationsChatParticipantRequestTimeout with default headers values
func NewPatchConversationsChatParticipantRequestTimeout() *PatchConversationsChatParticipantRequestTimeout {
	return &PatchConversationsChatParticipantRequestTimeout{}
}

/*
PatchConversationsChatParticipantRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchConversationsChatParticipantRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations chat participant request timeout response has a 2xx status code
func (o *PatchConversationsChatParticipantRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations chat participant request timeout response has a 3xx status code
func (o *PatchConversationsChatParticipantRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations chat participant request timeout response has a 4xx status code
func (o *PatchConversationsChatParticipantRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations chat participant request timeout response has a 5xx status code
func (o *PatchConversationsChatParticipantRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations chat participant request timeout response a status code equal to that given
func (o *PatchConversationsChatParticipantRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PatchConversationsChatParticipantRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}][%d] patchConversationsChatParticipantRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchConversationsChatParticipantRequestTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}][%d] patchConversationsChatParticipantRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchConversationsChatParticipantRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsChatParticipantRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsChatParticipantRequestEntityTooLarge creates a PatchConversationsChatParticipantRequestEntityTooLarge with default headers values
func NewPatchConversationsChatParticipantRequestEntityTooLarge() *PatchConversationsChatParticipantRequestEntityTooLarge {
	return &PatchConversationsChatParticipantRequestEntityTooLarge{}
}

/*
PatchConversationsChatParticipantRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PatchConversationsChatParticipantRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations chat participant request entity too large response has a 2xx status code
func (o *PatchConversationsChatParticipantRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations chat participant request entity too large response has a 3xx status code
func (o *PatchConversationsChatParticipantRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations chat participant request entity too large response has a 4xx status code
func (o *PatchConversationsChatParticipantRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations chat participant request entity too large response has a 5xx status code
func (o *PatchConversationsChatParticipantRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations chat participant request entity too large response a status code equal to that given
func (o *PatchConversationsChatParticipantRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PatchConversationsChatParticipantRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}][%d] patchConversationsChatParticipantRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchConversationsChatParticipantRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}][%d] patchConversationsChatParticipantRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchConversationsChatParticipantRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsChatParticipantRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsChatParticipantUnsupportedMediaType creates a PatchConversationsChatParticipantUnsupportedMediaType with default headers values
func NewPatchConversationsChatParticipantUnsupportedMediaType() *PatchConversationsChatParticipantUnsupportedMediaType {
	return &PatchConversationsChatParticipantUnsupportedMediaType{}
}

/*
PatchConversationsChatParticipantUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchConversationsChatParticipantUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations chat participant unsupported media type response has a 2xx status code
func (o *PatchConversationsChatParticipantUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations chat participant unsupported media type response has a 3xx status code
func (o *PatchConversationsChatParticipantUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations chat participant unsupported media type response has a 4xx status code
func (o *PatchConversationsChatParticipantUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations chat participant unsupported media type response has a 5xx status code
func (o *PatchConversationsChatParticipantUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations chat participant unsupported media type response a status code equal to that given
func (o *PatchConversationsChatParticipantUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PatchConversationsChatParticipantUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}][%d] patchConversationsChatParticipantUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchConversationsChatParticipantUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}][%d] patchConversationsChatParticipantUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchConversationsChatParticipantUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsChatParticipantUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsChatParticipantTooManyRequests creates a PatchConversationsChatParticipantTooManyRequests with default headers values
func NewPatchConversationsChatParticipantTooManyRequests() *PatchConversationsChatParticipantTooManyRequests {
	return &PatchConversationsChatParticipantTooManyRequests{}
}

/*
PatchConversationsChatParticipantTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchConversationsChatParticipantTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations chat participant too many requests response has a 2xx status code
func (o *PatchConversationsChatParticipantTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations chat participant too many requests response has a 3xx status code
func (o *PatchConversationsChatParticipantTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations chat participant too many requests response has a 4xx status code
func (o *PatchConversationsChatParticipantTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations chat participant too many requests response has a 5xx status code
func (o *PatchConversationsChatParticipantTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations chat participant too many requests response a status code equal to that given
func (o *PatchConversationsChatParticipantTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchConversationsChatParticipantTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}][%d] patchConversationsChatParticipantTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConversationsChatParticipantTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}][%d] patchConversationsChatParticipantTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConversationsChatParticipantTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsChatParticipantTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsChatParticipantInternalServerError creates a PatchConversationsChatParticipantInternalServerError with default headers values
func NewPatchConversationsChatParticipantInternalServerError() *PatchConversationsChatParticipantInternalServerError {
	return &PatchConversationsChatParticipantInternalServerError{}
}

/*
PatchConversationsChatParticipantInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchConversationsChatParticipantInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations chat participant internal server error response has a 2xx status code
func (o *PatchConversationsChatParticipantInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations chat participant internal server error response has a 3xx status code
func (o *PatchConversationsChatParticipantInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations chat participant internal server error response has a 4xx status code
func (o *PatchConversationsChatParticipantInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations chat participant internal server error response has a 5xx status code
func (o *PatchConversationsChatParticipantInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations chat participant internal server error response a status code equal to that given
func (o *PatchConversationsChatParticipantInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchConversationsChatParticipantInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}][%d] patchConversationsChatParticipantInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchConversationsChatParticipantInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}][%d] patchConversationsChatParticipantInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchConversationsChatParticipantInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsChatParticipantInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsChatParticipantServiceUnavailable creates a PatchConversationsChatParticipantServiceUnavailable with default headers values
func NewPatchConversationsChatParticipantServiceUnavailable() *PatchConversationsChatParticipantServiceUnavailable {
	return &PatchConversationsChatParticipantServiceUnavailable{}
}

/*
PatchConversationsChatParticipantServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchConversationsChatParticipantServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations chat participant service unavailable response has a 2xx status code
func (o *PatchConversationsChatParticipantServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations chat participant service unavailable response has a 3xx status code
func (o *PatchConversationsChatParticipantServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations chat participant service unavailable response has a 4xx status code
func (o *PatchConversationsChatParticipantServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations chat participant service unavailable response has a 5xx status code
func (o *PatchConversationsChatParticipantServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations chat participant service unavailable response a status code equal to that given
func (o *PatchConversationsChatParticipantServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PatchConversationsChatParticipantServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}][%d] patchConversationsChatParticipantServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchConversationsChatParticipantServiceUnavailable) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}][%d] patchConversationsChatParticipantServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchConversationsChatParticipantServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsChatParticipantServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsChatParticipantGatewayTimeout creates a PatchConversationsChatParticipantGatewayTimeout with default headers values
func NewPatchConversationsChatParticipantGatewayTimeout() *PatchConversationsChatParticipantGatewayTimeout {
	return &PatchConversationsChatParticipantGatewayTimeout{}
}

/*
PatchConversationsChatParticipantGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PatchConversationsChatParticipantGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations chat participant gateway timeout response has a 2xx status code
func (o *PatchConversationsChatParticipantGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations chat participant gateway timeout response has a 3xx status code
func (o *PatchConversationsChatParticipantGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations chat participant gateway timeout response has a 4xx status code
func (o *PatchConversationsChatParticipantGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations chat participant gateway timeout response has a 5xx status code
func (o *PatchConversationsChatParticipantGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations chat participant gateway timeout response a status code equal to that given
func (o *PatchConversationsChatParticipantGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PatchConversationsChatParticipantGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}][%d] patchConversationsChatParticipantGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchConversationsChatParticipantGatewayTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}][%d] patchConversationsChatParticipantGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchConversationsChatParticipantGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsChatParticipantGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

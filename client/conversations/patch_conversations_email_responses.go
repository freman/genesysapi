// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchConversationsEmailReader is a Reader for the PatchConversationsEmail structure.
type PatchConversationsEmailReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchConversationsEmailReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchConversationsEmailOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchConversationsEmailBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchConversationsEmailUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchConversationsEmailForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchConversationsEmailNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchConversationsEmailRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchConversationsEmailRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchConversationsEmailUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchConversationsEmailTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchConversationsEmailInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchConversationsEmailServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchConversationsEmailGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchConversationsEmailOK creates a PatchConversationsEmailOK with default headers values
func NewPatchConversationsEmailOK() *PatchConversationsEmailOK {
	return &PatchConversationsEmailOK{}
}

/*
PatchConversationsEmailOK describes a response with status code 200, with default header values.

successful operation
*/
type PatchConversationsEmailOK struct {
	Payload *models.Conversation
}

// IsSuccess returns true when this patch conversations email o k response has a 2xx status code
func (o *PatchConversationsEmailOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch conversations email o k response has a 3xx status code
func (o *PatchConversationsEmailOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations email o k response has a 4xx status code
func (o *PatchConversationsEmailOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations email o k response has a 5xx status code
func (o *PatchConversationsEmailOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations email o k response a status code equal to that given
func (o *PatchConversationsEmailOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchConversationsEmailOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}][%d] patchConversationsEmailOK  %+v", 200, o.Payload)
}

func (o *PatchConversationsEmailOK) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}][%d] patchConversationsEmailOK  %+v", 200, o.Payload)
}

func (o *PatchConversationsEmailOK) GetPayload() *models.Conversation {
	return o.Payload
}

func (o *PatchConversationsEmailOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Conversation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsEmailBadRequest creates a PatchConversationsEmailBadRequest with default headers values
func NewPatchConversationsEmailBadRequest() *PatchConversationsEmailBadRequest {
	return &PatchConversationsEmailBadRequest{}
}

/*
PatchConversationsEmailBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchConversationsEmailBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations email bad request response has a 2xx status code
func (o *PatchConversationsEmailBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations email bad request response has a 3xx status code
func (o *PatchConversationsEmailBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations email bad request response has a 4xx status code
func (o *PatchConversationsEmailBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations email bad request response has a 5xx status code
func (o *PatchConversationsEmailBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations email bad request response a status code equal to that given
func (o *PatchConversationsEmailBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchConversationsEmailBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}][%d] patchConversationsEmailBadRequest  %+v", 400, o.Payload)
}

func (o *PatchConversationsEmailBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}][%d] patchConversationsEmailBadRequest  %+v", 400, o.Payload)
}

func (o *PatchConversationsEmailBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsEmailBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsEmailUnauthorized creates a PatchConversationsEmailUnauthorized with default headers values
func NewPatchConversationsEmailUnauthorized() *PatchConversationsEmailUnauthorized {
	return &PatchConversationsEmailUnauthorized{}
}

/*
PatchConversationsEmailUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchConversationsEmailUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations email unauthorized response has a 2xx status code
func (o *PatchConversationsEmailUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations email unauthorized response has a 3xx status code
func (o *PatchConversationsEmailUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations email unauthorized response has a 4xx status code
func (o *PatchConversationsEmailUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations email unauthorized response has a 5xx status code
func (o *PatchConversationsEmailUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations email unauthorized response a status code equal to that given
func (o *PatchConversationsEmailUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchConversationsEmailUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}][%d] patchConversationsEmailUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConversationsEmailUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}][%d] patchConversationsEmailUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConversationsEmailUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsEmailUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsEmailForbidden creates a PatchConversationsEmailForbidden with default headers values
func NewPatchConversationsEmailForbidden() *PatchConversationsEmailForbidden {
	return &PatchConversationsEmailForbidden{}
}

/*
PatchConversationsEmailForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PatchConversationsEmailForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations email forbidden response has a 2xx status code
func (o *PatchConversationsEmailForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations email forbidden response has a 3xx status code
func (o *PatchConversationsEmailForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations email forbidden response has a 4xx status code
func (o *PatchConversationsEmailForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations email forbidden response has a 5xx status code
func (o *PatchConversationsEmailForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations email forbidden response a status code equal to that given
func (o *PatchConversationsEmailForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchConversationsEmailForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}][%d] patchConversationsEmailForbidden  %+v", 403, o.Payload)
}

func (o *PatchConversationsEmailForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}][%d] patchConversationsEmailForbidden  %+v", 403, o.Payload)
}

func (o *PatchConversationsEmailForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsEmailForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsEmailNotFound creates a PatchConversationsEmailNotFound with default headers values
func NewPatchConversationsEmailNotFound() *PatchConversationsEmailNotFound {
	return &PatchConversationsEmailNotFound{}
}

/*
PatchConversationsEmailNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PatchConversationsEmailNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations email not found response has a 2xx status code
func (o *PatchConversationsEmailNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations email not found response has a 3xx status code
func (o *PatchConversationsEmailNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations email not found response has a 4xx status code
func (o *PatchConversationsEmailNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations email not found response has a 5xx status code
func (o *PatchConversationsEmailNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations email not found response a status code equal to that given
func (o *PatchConversationsEmailNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchConversationsEmailNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}][%d] patchConversationsEmailNotFound  %+v", 404, o.Payload)
}

func (o *PatchConversationsEmailNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}][%d] patchConversationsEmailNotFound  %+v", 404, o.Payload)
}

func (o *PatchConversationsEmailNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsEmailNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsEmailRequestTimeout creates a PatchConversationsEmailRequestTimeout with default headers values
func NewPatchConversationsEmailRequestTimeout() *PatchConversationsEmailRequestTimeout {
	return &PatchConversationsEmailRequestTimeout{}
}

/*
PatchConversationsEmailRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchConversationsEmailRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations email request timeout response has a 2xx status code
func (o *PatchConversationsEmailRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations email request timeout response has a 3xx status code
func (o *PatchConversationsEmailRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations email request timeout response has a 4xx status code
func (o *PatchConversationsEmailRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations email request timeout response has a 5xx status code
func (o *PatchConversationsEmailRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations email request timeout response a status code equal to that given
func (o *PatchConversationsEmailRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PatchConversationsEmailRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}][%d] patchConversationsEmailRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchConversationsEmailRequestTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}][%d] patchConversationsEmailRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchConversationsEmailRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsEmailRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsEmailRequestEntityTooLarge creates a PatchConversationsEmailRequestEntityTooLarge with default headers values
func NewPatchConversationsEmailRequestEntityTooLarge() *PatchConversationsEmailRequestEntityTooLarge {
	return &PatchConversationsEmailRequestEntityTooLarge{}
}

/*
PatchConversationsEmailRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PatchConversationsEmailRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations email request entity too large response has a 2xx status code
func (o *PatchConversationsEmailRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations email request entity too large response has a 3xx status code
func (o *PatchConversationsEmailRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations email request entity too large response has a 4xx status code
func (o *PatchConversationsEmailRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations email request entity too large response has a 5xx status code
func (o *PatchConversationsEmailRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations email request entity too large response a status code equal to that given
func (o *PatchConversationsEmailRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PatchConversationsEmailRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}][%d] patchConversationsEmailRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchConversationsEmailRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}][%d] patchConversationsEmailRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchConversationsEmailRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsEmailRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsEmailUnsupportedMediaType creates a PatchConversationsEmailUnsupportedMediaType with default headers values
func NewPatchConversationsEmailUnsupportedMediaType() *PatchConversationsEmailUnsupportedMediaType {
	return &PatchConversationsEmailUnsupportedMediaType{}
}

/*
PatchConversationsEmailUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchConversationsEmailUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations email unsupported media type response has a 2xx status code
func (o *PatchConversationsEmailUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations email unsupported media type response has a 3xx status code
func (o *PatchConversationsEmailUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations email unsupported media type response has a 4xx status code
func (o *PatchConversationsEmailUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations email unsupported media type response has a 5xx status code
func (o *PatchConversationsEmailUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations email unsupported media type response a status code equal to that given
func (o *PatchConversationsEmailUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PatchConversationsEmailUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}][%d] patchConversationsEmailUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchConversationsEmailUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}][%d] patchConversationsEmailUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchConversationsEmailUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsEmailUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsEmailTooManyRequests creates a PatchConversationsEmailTooManyRequests with default headers values
func NewPatchConversationsEmailTooManyRequests() *PatchConversationsEmailTooManyRequests {
	return &PatchConversationsEmailTooManyRequests{}
}

/*
PatchConversationsEmailTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchConversationsEmailTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations email too many requests response has a 2xx status code
func (o *PatchConversationsEmailTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations email too many requests response has a 3xx status code
func (o *PatchConversationsEmailTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations email too many requests response has a 4xx status code
func (o *PatchConversationsEmailTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations email too many requests response has a 5xx status code
func (o *PatchConversationsEmailTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations email too many requests response a status code equal to that given
func (o *PatchConversationsEmailTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchConversationsEmailTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}][%d] patchConversationsEmailTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConversationsEmailTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}][%d] patchConversationsEmailTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConversationsEmailTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsEmailTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsEmailInternalServerError creates a PatchConversationsEmailInternalServerError with default headers values
func NewPatchConversationsEmailInternalServerError() *PatchConversationsEmailInternalServerError {
	return &PatchConversationsEmailInternalServerError{}
}

/*
PatchConversationsEmailInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchConversationsEmailInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations email internal server error response has a 2xx status code
func (o *PatchConversationsEmailInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations email internal server error response has a 3xx status code
func (o *PatchConversationsEmailInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations email internal server error response has a 4xx status code
func (o *PatchConversationsEmailInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations email internal server error response has a 5xx status code
func (o *PatchConversationsEmailInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations email internal server error response a status code equal to that given
func (o *PatchConversationsEmailInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchConversationsEmailInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}][%d] patchConversationsEmailInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchConversationsEmailInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}][%d] patchConversationsEmailInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchConversationsEmailInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsEmailInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsEmailServiceUnavailable creates a PatchConversationsEmailServiceUnavailable with default headers values
func NewPatchConversationsEmailServiceUnavailable() *PatchConversationsEmailServiceUnavailable {
	return &PatchConversationsEmailServiceUnavailable{}
}

/*
PatchConversationsEmailServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchConversationsEmailServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations email service unavailable response has a 2xx status code
func (o *PatchConversationsEmailServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations email service unavailable response has a 3xx status code
func (o *PatchConversationsEmailServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations email service unavailable response has a 4xx status code
func (o *PatchConversationsEmailServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations email service unavailable response has a 5xx status code
func (o *PatchConversationsEmailServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations email service unavailable response a status code equal to that given
func (o *PatchConversationsEmailServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PatchConversationsEmailServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}][%d] patchConversationsEmailServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchConversationsEmailServiceUnavailable) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}][%d] patchConversationsEmailServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchConversationsEmailServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsEmailServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsEmailGatewayTimeout creates a PatchConversationsEmailGatewayTimeout with default headers values
func NewPatchConversationsEmailGatewayTimeout() *PatchConversationsEmailGatewayTimeout {
	return &PatchConversationsEmailGatewayTimeout{}
}

/*
PatchConversationsEmailGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PatchConversationsEmailGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations email gateway timeout response has a 2xx status code
func (o *PatchConversationsEmailGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations email gateway timeout response has a 3xx status code
func (o *PatchConversationsEmailGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations email gateway timeout response has a 4xx status code
func (o *PatchConversationsEmailGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations email gateway timeout response has a 5xx status code
func (o *PatchConversationsEmailGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations email gateway timeout response a status code equal to that given
func (o *PatchConversationsEmailGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PatchConversationsEmailGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}][%d] patchConversationsEmailGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchConversationsEmailGatewayTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/emails/{conversationId}][%d] patchConversationsEmailGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchConversationsEmailGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsEmailGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

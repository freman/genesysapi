// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostConversationParticipantReplaceReader is a Reader for the PostConversationParticipantReplace structure.
type PostConversationParticipantReplaceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostConversationParticipantReplaceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewPostConversationParticipantReplaceAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostConversationParticipantReplaceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostConversationParticipantReplaceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostConversationParticipantReplaceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostConversationParticipantReplaceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostConversationParticipantReplaceRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostConversationParticipantReplaceRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostConversationParticipantReplaceUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostConversationParticipantReplaceTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostConversationParticipantReplaceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostConversationParticipantReplaceServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostConversationParticipantReplaceGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostConversationParticipantReplaceAccepted creates a PostConversationParticipantReplaceAccepted with default headers values
func NewPostConversationParticipantReplaceAccepted() *PostConversationParticipantReplaceAccepted {
	return &PostConversationParticipantReplaceAccepted{}
}

/*
PostConversationParticipantReplaceAccepted describes a response with status code 202, with default header values.

Accepted
*/
type PostConversationParticipantReplaceAccepted struct {
}

// IsSuccess returns true when this post conversation participant replace accepted response has a 2xx status code
func (o *PostConversationParticipantReplaceAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post conversation participant replace accepted response has a 3xx status code
func (o *PostConversationParticipantReplaceAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversation participant replace accepted response has a 4xx status code
func (o *PostConversationParticipantReplaceAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this post conversation participant replace accepted response has a 5xx status code
func (o *PostConversationParticipantReplaceAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversation participant replace accepted response a status code equal to that given
func (o *PostConversationParticipantReplaceAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *PostConversationParticipantReplaceAccepted) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/participants/{participantId}/replace][%d] postConversationParticipantReplaceAccepted ", 202)
}

func (o *PostConversationParticipantReplaceAccepted) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/participants/{participantId}/replace][%d] postConversationParticipantReplaceAccepted ", 202)
}

func (o *PostConversationParticipantReplaceAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostConversationParticipantReplaceBadRequest creates a PostConversationParticipantReplaceBadRequest with default headers values
func NewPostConversationParticipantReplaceBadRequest() *PostConversationParticipantReplaceBadRequest {
	return &PostConversationParticipantReplaceBadRequest{}
}

/*
PostConversationParticipantReplaceBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostConversationParticipantReplaceBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversation participant replace bad request response has a 2xx status code
func (o *PostConversationParticipantReplaceBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversation participant replace bad request response has a 3xx status code
func (o *PostConversationParticipantReplaceBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversation participant replace bad request response has a 4xx status code
func (o *PostConversationParticipantReplaceBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversation participant replace bad request response has a 5xx status code
func (o *PostConversationParticipantReplaceBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversation participant replace bad request response a status code equal to that given
func (o *PostConversationParticipantReplaceBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PostConversationParticipantReplaceBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/participants/{participantId}/replace][%d] postConversationParticipantReplaceBadRequest  %+v", 400, o.Payload)
}

func (o *PostConversationParticipantReplaceBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/participants/{participantId}/replace][%d] postConversationParticipantReplaceBadRequest  %+v", 400, o.Payload)
}

func (o *PostConversationParticipantReplaceBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationParticipantReplaceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationParticipantReplaceUnauthorized creates a PostConversationParticipantReplaceUnauthorized with default headers values
func NewPostConversationParticipantReplaceUnauthorized() *PostConversationParticipantReplaceUnauthorized {
	return &PostConversationParticipantReplaceUnauthorized{}
}

/*
PostConversationParticipantReplaceUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PostConversationParticipantReplaceUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversation participant replace unauthorized response has a 2xx status code
func (o *PostConversationParticipantReplaceUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversation participant replace unauthorized response has a 3xx status code
func (o *PostConversationParticipantReplaceUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversation participant replace unauthorized response has a 4xx status code
func (o *PostConversationParticipantReplaceUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversation participant replace unauthorized response has a 5xx status code
func (o *PostConversationParticipantReplaceUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversation participant replace unauthorized response a status code equal to that given
func (o *PostConversationParticipantReplaceUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PostConversationParticipantReplaceUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/participants/{participantId}/replace][%d] postConversationParticipantReplaceUnauthorized  %+v", 401, o.Payload)
}

func (o *PostConversationParticipantReplaceUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/participants/{participantId}/replace][%d] postConversationParticipantReplaceUnauthorized  %+v", 401, o.Payload)
}

func (o *PostConversationParticipantReplaceUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationParticipantReplaceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationParticipantReplaceForbidden creates a PostConversationParticipantReplaceForbidden with default headers values
func NewPostConversationParticipantReplaceForbidden() *PostConversationParticipantReplaceForbidden {
	return &PostConversationParticipantReplaceForbidden{}
}

/*
PostConversationParticipantReplaceForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PostConversationParticipantReplaceForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversation participant replace forbidden response has a 2xx status code
func (o *PostConversationParticipantReplaceForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversation participant replace forbidden response has a 3xx status code
func (o *PostConversationParticipantReplaceForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversation participant replace forbidden response has a 4xx status code
func (o *PostConversationParticipantReplaceForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversation participant replace forbidden response has a 5xx status code
func (o *PostConversationParticipantReplaceForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversation participant replace forbidden response a status code equal to that given
func (o *PostConversationParticipantReplaceForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PostConversationParticipantReplaceForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/participants/{participantId}/replace][%d] postConversationParticipantReplaceForbidden  %+v", 403, o.Payload)
}

func (o *PostConversationParticipantReplaceForbidden) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/participants/{participantId}/replace][%d] postConversationParticipantReplaceForbidden  %+v", 403, o.Payload)
}

func (o *PostConversationParticipantReplaceForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationParticipantReplaceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationParticipantReplaceNotFound creates a PostConversationParticipantReplaceNotFound with default headers values
func NewPostConversationParticipantReplaceNotFound() *PostConversationParticipantReplaceNotFound {
	return &PostConversationParticipantReplaceNotFound{}
}

/*
PostConversationParticipantReplaceNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PostConversationParticipantReplaceNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversation participant replace not found response has a 2xx status code
func (o *PostConversationParticipantReplaceNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversation participant replace not found response has a 3xx status code
func (o *PostConversationParticipantReplaceNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversation participant replace not found response has a 4xx status code
func (o *PostConversationParticipantReplaceNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversation participant replace not found response has a 5xx status code
func (o *PostConversationParticipantReplaceNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversation participant replace not found response a status code equal to that given
func (o *PostConversationParticipantReplaceNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PostConversationParticipantReplaceNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/participants/{participantId}/replace][%d] postConversationParticipantReplaceNotFound  %+v", 404, o.Payload)
}

func (o *PostConversationParticipantReplaceNotFound) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/participants/{participantId}/replace][%d] postConversationParticipantReplaceNotFound  %+v", 404, o.Payload)
}

func (o *PostConversationParticipantReplaceNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationParticipantReplaceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationParticipantReplaceRequestTimeout creates a PostConversationParticipantReplaceRequestTimeout with default headers values
func NewPostConversationParticipantReplaceRequestTimeout() *PostConversationParticipantReplaceRequestTimeout {
	return &PostConversationParticipantReplaceRequestTimeout{}
}

/*
PostConversationParticipantReplaceRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PostConversationParticipantReplaceRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversation participant replace request timeout response has a 2xx status code
func (o *PostConversationParticipantReplaceRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversation participant replace request timeout response has a 3xx status code
func (o *PostConversationParticipantReplaceRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversation participant replace request timeout response has a 4xx status code
func (o *PostConversationParticipantReplaceRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversation participant replace request timeout response has a 5xx status code
func (o *PostConversationParticipantReplaceRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversation participant replace request timeout response a status code equal to that given
func (o *PostConversationParticipantReplaceRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PostConversationParticipantReplaceRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/participants/{participantId}/replace][%d] postConversationParticipantReplaceRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostConversationParticipantReplaceRequestTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/participants/{participantId}/replace][%d] postConversationParticipantReplaceRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostConversationParticipantReplaceRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationParticipantReplaceRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationParticipantReplaceRequestEntityTooLarge creates a PostConversationParticipantReplaceRequestEntityTooLarge with default headers values
func NewPostConversationParticipantReplaceRequestEntityTooLarge() *PostConversationParticipantReplaceRequestEntityTooLarge {
	return &PostConversationParticipantReplaceRequestEntityTooLarge{}
}

/*
PostConversationParticipantReplaceRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PostConversationParticipantReplaceRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversation participant replace request entity too large response has a 2xx status code
func (o *PostConversationParticipantReplaceRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversation participant replace request entity too large response has a 3xx status code
func (o *PostConversationParticipantReplaceRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversation participant replace request entity too large response has a 4xx status code
func (o *PostConversationParticipantReplaceRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversation participant replace request entity too large response has a 5xx status code
func (o *PostConversationParticipantReplaceRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversation participant replace request entity too large response a status code equal to that given
func (o *PostConversationParticipantReplaceRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PostConversationParticipantReplaceRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/participants/{participantId}/replace][%d] postConversationParticipantReplaceRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostConversationParticipantReplaceRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/participants/{participantId}/replace][%d] postConversationParticipantReplaceRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostConversationParticipantReplaceRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationParticipantReplaceRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationParticipantReplaceUnsupportedMediaType creates a PostConversationParticipantReplaceUnsupportedMediaType with default headers values
func NewPostConversationParticipantReplaceUnsupportedMediaType() *PostConversationParticipantReplaceUnsupportedMediaType {
	return &PostConversationParticipantReplaceUnsupportedMediaType{}
}

/*
PostConversationParticipantReplaceUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostConversationParticipantReplaceUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversation participant replace unsupported media type response has a 2xx status code
func (o *PostConversationParticipantReplaceUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversation participant replace unsupported media type response has a 3xx status code
func (o *PostConversationParticipantReplaceUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversation participant replace unsupported media type response has a 4xx status code
func (o *PostConversationParticipantReplaceUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversation participant replace unsupported media type response has a 5xx status code
func (o *PostConversationParticipantReplaceUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversation participant replace unsupported media type response a status code equal to that given
func (o *PostConversationParticipantReplaceUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PostConversationParticipantReplaceUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/participants/{participantId}/replace][%d] postConversationParticipantReplaceUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostConversationParticipantReplaceUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/participants/{participantId}/replace][%d] postConversationParticipantReplaceUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostConversationParticipantReplaceUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationParticipantReplaceUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationParticipantReplaceTooManyRequests creates a PostConversationParticipantReplaceTooManyRequests with default headers values
func NewPostConversationParticipantReplaceTooManyRequests() *PostConversationParticipantReplaceTooManyRequests {
	return &PostConversationParticipantReplaceTooManyRequests{}
}

/*
PostConversationParticipantReplaceTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PostConversationParticipantReplaceTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversation participant replace too many requests response has a 2xx status code
func (o *PostConversationParticipantReplaceTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversation participant replace too many requests response has a 3xx status code
func (o *PostConversationParticipantReplaceTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversation participant replace too many requests response has a 4xx status code
func (o *PostConversationParticipantReplaceTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this post conversation participant replace too many requests response has a 5xx status code
func (o *PostConversationParticipantReplaceTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this post conversation participant replace too many requests response a status code equal to that given
func (o *PostConversationParticipantReplaceTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PostConversationParticipantReplaceTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/participants/{participantId}/replace][%d] postConversationParticipantReplaceTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostConversationParticipantReplaceTooManyRequests) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/participants/{participantId}/replace][%d] postConversationParticipantReplaceTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostConversationParticipantReplaceTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationParticipantReplaceTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationParticipantReplaceInternalServerError creates a PostConversationParticipantReplaceInternalServerError with default headers values
func NewPostConversationParticipantReplaceInternalServerError() *PostConversationParticipantReplaceInternalServerError {
	return &PostConversationParticipantReplaceInternalServerError{}
}

/*
PostConversationParticipantReplaceInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostConversationParticipantReplaceInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversation participant replace internal server error response has a 2xx status code
func (o *PostConversationParticipantReplaceInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversation participant replace internal server error response has a 3xx status code
func (o *PostConversationParticipantReplaceInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversation participant replace internal server error response has a 4xx status code
func (o *PostConversationParticipantReplaceInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post conversation participant replace internal server error response has a 5xx status code
func (o *PostConversationParticipantReplaceInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post conversation participant replace internal server error response a status code equal to that given
func (o *PostConversationParticipantReplaceInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PostConversationParticipantReplaceInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/participants/{participantId}/replace][%d] postConversationParticipantReplaceInternalServerError  %+v", 500, o.Payload)
}

func (o *PostConversationParticipantReplaceInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/participants/{participantId}/replace][%d] postConversationParticipantReplaceInternalServerError  %+v", 500, o.Payload)
}

func (o *PostConversationParticipantReplaceInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationParticipantReplaceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationParticipantReplaceServiceUnavailable creates a PostConversationParticipantReplaceServiceUnavailable with default headers values
func NewPostConversationParticipantReplaceServiceUnavailable() *PostConversationParticipantReplaceServiceUnavailable {
	return &PostConversationParticipantReplaceServiceUnavailable{}
}

/*
PostConversationParticipantReplaceServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostConversationParticipantReplaceServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversation participant replace service unavailable response has a 2xx status code
func (o *PostConversationParticipantReplaceServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversation participant replace service unavailable response has a 3xx status code
func (o *PostConversationParticipantReplaceServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversation participant replace service unavailable response has a 4xx status code
func (o *PostConversationParticipantReplaceServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this post conversation participant replace service unavailable response has a 5xx status code
func (o *PostConversationParticipantReplaceServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this post conversation participant replace service unavailable response a status code equal to that given
func (o *PostConversationParticipantReplaceServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PostConversationParticipantReplaceServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/participants/{participantId}/replace][%d] postConversationParticipantReplaceServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostConversationParticipantReplaceServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/participants/{participantId}/replace][%d] postConversationParticipantReplaceServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostConversationParticipantReplaceServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationParticipantReplaceServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConversationParticipantReplaceGatewayTimeout creates a PostConversationParticipantReplaceGatewayTimeout with default headers values
func NewPostConversationParticipantReplaceGatewayTimeout() *PostConversationParticipantReplaceGatewayTimeout {
	return &PostConversationParticipantReplaceGatewayTimeout{}
}

/*
PostConversationParticipantReplaceGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PostConversationParticipantReplaceGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post conversation participant replace gateway timeout response has a 2xx status code
func (o *PostConversationParticipantReplaceGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post conversation participant replace gateway timeout response has a 3xx status code
func (o *PostConversationParticipantReplaceGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post conversation participant replace gateway timeout response has a 4xx status code
func (o *PostConversationParticipantReplaceGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this post conversation participant replace gateway timeout response has a 5xx status code
func (o *PostConversationParticipantReplaceGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this post conversation participant replace gateway timeout response a status code equal to that given
func (o *PostConversationParticipantReplaceGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PostConversationParticipantReplaceGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/participants/{participantId}/replace][%d] postConversationParticipantReplaceGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostConversationParticipantReplaceGatewayTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/conversations/{conversationId}/participants/{participantId}/replace][%d] postConversationParticipantReplaceGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostConversationParticipantReplaceGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostConversationParticipantReplaceGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

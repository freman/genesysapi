// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchConversationsCallbacksReader is a Reader for the PatchConversationsCallbacks structure.
type PatchConversationsCallbacksReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchConversationsCallbacksReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchConversationsCallbacksOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchConversationsCallbacksBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchConversationsCallbacksUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchConversationsCallbacksForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchConversationsCallbacksNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchConversationsCallbacksRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewPatchConversationsCallbacksPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchConversationsCallbacksRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchConversationsCallbacksUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchConversationsCallbacksTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchConversationsCallbacksInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchConversationsCallbacksServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchConversationsCallbacksGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchConversationsCallbacksOK creates a PatchConversationsCallbacksOK with default headers values
func NewPatchConversationsCallbacksOK() *PatchConversationsCallbacksOK {
	return &PatchConversationsCallbacksOK{}
}

/*PatchConversationsCallbacksOK handles this case with default header values.

successful operation
*/
type PatchConversationsCallbacksOK struct {
	Payload *models.PatchCallbackResponse
}

func (o *PatchConversationsCallbacksOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks][%d] patchConversationsCallbacksOK  %+v", 200, o.Payload)
}

func (o *PatchConversationsCallbacksOK) GetPayload() *models.PatchCallbackResponse {
	return o.Payload
}

func (o *PatchConversationsCallbacksOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PatchCallbackResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallbacksBadRequest creates a PatchConversationsCallbacksBadRequest with default headers values
func NewPatchConversationsCallbacksBadRequest() *PatchConversationsCallbacksBadRequest {
	return &PatchConversationsCallbacksBadRequest{}
}

/*PatchConversationsCallbacksBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchConversationsCallbacksBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsCallbacksBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks][%d] patchConversationsCallbacksBadRequest  %+v", 400, o.Payload)
}

func (o *PatchConversationsCallbacksBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallbacksBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallbacksUnauthorized creates a PatchConversationsCallbacksUnauthorized with default headers values
func NewPatchConversationsCallbacksUnauthorized() *PatchConversationsCallbacksUnauthorized {
	return &PatchConversationsCallbacksUnauthorized{}
}

/*PatchConversationsCallbacksUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchConversationsCallbacksUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsCallbacksUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks][%d] patchConversationsCallbacksUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConversationsCallbacksUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallbacksUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallbacksForbidden creates a PatchConversationsCallbacksForbidden with default headers values
func NewPatchConversationsCallbacksForbidden() *PatchConversationsCallbacksForbidden {
	return &PatchConversationsCallbacksForbidden{}
}

/*PatchConversationsCallbacksForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PatchConversationsCallbacksForbidden struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsCallbacksForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks][%d] patchConversationsCallbacksForbidden  %+v", 403, o.Payload)
}

func (o *PatchConversationsCallbacksForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallbacksForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallbacksNotFound creates a PatchConversationsCallbacksNotFound with default headers values
func NewPatchConversationsCallbacksNotFound() *PatchConversationsCallbacksNotFound {
	return &PatchConversationsCallbacksNotFound{}
}

/*PatchConversationsCallbacksNotFound handles this case with default header values.

The requested resource was not found.
*/
type PatchConversationsCallbacksNotFound struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsCallbacksNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks][%d] patchConversationsCallbacksNotFound  %+v", 404, o.Payload)
}

func (o *PatchConversationsCallbacksNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallbacksNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallbacksRequestTimeout creates a PatchConversationsCallbacksRequestTimeout with default headers values
func NewPatchConversationsCallbacksRequestTimeout() *PatchConversationsCallbacksRequestTimeout {
	return &PatchConversationsCallbacksRequestTimeout{}
}

/*PatchConversationsCallbacksRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchConversationsCallbacksRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsCallbacksRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks][%d] patchConversationsCallbacksRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchConversationsCallbacksRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallbacksRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallbacksPreconditionFailed creates a PatchConversationsCallbacksPreconditionFailed with default headers values
func NewPatchConversationsCallbacksPreconditionFailed() *PatchConversationsCallbacksPreconditionFailed {
	return &PatchConversationsCallbacksPreconditionFailed{}
}

/*PatchConversationsCallbacksPreconditionFailed handles this case with default header values.

Precondition Failed
*/
type PatchConversationsCallbacksPreconditionFailed struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsCallbacksPreconditionFailed) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks][%d] patchConversationsCallbacksPreconditionFailed  %+v", 412, o.Payload)
}

func (o *PatchConversationsCallbacksPreconditionFailed) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallbacksPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallbacksRequestEntityTooLarge creates a PatchConversationsCallbacksRequestEntityTooLarge with default headers values
func NewPatchConversationsCallbacksRequestEntityTooLarge() *PatchConversationsCallbacksRequestEntityTooLarge {
	return &PatchConversationsCallbacksRequestEntityTooLarge{}
}

/*PatchConversationsCallbacksRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PatchConversationsCallbacksRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsCallbacksRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks][%d] patchConversationsCallbacksRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchConversationsCallbacksRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallbacksRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallbacksUnsupportedMediaType creates a PatchConversationsCallbacksUnsupportedMediaType with default headers values
func NewPatchConversationsCallbacksUnsupportedMediaType() *PatchConversationsCallbacksUnsupportedMediaType {
	return &PatchConversationsCallbacksUnsupportedMediaType{}
}

/*PatchConversationsCallbacksUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchConversationsCallbacksUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsCallbacksUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks][%d] patchConversationsCallbacksUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchConversationsCallbacksUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallbacksUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallbacksTooManyRequests creates a PatchConversationsCallbacksTooManyRequests with default headers values
func NewPatchConversationsCallbacksTooManyRequests() *PatchConversationsCallbacksTooManyRequests {
	return &PatchConversationsCallbacksTooManyRequests{}
}

/*PatchConversationsCallbacksTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchConversationsCallbacksTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsCallbacksTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks][%d] patchConversationsCallbacksTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConversationsCallbacksTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallbacksTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallbacksInternalServerError creates a PatchConversationsCallbacksInternalServerError with default headers values
func NewPatchConversationsCallbacksInternalServerError() *PatchConversationsCallbacksInternalServerError {
	return &PatchConversationsCallbacksInternalServerError{}
}

/*PatchConversationsCallbacksInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchConversationsCallbacksInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsCallbacksInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks][%d] patchConversationsCallbacksInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchConversationsCallbacksInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallbacksInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallbacksServiceUnavailable creates a PatchConversationsCallbacksServiceUnavailable with default headers values
func NewPatchConversationsCallbacksServiceUnavailable() *PatchConversationsCallbacksServiceUnavailable {
	return &PatchConversationsCallbacksServiceUnavailable{}
}

/*PatchConversationsCallbacksServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchConversationsCallbacksServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsCallbacksServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks][%d] patchConversationsCallbacksServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchConversationsCallbacksServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallbacksServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsCallbacksGatewayTimeout creates a PatchConversationsCallbacksGatewayTimeout with default headers values
func NewPatchConversationsCallbacksGatewayTimeout() *PatchConversationsCallbacksGatewayTimeout {
	return &PatchConversationsCallbacksGatewayTimeout{}
}

/*PatchConversationsCallbacksGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PatchConversationsCallbacksGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsCallbacksGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/callbacks][%d] patchConversationsCallbacksGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchConversationsCallbacksGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsCallbacksGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

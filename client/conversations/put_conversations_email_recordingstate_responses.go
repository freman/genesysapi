// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutConversationsEmailRecordingstateReader is a Reader for the PutConversationsEmailRecordingstate structure.
type PutConversationsEmailRecordingstateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutConversationsEmailRecordingstateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutConversationsEmailRecordingstateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewPutConversationsEmailRecordingstateAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutConversationsEmailRecordingstateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutConversationsEmailRecordingstateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutConversationsEmailRecordingstateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutConversationsEmailRecordingstateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPutConversationsEmailRecordingstateRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutConversationsEmailRecordingstateRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutConversationsEmailRecordingstateUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutConversationsEmailRecordingstateTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutConversationsEmailRecordingstateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutConversationsEmailRecordingstateServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutConversationsEmailRecordingstateGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutConversationsEmailRecordingstateOK creates a PutConversationsEmailRecordingstateOK with default headers values
func NewPutConversationsEmailRecordingstateOK() *PutConversationsEmailRecordingstateOK {
	return &PutConversationsEmailRecordingstateOK{}
}

/*PutConversationsEmailRecordingstateOK handles this case with default header values.

successful operation
*/
type PutConversationsEmailRecordingstateOK struct {
	Payload string
}

func (o *PutConversationsEmailRecordingstateOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/emails/{conversationId}/recordingstate][%d] putConversationsEmailRecordingstateOK  %+v", 200, o.Payload)
}

func (o *PutConversationsEmailRecordingstateOK) GetPayload() string {
	return o.Payload
}

func (o *PutConversationsEmailRecordingstateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsEmailRecordingstateAccepted creates a PutConversationsEmailRecordingstateAccepted with default headers values
func NewPutConversationsEmailRecordingstateAccepted() *PutConversationsEmailRecordingstateAccepted {
	return &PutConversationsEmailRecordingstateAccepted{}
}

/*PutConversationsEmailRecordingstateAccepted handles this case with default header values.

Accepted - when pausing or resuming recordings (Secure Pause)
*/
type PutConversationsEmailRecordingstateAccepted struct {
	Payload string
}

func (o *PutConversationsEmailRecordingstateAccepted) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/emails/{conversationId}/recordingstate][%d] putConversationsEmailRecordingstateAccepted  %+v", 202, o.Payload)
}

func (o *PutConversationsEmailRecordingstateAccepted) GetPayload() string {
	return o.Payload
}

func (o *PutConversationsEmailRecordingstateAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsEmailRecordingstateBadRequest creates a PutConversationsEmailRecordingstateBadRequest with default headers values
func NewPutConversationsEmailRecordingstateBadRequest() *PutConversationsEmailRecordingstateBadRequest {
	return &PutConversationsEmailRecordingstateBadRequest{}
}

/*PutConversationsEmailRecordingstateBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutConversationsEmailRecordingstateBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PutConversationsEmailRecordingstateBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/emails/{conversationId}/recordingstate][%d] putConversationsEmailRecordingstateBadRequest  %+v", 400, o.Payload)
}

func (o *PutConversationsEmailRecordingstateBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsEmailRecordingstateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsEmailRecordingstateUnauthorized creates a PutConversationsEmailRecordingstateUnauthorized with default headers values
func NewPutConversationsEmailRecordingstateUnauthorized() *PutConversationsEmailRecordingstateUnauthorized {
	return &PutConversationsEmailRecordingstateUnauthorized{}
}

/*PutConversationsEmailRecordingstateUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PutConversationsEmailRecordingstateUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PutConversationsEmailRecordingstateUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/emails/{conversationId}/recordingstate][%d] putConversationsEmailRecordingstateUnauthorized  %+v", 401, o.Payload)
}

func (o *PutConversationsEmailRecordingstateUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsEmailRecordingstateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsEmailRecordingstateForbidden creates a PutConversationsEmailRecordingstateForbidden with default headers values
func NewPutConversationsEmailRecordingstateForbidden() *PutConversationsEmailRecordingstateForbidden {
	return &PutConversationsEmailRecordingstateForbidden{}
}

/*PutConversationsEmailRecordingstateForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PutConversationsEmailRecordingstateForbidden struct {
	Payload *models.ErrorBody
}

func (o *PutConversationsEmailRecordingstateForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/emails/{conversationId}/recordingstate][%d] putConversationsEmailRecordingstateForbidden  %+v", 403, o.Payload)
}

func (o *PutConversationsEmailRecordingstateForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsEmailRecordingstateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsEmailRecordingstateNotFound creates a PutConversationsEmailRecordingstateNotFound with default headers values
func NewPutConversationsEmailRecordingstateNotFound() *PutConversationsEmailRecordingstateNotFound {
	return &PutConversationsEmailRecordingstateNotFound{}
}

/*PutConversationsEmailRecordingstateNotFound handles this case with default header values.

The requested resource was not found.
*/
type PutConversationsEmailRecordingstateNotFound struct {
	Payload *models.ErrorBody
}

func (o *PutConversationsEmailRecordingstateNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/emails/{conversationId}/recordingstate][%d] putConversationsEmailRecordingstateNotFound  %+v", 404, o.Payload)
}

func (o *PutConversationsEmailRecordingstateNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsEmailRecordingstateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsEmailRecordingstateRequestTimeout creates a PutConversationsEmailRecordingstateRequestTimeout with default headers values
func NewPutConversationsEmailRecordingstateRequestTimeout() *PutConversationsEmailRecordingstateRequestTimeout {
	return &PutConversationsEmailRecordingstateRequestTimeout{}
}

/*PutConversationsEmailRecordingstateRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PutConversationsEmailRecordingstateRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutConversationsEmailRecordingstateRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/emails/{conversationId}/recordingstate][%d] putConversationsEmailRecordingstateRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutConversationsEmailRecordingstateRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsEmailRecordingstateRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsEmailRecordingstateRequestEntityTooLarge creates a PutConversationsEmailRecordingstateRequestEntityTooLarge with default headers values
func NewPutConversationsEmailRecordingstateRequestEntityTooLarge() *PutConversationsEmailRecordingstateRequestEntityTooLarge {
	return &PutConversationsEmailRecordingstateRequestEntityTooLarge{}
}

/*PutConversationsEmailRecordingstateRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PutConversationsEmailRecordingstateRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PutConversationsEmailRecordingstateRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/emails/{conversationId}/recordingstate][%d] putConversationsEmailRecordingstateRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutConversationsEmailRecordingstateRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsEmailRecordingstateRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsEmailRecordingstateUnsupportedMediaType creates a PutConversationsEmailRecordingstateUnsupportedMediaType with default headers values
func NewPutConversationsEmailRecordingstateUnsupportedMediaType() *PutConversationsEmailRecordingstateUnsupportedMediaType {
	return &PutConversationsEmailRecordingstateUnsupportedMediaType{}
}

/*PutConversationsEmailRecordingstateUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutConversationsEmailRecordingstateUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PutConversationsEmailRecordingstateUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/emails/{conversationId}/recordingstate][%d] putConversationsEmailRecordingstateUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutConversationsEmailRecordingstateUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsEmailRecordingstateUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsEmailRecordingstateTooManyRequests creates a PutConversationsEmailRecordingstateTooManyRequests with default headers values
func NewPutConversationsEmailRecordingstateTooManyRequests() *PutConversationsEmailRecordingstateTooManyRequests {
	return &PutConversationsEmailRecordingstateTooManyRequests{}
}

/*PutConversationsEmailRecordingstateTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PutConversationsEmailRecordingstateTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PutConversationsEmailRecordingstateTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/emails/{conversationId}/recordingstate][%d] putConversationsEmailRecordingstateTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutConversationsEmailRecordingstateTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsEmailRecordingstateTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsEmailRecordingstateInternalServerError creates a PutConversationsEmailRecordingstateInternalServerError with default headers values
func NewPutConversationsEmailRecordingstateInternalServerError() *PutConversationsEmailRecordingstateInternalServerError {
	return &PutConversationsEmailRecordingstateInternalServerError{}
}

/*PutConversationsEmailRecordingstateInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutConversationsEmailRecordingstateInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PutConversationsEmailRecordingstateInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/emails/{conversationId}/recordingstate][%d] putConversationsEmailRecordingstateInternalServerError  %+v", 500, o.Payload)
}

func (o *PutConversationsEmailRecordingstateInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsEmailRecordingstateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsEmailRecordingstateServiceUnavailable creates a PutConversationsEmailRecordingstateServiceUnavailable with default headers values
func NewPutConversationsEmailRecordingstateServiceUnavailable() *PutConversationsEmailRecordingstateServiceUnavailable {
	return &PutConversationsEmailRecordingstateServiceUnavailable{}
}

/*PutConversationsEmailRecordingstateServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutConversationsEmailRecordingstateServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PutConversationsEmailRecordingstateServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/emails/{conversationId}/recordingstate][%d] putConversationsEmailRecordingstateServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutConversationsEmailRecordingstateServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsEmailRecordingstateServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsEmailRecordingstateGatewayTimeout creates a PutConversationsEmailRecordingstateGatewayTimeout with default headers values
func NewPutConversationsEmailRecordingstateGatewayTimeout() *PutConversationsEmailRecordingstateGatewayTimeout {
	return &PutConversationsEmailRecordingstateGatewayTimeout{}
}

/*PutConversationsEmailRecordingstateGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PutConversationsEmailRecordingstateGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutConversationsEmailRecordingstateGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/emails/{conversationId}/recordingstate][%d] putConversationsEmailRecordingstateGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutConversationsEmailRecordingstateGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsEmailRecordingstateGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

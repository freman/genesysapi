// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// DeleteConversationsMessagingSupportedcontentSupportedContentIDReader is a Reader for the DeleteConversationsMessagingSupportedcontentSupportedContentID structure.
type DeleteConversationsMessagingSupportedcontentSupportedContentIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteConversationsMessagingSupportedcontentSupportedContentIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteConversationsMessagingSupportedcontentSupportedContentIDNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteConversationsMessagingSupportedcontentSupportedContentIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteConversationsMessagingSupportedcontentSupportedContentIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteConversationsMessagingSupportedcontentSupportedContentIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteConversationsMessagingSupportedcontentSupportedContentIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewDeleteConversationsMessagingSupportedcontentSupportedContentIDRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewDeleteConversationsMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewDeleteConversationsMessagingSupportedcontentSupportedContentIDUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteConversationsMessagingSupportedcontentSupportedContentIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteConversationsMessagingSupportedcontentSupportedContentIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewDeleteConversationsMessagingSupportedcontentSupportedContentIDServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewDeleteConversationsMessagingSupportedcontentSupportedContentIDGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteConversationsMessagingSupportedcontentSupportedContentIDNoContent creates a DeleteConversationsMessagingSupportedcontentSupportedContentIDNoContent with default headers values
func NewDeleteConversationsMessagingSupportedcontentSupportedContentIDNoContent() *DeleteConversationsMessagingSupportedcontentSupportedContentIDNoContent {
	return &DeleteConversationsMessagingSupportedcontentSupportedContentIDNoContent{}
}

/*DeleteConversationsMessagingSupportedcontentSupportedContentIDNoContent handles this case with default header values.

Operation was successful
*/
type DeleteConversationsMessagingSupportedcontentSupportedContentIDNoContent struct {
}

func (o *DeleteConversationsMessagingSupportedcontentSupportedContentIDNoContent) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] deleteConversationsMessagingSupportedcontentSupportedContentIdNoContent ", 204)
}

func (o *DeleteConversationsMessagingSupportedcontentSupportedContentIDNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteConversationsMessagingSupportedcontentSupportedContentIDBadRequest creates a DeleteConversationsMessagingSupportedcontentSupportedContentIDBadRequest with default headers values
func NewDeleteConversationsMessagingSupportedcontentSupportedContentIDBadRequest() *DeleteConversationsMessagingSupportedcontentSupportedContentIDBadRequest {
	return &DeleteConversationsMessagingSupportedcontentSupportedContentIDBadRequest{}
}

/*DeleteConversationsMessagingSupportedcontentSupportedContentIDBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type DeleteConversationsMessagingSupportedcontentSupportedContentIDBadRequest struct {
	Payload *models.ErrorBody
}

func (o *DeleteConversationsMessagingSupportedcontentSupportedContentIDBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] deleteConversationsMessagingSupportedcontentSupportedContentIdBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteConversationsMessagingSupportedcontentSupportedContentIDBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteConversationsMessagingSupportedcontentSupportedContentIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteConversationsMessagingSupportedcontentSupportedContentIDUnauthorized creates a DeleteConversationsMessagingSupportedcontentSupportedContentIDUnauthorized with default headers values
func NewDeleteConversationsMessagingSupportedcontentSupportedContentIDUnauthorized() *DeleteConversationsMessagingSupportedcontentSupportedContentIDUnauthorized {
	return &DeleteConversationsMessagingSupportedcontentSupportedContentIDUnauthorized{}
}

/*DeleteConversationsMessagingSupportedcontentSupportedContentIDUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type DeleteConversationsMessagingSupportedcontentSupportedContentIDUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *DeleteConversationsMessagingSupportedcontentSupportedContentIDUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] deleteConversationsMessagingSupportedcontentSupportedContentIdUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteConversationsMessagingSupportedcontentSupportedContentIDUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteConversationsMessagingSupportedcontentSupportedContentIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteConversationsMessagingSupportedcontentSupportedContentIDForbidden creates a DeleteConversationsMessagingSupportedcontentSupportedContentIDForbidden with default headers values
func NewDeleteConversationsMessagingSupportedcontentSupportedContentIDForbidden() *DeleteConversationsMessagingSupportedcontentSupportedContentIDForbidden {
	return &DeleteConversationsMessagingSupportedcontentSupportedContentIDForbidden{}
}

/*DeleteConversationsMessagingSupportedcontentSupportedContentIDForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type DeleteConversationsMessagingSupportedcontentSupportedContentIDForbidden struct {
	Payload *models.ErrorBody
}

func (o *DeleteConversationsMessagingSupportedcontentSupportedContentIDForbidden) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] deleteConversationsMessagingSupportedcontentSupportedContentIdForbidden  %+v", 403, o.Payload)
}

func (o *DeleteConversationsMessagingSupportedcontentSupportedContentIDForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteConversationsMessagingSupportedcontentSupportedContentIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteConversationsMessagingSupportedcontentSupportedContentIDNotFound creates a DeleteConversationsMessagingSupportedcontentSupportedContentIDNotFound with default headers values
func NewDeleteConversationsMessagingSupportedcontentSupportedContentIDNotFound() *DeleteConversationsMessagingSupportedcontentSupportedContentIDNotFound {
	return &DeleteConversationsMessagingSupportedcontentSupportedContentIDNotFound{}
}

/*DeleteConversationsMessagingSupportedcontentSupportedContentIDNotFound handles this case with default header values.

The requested resource was not found.
*/
type DeleteConversationsMessagingSupportedcontentSupportedContentIDNotFound struct {
	Payload *models.ErrorBody
}

func (o *DeleteConversationsMessagingSupportedcontentSupportedContentIDNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] deleteConversationsMessagingSupportedcontentSupportedContentIdNotFound  %+v", 404, o.Payload)
}

func (o *DeleteConversationsMessagingSupportedcontentSupportedContentIDNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteConversationsMessagingSupportedcontentSupportedContentIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteConversationsMessagingSupportedcontentSupportedContentIDRequestTimeout creates a DeleteConversationsMessagingSupportedcontentSupportedContentIDRequestTimeout with default headers values
func NewDeleteConversationsMessagingSupportedcontentSupportedContentIDRequestTimeout() *DeleteConversationsMessagingSupportedcontentSupportedContentIDRequestTimeout {
	return &DeleteConversationsMessagingSupportedcontentSupportedContentIDRequestTimeout{}
}

/*DeleteConversationsMessagingSupportedcontentSupportedContentIDRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type DeleteConversationsMessagingSupportedcontentSupportedContentIDRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *DeleteConversationsMessagingSupportedcontentSupportedContentIDRequestTimeout) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] deleteConversationsMessagingSupportedcontentSupportedContentIdRequestTimeout  %+v", 408, o.Payload)
}

func (o *DeleteConversationsMessagingSupportedcontentSupportedContentIDRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteConversationsMessagingSupportedcontentSupportedContentIDRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteConversationsMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge creates a DeleteConversationsMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge with default headers values
func NewDeleteConversationsMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge() *DeleteConversationsMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge {
	return &DeleteConversationsMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge{}
}

/*DeleteConversationsMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type DeleteConversationsMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *DeleteConversationsMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] deleteConversationsMessagingSupportedcontentSupportedContentIdRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *DeleteConversationsMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteConversationsMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteConversationsMessagingSupportedcontentSupportedContentIDUnsupportedMediaType creates a DeleteConversationsMessagingSupportedcontentSupportedContentIDUnsupportedMediaType with default headers values
func NewDeleteConversationsMessagingSupportedcontentSupportedContentIDUnsupportedMediaType() *DeleteConversationsMessagingSupportedcontentSupportedContentIDUnsupportedMediaType {
	return &DeleteConversationsMessagingSupportedcontentSupportedContentIDUnsupportedMediaType{}
}

/*DeleteConversationsMessagingSupportedcontentSupportedContentIDUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type DeleteConversationsMessagingSupportedcontentSupportedContentIDUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *DeleteConversationsMessagingSupportedcontentSupportedContentIDUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] deleteConversationsMessagingSupportedcontentSupportedContentIdUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *DeleteConversationsMessagingSupportedcontentSupportedContentIDUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteConversationsMessagingSupportedcontentSupportedContentIDUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteConversationsMessagingSupportedcontentSupportedContentIDTooManyRequests creates a DeleteConversationsMessagingSupportedcontentSupportedContentIDTooManyRequests with default headers values
func NewDeleteConversationsMessagingSupportedcontentSupportedContentIDTooManyRequests() *DeleteConversationsMessagingSupportedcontentSupportedContentIDTooManyRequests {
	return &DeleteConversationsMessagingSupportedcontentSupportedContentIDTooManyRequests{}
}

/*DeleteConversationsMessagingSupportedcontentSupportedContentIDTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type DeleteConversationsMessagingSupportedcontentSupportedContentIDTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *DeleteConversationsMessagingSupportedcontentSupportedContentIDTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] deleteConversationsMessagingSupportedcontentSupportedContentIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteConversationsMessagingSupportedcontentSupportedContentIDTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteConversationsMessagingSupportedcontentSupportedContentIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteConversationsMessagingSupportedcontentSupportedContentIDInternalServerError creates a DeleteConversationsMessagingSupportedcontentSupportedContentIDInternalServerError with default headers values
func NewDeleteConversationsMessagingSupportedcontentSupportedContentIDInternalServerError() *DeleteConversationsMessagingSupportedcontentSupportedContentIDInternalServerError {
	return &DeleteConversationsMessagingSupportedcontentSupportedContentIDInternalServerError{}
}

/*DeleteConversationsMessagingSupportedcontentSupportedContentIDInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type DeleteConversationsMessagingSupportedcontentSupportedContentIDInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *DeleteConversationsMessagingSupportedcontentSupportedContentIDInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] deleteConversationsMessagingSupportedcontentSupportedContentIdInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteConversationsMessagingSupportedcontentSupportedContentIDInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteConversationsMessagingSupportedcontentSupportedContentIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteConversationsMessagingSupportedcontentSupportedContentIDServiceUnavailable creates a DeleteConversationsMessagingSupportedcontentSupportedContentIDServiceUnavailable with default headers values
func NewDeleteConversationsMessagingSupportedcontentSupportedContentIDServiceUnavailable() *DeleteConversationsMessagingSupportedcontentSupportedContentIDServiceUnavailable {
	return &DeleteConversationsMessagingSupportedcontentSupportedContentIDServiceUnavailable{}
}

/*DeleteConversationsMessagingSupportedcontentSupportedContentIDServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type DeleteConversationsMessagingSupportedcontentSupportedContentIDServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *DeleteConversationsMessagingSupportedcontentSupportedContentIDServiceUnavailable) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] deleteConversationsMessagingSupportedcontentSupportedContentIdServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeleteConversationsMessagingSupportedcontentSupportedContentIDServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteConversationsMessagingSupportedcontentSupportedContentIDServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteConversationsMessagingSupportedcontentSupportedContentIDGatewayTimeout creates a DeleteConversationsMessagingSupportedcontentSupportedContentIDGatewayTimeout with default headers values
func NewDeleteConversationsMessagingSupportedcontentSupportedContentIDGatewayTimeout() *DeleteConversationsMessagingSupportedcontentSupportedContentIDGatewayTimeout {
	return &DeleteConversationsMessagingSupportedcontentSupportedContentIDGatewayTimeout{}
}

/*DeleteConversationsMessagingSupportedcontentSupportedContentIDGatewayTimeout handles this case with default header values.

The request timed out.
*/
type DeleteConversationsMessagingSupportedcontentSupportedContentIDGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *DeleteConversationsMessagingSupportedcontentSupportedContentIDGatewayTimeout) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] deleteConversationsMessagingSupportedcontentSupportedContentIdGatewayTimeout  %+v", 504, o.Payload)
}

func (o *DeleteConversationsMessagingSupportedcontentSupportedContentIDGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteConversationsMessagingSupportedcontentSupportedContentIDGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchConversationParticipantAttributesReader is a Reader for the PatchConversationParticipantAttributes structure.
type PatchConversationParticipantAttributesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchConversationParticipantAttributesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewPatchConversationParticipantAttributesAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchConversationParticipantAttributesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchConversationParticipantAttributesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchConversationParticipantAttributesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchConversationParticipantAttributesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchConversationParticipantAttributesRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchConversationParticipantAttributesRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchConversationParticipantAttributesUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchConversationParticipantAttributesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchConversationParticipantAttributesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchConversationParticipantAttributesServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchConversationParticipantAttributesGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchConversationParticipantAttributesAccepted creates a PatchConversationParticipantAttributesAccepted with default headers values
func NewPatchConversationParticipantAttributesAccepted() *PatchConversationParticipantAttributesAccepted {
	return &PatchConversationParticipantAttributesAccepted{}
}

/*
PatchConversationParticipantAttributesAccepted describes a response with status code 202, with default header values.

Accepted
*/
type PatchConversationParticipantAttributesAccepted struct {
}

// IsSuccess returns true when this patch conversation participant attributes accepted response has a 2xx status code
func (o *PatchConversationParticipantAttributesAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch conversation participant attributes accepted response has a 3xx status code
func (o *PatchConversationParticipantAttributesAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversation participant attributes accepted response has a 4xx status code
func (o *PatchConversationParticipantAttributesAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversation participant attributes accepted response has a 5xx status code
func (o *PatchConversationParticipantAttributesAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversation participant attributes accepted response a status code equal to that given
func (o *PatchConversationParticipantAttributesAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *PatchConversationParticipantAttributesAccepted) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/{conversationId}/participants/{participantId}/attributes][%d] patchConversationParticipantAttributesAccepted ", 202)
}

func (o *PatchConversationParticipantAttributesAccepted) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/{conversationId}/participants/{participantId}/attributes][%d] patchConversationParticipantAttributesAccepted ", 202)
}

func (o *PatchConversationParticipantAttributesAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchConversationParticipantAttributesBadRequest creates a PatchConversationParticipantAttributesBadRequest with default headers values
func NewPatchConversationParticipantAttributesBadRequest() *PatchConversationParticipantAttributesBadRequest {
	return &PatchConversationParticipantAttributesBadRequest{}
}

/*
PatchConversationParticipantAttributesBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchConversationParticipantAttributesBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversation participant attributes bad request response has a 2xx status code
func (o *PatchConversationParticipantAttributesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversation participant attributes bad request response has a 3xx status code
func (o *PatchConversationParticipantAttributesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversation participant attributes bad request response has a 4xx status code
func (o *PatchConversationParticipantAttributesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversation participant attributes bad request response has a 5xx status code
func (o *PatchConversationParticipantAttributesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversation participant attributes bad request response a status code equal to that given
func (o *PatchConversationParticipantAttributesBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchConversationParticipantAttributesBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/{conversationId}/participants/{participantId}/attributes][%d] patchConversationParticipantAttributesBadRequest  %+v", 400, o.Payload)
}

func (o *PatchConversationParticipantAttributesBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/{conversationId}/participants/{participantId}/attributes][%d] patchConversationParticipantAttributesBadRequest  %+v", 400, o.Payload)
}

func (o *PatchConversationParticipantAttributesBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationParticipantAttributesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationParticipantAttributesUnauthorized creates a PatchConversationParticipantAttributesUnauthorized with default headers values
func NewPatchConversationParticipantAttributesUnauthorized() *PatchConversationParticipantAttributesUnauthorized {
	return &PatchConversationParticipantAttributesUnauthorized{}
}

/*
PatchConversationParticipantAttributesUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchConversationParticipantAttributesUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversation participant attributes unauthorized response has a 2xx status code
func (o *PatchConversationParticipantAttributesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversation participant attributes unauthorized response has a 3xx status code
func (o *PatchConversationParticipantAttributesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversation participant attributes unauthorized response has a 4xx status code
func (o *PatchConversationParticipantAttributesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversation participant attributes unauthorized response has a 5xx status code
func (o *PatchConversationParticipantAttributesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversation participant attributes unauthorized response a status code equal to that given
func (o *PatchConversationParticipantAttributesUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchConversationParticipantAttributesUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/{conversationId}/participants/{participantId}/attributes][%d] patchConversationParticipantAttributesUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConversationParticipantAttributesUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/{conversationId}/participants/{participantId}/attributes][%d] patchConversationParticipantAttributesUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConversationParticipantAttributesUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationParticipantAttributesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationParticipantAttributesForbidden creates a PatchConversationParticipantAttributesForbidden with default headers values
func NewPatchConversationParticipantAttributesForbidden() *PatchConversationParticipantAttributesForbidden {
	return &PatchConversationParticipantAttributesForbidden{}
}

/*
PatchConversationParticipantAttributesForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PatchConversationParticipantAttributesForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversation participant attributes forbidden response has a 2xx status code
func (o *PatchConversationParticipantAttributesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversation participant attributes forbidden response has a 3xx status code
func (o *PatchConversationParticipantAttributesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversation participant attributes forbidden response has a 4xx status code
func (o *PatchConversationParticipantAttributesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversation participant attributes forbidden response has a 5xx status code
func (o *PatchConversationParticipantAttributesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversation participant attributes forbidden response a status code equal to that given
func (o *PatchConversationParticipantAttributesForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchConversationParticipantAttributesForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/{conversationId}/participants/{participantId}/attributes][%d] patchConversationParticipantAttributesForbidden  %+v", 403, o.Payload)
}

func (o *PatchConversationParticipantAttributesForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/{conversationId}/participants/{participantId}/attributes][%d] patchConversationParticipantAttributesForbidden  %+v", 403, o.Payload)
}

func (o *PatchConversationParticipantAttributesForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationParticipantAttributesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationParticipantAttributesNotFound creates a PatchConversationParticipantAttributesNotFound with default headers values
func NewPatchConversationParticipantAttributesNotFound() *PatchConversationParticipantAttributesNotFound {
	return &PatchConversationParticipantAttributesNotFound{}
}

/*
PatchConversationParticipantAttributesNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PatchConversationParticipantAttributesNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversation participant attributes not found response has a 2xx status code
func (o *PatchConversationParticipantAttributesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversation participant attributes not found response has a 3xx status code
func (o *PatchConversationParticipantAttributesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversation participant attributes not found response has a 4xx status code
func (o *PatchConversationParticipantAttributesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversation participant attributes not found response has a 5xx status code
func (o *PatchConversationParticipantAttributesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversation participant attributes not found response a status code equal to that given
func (o *PatchConversationParticipantAttributesNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchConversationParticipantAttributesNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/{conversationId}/participants/{participantId}/attributes][%d] patchConversationParticipantAttributesNotFound  %+v", 404, o.Payload)
}

func (o *PatchConversationParticipantAttributesNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/{conversationId}/participants/{participantId}/attributes][%d] patchConversationParticipantAttributesNotFound  %+v", 404, o.Payload)
}

func (o *PatchConversationParticipantAttributesNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationParticipantAttributesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationParticipantAttributesRequestTimeout creates a PatchConversationParticipantAttributesRequestTimeout with default headers values
func NewPatchConversationParticipantAttributesRequestTimeout() *PatchConversationParticipantAttributesRequestTimeout {
	return &PatchConversationParticipantAttributesRequestTimeout{}
}

/*
PatchConversationParticipantAttributesRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchConversationParticipantAttributesRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversation participant attributes request timeout response has a 2xx status code
func (o *PatchConversationParticipantAttributesRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversation participant attributes request timeout response has a 3xx status code
func (o *PatchConversationParticipantAttributesRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversation participant attributes request timeout response has a 4xx status code
func (o *PatchConversationParticipantAttributesRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversation participant attributes request timeout response has a 5xx status code
func (o *PatchConversationParticipantAttributesRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversation participant attributes request timeout response a status code equal to that given
func (o *PatchConversationParticipantAttributesRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PatchConversationParticipantAttributesRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/{conversationId}/participants/{participantId}/attributes][%d] patchConversationParticipantAttributesRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchConversationParticipantAttributesRequestTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/{conversationId}/participants/{participantId}/attributes][%d] patchConversationParticipantAttributesRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchConversationParticipantAttributesRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationParticipantAttributesRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationParticipantAttributesRequestEntityTooLarge creates a PatchConversationParticipantAttributesRequestEntityTooLarge with default headers values
func NewPatchConversationParticipantAttributesRequestEntityTooLarge() *PatchConversationParticipantAttributesRequestEntityTooLarge {
	return &PatchConversationParticipantAttributesRequestEntityTooLarge{}
}

/*
PatchConversationParticipantAttributesRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PatchConversationParticipantAttributesRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversation participant attributes request entity too large response has a 2xx status code
func (o *PatchConversationParticipantAttributesRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversation participant attributes request entity too large response has a 3xx status code
func (o *PatchConversationParticipantAttributesRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversation participant attributes request entity too large response has a 4xx status code
func (o *PatchConversationParticipantAttributesRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversation participant attributes request entity too large response has a 5xx status code
func (o *PatchConversationParticipantAttributesRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversation participant attributes request entity too large response a status code equal to that given
func (o *PatchConversationParticipantAttributesRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PatchConversationParticipantAttributesRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/{conversationId}/participants/{participantId}/attributes][%d] patchConversationParticipantAttributesRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchConversationParticipantAttributesRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/{conversationId}/participants/{participantId}/attributes][%d] patchConversationParticipantAttributesRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchConversationParticipantAttributesRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationParticipantAttributesRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationParticipantAttributesUnsupportedMediaType creates a PatchConversationParticipantAttributesUnsupportedMediaType with default headers values
func NewPatchConversationParticipantAttributesUnsupportedMediaType() *PatchConversationParticipantAttributesUnsupportedMediaType {
	return &PatchConversationParticipantAttributesUnsupportedMediaType{}
}

/*
PatchConversationParticipantAttributesUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchConversationParticipantAttributesUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversation participant attributes unsupported media type response has a 2xx status code
func (o *PatchConversationParticipantAttributesUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversation participant attributes unsupported media type response has a 3xx status code
func (o *PatchConversationParticipantAttributesUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversation participant attributes unsupported media type response has a 4xx status code
func (o *PatchConversationParticipantAttributesUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversation participant attributes unsupported media type response has a 5xx status code
func (o *PatchConversationParticipantAttributesUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversation participant attributes unsupported media type response a status code equal to that given
func (o *PatchConversationParticipantAttributesUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PatchConversationParticipantAttributesUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/{conversationId}/participants/{participantId}/attributes][%d] patchConversationParticipantAttributesUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchConversationParticipantAttributesUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/{conversationId}/participants/{participantId}/attributes][%d] patchConversationParticipantAttributesUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchConversationParticipantAttributesUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationParticipantAttributesUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationParticipantAttributesTooManyRequests creates a PatchConversationParticipantAttributesTooManyRequests with default headers values
func NewPatchConversationParticipantAttributesTooManyRequests() *PatchConversationParticipantAttributesTooManyRequests {
	return &PatchConversationParticipantAttributesTooManyRequests{}
}

/*
PatchConversationParticipantAttributesTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchConversationParticipantAttributesTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversation participant attributes too many requests response has a 2xx status code
func (o *PatchConversationParticipantAttributesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversation participant attributes too many requests response has a 3xx status code
func (o *PatchConversationParticipantAttributesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversation participant attributes too many requests response has a 4xx status code
func (o *PatchConversationParticipantAttributesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversation participant attributes too many requests response has a 5xx status code
func (o *PatchConversationParticipantAttributesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversation participant attributes too many requests response a status code equal to that given
func (o *PatchConversationParticipantAttributesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchConversationParticipantAttributesTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/{conversationId}/participants/{participantId}/attributes][%d] patchConversationParticipantAttributesTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConversationParticipantAttributesTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/{conversationId}/participants/{participantId}/attributes][%d] patchConversationParticipantAttributesTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConversationParticipantAttributesTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationParticipantAttributesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationParticipantAttributesInternalServerError creates a PatchConversationParticipantAttributesInternalServerError with default headers values
func NewPatchConversationParticipantAttributesInternalServerError() *PatchConversationParticipantAttributesInternalServerError {
	return &PatchConversationParticipantAttributesInternalServerError{}
}

/*
PatchConversationParticipantAttributesInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchConversationParticipantAttributesInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversation participant attributes internal server error response has a 2xx status code
func (o *PatchConversationParticipantAttributesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversation participant attributes internal server error response has a 3xx status code
func (o *PatchConversationParticipantAttributesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversation participant attributes internal server error response has a 4xx status code
func (o *PatchConversationParticipantAttributesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversation participant attributes internal server error response has a 5xx status code
func (o *PatchConversationParticipantAttributesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversation participant attributes internal server error response a status code equal to that given
func (o *PatchConversationParticipantAttributesInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchConversationParticipantAttributesInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/{conversationId}/participants/{participantId}/attributes][%d] patchConversationParticipantAttributesInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchConversationParticipantAttributesInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/{conversationId}/participants/{participantId}/attributes][%d] patchConversationParticipantAttributesInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchConversationParticipantAttributesInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationParticipantAttributesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationParticipantAttributesServiceUnavailable creates a PatchConversationParticipantAttributesServiceUnavailable with default headers values
func NewPatchConversationParticipantAttributesServiceUnavailable() *PatchConversationParticipantAttributesServiceUnavailable {
	return &PatchConversationParticipantAttributesServiceUnavailable{}
}

/*
PatchConversationParticipantAttributesServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchConversationParticipantAttributesServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversation participant attributes service unavailable response has a 2xx status code
func (o *PatchConversationParticipantAttributesServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversation participant attributes service unavailable response has a 3xx status code
func (o *PatchConversationParticipantAttributesServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversation participant attributes service unavailable response has a 4xx status code
func (o *PatchConversationParticipantAttributesServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversation participant attributes service unavailable response has a 5xx status code
func (o *PatchConversationParticipantAttributesServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversation participant attributes service unavailable response a status code equal to that given
func (o *PatchConversationParticipantAttributesServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PatchConversationParticipantAttributesServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/{conversationId}/participants/{participantId}/attributes][%d] patchConversationParticipantAttributesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchConversationParticipantAttributesServiceUnavailable) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/{conversationId}/participants/{participantId}/attributes][%d] patchConversationParticipantAttributesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchConversationParticipantAttributesServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationParticipantAttributesServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationParticipantAttributesGatewayTimeout creates a PatchConversationParticipantAttributesGatewayTimeout with default headers values
func NewPatchConversationParticipantAttributesGatewayTimeout() *PatchConversationParticipantAttributesGatewayTimeout {
	return &PatchConversationParticipantAttributesGatewayTimeout{}
}

/*
PatchConversationParticipantAttributesGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PatchConversationParticipantAttributesGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversation participant attributes gateway timeout response has a 2xx status code
func (o *PatchConversationParticipantAttributesGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversation participant attributes gateway timeout response has a 3xx status code
func (o *PatchConversationParticipantAttributesGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversation participant attributes gateway timeout response has a 4xx status code
func (o *PatchConversationParticipantAttributesGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversation participant attributes gateway timeout response has a 5xx status code
func (o *PatchConversationParticipantAttributesGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversation participant attributes gateway timeout response a status code equal to that given
func (o *PatchConversationParticipantAttributesGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PatchConversationParticipantAttributesGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/{conversationId}/participants/{participantId}/attributes][%d] patchConversationParticipantAttributesGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchConversationParticipantAttributesGatewayTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/{conversationId}/participants/{participantId}/attributes][%d] patchConversationParticipantAttributesGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchConversationParticipantAttributesGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationParticipantAttributesGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

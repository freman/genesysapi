// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetConversationsMessageDetailsParams creates a new GetConversationsMessageDetailsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetConversationsMessageDetailsParams() *GetConversationsMessageDetailsParams {
	return &GetConversationsMessageDetailsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetConversationsMessageDetailsParamsWithTimeout creates a new GetConversationsMessageDetailsParams object
// with the ability to set a timeout on a request.
func NewGetConversationsMessageDetailsParamsWithTimeout(timeout time.Duration) *GetConversationsMessageDetailsParams {
	return &GetConversationsMessageDetailsParams{
		timeout: timeout,
	}
}

// NewGetConversationsMessageDetailsParamsWithContext creates a new GetConversationsMessageDetailsParams object
// with the ability to set a context for a request.
func NewGetConversationsMessageDetailsParamsWithContext(ctx context.Context) *GetConversationsMessageDetailsParams {
	return &GetConversationsMessageDetailsParams{
		Context: ctx,
	}
}

// NewGetConversationsMessageDetailsParamsWithHTTPClient creates a new GetConversationsMessageDetailsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetConversationsMessageDetailsParamsWithHTTPClient(client *http.Client) *GetConversationsMessageDetailsParams {
	return &GetConversationsMessageDetailsParams{
		HTTPClient: client,
	}
}

/*
GetConversationsMessageDetailsParams contains all the parameters to send to the API endpoint

	for the get conversations message details operation.

	Typically these are written to a http.Request.
*/
type GetConversationsMessageDetailsParams struct {

	/* MessageID.

	   messageId
	*/
	MessageID string

	/* UseNormalizedMessage.

	   If true, response removes deprecated fields (textBody, media, stickers)
	*/
	UseNormalizedMessage *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get conversations message details params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetConversationsMessageDetailsParams) WithDefaults() *GetConversationsMessageDetailsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get conversations message details params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetConversationsMessageDetailsParams) SetDefaults() {
	var (
		useNormalizedMessageDefault = bool(false)
	)

	val := GetConversationsMessageDetailsParams{
		UseNormalizedMessage: &useNormalizedMessageDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get conversations message details params
func (o *GetConversationsMessageDetailsParams) WithTimeout(timeout time.Duration) *GetConversationsMessageDetailsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get conversations message details params
func (o *GetConversationsMessageDetailsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get conversations message details params
func (o *GetConversationsMessageDetailsParams) WithContext(ctx context.Context) *GetConversationsMessageDetailsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get conversations message details params
func (o *GetConversationsMessageDetailsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get conversations message details params
func (o *GetConversationsMessageDetailsParams) WithHTTPClient(client *http.Client) *GetConversationsMessageDetailsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get conversations message details params
func (o *GetConversationsMessageDetailsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMessageID adds the messageID to the get conversations message details params
func (o *GetConversationsMessageDetailsParams) WithMessageID(messageID string) *GetConversationsMessageDetailsParams {
	o.SetMessageID(messageID)
	return o
}

// SetMessageID adds the messageId to the get conversations message details params
func (o *GetConversationsMessageDetailsParams) SetMessageID(messageID string) {
	o.MessageID = messageID
}

// WithUseNormalizedMessage adds the useNormalizedMessage to the get conversations message details params
func (o *GetConversationsMessageDetailsParams) WithUseNormalizedMessage(useNormalizedMessage *bool) *GetConversationsMessageDetailsParams {
	o.SetUseNormalizedMessage(useNormalizedMessage)
	return o
}

// SetUseNormalizedMessage adds the useNormalizedMessage to the get conversations message details params
func (o *GetConversationsMessageDetailsParams) SetUseNormalizedMessage(useNormalizedMessage *bool) {
	o.UseNormalizedMessage = useNormalizedMessage
}

// WriteToRequest writes these params to a swagger request
func (o *GetConversationsMessageDetailsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param messageId
	if err := r.SetPathParam("messageId", o.MessageID); err != nil {
		return err
	}

	if o.UseNormalizedMessage != nil {

		// query param useNormalizedMessage
		var qrUseNormalizedMessage bool

		if o.UseNormalizedMessage != nil {
			qrUseNormalizedMessage = *o.UseNormalizedMessage
		}
		qUseNormalizedMessage := swag.FormatBool(qrUseNormalizedMessage)
		if qUseNormalizedMessage != "" {

			if err := r.SetQueryParam("useNormalizedMessage", qUseNormalizedMessage); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPutConversationParticipantFlaggedreasonParams creates a new PutConversationParticipantFlaggedreasonParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPutConversationParticipantFlaggedreasonParams() *PutConversationParticipantFlaggedreasonParams {
	return &PutConversationParticipantFlaggedreasonParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPutConversationParticipantFlaggedreasonParamsWithTimeout creates a new PutConversationParticipantFlaggedreasonParams object
// with the ability to set a timeout on a request.
func NewPutConversationParticipantFlaggedreasonParamsWithTimeout(timeout time.Duration) *PutConversationParticipantFlaggedreasonParams {
	return &PutConversationParticipantFlaggedreasonParams{
		timeout: timeout,
	}
}

// NewPutConversationParticipantFlaggedreasonParamsWithContext creates a new PutConversationParticipantFlaggedreasonParams object
// with the ability to set a context for a request.
func NewPutConversationParticipantFlaggedreasonParamsWithContext(ctx context.Context) *PutConversationParticipantFlaggedreasonParams {
	return &PutConversationParticipantFlaggedreasonParams{
		Context: ctx,
	}
}

// NewPutConversationParticipantFlaggedreasonParamsWithHTTPClient creates a new PutConversationParticipantFlaggedreasonParams object
// with the ability to set a custom HTTPClient for a request.
func NewPutConversationParticipantFlaggedreasonParamsWithHTTPClient(client *http.Client) *PutConversationParticipantFlaggedreasonParams {
	return &PutConversationParticipantFlaggedreasonParams{
		HTTPClient: client,
	}
}

/*
PutConversationParticipantFlaggedreasonParams contains all the parameters to send to the API endpoint

	for the put conversation participant flaggedreason operation.

	Typically these are written to a http.Request.
*/
type PutConversationParticipantFlaggedreasonParams struct {

	/* ConversationID.

	   conversation ID
	*/
	ConversationID string

	/* ParticipantID.

	   participant ID
	*/
	ParticipantID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the put conversation participant flaggedreason params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PutConversationParticipantFlaggedreasonParams) WithDefaults() *PutConversationParticipantFlaggedreasonParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the put conversation participant flaggedreason params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PutConversationParticipantFlaggedreasonParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the put conversation participant flaggedreason params
func (o *PutConversationParticipantFlaggedreasonParams) WithTimeout(timeout time.Duration) *PutConversationParticipantFlaggedreasonParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put conversation participant flaggedreason params
func (o *PutConversationParticipantFlaggedreasonParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put conversation participant flaggedreason params
func (o *PutConversationParticipantFlaggedreasonParams) WithContext(ctx context.Context) *PutConversationParticipantFlaggedreasonParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put conversation participant flaggedreason params
func (o *PutConversationParticipantFlaggedreasonParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put conversation participant flaggedreason params
func (o *PutConversationParticipantFlaggedreasonParams) WithHTTPClient(client *http.Client) *PutConversationParticipantFlaggedreasonParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put conversation participant flaggedreason params
func (o *PutConversationParticipantFlaggedreasonParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConversationID adds the conversationID to the put conversation participant flaggedreason params
func (o *PutConversationParticipantFlaggedreasonParams) WithConversationID(conversationID string) *PutConversationParticipantFlaggedreasonParams {
	o.SetConversationID(conversationID)
	return o
}

// SetConversationID adds the conversationId to the put conversation participant flaggedreason params
func (o *PutConversationParticipantFlaggedreasonParams) SetConversationID(conversationID string) {
	o.ConversationID = conversationID
}

// WithParticipantID adds the participantID to the put conversation participant flaggedreason params
func (o *PutConversationParticipantFlaggedreasonParams) WithParticipantID(participantID string) *PutConversationParticipantFlaggedreasonParams {
	o.SetParticipantID(participantID)
	return o
}

// SetParticipantID adds the participantId to the put conversation participant flaggedreason params
func (o *PutConversationParticipantFlaggedreasonParams) SetParticipantID(participantID string) {
	o.ParticipantID = participantID
}

// WriteToRequest writes these params to a swagger request
func (o *PutConversationParticipantFlaggedreasonParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param conversationId
	if err := r.SetPathParam("conversationId", o.ConversationID); err != nil {
		return err
	}

	// path param participantId
	if err := r.SetPathParam("participantId", o.ParticipantID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

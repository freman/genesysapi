// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetConversationsMessagingSupportedcontentSupportedContentIDReader is a Reader for the GetConversationsMessagingSupportedcontentSupportedContentID structure.
type GetConversationsMessagingSupportedcontentSupportedContentIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetConversationsMessagingSupportedcontentSupportedContentIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetConversationsMessagingSupportedcontentSupportedContentIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetConversationsMessagingSupportedcontentSupportedContentIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetConversationsMessagingSupportedcontentSupportedContentIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetConversationsMessagingSupportedcontentSupportedContentIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetConversationsMessagingSupportedcontentSupportedContentIDRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetConversationsMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetConversationsMessagingSupportedcontentSupportedContentIDUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetConversationsMessagingSupportedcontentSupportedContentIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetConversationsMessagingSupportedcontentSupportedContentIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetConversationsMessagingSupportedcontentSupportedContentIDServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetConversationsMessagingSupportedcontentSupportedContentIDGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetConversationsMessagingSupportedcontentSupportedContentIDOK creates a GetConversationsMessagingSupportedcontentSupportedContentIDOK with default headers values
func NewGetConversationsMessagingSupportedcontentSupportedContentIDOK() *GetConversationsMessagingSupportedcontentSupportedContentIDOK {
	return &GetConversationsMessagingSupportedcontentSupportedContentIDOK{}
}

/*
GetConversationsMessagingSupportedcontentSupportedContentIDOK describes a response with status code 200, with default header values.

successful operation
*/
type GetConversationsMessagingSupportedcontentSupportedContentIDOK struct {
	Payload *models.SupportedContent
}

// IsSuccess returns true when this get conversations messaging supportedcontent supported content Id o k response has a 2xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get conversations messaging supportedcontent supported content Id o k response has a 3xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get conversations messaging supportedcontent supported content Id o k response has a 4xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get conversations messaging supportedcontent supported content Id o k response has a 5xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get conversations messaging supportedcontent supported content Id o k response a status code equal to that given
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] getConversationsMessagingSupportedcontentSupportedContentIdOK  %+v", 200, o.Payload)
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDOK) String() string {
	return fmt.Sprintf("[GET /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] getConversationsMessagingSupportedcontentSupportedContentIdOK  %+v", 200, o.Payload)
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDOK) GetPayload() *models.SupportedContent {
	return o.Payload
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SupportedContent)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversationsMessagingSupportedcontentSupportedContentIDBadRequest creates a GetConversationsMessagingSupportedcontentSupportedContentIDBadRequest with default headers values
func NewGetConversationsMessagingSupportedcontentSupportedContentIDBadRequest() *GetConversationsMessagingSupportedcontentSupportedContentIDBadRequest {
	return &GetConversationsMessagingSupportedcontentSupportedContentIDBadRequest{}
}

/*
GetConversationsMessagingSupportedcontentSupportedContentIDBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetConversationsMessagingSupportedcontentSupportedContentIDBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get conversations messaging supportedcontent supported content Id bad request response has a 2xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get conversations messaging supportedcontent supported content Id bad request response has a 3xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get conversations messaging supportedcontent supported content Id bad request response has a 4xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get conversations messaging supportedcontent supported content Id bad request response has a 5xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get conversations messaging supportedcontent supported content Id bad request response a status code equal to that given
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] getConversationsMessagingSupportedcontentSupportedContentIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] getConversationsMessagingSupportedcontentSupportedContentIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversationsMessagingSupportedcontentSupportedContentIDUnauthorized creates a GetConversationsMessagingSupportedcontentSupportedContentIDUnauthorized with default headers values
func NewGetConversationsMessagingSupportedcontentSupportedContentIDUnauthorized() *GetConversationsMessagingSupportedcontentSupportedContentIDUnauthorized {
	return &GetConversationsMessagingSupportedcontentSupportedContentIDUnauthorized{}
}

/*
GetConversationsMessagingSupportedcontentSupportedContentIDUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetConversationsMessagingSupportedcontentSupportedContentIDUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get conversations messaging supportedcontent supported content Id unauthorized response has a 2xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get conversations messaging supportedcontent supported content Id unauthorized response has a 3xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get conversations messaging supportedcontent supported content Id unauthorized response has a 4xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get conversations messaging supportedcontent supported content Id unauthorized response has a 5xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get conversations messaging supportedcontent supported content Id unauthorized response a status code equal to that given
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] getConversationsMessagingSupportedcontentSupportedContentIdUnauthorized  %+v", 401, o.Payload)
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] getConversationsMessagingSupportedcontentSupportedContentIdUnauthorized  %+v", 401, o.Payload)
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversationsMessagingSupportedcontentSupportedContentIDForbidden creates a GetConversationsMessagingSupportedcontentSupportedContentIDForbidden with default headers values
func NewGetConversationsMessagingSupportedcontentSupportedContentIDForbidden() *GetConversationsMessagingSupportedcontentSupportedContentIDForbidden {
	return &GetConversationsMessagingSupportedcontentSupportedContentIDForbidden{}
}

/*
GetConversationsMessagingSupportedcontentSupportedContentIDForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetConversationsMessagingSupportedcontentSupportedContentIDForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get conversations messaging supportedcontent supported content Id forbidden response has a 2xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get conversations messaging supportedcontent supported content Id forbidden response has a 3xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get conversations messaging supportedcontent supported content Id forbidden response has a 4xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get conversations messaging supportedcontent supported content Id forbidden response has a 5xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get conversations messaging supportedcontent supported content Id forbidden response a status code equal to that given
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] getConversationsMessagingSupportedcontentSupportedContentIdForbidden  %+v", 403, o.Payload)
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] getConversationsMessagingSupportedcontentSupportedContentIdForbidden  %+v", 403, o.Payload)
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversationsMessagingSupportedcontentSupportedContentIDNotFound creates a GetConversationsMessagingSupportedcontentSupportedContentIDNotFound with default headers values
func NewGetConversationsMessagingSupportedcontentSupportedContentIDNotFound() *GetConversationsMessagingSupportedcontentSupportedContentIDNotFound {
	return &GetConversationsMessagingSupportedcontentSupportedContentIDNotFound{}
}

/*
GetConversationsMessagingSupportedcontentSupportedContentIDNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetConversationsMessagingSupportedcontentSupportedContentIDNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get conversations messaging supportedcontent supported content Id not found response has a 2xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get conversations messaging supportedcontent supported content Id not found response has a 3xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get conversations messaging supportedcontent supported content Id not found response has a 4xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get conversations messaging supportedcontent supported content Id not found response has a 5xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get conversations messaging supportedcontent supported content Id not found response a status code equal to that given
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] getConversationsMessagingSupportedcontentSupportedContentIdNotFound  %+v", 404, o.Payload)
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] getConversationsMessagingSupportedcontentSupportedContentIdNotFound  %+v", 404, o.Payload)
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversationsMessagingSupportedcontentSupportedContentIDRequestTimeout creates a GetConversationsMessagingSupportedcontentSupportedContentIDRequestTimeout with default headers values
func NewGetConversationsMessagingSupportedcontentSupportedContentIDRequestTimeout() *GetConversationsMessagingSupportedcontentSupportedContentIDRequestTimeout {
	return &GetConversationsMessagingSupportedcontentSupportedContentIDRequestTimeout{}
}

/*
GetConversationsMessagingSupportedcontentSupportedContentIDRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetConversationsMessagingSupportedcontentSupportedContentIDRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get conversations messaging supportedcontent supported content Id request timeout response has a 2xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get conversations messaging supportedcontent supported content Id request timeout response has a 3xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get conversations messaging supportedcontent supported content Id request timeout response has a 4xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get conversations messaging supportedcontent supported content Id request timeout response has a 5xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get conversations messaging supportedcontent supported content Id request timeout response a status code equal to that given
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] getConversationsMessagingSupportedcontentSupportedContentIdRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] getConversationsMessagingSupportedcontentSupportedContentIdRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversationsMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge creates a GetConversationsMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge with default headers values
func NewGetConversationsMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge() *GetConversationsMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge {
	return &GetConversationsMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge{}
}

/*
GetConversationsMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetConversationsMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get conversations messaging supportedcontent supported content Id request entity too large response has a 2xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get conversations messaging supportedcontent supported content Id request entity too large response has a 3xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get conversations messaging supportedcontent supported content Id request entity too large response has a 4xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get conversations messaging supportedcontent supported content Id request entity too large response has a 5xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get conversations messaging supportedcontent supported content Id request entity too large response a status code equal to that given
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] getConversationsMessagingSupportedcontentSupportedContentIdRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] getConversationsMessagingSupportedcontentSupportedContentIdRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversationsMessagingSupportedcontentSupportedContentIDUnsupportedMediaType creates a GetConversationsMessagingSupportedcontentSupportedContentIDUnsupportedMediaType with default headers values
func NewGetConversationsMessagingSupportedcontentSupportedContentIDUnsupportedMediaType() *GetConversationsMessagingSupportedcontentSupportedContentIDUnsupportedMediaType {
	return &GetConversationsMessagingSupportedcontentSupportedContentIDUnsupportedMediaType{}
}

/*
GetConversationsMessagingSupportedcontentSupportedContentIDUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetConversationsMessagingSupportedcontentSupportedContentIDUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get conversations messaging supportedcontent supported content Id unsupported media type response has a 2xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get conversations messaging supportedcontent supported content Id unsupported media type response has a 3xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get conversations messaging supportedcontent supported content Id unsupported media type response has a 4xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get conversations messaging supportedcontent supported content Id unsupported media type response has a 5xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get conversations messaging supportedcontent supported content Id unsupported media type response a status code equal to that given
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] getConversationsMessagingSupportedcontentSupportedContentIdUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] getConversationsMessagingSupportedcontentSupportedContentIdUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversationsMessagingSupportedcontentSupportedContentIDTooManyRequests creates a GetConversationsMessagingSupportedcontentSupportedContentIDTooManyRequests with default headers values
func NewGetConversationsMessagingSupportedcontentSupportedContentIDTooManyRequests() *GetConversationsMessagingSupportedcontentSupportedContentIDTooManyRequests {
	return &GetConversationsMessagingSupportedcontentSupportedContentIDTooManyRequests{}
}

/*
GetConversationsMessagingSupportedcontentSupportedContentIDTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetConversationsMessagingSupportedcontentSupportedContentIDTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get conversations messaging supportedcontent supported content Id too many requests response has a 2xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get conversations messaging supportedcontent supported content Id too many requests response has a 3xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get conversations messaging supportedcontent supported content Id too many requests response has a 4xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get conversations messaging supportedcontent supported content Id too many requests response has a 5xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get conversations messaging supportedcontent supported content Id too many requests response a status code equal to that given
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] getConversationsMessagingSupportedcontentSupportedContentIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] getConversationsMessagingSupportedcontentSupportedContentIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversationsMessagingSupportedcontentSupportedContentIDInternalServerError creates a GetConversationsMessagingSupportedcontentSupportedContentIDInternalServerError with default headers values
func NewGetConversationsMessagingSupportedcontentSupportedContentIDInternalServerError() *GetConversationsMessagingSupportedcontentSupportedContentIDInternalServerError {
	return &GetConversationsMessagingSupportedcontentSupportedContentIDInternalServerError{}
}

/*
GetConversationsMessagingSupportedcontentSupportedContentIDInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetConversationsMessagingSupportedcontentSupportedContentIDInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get conversations messaging supportedcontent supported content Id internal server error response has a 2xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get conversations messaging supportedcontent supported content Id internal server error response has a 3xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get conversations messaging supportedcontent supported content Id internal server error response has a 4xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get conversations messaging supportedcontent supported content Id internal server error response has a 5xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get conversations messaging supportedcontent supported content Id internal server error response a status code equal to that given
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] getConversationsMessagingSupportedcontentSupportedContentIdInternalServerError  %+v", 500, o.Payload)
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] getConversationsMessagingSupportedcontentSupportedContentIdInternalServerError  %+v", 500, o.Payload)
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversationsMessagingSupportedcontentSupportedContentIDServiceUnavailable creates a GetConversationsMessagingSupportedcontentSupportedContentIDServiceUnavailable with default headers values
func NewGetConversationsMessagingSupportedcontentSupportedContentIDServiceUnavailable() *GetConversationsMessagingSupportedcontentSupportedContentIDServiceUnavailable {
	return &GetConversationsMessagingSupportedcontentSupportedContentIDServiceUnavailable{}
}

/*
GetConversationsMessagingSupportedcontentSupportedContentIDServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetConversationsMessagingSupportedcontentSupportedContentIDServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get conversations messaging supportedcontent supported content Id service unavailable response has a 2xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get conversations messaging supportedcontent supported content Id service unavailable response has a 3xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get conversations messaging supportedcontent supported content Id service unavailable response has a 4xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get conversations messaging supportedcontent supported content Id service unavailable response has a 5xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get conversations messaging supportedcontent supported content Id service unavailable response a status code equal to that given
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] getConversationsMessagingSupportedcontentSupportedContentIdServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] getConversationsMessagingSupportedcontentSupportedContentIdServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConversationsMessagingSupportedcontentSupportedContentIDGatewayTimeout creates a GetConversationsMessagingSupportedcontentSupportedContentIDGatewayTimeout with default headers values
func NewGetConversationsMessagingSupportedcontentSupportedContentIDGatewayTimeout() *GetConversationsMessagingSupportedcontentSupportedContentIDGatewayTimeout {
	return &GetConversationsMessagingSupportedcontentSupportedContentIDGatewayTimeout{}
}

/*
GetConversationsMessagingSupportedcontentSupportedContentIDGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetConversationsMessagingSupportedcontentSupportedContentIDGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get conversations messaging supportedcontent supported content Id gateway timeout response has a 2xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get conversations messaging supportedcontent supported content Id gateway timeout response has a 3xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get conversations messaging supportedcontent supported content Id gateway timeout response has a 4xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get conversations messaging supportedcontent supported content Id gateway timeout response has a 5xx status code
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get conversations messaging supportedcontent supported content Id gateway timeout response a status code equal to that given
func (o *GetConversationsMessagingSupportedcontentSupportedContentIDGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] getConversationsMessagingSupportedcontentSupportedContentIdGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/conversations/messaging/supportedcontent/{supportedContentId}][%d] getConversationsMessagingSupportedcontentSupportedContentIdGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetConversationsMessagingSupportedcontentSupportedContentIDGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

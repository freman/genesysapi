// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutConversationsScreenshareRecordingstateReader is a Reader for the PutConversationsScreenshareRecordingstate structure.
type PutConversationsScreenshareRecordingstateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutConversationsScreenshareRecordingstateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutConversationsScreenshareRecordingstateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewPutConversationsScreenshareRecordingstateAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutConversationsScreenshareRecordingstateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutConversationsScreenshareRecordingstateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutConversationsScreenshareRecordingstateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutConversationsScreenshareRecordingstateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPutConversationsScreenshareRecordingstateRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutConversationsScreenshareRecordingstateRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutConversationsScreenshareRecordingstateUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutConversationsScreenshareRecordingstateTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutConversationsScreenshareRecordingstateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutConversationsScreenshareRecordingstateServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutConversationsScreenshareRecordingstateGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutConversationsScreenshareRecordingstateOK creates a PutConversationsScreenshareRecordingstateOK with default headers values
func NewPutConversationsScreenshareRecordingstateOK() *PutConversationsScreenshareRecordingstateOK {
	return &PutConversationsScreenshareRecordingstateOK{}
}

/*
PutConversationsScreenshareRecordingstateOK describes a response with status code 200, with default header values.

successful operation
*/
type PutConversationsScreenshareRecordingstateOK struct {
	Payload string
}

// IsSuccess returns true when this put conversations screenshare recordingstate o k response has a 2xx status code
func (o *PutConversationsScreenshareRecordingstateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put conversations screenshare recordingstate o k response has a 3xx status code
func (o *PutConversationsScreenshareRecordingstateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put conversations screenshare recordingstate o k response has a 4xx status code
func (o *PutConversationsScreenshareRecordingstateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put conversations screenshare recordingstate o k response has a 5xx status code
func (o *PutConversationsScreenshareRecordingstateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put conversations screenshare recordingstate o k response a status code equal to that given
func (o *PutConversationsScreenshareRecordingstateOK) IsCode(code int) bool {
	return code == 200
}

func (o *PutConversationsScreenshareRecordingstateOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/screenshares/{conversationId}/recordingstate][%d] putConversationsScreenshareRecordingstateOK  %+v", 200, o.Payload)
}

func (o *PutConversationsScreenshareRecordingstateOK) String() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/screenshares/{conversationId}/recordingstate][%d] putConversationsScreenshareRecordingstateOK  %+v", 200, o.Payload)
}

func (o *PutConversationsScreenshareRecordingstateOK) GetPayload() string {
	return o.Payload
}

func (o *PutConversationsScreenshareRecordingstateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsScreenshareRecordingstateAccepted creates a PutConversationsScreenshareRecordingstateAccepted with default headers values
func NewPutConversationsScreenshareRecordingstateAccepted() *PutConversationsScreenshareRecordingstateAccepted {
	return &PutConversationsScreenshareRecordingstateAccepted{}
}

/*
PutConversationsScreenshareRecordingstateAccepted describes a response with status code 202, with default header values.

Accepted - when pausing or resuming recordings (Secure Pause)
*/
type PutConversationsScreenshareRecordingstateAccepted struct {
	Payload string
}

// IsSuccess returns true when this put conversations screenshare recordingstate accepted response has a 2xx status code
func (o *PutConversationsScreenshareRecordingstateAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put conversations screenshare recordingstate accepted response has a 3xx status code
func (o *PutConversationsScreenshareRecordingstateAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put conversations screenshare recordingstate accepted response has a 4xx status code
func (o *PutConversationsScreenshareRecordingstateAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this put conversations screenshare recordingstate accepted response has a 5xx status code
func (o *PutConversationsScreenshareRecordingstateAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this put conversations screenshare recordingstate accepted response a status code equal to that given
func (o *PutConversationsScreenshareRecordingstateAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *PutConversationsScreenshareRecordingstateAccepted) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/screenshares/{conversationId}/recordingstate][%d] putConversationsScreenshareRecordingstateAccepted  %+v", 202, o.Payload)
}

func (o *PutConversationsScreenshareRecordingstateAccepted) String() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/screenshares/{conversationId}/recordingstate][%d] putConversationsScreenshareRecordingstateAccepted  %+v", 202, o.Payload)
}

func (o *PutConversationsScreenshareRecordingstateAccepted) GetPayload() string {
	return o.Payload
}

func (o *PutConversationsScreenshareRecordingstateAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsScreenshareRecordingstateBadRequest creates a PutConversationsScreenshareRecordingstateBadRequest with default headers values
func NewPutConversationsScreenshareRecordingstateBadRequest() *PutConversationsScreenshareRecordingstateBadRequest {
	return &PutConversationsScreenshareRecordingstateBadRequest{}
}

/*
PutConversationsScreenshareRecordingstateBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutConversationsScreenshareRecordingstateBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put conversations screenshare recordingstate bad request response has a 2xx status code
func (o *PutConversationsScreenshareRecordingstateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put conversations screenshare recordingstate bad request response has a 3xx status code
func (o *PutConversationsScreenshareRecordingstateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put conversations screenshare recordingstate bad request response has a 4xx status code
func (o *PutConversationsScreenshareRecordingstateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put conversations screenshare recordingstate bad request response has a 5xx status code
func (o *PutConversationsScreenshareRecordingstateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put conversations screenshare recordingstate bad request response a status code equal to that given
func (o *PutConversationsScreenshareRecordingstateBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PutConversationsScreenshareRecordingstateBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/screenshares/{conversationId}/recordingstate][%d] putConversationsScreenshareRecordingstateBadRequest  %+v", 400, o.Payload)
}

func (o *PutConversationsScreenshareRecordingstateBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/screenshares/{conversationId}/recordingstate][%d] putConversationsScreenshareRecordingstateBadRequest  %+v", 400, o.Payload)
}

func (o *PutConversationsScreenshareRecordingstateBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsScreenshareRecordingstateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsScreenshareRecordingstateUnauthorized creates a PutConversationsScreenshareRecordingstateUnauthorized with default headers values
func NewPutConversationsScreenshareRecordingstateUnauthorized() *PutConversationsScreenshareRecordingstateUnauthorized {
	return &PutConversationsScreenshareRecordingstateUnauthorized{}
}

/*
PutConversationsScreenshareRecordingstateUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PutConversationsScreenshareRecordingstateUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put conversations screenshare recordingstate unauthorized response has a 2xx status code
func (o *PutConversationsScreenshareRecordingstateUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put conversations screenshare recordingstate unauthorized response has a 3xx status code
func (o *PutConversationsScreenshareRecordingstateUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put conversations screenshare recordingstate unauthorized response has a 4xx status code
func (o *PutConversationsScreenshareRecordingstateUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put conversations screenshare recordingstate unauthorized response has a 5xx status code
func (o *PutConversationsScreenshareRecordingstateUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put conversations screenshare recordingstate unauthorized response a status code equal to that given
func (o *PutConversationsScreenshareRecordingstateUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PutConversationsScreenshareRecordingstateUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/screenshares/{conversationId}/recordingstate][%d] putConversationsScreenshareRecordingstateUnauthorized  %+v", 401, o.Payload)
}

func (o *PutConversationsScreenshareRecordingstateUnauthorized) String() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/screenshares/{conversationId}/recordingstate][%d] putConversationsScreenshareRecordingstateUnauthorized  %+v", 401, o.Payload)
}

func (o *PutConversationsScreenshareRecordingstateUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsScreenshareRecordingstateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsScreenshareRecordingstateForbidden creates a PutConversationsScreenshareRecordingstateForbidden with default headers values
func NewPutConversationsScreenshareRecordingstateForbidden() *PutConversationsScreenshareRecordingstateForbidden {
	return &PutConversationsScreenshareRecordingstateForbidden{}
}

/*
PutConversationsScreenshareRecordingstateForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PutConversationsScreenshareRecordingstateForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put conversations screenshare recordingstate forbidden response has a 2xx status code
func (o *PutConversationsScreenshareRecordingstateForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put conversations screenshare recordingstate forbidden response has a 3xx status code
func (o *PutConversationsScreenshareRecordingstateForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put conversations screenshare recordingstate forbidden response has a 4xx status code
func (o *PutConversationsScreenshareRecordingstateForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put conversations screenshare recordingstate forbidden response has a 5xx status code
func (o *PutConversationsScreenshareRecordingstateForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put conversations screenshare recordingstate forbidden response a status code equal to that given
func (o *PutConversationsScreenshareRecordingstateForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PutConversationsScreenshareRecordingstateForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/screenshares/{conversationId}/recordingstate][%d] putConversationsScreenshareRecordingstateForbidden  %+v", 403, o.Payload)
}

func (o *PutConversationsScreenshareRecordingstateForbidden) String() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/screenshares/{conversationId}/recordingstate][%d] putConversationsScreenshareRecordingstateForbidden  %+v", 403, o.Payload)
}

func (o *PutConversationsScreenshareRecordingstateForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsScreenshareRecordingstateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsScreenshareRecordingstateNotFound creates a PutConversationsScreenshareRecordingstateNotFound with default headers values
func NewPutConversationsScreenshareRecordingstateNotFound() *PutConversationsScreenshareRecordingstateNotFound {
	return &PutConversationsScreenshareRecordingstateNotFound{}
}

/*
PutConversationsScreenshareRecordingstateNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PutConversationsScreenshareRecordingstateNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put conversations screenshare recordingstate not found response has a 2xx status code
func (o *PutConversationsScreenshareRecordingstateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put conversations screenshare recordingstate not found response has a 3xx status code
func (o *PutConversationsScreenshareRecordingstateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put conversations screenshare recordingstate not found response has a 4xx status code
func (o *PutConversationsScreenshareRecordingstateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put conversations screenshare recordingstate not found response has a 5xx status code
func (o *PutConversationsScreenshareRecordingstateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put conversations screenshare recordingstate not found response a status code equal to that given
func (o *PutConversationsScreenshareRecordingstateNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PutConversationsScreenshareRecordingstateNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/screenshares/{conversationId}/recordingstate][%d] putConversationsScreenshareRecordingstateNotFound  %+v", 404, o.Payload)
}

func (o *PutConversationsScreenshareRecordingstateNotFound) String() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/screenshares/{conversationId}/recordingstate][%d] putConversationsScreenshareRecordingstateNotFound  %+v", 404, o.Payload)
}

func (o *PutConversationsScreenshareRecordingstateNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsScreenshareRecordingstateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsScreenshareRecordingstateRequestTimeout creates a PutConversationsScreenshareRecordingstateRequestTimeout with default headers values
func NewPutConversationsScreenshareRecordingstateRequestTimeout() *PutConversationsScreenshareRecordingstateRequestTimeout {
	return &PutConversationsScreenshareRecordingstateRequestTimeout{}
}

/*
PutConversationsScreenshareRecordingstateRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PutConversationsScreenshareRecordingstateRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put conversations screenshare recordingstate request timeout response has a 2xx status code
func (o *PutConversationsScreenshareRecordingstateRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put conversations screenshare recordingstate request timeout response has a 3xx status code
func (o *PutConversationsScreenshareRecordingstateRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put conversations screenshare recordingstate request timeout response has a 4xx status code
func (o *PutConversationsScreenshareRecordingstateRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this put conversations screenshare recordingstate request timeout response has a 5xx status code
func (o *PutConversationsScreenshareRecordingstateRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this put conversations screenshare recordingstate request timeout response a status code equal to that given
func (o *PutConversationsScreenshareRecordingstateRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PutConversationsScreenshareRecordingstateRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/screenshares/{conversationId}/recordingstate][%d] putConversationsScreenshareRecordingstateRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutConversationsScreenshareRecordingstateRequestTimeout) String() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/screenshares/{conversationId}/recordingstate][%d] putConversationsScreenshareRecordingstateRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutConversationsScreenshareRecordingstateRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsScreenshareRecordingstateRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsScreenshareRecordingstateRequestEntityTooLarge creates a PutConversationsScreenshareRecordingstateRequestEntityTooLarge with default headers values
func NewPutConversationsScreenshareRecordingstateRequestEntityTooLarge() *PutConversationsScreenshareRecordingstateRequestEntityTooLarge {
	return &PutConversationsScreenshareRecordingstateRequestEntityTooLarge{}
}

/*
PutConversationsScreenshareRecordingstateRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PutConversationsScreenshareRecordingstateRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put conversations screenshare recordingstate request entity too large response has a 2xx status code
func (o *PutConversationsScreenshareRecordingstateRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put conversations screenshare recordingstate request entity too large response has a 3xx status code
func (o *PutConversationsScreenshareRecordingstateRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put conversations screenshare recordingstate request entity too large response has a 4xx status code
func (o *PutConversationsScreenshareRecordingstateRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this put conversations screenshare recordingstate request entity too large response has a 5xx status code
func (o *PutConversationsScreenshareRecordingstateRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this put conversations screenshare recordingstate request entity too large response a status code equal to that given
func (o *PutConversationsScreenshareRecordingstateRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PutConversationsScreenshareRecordingstateRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/screenshares/{conversationId}/recordingstate][%d] putConversationsScreenshareRecordingstateRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutConversationsScreenshareRecordingstateRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/screenshares/{conversationId}/recordingstate][%d] putConversationsScreenshareRecordingstateRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutConversationsScreenshareRecordingstateRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsScreenshareRecordingstateRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsScreenshareRecordingstateUnsupportedMediaType creates a PutConversationsScreenshareRecordingstateUnsupportedMediaType with default headers values
func NewPutConversationsScreenshareRecordingstateUnsupportedMediaType() *PutConversationsScreenshareRecordingstateUnsupportedMediaType {
	return &PutConversationsScreenshareRecordingstateUnsupportedMediaType{}
}

/*
PutConversationsScreenshareRecordingstateUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutConversationsScreenshareRecordingstateUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put conversations screenshare recordingstate unsupported media type response has a 2xx status code
func (o *PutConversationsScreenshareRecordingstateUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put conversations screenshare recordingstate unsupported media type response has a 3xx status code
func (o *PutConversationsScreenshareRecordingstateUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put conversations screenshare recordingstate unsupported media type response has a 4xx status code
func (o *PutConversationsScreenshareRecordingstateUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this put conversations screenshare recordingstate unsupported media type response has a 5xx status code
func (o *PutConversationsScreenshareRecordingstateUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this put conversations screenshare recordingstate unsupported media type response a status code equal to that given
func (o *PutConversationsScreenshareRecordingstateUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PutConversationsScreenshareRecordingstateUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/screenshares/{conversationId}/recordingstate][%d] putConversationsScreenshareRecordingstateUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutConversationsScreenshareRecordingstateUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/screenshares/{conversationId}/recordingstate][%d] putConversationsScreenshareRecordingstateUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutConversationsScreenshareRecordingstateUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsScreenshareRecordingstateUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsScreenshareRecordingstateTooManyRequests creates a PutConversationsScreenshareRecordingstateTooManyRequests with default headers values
func NewPutConversationsScreenshareRecordingstateTooManyRequests() *PutConversationsScreenshareRecordingstateTooManyRequests {
	return &PutConversationsScreenshareRecordingstateTooManyRequests{}
}

/*
PutConversationsScreenshareRecordingstateTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PutConversationsScreenshareRecordingstateTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put conversations screenshare recordingstate too many requests response has a 2xx status code
func (o *PutConversationsScreenshareRecordingstateTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put conversations screenshare recordingstate too many requests response has a 3xx status code
func (o *PutConversationsScreenshareRecordingstateTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put conversations screenshare recordingstate too many requests response has a 4xx status code
func (o *PutConversationsScreenshareRecordingstateTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this put conversations screenshare recordingstate too many requests response has a 5xx status code
func (o *PutConversationsScreenshareRecordingstateTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this put conversations screenshare recordingstate too many requests response a status code equal to that given
func (o *PutConversationsScreenshareRecordingstateTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PutConversationsScreenshareRecordingstateTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/screenshares/{conversationId}/recordingstate][%d] putConversationsScreenshareRecordingstateTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutConversationsScreenshareRecordingstateTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/screenshares/{conversationId}/recordingstate][%d] putConversationsScreenshareRecordingstateTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutConversationsScreenshareRecordingstateTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsScreenshareRecordingstateTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsScreenshareRecordingstateInternalServerError creates a PutConversationsScreenshareRecordingstateInternalServerError with default headers values
func NewPutConversationsScreenshareRecordingstateInternalServerError() *PutConversationsScreenshareRecordingstateInternalServerError {
	return &PutConversationsScreenshareRecordingstateInternalServerError{}
}

/*
PutConversationsScreenshareRecordingstateInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutConversationsScreenshareRecordingstateInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put conversations screenshare recordingstate internal server error response has a 2xx status code
func (o *PutConversationsScreenshareRecordingstateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put conversations screenshare recordingstate internal server error response has a 3xx status code
func (o *PutConversationsScreenshareRecordingstateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put conversations screenshare recordingstate internal server error response has a 4xx status code
func (o *PutConversationsScreenshareRecordingstateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this put conversations screenshare recordingstate internal server error response has a 5xx status code
func (o *PutConversationsScreenshareRecordingstateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this put conversations screenshare recordingstate internal server error response a status code equal to that given
func (o *PutConversationsScreenshareRecordingstateInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PutConversationsScreenshareRecordingstateInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/screenshares/{conversationId}/recordingstate][%d] putConversationsScreenshareRecordingstateInternalServerError  %+v", 500, o.Payload)
}

func (o *PutConversationsScreenshareRecordingstateInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/screenshares/{conversationId}/recordingstate][%d] putConversationsScreenshareRecordingstateInternalServerError  %+v", 500, o.Payload)
}

func (o *PutConversationsScreenshareRecordingstateInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsScreenshareRecordingstateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsScreenshareRecordingstateServiceUnavailable creates a PutConversationsScreenshareRecordingstateServiceUnavailable with default headers values
func NewPutConversationsScreenshareRecordingstateServiceUnavailable() *PutConversationsScreenshareRecordingstateServiceUnavailable {
	return &PutConversationsScreenshareRecordingstateServiceUnavailable{}
}

/*
PutConversationsScreenshareRecordingstateServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutConversationsScreenshareRecordingstateServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put conversations screenshare recordingstate service unavailable response has a 2xx status code
func (o *PutConversationsScreenshareRecordingstateServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put conversations screenshare recordingstate service unavailable response has a 3xx status code
func (o *PutConversationsScreenshareRecordingstateServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put conversations screenshare recordingstate service unavailable response has a 4xx status code
func (o *PutConversationsScreenshareRecordingstateServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this put conversations screenshare recordingstate service unavailable response has a 5xx status code
func (o *PutConversationsScreenshareRecordingstateServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this put conversations screenshare recordingstate service unavailable response a status code equal to that given
func (o *PutConversationsScreenshareRecordingstateServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PutConversationsScreenshareRecordingstateServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/screenshares/{conversationId}/recordingstate][%d] putConversationsScreenshareRecordingstateServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutConversationsScreenshareRecordingstateServiceUnavailable) String() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/screenshares/{conversationId}/recordingstate][%d] putConversationsScreenshareRecordingstateServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutConversationsScreenshareRecordingstateServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsScreenshareRecordingstateServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutConversationsScreenshareRecordingstateGatewayTimeout creates a PutConversationsScreenshareRecordingstateGatewayTimeout with default headers values
func NewPutConversationsScreenshareRecordingstateGatewayTimeout() *PutConversationsScreenshareRecordingstateGatewayTimeout {
	return &PutConversationsScreenshareRecordingstateGatewayTimeout{}
}

/*
PutConversationsScreenshareRecordingstateGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PutConversationsScreenshareRecordingstateGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put conversations screenshare recordingstate gateway timeout response has a 2xx status code
func (o *PutConversationsScreenshareRecordingstateGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put conversations screenshare recordingstate gateway timeout response has a 3xx status code
func (o *PutConversationsScreenshareRecordingstateGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put conversations screenshare recordingstate gateway timeout response has a 4xx status code
func (o *PutConversationsScreenshareRecordingstateGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this put conversations screenshare recordingstate gateway timeout response has a 5xx status code
func (o *PutConversationsScreenshareRecordingstateGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this put conversations screenshare recordingstate gateway timeout response a status code equal to that given
func (o *PutConversationsScreenshareRecordingstateGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PutConversationsScreenshareRecordingstateGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/screenshares/{conversationId}/recordingstate][%d] putConversationsScreenshareRecordingstateGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutConversationsScreenshareRecordingstateGatewayTimeout) String() string {
	return fmt.Sprintf("[PUT /api/v2/conversations/screenshares/{conversationId}/recordingstate][%d] putConversationsScreenshareRecordingstateGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutConversationsScreenshareRecordingstateGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutConversationsScreenshareRecordingstateGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

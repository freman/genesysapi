// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchConversationsSettingsReader is a Reader for the PatchConversationsSettings structure.
type PatchConversationsSettingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchConversationsSettingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewPatchConversationsSettingsAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchConversationsSettingsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchConversationsSettingsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchConversationsSettingsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchConversationsSettingsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchConversationsSettingsRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchConversationsSettingsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchConversationsSettingsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchConversationsSettingsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchConversationsSettingsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchConversationsSettingsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchConversationsSettingsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchConversationsSettingsAccepted creates a PatchConversationsSettingsAccepted with default headers values
func NewPatchConversationsSettingsAccepted() *PatchConversationsSettingsAccepted {
	return &PatchConversationsSettingsAccepted{}
}

/*
PatchConversationsSettingsAccepted describes a response with status code 202, with default header values.

Accepted
*/
type PatchConversationsSettingsAccepted struct {
}

// IsSuccess returns true when this patch conversations settings accepted response has a 2xx status code
func (o *PatchConversationsSettingsAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch conversations settings accepted response has a 3xx status code
func (o *PatchConversationsSettingsAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations settings accepted response has a 4xx status code
func (o *PatchConversationsSettingsAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations settings accepted response has a 5xx status code
func (o *PatchConversationsSettingsAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations settings accepted response a status code equal to that given
func (o *PatchConversationsSettingsAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *PatchConversationsSettingsAccepted) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/settings][%d] patchConversationsSettingsAccepted ", 202)
}

func (o *PatchConversationsSettingsAccepted) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/settings][%d] patchConversationsSettingsAccepted ", 202)
}

func (o *PatchConversationsSettingsAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchConversationsSettingsBadRequest creates a PatchConversationsSettingsBadRequest with default headers values
func NewPatchConversationsSettingsBadRequest() *PatchConversationsSettingsBadRequest {
	return &PatchConversationsSettingsBadRequest{}
}

/*
PatchConversationsSettingsBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchConversationsSettingsBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations settings bad request response has a 2xx status code
func (o *PatchConversationsSettingsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations settings bad request response has a 3xx status code
func (o *PatchConversationsSettingsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations settings bad request response has a 4xx status code
func (o *PatchConversationsSettingsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations settings bad request response has a 5xx status code
func (o *PatchConversationsSettingsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations settings bad request response a status code equal to that given
func (o *PatchConversationsSettingsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchConversationsSettingsBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/settings][%d] patchConversationsSettingsBadRequest  %+v", 400, o.Payload)
}

func (o *PatchConversationsSettingsBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/settings][%d] patchConversationsSettingsBadRequest  %+v", 400, o.Payload)
}

func (o *PatchConversationsSettingsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsSettingsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsSettingsUnauthorized creates a PatchConversationsSettingsUnauthorized with default headers values
func NewPatchConversationsSettingsUnauthorized() *PatchConversationsSettingsUnauthorized {
	return &PatchConversationsSettingsUnauthorized{}
}

/*
PatchConversationsSettingsUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchConversationsSettingsUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations settings unauthorized response has a 2xx status code
func (o *PatchConversationsSettingsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations settings unauthorized response has a 3xx status code
func (o *PatchConversationsSettingsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations settings unauthorized response has a 4xx status code
func (o *PatchConversationsSettingsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations settings unauthorized response has a 5xx status code
func (o *PatchConversationsSettingsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations settings unauthorized response a status code equal to that given
func (o *PatchConversationsSettingsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchConversationsSettingsUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/settings][%d] patchConversationsSettingsUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConversationsSettingsUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/settings][%d] patchConversationsSettingsUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConversationsSettingsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsSettingsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsSettingsForbidden creates a PatchConversationsSettingsForbidden with default headers values
func NewPatchConversationsSettingsForbidden() *PatchConversationsSettingsForbidden {
	return &PatchConversationsSettingsForbidden{}
}

/*
PatchConversationsSettingsForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PatchConversationsSettingsForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations settings forbidden response has a 2xx status code
func (o *PatchConversationsSettingsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations settings forbidden response has a 3xx status code
func (o *PatchConversationsSettingsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations settings forbidden response has a 4xx status code
func (o *PatchConversationsSettingsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations settings forbidden response has a 5xx status code
func (o *PatchConversationsSettingsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations settings forbidden response a status code equal to that given
func (o *PatchConversationsSettingsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchConversationsSettingsForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/settings][%d] patchConversationsSettingsForbidden  %+v", 403, o.Payload)
}

func (o *PatchConversationsSettingsForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/settings][%d] patchConversationsSettingsForbidden  %+v", 403, o.Payload)
}

func (o *PatchConversationsSettingsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsSettingsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsSettingsNotFound creates a PatchConversationsSettingsNotFound with default headers values
func NewPatchConversationsSettingsNotFound() *PatchConversationsSettingsNotFound {
	return &PatchConversationsSettingsNotFound{}
}

/*
PatchConversationsSettingsNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PatchConversationsSettingsNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations settings not found response has a 2xx status code
func (o *PatchConversationsSettingsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations settings not found response has a 3xx status code
func (o *PatchConversationsSettingsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations settings not found response has a 4xx status code
func (o *PatchConversationsSettingsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations settings not found response has a 5xx status code
func (o *PatchConversationsSettingsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations settings not found response a status code equal to that given
func (o *PatchConversationsSettingsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchConversationsSettingsNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/settings][%d] patchConversationsSettingsNotFound  %+v", 404, o.Payload)
}

func (o *PatchConversationsSettingsNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/settings][%d] patchConversationsSettingsNotFound  %+v", 404, o.Payload)
}

func (o *PatchConversationsSettingsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsSettingsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsSettingsRequestTimeout creates a PatchConversationsSettingsRequestTimeout with default headers values
func NewPatchConversationsSettingsRequestTimeout() *PatchConversationsSettingsRequestTimeout {
	return &PatchConversationsSettingsRequestTimeout{}
}

/*
PatchConversationsSettingsRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchConversationsSettingsRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations settings request timeout response has a 2xx status code
func (o *PatchConversationsSettingsRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations settings request timeout response has a 3xx status code
func (o *PatchConversationsSettingsRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations settings request timeout response has a 4xx status code
func (o *PatchConversationsSettingsRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations settings request timeout response has a 5xx status code
func (o *PatchConversationsSettingsRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations settings request timeout response a status code equal to that given
func (o *PatchConversationsSettingsRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PatchConversationsSettingsRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/settings][%d] patchConversationsSettingsRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchConversationsSettingsRequestTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/settings][%d] patchConversationsSettingsRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchConversationsSettingsRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsSettingsRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsSettingsRequestEntityTooLarge creates a PatchConversationsSettingsRequestEntityTooLarge with default headers values
func NewPatchConversationsSettingsRequestEntityTooLarge() *PatchConversationsSettingsRequestEntityTooLarge {
	return &PatchConversationsSettingsRequestEntityTooLarge{}
}

/*
PatchConversationsSettingsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PatchConversationsSettingsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations settings request entity too large response has a 2xx status code
func (o *PatchConversationsSettingsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations settings request entity too large response has a 3xx status code
func (o *PatchConversationsSettingsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations settings request entity too large response has a 4xx status code
func (o *PatchConversationsSettingsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations settings request entity too large response has a 5xx status code
func (o *PatchConversationsSettingsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations settings request entity too large response a status code equal to that given
func (o *PatchConversationsSettingsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PatchConversationsSettingsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/settings][%d] patchConversationsSettingsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchConversationsSettingsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/settings][%d] patchConversationsSettingsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchConversationsSettingsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsSettingsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsSettingsUnsupportedMediaType creates a PatchConversationsSettingsUnsupportedMediaType with default headers values
func NewPatchConversationsSettingsUnsupportedMediaType() *PatchConversationsSettingsUnsupportedMediaType {
	return &PatchConversationsSettingsUnsupportedMediaType{}
}

/*
PatchConversationsSettingsUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchConversationsSettingsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations settings unsupported media type response has a 2xx status code
func (o *PatchConversationsSettingsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations settings unsupported media type response has a 3xx status code
func (o *PatchConversationsSettingsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations settings unsupported media type response has a 4xx status code
func (o *PatchConversationsSettingsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations settings unsupported media type response has a 5xx status code
func (o *PatchConversationsSettingsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations settings unsupported media type response a status code equal to that given
func (o *PatchConversationsSettingsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PatchConversationsSettingsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/settings][%d] patchConversationsSettingsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchConversationsSettingsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/settings][%d] patchConversationsSettingsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchConversationsSettingsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsSettingsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsSettingsTooManyRequests creates a PatchConversationsSettingsTooManyRequests with default headers values
func NewPatchConversationsSettingsTooManyRequests() *PatchConversationsSettingsTooManyRequests {
	return &PatchConversationsSettingsTooManyRequests{}
}

/*
PatchConversationsSettingsTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchConversationsSettingsTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations settings too many requests response has a 2xx status code
func (o *PatchConversationsSettingsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations settings too many requests response has a 3xx status code
func (o *PatchConversationsSettingsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations settings too many requests response has a 4xx status code
func (o *PatchConversationsSettingsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch conversations settings too many requests response has a 5xx status code
func (o *PatchConversationsSettingsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch conversations settings too many requests response a status code equal to that given
func (o *PatchConversationsSettingsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchConversationsSettingsTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/settings][%d] patchConversationsSettingsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConversationsSettingsTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/settings][%d] patchConversationsSettingsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConversationsSettingsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsSettingsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsSettingsInternalServerError creates a PatchConversationsSettingsInternalServerError with default headers values
func NewPatchConversationsSettingsInternalServerError() *PatchConversationsSettingsInternalServerError {
	return &PatchConversationsSettingsInternalServerError{}
}

/*
PatchConversationsSettingsInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchConversationsSettingsInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations settings internal server error response has a 2xx status code
func (o *PatchConversationsSettingsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations settings internal server error response has a 3xx status code
func (o *PatchConversationsSettingsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations settings internal server error response has a 4xx status code
func (o *PatchConversationsSettingsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations settings internal server error response has a 5xx status code
func (o *PatchConversationsSettingsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations settings internal server error response a status code equal to that given
func (o *PatchConversationsSettingsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchConversationsSettingsInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/settings][%d] patchConversationsSettingsInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchConversationsSettingsInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/settings][%d] patchConversationsSettingsInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchConversationsSettingsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsSettingsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsSettingsServiceUnavailable creates a PatchConversationsSettingsServiceUnavailable with default headers values
func NewPatchConversationsSettingsServiceUnavailable() *PatchConversationsSettingsServiceUnavailable {
	return &PatchConversationsSettingsServiceUnavailable{}
}

/*
PatchConversationsSettingsServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchConversationsSettingsServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations settings service unavailable response has a 2xx status code
func (o *PatchConversationsSettingsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations settings service unavailable response has a 3xx status code
func (o *PatchConversationsSettingsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations settings service unavailable response has a 4xx status code
func (o *PatchConversationsSettingsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations settings service unavailable response has a 5xx status code
func (o *PatchConversationsSettingsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations settings service unavailable response a status code equal to that given
func (o *PatchConversationsSettingsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PatchConversationsSettingsServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/settings][%d] patchConversationsSettingsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchConversationsSettingsServiceUnavailable) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/settings][%d] patchConversationsSettingsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchConversationsSettingsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsSettingsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsSettingsGatewayTimeout creates a PatchConversationsSettingsGatewayTimeout with default headers values
func NewPatchConversationsSettingsGatewayTimeout() *PatchConversationsSettingsGatewayTimeout {
	return &PatchConversationsSettingsGatewayTimeout{}
}

/*
PatchConversationsSettingsGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PatchConversationsSettingsGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch conversations settings gateway timeout response has a 2xx status code
func (o *PatchConversationsSettingsGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch conversations settings gateway timeout response has a 3xx status code
func (o *PatchConversationsSettingsGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch conversations settings gateway timeout response has a 4xx status code
func (o *PatchConversationsSettingsGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch conversations settings gateway timeout response has a 5xx status code
func (o *PatchConversationsSettingsGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this patch conversations settings gateway timeout response a status code equal to that given
func (o *PatchConversationsSettingsGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PatchConversationsSettingsGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/settings][%d] patchConversationsSettingsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchConversationsSettingsGatewayTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/settings][%d] patchConversationsSettingsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchConversationsSettingsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsSettingsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

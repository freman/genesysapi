// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/freman/genesysapi/models"
)

// NewPostConversationsMessagingIntegrationsTwitterParams creates a new PostConversationsMessagingIntegrationsTwitterParams object
// with the default values initialized.
func NewPostConversationsMessagingIntegrationsTwitterParams() *PostConversationsMessagingIntegrationsTwitterParams {
	var (
		asyncDefault = bool(false)
	)
	return &PostConversationsMessagingIntegrationsTwitterParams{
		Async: &asyncDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewPostConversationsMessagingIntegrationsTwitterParamsWithTimeout creates a new PostConversationsMessagingIntegrationsTwitterParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostConversationsMessagingIntegrationsTwitterParamsWithTimeout(timeout time.Duration) *PostConversationsMessagingIntegrationsTwitterParams {
	var (
		asyncDefault = bool(false)
	)
	return &PostConversationsMessagingIntegrationsTwitterParams{
		Async: &asyncDefault,

		timeout: timeout,
	}
}

// NewPostConversationsMessagingIntegrationsTwitterParamsWithContext creates a new PostConversationsMessagingIntegrationsTwitterParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostConversationsMessagingIntegrationsTwitterParamsWithContext(ctx context.Context) *PostConversationsMessagingIntegrationsTwitterParams {
	var (
		asyncDefault = bool(false)
	)
	return &PostConversationsMessagingIntegrationsTwitterParams{
		Async: &asyncDefault,

		Context: ctx,
	}
}

// NewPostConversationsMessagingIntegrationsTwitterParamsWithHTTPClient creates a new PostConversationsMessagingIntegrationsTwitterParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostConversationsMessagingIntegrationsTwitterParamsWithHTTPClient(client *http.Client) *PostConversationsMessagingIntegrationsTwitterParams {
	var (
		asyncDefault = bool(false)
	)
	return &PostConversationsMessagingIntegrationsTwitterParams{
		Async:      &asyncDefault,
		HTTPClient: client,
	}
}

/*PostConversationsMessagingIntegrationsTwitterParams contains all the parameters to send to the API endpoint
for the post conversations messaging integrations twitter operation typically these are written to a http.Request
*/
type PostConversationsMessagingIntegrationsTwitterParams struct {

	/*Async
	  Create a Twitter integration in an asynchronous manner. If the parameter value is true, this initiates the generation of a new Twitter integration. An integration ID is returned, it can be used to query the integration. Check the integration's createStatus for Completed or Error to detect the create is finished.

	*/
	Async *bool
	/*Body
	  TwitterIntegrationRequest

	*/
	Body *models.TwitterIntegrationRequest

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post conversations messaging integrations twitter params
func (o *PostConversationsMessagingIntegrationsTwitterParams) WithTimeout(timeout time.Duration) *PostConversationsMessagingIntegrationsTwitterParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post conversations messaging integrations twitter params
func (o *PostConversationsMessagingIntegrationsTwitterParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post conversations messaging integrations twitter params
func (o *PostConversationsMessagingIntegrationsTwitterParams) WithContext(ctx context.Context) *PostConversationsMessagingIntegrationsTwitterParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post conversations messaging integrations twitter params
func (o *PostConversationsMessagingIntegrationsTwitterParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post conversations messaging integrations twitter params
func (o *PostConversationsMessagingIntegrationsTwitterParams) WithHTTPClient(client *http.Client) *PostConversationsMessagingIntegrationsTwitterParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post conversations messaging integrations twitter params
func (o *PostConversationsMessagingIntegrationsTwitterParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAsync adds the async to the post conversations messaging integrations twitter params
func (o *PostConversationsMessagingIntegrationsTwitterParams) WithAsync(async *bool) *PostConversationsMessagingIntegrationsTwitterParams {
	o.SetAsync(async)
	return o
}

// SetAsync adds the async to the post conversations messaging integrations twitter params
func (o *PostConversationsMessagingIntegrationsTwitterParams) SetAsync(async *bool) {
	o.Async = async
}

// WithBody adds the body to the post conversations messaging integrations twitter params
func (o *PostConversationsMessagingIntegrationsTwitterParams) WithBody(body *models.TwitterIntegrationRequest) *PostConversationsMessagingIntegrationsTwitterParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the post conversations messaging integrations twitter params
func (o *PostConversationsMessagingIntegrationsTwitterParams) SetBody(body *models.TwitterIntegrationRequest) {
	o.Body = body
}

// WriteToRequest writes these params to a swagger request
func (o *PostConversationsMessagingIntegrationsTwitterParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Async != nil {

		// query param async
		var qrAsync bool
		if o.Async != nil {
			qrAsync = *o.Async
		}
		qAsync := swag.FormatBool(qrAsync)
		if qAsync != "" {
			if err := r.SetQueryParam("async", qAsync); err != nil {
				return err
			}
		}

	}

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchConversationsMessagingIntegrationsTwitterIntegrationIDReader is a Reader for the PatchConversationsMessagingIntegrationsTwitterIntegrationID structure.
type PatchConversationsMessagingIntegrationsTwitterIntegrationIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchConversationsMessagingIntegrationsTwitterIntegrationIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchConversationsMessagingIntegrationsTwitterIntegrationIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchConversationsMessagingIntegrationsTwitterIntegrationIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchConversationsMessagingIntegrationsTwitterIntegrationIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchConversationsMessagingIntegrationsTwitterIntegrationIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchConversationsMessagingIntegrationsTwitterIntegrationIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchConversationsMessagingIntegrationsTwitterIntegrationIDRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchConversationsMessagingIntegrationsTwitterIntegrationIDRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchConversationsMessagingIntegrationsTwitterIntegrationIDUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchConversationsMessagingIntegrationsTwitterIntegrationIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchConversationsMessagingIntegrationsTwitterIntegrationIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchConversationsMessagingIntegrationsTwitterIntegrationIDServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchConversationsMessagingIntegrationsTwitterIntegrationIDGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchConversationsMessagingIntegrationsTwitterIntegrationIDOK creates a PatchConversationsMessagingIntegrationsTwitterIntegrationIDOK with default headers values
func NewPatchConversationsMessagingIntegrationsTwitterIntegrationIDOK() *PatchConversationsMessagingIntegrationsTwitterIntegrationIDOK {
	return &PatchConversationsMessagingIntegrationsTwitterIntegrationIDOK{}
}

/*PatchConversationsMessagingIntegrationsTwitterIntegrationIDOK handles this case with default header values.

successful operation
*/
type PatchConversationsMessagingIntegrationsTwitterIntegrationIDOK struct {
	Payload *models.TwitterIntegration
}

func (o *PatchConversationsMessagingIntegrationsTwitterIntegrationIDOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/twitter/{integrationId}][%d] patchConversationsMessagingIntegrationsTwitterIntegrationIdOK  %+v", 200, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsTwitterIntegrationIDOK) GetPayload() *models.TwitterIntegration {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsTwitterIntegrationIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TwitterIntegration)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingIntegrationsTwitterIntegrationIDBadRequest creates a PatchConversationsMessagingIntegrationsTwitterIntegrationIDBadRequest with default headers values
func NewPatchConversationsMessagingIntegrationsTwitterIntegrationIDBadRequest() *PatchConversationsMessagingIntegrationsTwitterIntegrationIDBadRequest {
	return &PatchConversationsMessagingIntegrationsTwitterIntegrationIDBadRequest{}
}

/*PatchConversationsMessagingIntegrationsTwitterIntegrationIDBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchConversationsMessagingIntegrationsTwitterIntegrationIDBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsMessagingIntegrationsTwitterIntegrationIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/twitter/{integrationId}][%d] patchConversationsMessagingIntegrationsTwitterIntegrationIdBadRequest  %+v", 400, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsTwitterIntegrationIDBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsTwitterIntegrationIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingIntegrationsTwitterIntegrationIDUnauthorized creates a PatchConversationsMessagingIntegrationsTwitterIntegrationIDUnauthorized with default headers values
func NewPatchConversationsMessagingIntegrationsTwitterIntegrationIDUnauthorized() *PatchConversationsMessagingIntegrationsTwitterIntegrationIDUnauthorized {
	return &PatchConversationsMessagingIntegrationsTwitterIntegrationIDUnauthorized{}
}

/*PatchConversationsMessagingIntegrationsTwitterIntegrationIDUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchConversationsMessagingIntegrationsTwitterIntegrationIDUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsMessagingIntegrationsTwitterIntegrationIDUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/twitter/{integrationId}][%d] patchConversationsMessagingIntegrationsTwitterIntegrationIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsTwitterIntegrationIDUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsTwitterIntegrationIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingIntegrationsTwitterIntegrationIDForbidden creates a PatchConversationsMessagingIntegrationsTwitterIntegrationIDForbidden with default headers values
func NewPatchConversationsMessagingIntegrationsTwitterIntegrationIDForbidden() *PatchConversationsMessagingIntegrationsTwitterIntegrationIDForbidden {
	return &PatchConversationsMessagingIntegrationsTwitterIntegrationIDForbidden{}
}

/*PatchConversationsMessagingIntegrationsTwitterIntegrationIDForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PatchConversationsMessagingIntegrationsTwitterIntegrationIDForbidden struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsMessagingIntegrationsTwitterIntegrationIDForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/twitter/{integrationId}][%d] patchConversationsMessagingIntegrationsTwitterIntegrationIdForbidden  %+v", 403, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsTwitterIntegrationIDForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsTwitterIntegrationIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingIntegrationsTwitterIntegrationIDNotFound creates a PatchConversationsMessagingIntegrationsTwitterIntegrationIDNotFound with default headers values
func NewPatchConversationsMessagingIntegrationsTwitterIntegrationIDNotFound() *PatchConversationsMessagingIntegrationsTwitterIntegrationIDNotFound {
	return &PatchConversationsMessagingIntegrationsTwitterIntegrationIDNotFound{}
}

/*PatchConversationsMessagingIntegrationsTwitterIntegrationIDNotFound handles this case with default header values.

The requested resource was not found.
*/
type PatchConversationsMessagingIntegrationsTwitterIntegrationIDNotFound struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsMessagingIntegrationsTwitterIntegrationIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/twitter/{integrationId}][%d] patchConversationsMessagingIntegrationsTwitterIntegrationIdNotFound  %+v", 404, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsTwitterIntegrationIDNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsTwitterIntegrationIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingIntegrationsTwitterIntegrationIDRequestTimeout creates a PatchConversationsMessagingIntegrationsTwitterIntegrationIDRequestTimeout with default headers values
func NewPatchConversationsMessagingIntegrationsTwitterIntegrationIDRequestTimeout() *PatchConversationsMessagingIntegrationsTwitterIntegrationIDRequestTimeout {
	return &PatchConversationsMessagingIntegrationsTwitterIntegrationIDRequestTimeout{}
}

/*PatchConversationsMessagingIntegrationsTwitterIntegrationIDRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchConversationsMessagingIntegrationsTwitterIntegrationIDRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsMessagingIntegrationsTwitterIntegrationIDRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/twitter/{integrationId}][%d] patchConversationsMessagingIntegrationsTwitterIntegrationIdRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsTwitterIntegrationIDRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsTwitterIntegrationIDRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingIntegrationsTwitterIntegrationIDRequestEntityTooLarge creates a PatchConversationsMessagingIntegrationsTwitterIntegrationIDRequestEntityTooLarge with default headers values
func NewPatchConversationsMessagingIntegrationsTwitterIntegrationIDRequestEntityTooLarge() *PatchConversationsMessagingIntegrationsTwitterIntegrationIDRequestEntityTooLarge {
	return &PatchConversationsMessagingIntegrationsTwitterIntegrationIDRequestEntityTooLarge{}
}

/*PatchConversationsMessagingIntegrationsTwitterIntegrationIDRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PatchConversationsMessagingIntegrationsTwitterIntegrationIDRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsMessagingIntegrationsTwitterIntegrationIDRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/twitter/{integrationId}][%d] patchConversationsMessagingIntegrationsTwitterIntegrationIdRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsTwitterIntegrationIDRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsTwitterIntegrationIDRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingIntegrationsTwitterIntegrationIDUnsupportedMediaType creates a PatchConversationsMessagingIntegrationsTwitterIntegrationIDUnsupportedMediaType with default headers values
func NewPatchConversationsMessagingIntegrationsTwitterIntegrationIDUnsupportedMediaType() *PatchConversationsMessagingIntegrationsTwitterIntegrationIDUnsupportedMediaType {
	return &PatchConversationsMessagingIntegrationsTwitterIntegrationIDUnsupportedMediaType{}
}

/*PatchConversationsMessagingIntegrationsTwitterIntegrationIDUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchConversationsMessagingIntegrationsTwitterIntegrationIDUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsMessagingIntegrationsTwitterIntegrationIDUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/twitter/{integrationId}][%d] patchConversationsMessagingIntegrationsTwitterIntegrationIdUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsTwitterIntegrationIDUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsTwitterIntegrationIDUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingIntegrationsTwitterIntegrationIDTooManyRequests creates a PatchConversationsMessagingIntegrationsTwitterIntegrationIDTooManyRequests with default headers values
func NewPatchConversationsMessagingIntegrationsTwitterIntegrationIDTooManyRequests() *PatchConversationsMessagingIntegrationsTwitterIntegrationIDTooManyRequests {
	return &PatchConversationsMessagingIntegrationsTwitterIntegrationIDTooManyRequests{}
}

/*PatchConversationsMessagingIntegrationsTwitterIntegrationIDTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchConversationsMessagingIntegrationsTwitterIntegrationIDTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsMessagingIntegrationsTwitterIntegrationIDTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/twitter/{integrationId}][%d] patchConversationsMessagingIntegrationsTwitterIntegrationIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsTwitterIntegrationIDTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsTwitterIntegrationIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingIntegrationsTwitterIntegrationIDInternalServerError creates a PatchConversationsMessagingIntegrationsTwitterIntegrationIDInternalServerError with default headers values
func NewPatchConversationsMessagingIntegrationsTwitterIntegrationIDInternalServerError() *PatchConversationsMessagingIntegrationsTwitterIntegrationIDInternalServerError {
	return &PatchConversationsMessagingIntegrationsTwitterIntegrationIDInternalServerError{}
}

/*PatchConversationsMessagingIntegrationsTwitterIntegrationIDInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchConversationsMessagingIntegrationsTwitterIntegrationIDInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsMessagingIntegrationsTwitterIntegrationIDInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/twitter/{integrationId}][%d] patchConversationsMessagingIntegrationsTwitterIntegrationIdInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsTwitterIntegrationIDInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsTwitterIntegrationIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingIntegrationsTwitterIntegrationIDServiceUnavailable creates a PatchConversationsMessagingIntegrationsTwitterIntegrationIDServiceUnavailable with default headers values
func NewPatchConversationsMessagingIntegrationsTwitterIntegrationIDServiceUnavailable() *PatchConversationsMessagingIntegrationsTwitterIntegrationIDServiceUnavailable {
	return &PatchConversationsMessagingIntegrationsTwitterIntegrationIDServiceUnavailable{}
}

/*PatchConversationsMessagingIntegrationsTwitterIntegrationIDServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchConversationsMessagingIntegrationsTwitterIntegrationIDServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsMessagingIntegrationsTwitterIntegrationIDServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/twitter/{integrationId}][%d] patchConversationsMessagingIntegrationsTwitterIntegrationIdServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsTwitterIntegrationIDServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsTwitterIntegrationIDServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConversationsMessagingIntegrationsTwitterIntegrationIDGatewayTimeout creates a PatchConversationsMessagingIntegrationsTwitterIntegrationIDGatewayTimeout with default headers values
func NewPatchConversationsMessagingIntegrationsTwitterIntegrationIDGatewayTimeout() *PatchConversationsMessagingIntegrationsTwitterIntegrationIDGatewayTimeout {
	return &PatchConversationsMessagingIntegrationsTwitterIntegrationIDGatewayTimeout{}
}

/*PatchConversationsMessagingIntegrationsTwitterIntegrationIDGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PatchConversationsMessagingIntegrationsTwitterIntegrationIDGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PatchConversationsMessagingIntegrationsTwitterIntegrationIDGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/conversations/messaging/integrations/twitter/{integrationId}][%d] patchConversationsMessagingIntegrationsTwitterIntegrationIdGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchConversationsMessagingIntegrationsTwitterIntegrationIDGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchConversationsMessagingIntegrationsTwitterIntegrationIDGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

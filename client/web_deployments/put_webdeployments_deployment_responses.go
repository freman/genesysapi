// Code generated by go-swagger; DO NOT EDIT.

package web_deployments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutWebdeploymentsDeploymentReader is a Reader for the PutWebdeploymentsDeployment structure.
type PutWebdeploymentsDeploymentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutWebdeploymentsDeploymentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutWebdeploymentsDeploymentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutWebdeploymentsDeploymentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutWebdeploymentsDeploymentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutWebdeploymentsDeploymentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutWebdeploymentsDeploymentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPutWebdeploymentsDeploymentRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutWebdeploymentsDeploymentRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutWebdeploymentsDeploymentUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutWebdeploymentsDeploymentTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutWebdeploymentsDeploymentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutWebdeploymentsDeploymentServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutWebdeploymentsDeploymentGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutWebdeploymentsDeploymentOK creates a PutWebdeploymentsDeploymentOK with default headers values
func NewPutWebdeploymentsDeploymentOK() *PutWebdeploymentsDeploymentOK {
	return &PutWebdeploymentsDeploymentOK{}
}

/*
PutWebdeploymentsDeploymentOK describes a response with status code 200, with default header values.

successful operation
*/
type PutWebdeploymentsDeploymentOK struct {
	Payload *models.WebDeployment
}

// IsSuccess returns true when this put webdeployments deployment o k response has a 2xx status code
func (o *PutWebdeploymentsDeploymentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put webdeployments deployment o k response has a 3xx status code
func (o *PutWebdeploymentsDeploymentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put webdeployments deployment o k response has a 4xx status code
func (o *PutWebdeploymentsDeploymentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put webdeployments deployment o k response has a 5xx status code
func (o *PutWebdeploymentsDeploymentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put webdeployments deployment o k response a status code equal to that given
func (o *PutWebdeploymentsDeploymentOK) IsCode(code int) bool {
	return code == 200
}

func (o *PutWebdeploymentsDeploymentOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/webdeployments/deployments/{deploymentId}][%d] putWebdeploymentsDeploymentOK  %+v", 200, o.Payload)
}

func (o *PutWebdeploymentsDeploymentOK) String() string {
	return fmt.Sprintf("[PUT /api/v2/webdeployments/deployments/{deploymentId}][%d] putWebdeploymentsDeploymentOK  %+v", 200, o.Payload)
}

func (o *PutWebdeploymentsDeploymentOK) GetPayload() *models.WebDeployment {
	return o.Payload
}

func (o *PutWebdeploymentsDeploymentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.WebDeployment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutWebdeploymentsDeploymentBadRequest creates a PutWebdeploymentsDeploymentBadRequest with default headers values
func NewPutWebdeploymentsDeploymentBadRequest() *PutWebdeploymentsDeploymentBadRequest {
	return &PutWebdeploymentsDeploymentBadRequest{}
}

/*
PutWebdeploymentsDeploymentBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutWebdeploymentsDeploymentBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put webdeployments deployment bad request response has a 2xx status code
func (o *PutWebdeploymentsDeploymentBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put webdeployments deployment bad request response has a 3xx status code
func (o *PutWebdeploymentsDeploymentBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put webdeployments deployment bad request response has a 4xx status code
func (o *PutWebdeploymentsDeploymentBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put webdeployments deployment bad request response has a 5xx status code
func (o *PutWebdeploymentsDeploymentBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put webdeployments deployment bad request response a status code equal to that given
func (o *PutWebdeploymentsDeploymentBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PutWebdeploymentsDeploymentBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/webdeployments/deployments/{deploymentId}][%d] putWebdeploymentsDeploymentBadRequest  %+v", 400, o.Payload)
}

func (o *PutWebdeploymentsDeploymentBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/v2/webdeployments/deployments/{deploymentId}][%d] putWebdeploymentsDeploymentBadRequest  %+v", 400, o.Payload)
}

func (o *PutWebdeploymentsDeploymentBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutWebdeploymentsDeploymentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutWebdeploymentsDeploymentUnauthorized creates a PutWebdeploymentsDeploymentUnauthorized with default headers values
func NewPutWebdeploymentsDeploymentUnauthorized() *PutWebdeploymentsDeploymentUnauthorized {
	return &PutWebdeploymentsDeploymentUnauthorized{}
}

/*
PutWebdeploymentsDeploymentUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PutWebdeploymentsDeploymentUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put webdeployments deployment unauthorized response has a 2xx status code
func (o *PutWebdeploymentsDeploymentUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put webdeployments deployment unauthorized response has a 3xx status code
func (o *PutWebdeploymentsDeploymentUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put webdeployments deployment unauthorized response has a 4xx status code
func (o *PutWebdeploymentsDeploymentUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put webdeployments deployment unauthorized response has a 5xx status code
func (o *PutWebdeploymentsDeploymentUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put webdeployments deployment unauthorized response a status code equal to that given
func (o *PutWebdeploymentsDeploymentUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PutWebdeploymentsDeploymentUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/webdeployments/deployments/{deploymentId}][%d] putWebdeploymentsDeploymentUnauthorized  %+v", 401, o.Payload)
}

func (o *PutWebdeploymentsDeploymentUnauthorized) String() string {
	return fmt.Sprintf("[PUT /api/v2/webdeployments/deployments/{deploymentId}][%d] putWebdeploymentsDeploymentUnauthorized  %+v", 401, o.Payload)
}

func (o *PutWebdeploymentsDeploymentUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutWebdeploymentsDeploymentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutWebdeploymentsDeploymentForbidden creates a PutWebdeploymentsDeploymentForbidden with default headers values
func NewPutWebdeploymentsDeploymentForbidden() *PutWebdeploymentsDeploymentForbidden {
	return &PutWebdeploymentsDeploymentForbidden{}
}

/*
PutWebdeploymentsDeploymentForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PutWebdeploymentsDeploymentForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put webdeployments deployment forbidden response has a 2xx status code
func (o *PutWebdeploymentsDeploymentForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put webdeployments deployment forbidden response has a 3xx status code
func (o *PutWebdeploymentsDeploymentForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put webdeployments deployment forbidden response has a 4xx status code
func (o *PutWebdeploymentsDeploymentForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put webdeployments deployment forbidden response has a 5xx status code
func (o *PutWebdeploymentsDeploymentForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put webdeployments deployment forbidden response a status code equal to that given
func (o *PutWebdeploymentsDeploymentForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PutWebdeploymentsDeploymentForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/webdeployments/deployments/{deploymentId}][%d] putWebdeploymentsDeploymentForbidden  %+v", 403, o.Payload)
}

func (o *PutWebdeploymentsDeploymentForbidden) String() string {
	return fmt.Sprintf("[PUT /api/v2/webdeployments/deployments/{deploymentId}][%d] putWebdeploymentsDeploymentForbidden  %+v", 403, o.Payload)
}

func (o *PutWebdeploymentsDeploymentForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutWebdeploymentsDeploymentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutWebdeploymentsDeploymentNotFound creates a PutWebdeploymentsDeploymentNotFound with default headers values
func NewPutWebdeploymentsDeploymentNotFound() *PutWebdeploymentsDeploymentNotFound {
	return &PutWebdeploymentsDeploymentNotFound{}
}

/*
PutWebdeploymentsDeploymentNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PutWebdeploymentsDeploymentNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put webdeployments deployment not found response has a 2xx status code
func (o *PutWebdeploymentsDeploymentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put webdeployments deployment not found response has a 3xx status code
func (o *PutWebdeploymentsDeploymentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put webdeployments deployment not found response has a 4xx status code
func (o *PutWebdeploymentsDeploymentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put webdeployments deployment not found response has a 5xx status code
func (o *PutWebdeploymentsDeploymentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put webdeployments deployment not found response a status code equal to that given
func (o *PutWebdeploymentsDeploymentNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PutWebdeploymentsDeploymentNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/webdeployments/deployments/{deploymentId}][%d] putWebdeploymentsDeploymentNotFound  %+v", 404, o.Payload)
}

func (o *PutWebdeploymentsDeploymentNotFound) String() string {
	return fmt.Sprintf("[PUT /api/v2/webdeployments/deployments/{deploymentId}][%d] putWebdeploymentsDeploymentNotFound  %+v", 404, o.Payload)
}

func (o *PutWebdeploymentsDeploymentNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutWebdeploymentsDeploymentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutWebdeploymentsDeploymentRequestTimeout creates a PutWebdeploymentsDeploymentRequestTimeout with default headers values
func NewPutWebdeploymentsDeploymentRequestTimeout() *PutWebdeploymentsDeploymentRequestTimeout {
	return &PutWebdeploymentsDeploymentRequestTimeout{}
}

/*
PutWebdeploymentsDeploymentRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PutWebdeploymentsDeploymentRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put webdeployments deployment request timeout response has a 2xx status code
func (o *PutWebdeploymentsDeploymentRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put webdeployments deployment request timeout response has a 3xx status code
func (o *PutWebdeploymentsDeploymentRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put webdeployments deployment request timeout response has a 4xx status code
func (o *PutWebdeploymentsDeploymentRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this put webdeployments deployment request timeout response has a 5xx status code
func (o *PutWebdeploymentsDeploymentRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this put webdeployments deployment request timeout response a status code equal to that given
func (o *PutWebdeploymentsDeploymentRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PutWebdeploymentsDeploymentRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/webdeployments/deployments/{deploymentId}][%d] putWebdeploymentsDeploymentRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutWebdeploymentsDeploymentRequestTimeout) String() string {
	return fmt.Sprintf("[PUT /api/v2/webdeployments/deployments/{deploymentId}][%d] putWebdeploymentsDeploymentRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutWebdeploymentsDeploymentRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutWebdeploymentsDeploymentRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutWebdeploymentsDeploymentRequestEntityTooLarge creates a PutWebdeploymentsDeploymentRequestEntityTooLarge with default headers values
func NewPutWebdeploymentsDeploymentRequestEntityTooLarge() *PutWebdeploymentsDeploymentRequestEntityTooLarge {
	return &PutWebdeploymentsDeploymentRequestEntityTooLarge{}
}

/*
PutWebdeploymentsDeploymentRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PutWebdeploymentsDeploymentRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put webdeployments deployment request entity too large response has a 2xx status code
func (o *PutWebdeploymentsDeploymentRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put webdeployments deployment request entity too large response has a 3xx status code
func (o *PutWebdeploymentsDeploymentRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put webdeployments deployment request entity too large response has a 4xx status code
func (o *PutWebdeploymentsDeploymentRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this put webdeployments deployment request entity too large response has a 5xx status code
func (o *PutWebdeploymentsDeploymentRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this put webdeployments deployment request entity too large response a status code equal to that given
func (o *PutWebdeploymentsDeploymentRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PutWebdeploymentsDeploymentRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/webdeployments/deployments/{deploymentId}][%d] putWebdeploymentsDeploymentRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutWebdeploymentsDeploymentRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PUT /api/v2/webdeployments/deployments/{deploymentId}][%d] putWebdeploymentsDeploymentRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutWebdeploymentsDeploymentRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutWebdeploymentsDeploymentRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutWebdeploymentsDeploymentUnsupportedMediaType creates a PutWebdeploymentsDeploymentUnsupportedMediaType with default headers values
func NewPutWebdeploymentsDeploymentUnsupportedMediaType() *PutWebdeploymentsDeploymentUnsupportedMediaType {
	return &PutWebdeploymentsDeploymentUnsupportedMediaType{}
}

/*
PutWebdeploymentsDeploymentUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutWebdeploymentsDeploymentUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put webdeployments deployment unsupported media type response has a 2xx status code
func (o *PutWebdeploymentsDeploymentUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put webdeployments deployment unsupported media type response has a 3xx status code
func (o *PutWebdeploymentsDeploymentUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put webdeployments deployment unsupported media type response has a 4xx status code
func (o *PutWebdeploymentsDeploymentUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this put webdeployments deployment unsupported media type response has a 5xx status code
func (o *PutWebdeploymentsDeploymentUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this put webdeployments deployment unsupported media type response a status code equal to that given
func (o *PutWebdeploymentsDeploymentUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PutWebdeploymentsDeploymentUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/webdeployments/deployments/{deploymentId}][%d] putWebdeploymentsDeploymentUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutWebdeploymentsDeploymentUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PUT /api/v2/webdeployments/deployments/{deploymentId}][%d] putWebdeploymentsDeploymentUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutWebdeploymentsDeploymentUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutWebdeploymentsDeploymentUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutWebdeploymentsDeploymentTooManyRequests creates a PutWebdeploymentsDeploymentTooManyRequests with default headers values
func NewPutWebdeploymentsDeploymentTooManyRequests() *PutWebdeploymentsDeploymentTooManyRequests {
	return &PutWebdeploymentsDeploymentTooManyRequests{}
}

/*
PutWebdeploymentsDeploymentTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PutWebdeploymentsDeploymentTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put webdeployments deployment too many requests response has a 2xx status code
func (o *PutWebdeploymentsDeploymentTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put webdeployments deployment too many requests response has a 3xx status code
func (o *PutWebdeploymentsDeploymentTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put webdeployments deployment too many requests response has a 4xx status code
func (o *PutWebdeploymentsDeploymentTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this put webdeployments deployment too many requests response has a 5xx status code
func (o *PutWebdeploymentsDeploymentTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this put webdeployments deployment too many requests response a status code equal to that given
func (o *PutWebdeploymentsDeploymentTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PutWebdeploymentsDeploymentTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/webdeployments/deployments/{deploymentId}][%d] putWebdeploymentsDeploymentTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutWebdeploymentsDeploymentTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /api/v2/webdeployments/deployments/{deploymentId}][%d] putWebdeploymentsDeploymentTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutWebdeploymentsDeploymentTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutWebdeploymentsDeploymentTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutWebdeploymentsDeploymentInternalServerError creates a PutWebdeploymentsDeploymentInternalServerError with default headers values
func NewPutWebdeploymentsDeploymentInternalServerError() *PutWebdeploymentsDeploymentInternalServerError {
	return &PutWebdeploymentsDeploymentInternalServerError{}
}

/*
PutWebdeploymentsDeploymentInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutWebdeploymentsDeploymentInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put webdeployments deployment internal server error response has a 2xx status code
func (o *PutWebdeploymentsDeploymentInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put webdeployments deployment internal server error response has a 3xx status code
func (o *PutWebdeploymentsDeploymentInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put webdeployments deployment internal server error response has a 4xx status code
func (o *PutWebdeploymentsDeploymentInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this put webdeployments deployment internal server error response has a 5xx status code
func (o *PutWebdeploymentsDeploymentInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this put webdeployments deployment internal server error response a status code equal to that given
func (o *PutWebdeploymentsDeploymentInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PutWebdeploymentsDeploymentInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/webdeployments/deployments/{deploymentId}][%d] putWebdeploymentsDeploymentInternalServerError  %+v", 500, o.Payload)
}

func (o *PutWebdeploymentsDeploymentInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/v2/webdeployments/deployments/{deploymentId}][%d] putWebdeploymentsDeploymentInternalServerError  %+v", 500, o.Payload)
}

func (o *PutWebdeploymentsDeploymentInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutWebdeploymentsDeploymentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutWebdeploymentsDeploymentServiceUnavailable creates a PutWebdeploymentsDeploymentServiceUnavailable with default headers values
func NewPutWebdeploymentsDeploymentServiceUnavailable() *PutWebdeploymentsDeploymentServiceUnavailable {
	return &PutWebdeploymentsDeploymentServiceUnavailable{}
}

/*
PutWebdeploymentsDeploymentServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutWebdeploymentsDeploymentServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put webdeployments deployment service unavailable response has a 2xx status code
func (o *PutWebdeploymentsDeploymentServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put webdeployments deployment service unavailable response has a 3xx status code
func (o *PutWebdeploymentsDeploymentServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put webdeployments deployment service unavailable response has a 4xx status code
func (o *PutWebdeploymentsDeploymentServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this put webdeployments deployment service unavailable response has a 5xx status code
func (o *PutWebdeploymentsDeploymentServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this put webdeployments deployment service unavailable response a status code equal to that given
func (o *PutWebdeploymentsDeploymentServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PutWebdeploymentsDeploymentServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/webdeployments/deployments/{deploymentId}][%d] putWebdeploymentsDeploymentServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutWebdeploymentsDeploymentServiceUnavailable) String() string {
	return fmt.Sprintf("[PUT /api/v2/webdeployments/deployments/{deploymentId}][%d] putWebdeploymentsDeploymentServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutWebdeploymentsDeploymentServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutWebdeploymentsDeploymentServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutWebdeploymentsDeploymentGatewayTimeout creates a PutWebdeploymentsDeploymentGatewayTimeout with default headers values
func NewPutWebdeploymentsDeploymentGatewayTimeout() *PutWebdeploymentsDeploymentGatewayTimeout {
	return &PutWebdeploymentsDeploymentGatewayTimeout{}
}

/*
PutWebdeploymentsDeploymentGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PutWebdeploymentsDeploymentGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put webdeployments deployment gateway timeout response has a 2xx status code
func (o *PutWebdeploymentsDeploymentGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put webdeployments deployment gateway timeout response has a 3xx status code
func (o *PutWebdeploymentsDeploymentGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put webdeployments deployment gateway timeout response has a 4xx status code
func (o *PutWebdeploymentsDeploymentGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this put webdeployments deployment gateway timeout response has a 5xx status code
func (o *PutWebdeploymentsDeploymentGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this put webdeployments deployment gateway timeout response a status code equal to that given
func (o *PutWebdeploymentsDeploymentGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PutWebdeploymentsDeploymentGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/webdeployments/deployments/{deploymentId}][%d] putWebdeploymentsDeploymentGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutWebdeploymentsDeploymentGatewayTimeout) String() string {
	return fmt.Sprintf("[PUT /api/v2/webdeployments/deployments/{deploymentId}][%d] putWebdeploymentsDeploymentGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutWebdeploymentsDeploymentGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutWebdeploymentsDeploymentGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

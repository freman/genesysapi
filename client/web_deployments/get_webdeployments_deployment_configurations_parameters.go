// Code generated by go-swagger; DO NOT EDIT.

package web_deployments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetWebdeploymentsDeploymentConfigurationsParams creates a new GetWebdeploymentsDeploymentConfigurationsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetWebdeploymentsDeploymentConfigurationsParams() *GetWebdeploymentsDeploymentConfigurationsParams {
	return &GetWebdeploymentsDeploymentConfigurationsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetWebdeploymentsDeploymentConfigurationsParamsWithTimeout creates a new GetWebdeploymentsDeploymentConfigurationsParams object
// with the ability to set a timeout on a request.
func NewGetWebdeploymentsDeploymentConfigurationsParamsWithTimeout(timeout time.Duration) *GetWebdeploymentsDeploymentConfigurationsParams {
	return &GetWebdeploymentsDeploymentConfigurationsParams{
		timeout: timeout,
	}
}

// NewGetWebdeploymentsDeploymentConfigurationsParamsWithContext creates a new GetWebdeploymentsDeploymentConfigurationsParams object
// with the ability to set a context for a request.
func NewGetWebdeploymentsDeploymentConfigurationsParamsWithContext(ctx context.Context) *GetWebdeploymentsDeploymentConfigurationsParams {
	return &GetWebdeploymentsDeploymentConfigurationsParams{
		Context: ctx,
	}
}

// NewGetWebdeploymentsDeploymentConfigurationsParamsWithHTTPClient creates a new GetWebdeploymentsDeploymentConfigurationsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetWebdeploymentsDeploymentConfigurationsParamsWithHTTPClient(client *http.Client) *GetWebdeploymentsDeploymentConfigurationsParams {
	return &GetWebdeploymentsDeploymentConfigurationsParams{
		HTTPClient: client,
	}
}

/*
GetWebdeploymentsDeploymentConfigurationsParams contains all the parameters to send to the API endpoint

	for the get webdeployments deployment configurations operation.

	Typically these are written to a http.Request.
*/
type GetWebdeploymentsDeploymentConfigurationsParams struct {

	/* DeploymentID.

	   The deployment ID
	*/
	DeploymentID string

	/* Type.

	   Get active configuration on a deployment
	*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get webdeployments deployment configurations params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetWebdeploymentsDeploymentConfigurationsParams) WithDefaults() *GetWebdeploymentsDeploymentConfigurationsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get webdeployments deployment configurations params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetWebdeploymentsDeploymentConfigurationsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get webdeployments deployment configurations params
func (o *GetWebdeploymentsDeploymentConfigurationsParams) WithTimeout(timeout time.Duration) *GetWebdeploymentsDeploymentConfigurationsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get webdeployments deployment configurations params
func (o *GetWebdeploymentsDeploymentConfigurationsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get webdeployments deployment configurations params
func (o *GetWebdeploymentsDeploymentConfigurationsParams) WithContext(ctx context.Context) *GetWebdeploymentsDeploymentConfigurationsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get webdeployments deployment configurations params
func (o *GetWebdeploymentsDeploymentConfigurationsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get webdeployments deployment configurations params
func (o *GetWebdeploymentsDeploymentConfigurationsParams) WithHTTPClient(client *http.Client) *GetWebdeploymentsDeploymentConfigurationsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get webdeployments deployment configurations params
func (o *GetWebdeploymentsDeploymentConfigurationsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDeploymentID adds the deploymentID to the get webdeployments deployment configurations params
func (o *GetWebdeploymentsDeploymentConfigurationsParams) WithDeploymentID(deploymentID string) *GetWebdeploymentsDeploymentConfigurationsParams {
	o.SetDeploymentID(deploymentID)
	return o
}

// SetDeploymentID adds the deploymentId to the get webdeployments deployment configurations params
func (o *GetWebdeploymentsDeploymentConfigurationsParams) SetDeploymentID(deploymentID string) {
	o.DeploymentID = deploymentID
}

// WithType adds the typeVar to the get webdeployments deployment configurations params
func (o *GetWebdeploymentsDeploymentConfigurationsParams) WithType(typeVar *string) *GetWebdeploymentsDeploymentConfigurationsParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get webdeployments deployment configurations params
func (o *GetWebdeploymentsDeploymentConfigurationsParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *GetWebdeploymentsDeploymentConfigurationsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param deploymentId
	if err := r.SetPathParam("deploymentId", o.DeploymentID); err != nil {
		return err
	}

	if o.Type != nil {

		// query param type
		var qrType string

		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

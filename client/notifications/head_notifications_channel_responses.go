// Code generated by go-swagger; DO NOT EDIT.

package notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// HeadNotificationsChannelReader is a Reader for the HeadNotificationsChannel structure.
type HeadNotificationsChannelReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *HeadNotificationsChannelReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 400:
		result := NewHeadNotificationsChannelBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewHeadNotificationsChannelUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewHeadNotificationsChannelForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewHeadNotificationsChannelNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewHeadNotificationsChannelRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewHeadNotificationsChannelRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewHeadNotificationsChannelUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewHeadNotificationsChannelTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewHeadNotificationsChannelInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewHeadNotificationsChannelServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewHeadNotificationsChannelGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewHeadNotificationsChannelDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewHeadNotificationsChannelBadRequest creates a HeadNotificationsChannelBadRequest with default headers values
func NewHeadNotificationsChannelBadRequest() *HeadNotificationsChannelBadRequest {
	return &HeadNotificationsChannelBadRequest{}
}

/*HeadNotificationsChannelBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type HeadNotificationsChannelBadRequest struct {
	Payload *models.ErrorBody
}

func (o *HeadNotificationsChannelBadRequest) Error() string {
	return fmt.Sprintf("[HEAD /api/v2/notifications/channels/{channelId}][%d] headNotificationsChannelBadRequest  %+v", 400, o.Payload)
}

func (o *HeadNotificationsChannelBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *HeadNotificationsChannelBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHeadNotificationsChannelUnauthorized creates a HeadNotificationsChannelUnauthorized with default headers values
func NewHeadNotificationsChannelUnauthorized() *HeadNotificationsChannelUnauthorized {
	return &HeadNotificationsChannelUnauthorized{}
}

/*HeadNotificationsChannelUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type HeadNotificationsChannelUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *HeadNotificationsChannelUnauthorized) Error() string {
	return fmt.Sprintf("[HEAD /api/v2/notifications/channels/{channelId}][%d] headNotificationsChannelUnauthorized  %+v", 401, o.Payload)
}

func (o *HeadNotificationsChannelUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *HeadNotificationsChannelUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHeadNotificationsChannelForbidden creates a HeadNotificationsChannelForbidden with default headers values
func NewHeadNotificationsChannelForbidden() *HeadNotificationsChannelForbidden {
	return &HeadNotificationsChannelForbidden{}
}

/*HeadNotificationsChannelForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type HeadNotificationsChannelForbidden struct {
	Payload *models.ErrorBody
}

func (o *HeadNotificationsChannelForbidden) Error() string {
	return fmt.Sprintf("[HEAD /api/v2/notifications/channels/{channelId}][%d] headNotificationsChannelForbidden  %+v", 403, o.Payload)
}

func (o *HeadNotificationsChannelForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *HeadNotificationsChannelForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHeadNotificationsChannelNotFound creates a HeadNotificationsChannelNotFound with default headers values
func NewHeadNotificationsChannelNotFound() *HeadNotificationsChannelNotFound {
	return &HeadNotificationsChannelNotFound{}
}

/*HeadNotificationsChannelNotFound handles this case with default header values.

The requested resource was not found.
*/
type HeadNotificationsChannelNotFound struct {
	Payload *models.ErrorBody
}

func (o *HeadNotificationsChannelNotFound) Error() string {
	return fmt.Sprintf("[HEAD /api/v2/notifications/channels/{channelId}][%d] headNotificationsChannelNotFound  %+v", 404, o.Payload)
}

func (o *HeadNotificationsChannelNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *HeadNotificationsChannelNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHeadNotificationsChannelRequestTimeout creates a HeadNotificationsChannelRequestTimeout with default headers values
func NewHeadNotificationsChannelRequestTimeout() *HeadNotificationsChannelRequestTimeout {
	return &HeadNotificationsChannelRequestTimeout{}
}

/*HeadNotificationsChannelRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type HeadNotificationsChannelRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *HeadNotificationsChannelRequestTimeout) Error() string {
	return fmt.Sprintf("[HEAD /api/v2/notifications/channels/{channelId}][%d] headNotificationsChannelRequestTimeout  %+v", 408, o.Payload)
}

func (o *HeadNotificationsChannelRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *HeadNotificationsChannelRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHeadNotificationsChannelRequestEntityTooLarge creates a HeadNotificationsChannelRequestEntityTooLarge with default headers values
func NewHeadNotificationsChannelRequestEntityTooLarge() *HeadNotificationsChannelRequestEntityTooLarge {
	return &HeadNotificationsChannelRequestEntityTooLarge{}
}

/*HeadNotificationsChannelRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type HeadNotificationsChannelRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *HeadNotificationsChannelRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[HEAD /api/v2/notifications/channels/{channelId}][%d] headNotificationsChannelRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *HeadNotificationsChannelRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *HeadNotificationsChannelRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHeadNotificationsChannelUnsupportedMediaType creates a HeadNotificationsChannelUnsupportedMediaType with default headers values
func NewHeadNotificationsChannelUnsupportedMediaType() *HeadNotificationsChannelUnsupportedMediaType {
	return &HeadNotificationsChannelUnsupportedMediaType{}
}

/*HeadNotificationsChannelUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type HeadNotificationsChannelUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *HeadNotificationsChannelUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[HEAD /api/v2/notifications/channels/{channelId}][%d] headNotificationsChannelUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *HeadNotificationsChannelUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *HeadNotificationsChannelUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHeadNotificationsChannelTooManyRequests creates a HeadNotificationsChannelTooManyRequests with default headers values
func NewHeadNotificationsChannelTooManyRequests() *HeadNotificationsChannelTooManyRequests {
	return &HeadNotificationsChannelTooManyRequests{}
}

/*HeadNotificationsChannelTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type HeadNotificationsChannelTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *HeadNotificationsChannelTooManyRequests) Error() string {
	return fmt.Sprintf("[HEAD /api/v2/notifications/channels/{channelId}][%d] headNotificationsChannelTooManyRequests  %+v", 429, o.Payload)
}

func (o *HeadNotificationsChannelTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *HeadNotificationsChannelTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHeadNotificationsChannelInternalServerError creates a HeadNotificationsChannelInternalServerError with default headers values
func NewHeadNotificationsChannelInternalServerError() *HeadNotificationsChannelInternalServerError {
	return &HeadNotificationsChannelInternalServerError{}
}

/*HeadNotificationsChannelInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type HeadNotificationsChannelInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *HeadNotificationsChannelInternalServerError) Error() string {
	return fmt.Sprintf("[HEAD /api/v2/notifications/channels/{channelId}][%d] headNotificationsChannelInternalServerError  %+v", 500, o.Payload)
}

func (o *HeadNotificationsChannelInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *HeadNotificationsChannelInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHeadNotificationsChannelServiceUnavailable creates a HeadNotificationsChannelServiceUnavailable with default headers values
func NewHeadNotificationsChannelServiceUnavailable() *HeadNotificationsChannelServiceUnavailable {
	return &HeadNotificationsChannelServiceUnavailable{}
}

/*HeadNotificationsChannelServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type HeadNotificationsChannelServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *HeadNotificationsChannelServiceUnavailable) Error() string {
	return fmt.Sprintf("[HEAD /api/v2/notifications/channels/{channelId}][%d] headNotificationsChannelServiceUnavailable  %+v", 503, o.Payload)
}

func (o *HeadNotificationsChannelServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *HeadNotificationsChannelServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHeadNotificationsChannelGatewayTimeout creates a HeadNotificationsChannelGatewayTimeout with default headers values
func NewHeadNotificationsChannelGatewayTimeout() *HeadNotificationsChannelGatewayTimeout {
	return &HeadNotificationsChannelGatewayTimeout{}
}

/*HeadNotificationsChannelGatewayTimeout handles this case with default header values.

The request timed out.
*/
type HeadNotificationsChannelGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *HeadNotificationsChannelGatewayTimeout) Error() string {
	return fmt.Sprintf("[HEAD /api/v2/notifications/channels/{channelId}][%d] headNotificationsChannelGatewayTimeout  %+v", 504, o.Payload)
}

func (o *HeadNotificationsChannelGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *HeadNotificationsChannelGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHeadNotificationsChannelDefault creates a HeadNotificationsChannelDefault with default headers values
func NewHeadNotificationsChannelDefault(code int) *HeadNotificationsChannelDefault {
	return &HeadNotificationsChannelDefault{
		_statusCode: code,
	}
}

/*HeadNotificationsChannelDefault handles this case with default header values.

successful operation
*/
type HeadNotificationsChannelDefault struct {
	_statusCode int
}

// Code gets the status code for the head notifications channel default response
func (o *HeadNotificationsChannelDefault) Code() int {
	return o._statusCode
}

func (o *HeadNotificationsChannelDefault) Error() string {
	return fmt.Sprintf("[HEAD /api/v2/notifications/channels/{channelId}][%d] headNotificationsChannel default ", o._statusCode)
}

func (o *HeadNotificationsChannelDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

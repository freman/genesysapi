// Code generated by go-swagger; DO NOT EDIT.

package notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutNotificationsChannelSubscriptionsReader is a Reader for the PutNotificationsChannelSubscriptions structure.
type PutNotificationsChannelSubscriptionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutNotificationsChannelSubscriptionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutNotificationsChannelSubscriptionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutNotificationsChannelSubscriptionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutNotificationsChannelSubscriptionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutNotificationsChannelSubscriptionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutNotificationsChannelSubscriptionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPutNotificationsChannelSubscriptionsRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutNotificationsChannelSubscriptionsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutNotificationsChannelSubscriptionsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutNotificationsChannelSubscriptionsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutNotificationsChannelSubscriptionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutNotificationsChannelSubscriptionsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutNotificationsChannelSubscriptionsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutNotificationsChannelSubscriptionsOK creates a PutNotificationsChannelSubscriptionsOK with default headers values
func NewPutNotificationsChannelSubscriptionsOK() *PutNotificationsChannelSubscriptionsOK {
	return &PutNotificationsChannelSubscriptionsOK{}
}

/*PutNotificationsChannelSubscriptionsOK handles this case with default header values.

successful operation
*/
type PutNotificationsChannelSubscriptionsOK struct {
	Payload *models.ChannelTopicEntityListing
}

func (o *PutNotificationsChannelSubscriptionsOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/notifications/channels/{channelId}/subscriptions][%d] putNotificationsChannelSubscriptionsOK  %+v", 200, o.Payload)
}

func (o *PutNotificationsChannelSubscriptionsOK) GetPayload() *models.ChannelTopicEntityListing {
	return o.Payload
}

func (o *PutNotificationsChannelSubscriptionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ChannelTopicEntityListing)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutNotificationsChannelSubscriptionsBadRequest creates a PutNotificationsChannelSubscriptionsBadRequest with default headers values
func NewPutNotificationsChannelSubscriptionsBadRequest() *PutNotificationsChannelSubscriptionsBadRequest {
	return &PutNotificationsChannelSubscriptionsBadRequest{}
}

/*PutNotificationsChannelSubscriptionsBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutNotificationsChannelSubscriptionsBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PutNotificationsChannelSubscriptionsBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/notifications/channels/{channelId}/subscriptions][%d] putNotificationsChannelSubscriptionsBadRequest  %+v", 400, o.Payload)
}

func (o *PutNotificationsChannelSubscriptionsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutNotificationsChannelSubscriptionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutNotificationsChannelSubscriptionsUnauthorized creates a PutNotificationsChannelSubscriptionsUnauthorized with default headers values
func NewPutNotificationsChannelSubscriptionsUnauthorized() *PutNotificationsChannelSubscriptionsUnauthorized {
	return &PutNotificationsChannelSubscriptionsUnauthorized{}
}

/*PutNotificationsChannelSubscriptionsUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PutNotificationsChannelSubscriptionsUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PutNotificationsChannelSubscriptionsUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/notifications/channels/{channelId}/subscriptions][%d] putNotificationsChannelSubscriptionsUnauthorized  %+v", 401, o.Payload)
}

func (o *PutNotificationsChannelSubscriptionsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutNotificationsChannelSubscriptionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutNotificationsChannelSubscriptionsForbidden creates a PutNotificationsChannelSubscriptionsForbidden with default headers values
func NewPutNotificationsChannelSubscriptionsForbidden() *PutNotificationsChannelSubscriptionsForbidden {
	return &PutNotificationsChannelSubscriptionsForbidden{}
}

/*PutNotificationsChannelSubscriptionsForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PutNotificationsChannelSubscriptionsForbidden struct {
	Payload *models.ErrorBody
}

func (o *PutNotificationsChannelSubscriptionsForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/notifications/channels/{channelId}/subscriptions][%d] putNotificationsChannelSubscriptionsForbidden  %+v", 403, o.Payload)
}

func (o *PutNotificationsChannelSubscriptionsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutNotificationsChannelSubscriptionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutNotificationsChannelSubscriptionsNotFound creates a PutNotificationsChannelSubscriptionsNotFound with default headers values
func NewPutNotificationsChannelSubscriptionsNotFound() *PutNotificationsChannelSubscriptionsNotFound {
	return &PutNotificationsChannelSubscriptionsNotFound{}
}

/*PutNotificationsChannelSubscriptionsNotFound handles this case with default header values.

The requested resource was not found.
*/
type PutNotificationsChannelSubscriptionsNotFound struct {
	Payload *models.ErrorBody
}

func (o *PutNotificationsChannelSubscriptionsNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/notifications/channels/{channelId}/subscriptions][%d] putNotificationsChannelSubscriptionsNotFound  %+v", 404, o.Payload)
}

func (o *PutNotificationsChannelSubscriptionsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutNotificationsChannelSubscriptionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutNotificationsChannelSubscriptionsRequestTimeout creates a PutNotificationsChannelSubscriptionsRequestTimeout with default headers values
func NewPutNotificationsChannelSubscriptionsRequestTimeout() *PutNotificationsChannelSubscriptionsRequestTimeout {
	return &PutNotificationsChannelSubscriptionsRequestTimeout{}
}

/*PutNotificationsChannelSubscriptionsRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PutNotificationsChannelSubscriptionsRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutNotificationsChannelSubscriptionsRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/notifications/channels/{channelId}/subscriptions][%d] putNotificationsChannelSubscriptionsRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutNotificationsChannelSubscriptionsRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutNotificationsChannelSubscriptionsRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutNotificationsChannelSubscriptionsRequestEntityTooLarge creates a PutNotificationsChannelSubscriptionsRequestEntityTooLarge with default headers values
func NewPutNotificationsChannelSubscriptionsRequestEntityTooLarge() *PutNotificationsChannelSubscriptionsRequestEntityTooLarge {
	return &PutNotificationsChannelSubscriptionsRequestEntityTooLarge{}
}

/*PutNotificationsChannelSubscriptionsRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PutNotificationsChannelSubscriptionsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PutNotificationsChannelSubscriptionsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/notifications/channels/{channelId}/subscriptions][%d] putNotificationsChannelSubscriptionsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutNotificationsChannelSubscriptionsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutNotificationsChannelSubscriptionsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutNotificationsChannelSubscriptionsUnsupportedMediaType creates a PutNotificationsChannelSubscriptionsUnsupportedMediaType with default headers values
func NewPutNotificationsChannelSubscriptionsUnsupportedMediaType() *PutNotificationsChannelSubscriptionsUnsupportedMediaType {
	return &PutNotificationsChannelSubscriptionsUnsupportedMediaType{}
}

/*PutNotificationsChannelSubscriptionsUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutNotificationsChannelSubscriptionsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PutNotificationsChannelSubscriptionsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/notifications/channels/{channelId}/subscriptions][%d] putNotificationsChannelSubscriptionsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutNotificationsChannelSubscriptionsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutNotificationsChannelSubscriptionsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutNotificationsChannelSubscriptionsTooManyRequests creates a PutNotificationsChannelSubscriptionsTooManyRequests with default headers values
func NewPutNotificationsChannelSubscriptionsTooManyRequests() *PutNotificationsChannelSubscriptionsTooManyRequests {
	return &PutNotificationsChannelSubscriptionsTooManyRequests{}
}

/*PutNotificationsChannelSubscriptionsTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PutNotificationsChannelSubscriptionsTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PutNotificationsChannelSubscriptionsTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/notifications/channels/{channelId}/subscriptions][%d] putNotificationsChannelSubscriptionsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutNotificationsChannelSubscriptionsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutNotificationsChannelSubscriptionsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutNotificationsChannelSubscriptionsInternalServerError creates a PutNotificationsChannelSubscriptionsInternalServerError with default headers values
func NewPutNotificationsChannelSubscriptionsInternalServerError() *PutNotificationsChannelSubscriptionsInternalServerError {
	return &PutNotificationsChannelSubscriptionsInternalServerError{}
}

/*PutNotificationsChannelSubscriptionsInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutNotificationsChannelSubscriptionsInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PutNotificationsChannelSubscriptionsInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/notifications/channels/{channelId}/subscriptions][%d] putNotificationsChannelSubscriptionsInternalServerError  %+v", 500, o.Payload)
}

func (o *PutNotificationsChannelSubscriptionsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutNotificationsChannelSubscriptionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutNotificationsChannelSubscriptionsServiceUnavailable creates a PutNotificationsChannelSubscriptionsServiceUnavailable with default headers values
func NewPutNotificationsChannelSubscriptionsServiceUnavailable() *PutNotificationsChannelSubscriptionsServiceUnavailable {
	return &PutNotificationsChannelSubscriptionsServiceUnavailable{}
}

/*PutNotificationsChannelSubscriptionsServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutNotificationsChannelSubscriptionsServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PutNotificationsChannelSubscriptionsServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/notifications/channels/{channelId}/subscriptions][%d] putNotificationsChannelSubscriptionsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutNotificationsChannelSubscriptionsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutNotificationsChannelSubscriptionsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutNotificationsChannelSubscriptionsGatewayTimeout creates a PutNotificationsChannelSubscriptionsGatewayTimeout with default headers values
func NewPutNotificationsChannelSubscriptionsGatewayTimeout() *PutNotificationsChannelSubscriptionsGatewayTimeout {
	return &PutNotificationsChannelSubscriptionsGatewayTimeout{}
}

/*PutNotificationsChannelSubscriptionsGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PutNotificationsChannelSubscriptionsGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutNotificationsChannelSubscriptionsGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/notifications/channels/{channelId}/subscriptions][%d] putNotificationsChannelSubscriptionsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutNotificationsChannelSubscriptionsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutNotificationsChannelSubscriptionsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

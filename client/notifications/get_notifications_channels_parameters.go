// Code generated by go-swagger; DO NOT EDIT.

package notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetNotificationsChannelsParams creates a new GetNotificationsChannelsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetNotificationsChannelsParams() *GetNotificationsChannelsParams {
	return &GetNotificationsChannelsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetNotificationsChannelsParamsWithTimeout creates a new GetNotificationsChannelsParams object
// with the ability to set a timeout on a request.
func NewGetNotificationsChannelsParamsWithTimeout(timeout time.Duration) *GetNotificationsChannelsParams {
	return &GetNotificationsChannelsParams{
		timeout: timeout,
	}
}

// NewGetNotificationsChannelsParamsWithContext creates a new GetNotificationsChannelsParams object
// with the ability to set a context for a request.
func NewGetNotificationsChannelsParamsWithContext(ctx context.Context) *GetNotificationsChannelsParams {
	return &GetNotificationsChannelsParams{
		Context: ctx,
	}
}

// NewGetNotificationsChannelsParamsWithHTTPClient creates a new GetNotificationsChannelsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetNotificationsChannelsParamsWithHTTPClient(client *http.Client) *GetNotificationsChannelsParams {
	return &GetNotificationsChannelsParams{
		HTTPClient: client,
	}
}

/*
GetNotificationsChannelsParams contains all the parameters to send to the API endpoint

	for the get notifications channels operation.

	Typically these are written to a http.Request.
*/
type GetNotificationsChannelsParams struct {

	/* Includechannels.

	   Show user's channels for this specific token or across all tokens for this user and app.  Channel Ids for other access tokens will not be shown, but will be presented to show their existence.

	   Default: "token"
	*/
	Includechannels *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get notifications channels params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetNotificationsChannelsParams) WithDefaults() *GetNotificationsChannelsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get notifications channels params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetNotificationsChannelsParams) SetDefaults() {
	var (
		includechannelsDefault = string("token")
	)

	val := GetNotificationsChannelsParams{
		Includechannels: &includechannelsDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get notifications channels params
func (o *GetNotificationsChannelsParams) WithTimeout(timeout time.Duration) *GetNotificationsChannelsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get notifications channels params
func (o *GetNotificationsChannelsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get notifications channels params
func (o *GetNotificationsChannelsParams) WithContext(ctx context.Context) *GetNotificationsChannelsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get notifications channels params
func (o *GetNotificationsChannelsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get notifications channels params
func (o *GetNotificationsChannelsParams) WithHTTPClient(client *http.Client) *GetNotificationsChannelsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get notifications channels params
func (o *GetNotificationsChannelsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIncludechannels adds the includechannels to the get notifications channels params
func (o *GetNotificationsChannelsParams) WithIncludechannels(includechannels *string) *GetNotificationsChannelsParams {
	o.SetIncludechannels(includechannels)
	return o
}

// SetIncludechannels adds the includechannels to the get notifications channels params
func (o *GetNotificationsChannelsParams) SetIncludechannels(includechannels *string) {
	o.Includechannels = includechannels
}

// WriteToRequest writes these params to a swagger request
func (o *GetNotificationsChannelsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Includechannels != nil {

		// query param includechannels
		var qrIncludechannels string

		if o.Includechannels != nil {
			qrIncludechannels = *o.Includechannels
		}
		qIncludechannels := qrIncludechannels
		if qIncludechannels != "" {

			if err := r.SetQueryParam("includechannels", qIncludechannels); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetNotificationsAvailabletopicsParams creates a new GetNotificationsAvailabletopicsParams object
// with the default values initialized.
func NewGetNotificationsAvailabletopicsParams() *GetNotificationsAvailabletopicsParams {
	var (
		includePreviewDefault = bool(true)
	)
	return &GetNotificationsAvailabletopicsParams{
		IncludePreview: &includePreviewDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetNotificationsAvailabletopicsParamsWithTimeout creates a new GetNotificationsAvailabletopicsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetNotificationsAvailabletopicsParamsWithTimeout(timeout time.Duration) *GetNotificationsAvailabletopicsParams {
	var (
		includePreviewDefault = bool(true)
	)
	return &GetNotificationsAvailabletopicsParams{
		IncludePreview: &includePreviewDefault,

		timeout: timeout,
	}
}

// NewGetNotificationsAvailabletopicsParamsWithContext creates a new GetNotificationsAvailabletopicsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetNotificationsAvailabletopicsParamsWithContext(ctx context.Context) *GetNotificationsAvailabletopicsParams {
	var (
		includePreviewDefault = bool(true)
	)
	return &GetNotificationsAvailabletopicsParams{
		IncludePreview: &includePreviewDefault,

		Context: ctx,
	}
}

// NewGetNotificationsAvailabletopicsParamsWithHTTPClient creates a new GetNotificationsAvailabletopicsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetNotificationsAvailabletopicsParamsWithHTTPClient(client *http.Client) *GetNotificationsAvailabletopicsParams {
	var (
		includePreviewDefault = bool(true)
	)
	return &GetNotificationsAvailabletopicsParams{
		IncludePreview: &includePreviewDefault,
		HTTPClient:     client,
	}
}

/*GetNotificationsAvailabletopicsParams contains all the parameters to send to the API endpoint
for the get notifications availabletopics operation typically these are written to a http.Request
*/
type GetNotificationsAvailabletopicsParams struct {

	/*Expand
	  Which fields, if any, to expand

	*/
	Expand []string
	/*IncludePreview
	  Whether or not to include Preview topics

	*/
	IncludePreview *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get notifications availabletopics params
func (o *GetNotificationsAvailabletopicsParams) WithTimeout(timeout time.Duration) *GetNotificationsAvailabletopicsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get notifications availabletopics params
func (o *GetNotificationsAvailabletopicsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get notifications availabletopics params
func (o *GetNotificationsAvailabletopicsParams) WithContext(ctx context.Context) *GetNotificationsAvailabletopicsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get notifications availabletopics params
func (o *GetNotificationsAvailabletopicsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get notifications availabletopics params
func (o *GetNotificationsAvailabletopicsParams) WithHTTPClient(client *http.Client) *GetNotificationsAvailabletopicsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get notifications availabletopics params
func (o *GetNotificationsAvailabletopicsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithExpand adds the expand to the get notifications availabletopics params
func (o *GetNotificationsAvailabletopicsParams) WithExpand(expand []string) *GetNotificationsAvailabletopicsParams {
	o.SetExpand(expand)
	return o
}

// SetExpand adds the expand to the get notifications availabletopics params
func (o *GetNotificationsAvailabletopicsParams) SetExpand(expand []string) {
	o.Expand = expand
}

// WithIncludePreview adds the includePreview to the get notifications availabletopics params
func (o *GetNotificationsAvailabletopicsParams) WithIncludePreview(includePreview *bool) *GetNotificationsAvailabletopicsParams {
	o.SetIncludePreview(includePreview)
	return o
}

// SetIncludePreview adds the includePreview to the get notifications availabletopics params
func (o *GetNotificationsAvailabletopicsParams) SetIncludePreview(includePreview *bool) {
	o.IncludePreview = includePreview
}

// WriteToRequest writes these params to a swagger request
func (o *GetNotificationsAvailabletopicsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesExpand := o.Expand

	joinedExpand := swag.JoinByFormat(valuesExpand, "multi")
	// query array param expand
	if err := r.SetQueryParam("expand", joinedExpand...); err != nil {
		return err
	}

	if o.IncludePreview != nil {

		// query param includePreview
		var qrIncludePreview bool
		if o.IncludePreview != nil {
			qrIncludePreview = *o.IncludePreview
		}
		qIncludePreview := swag.FormatBool(qrIncludePreview)
		if qIncludePreview != "" {
			if err := r.SetQueryParam("includePreview", qIncludePreview); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package messaging

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetMessagingSupportedcontentReader is a Reader for the GetMessagingSupportedcontent structure.
type GetMessagingSupportedcontentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetMessagingSupportedcontentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetMessagingSupportedcontentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetMessagingSupportedcontentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetMessagingSupportedcontentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetMessagingSupportedcontentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetMessagingSupportedcontentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetMessagingSupportedcontentRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetMessagingSupportedcontentRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetMessagingSupportedcontentUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetMessagingSupportedcontentTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetMessagingSupportedcontentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetMessagingSupportedcontentServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetMessagingSupportedcontentGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetMessagingSupportedcontentOK creates a GetMessagingSupportedcontentOK with default headers values
func NewGetMessagingSupportedcontentOK() *GetMessagingSupportedcontentOK {
	return &GetMessagingSupportedcontentOK{}
}

/*
GetMessagingSupportedcontentOK describes a response with status code 200, with default header values.

successful operation
*/
type GetMessagingSupportedcontentOK struct {
	Payload *models.SupportedContentListing
}

// IsSuccess returns true when this get messaging supportedcontent o k response has a 2xx status code
func (o *GetMessagingSupportedcontentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get messaging supportedcontent o k response has a 3xx status code
func (o *GetMessagingSupportedcontentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get messaging supportedcontent o k response has a 4xx status code
func (o *GetMessagingSupportedcontentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get messaging supportedcontent o k response has a 5xx status code
func (o *GetMessagingSupportedcontentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get messaging supportedcontent o k response a status code equal to that given
func (o *GetMessagingSupportedcontentOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetMessagingSupportedcontentOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/messaging/supportedcontent][%d] getMessagingSupportedcontentOK  %+v", 200, o.Payload)
}

func (o *GetMessagingSupportedcontentOK) String() string {
	return fmt.Sprintf("[GET /api/v2/messaging/supportedcontent][%d] getMessagingSupportedcontentOK  %+v", 200, o.Payload)
}

func (o *GetMessagingSupportedcontentOK) GetPayload() *models.SupportedContentListing {
	return o.Payload
}

func (o *GetMessagingSupportedcontentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SupportedContentListing)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMessagingSupportedcontentBadRequest creates a GetMessagingSupportedcontentBadRequest with default headers values
func NewGetMessagingSupportedcontentBadRequest() *GetMessagingSupportedcontentBadRequest {
	return &GetMessagingSupportedcontentBadRequest{}
}

/*
GetMessagingSupportedcontentBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetMessagingSupportedcontentBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get messaging supportedcontent bad request response has a 2xx status code
func (o *GetMessagingSupportedcontentBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get messaging supportedcontent bad request response has a 3xx status code
func (o *GetMessagingSupportedcontentBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get messaging supportedcontent bad request response has a 4xx status code
func (o *GetMessagingSupportedcontentBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get messaging supportedcontent bad request response has a 5xx status code
func (o *GetMessagingSupportedcontentBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get messaging supportedcontent bad request response a status code equal to that given
func (o *GetMessagingSupportedcontentBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetMessagingSupportedcontentBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/messaging/supportedcontent][%d] getMessagingSupportedcontentBadRequest  %+v", 400, o.Payload)
}

func (o *GetMessagingSupportedcontentBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/messaging/supportedcontent][%d] getMessagingSupportedcontentBadRequest  %+v", 400, o.Payload)
}

func (o *GetMessagingSupportedcontentBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetMessagingSupportedcontentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMessagingSupportedcontentUnauthorized creates a GetMessagingSupportedcontentUnauthorized with default headers values
func NewGetMessagingSupportedcontentUnauthorized() *GetMessagingSupportedcontentUnauthorized {
	return &GetMessagingSupportedcontentUnauthorized{}
}

/*
GetMessagingSupportedcontentUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetMessagingSupportedcontentUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get messaging supportedcontent unauthorized response has a 2xx status code
func (o *GetMessagingSupportedcontentUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get messaging supportedcontent unauthorized response has a 3xx status code
func (o *GetMessagingSupportedcontentUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get messaging supportedcontent unauthorized response has a 4xx status code
func (o *GetMessagingSupportedcontentUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get messaging supportedcontent unauthorized response has a 5xx status code
func (o *GetMessagingSupportedcontentUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get messaging supportedcontent unauthorized response a status code equal to that given
func (o *GetMessagingSupportedcontentUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetMessagingSupportedcontentUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/messaging/supportedcontent][%d] getMessagingSupportedcontentUnauthorized  %+v", 401, o.Payload)
}

func (o *GetMessagingSupportedcontentUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/messaging/supportedcontent][%d] getMessagingSupportedcontentUnauthorized  %+v", 401, o.Payload)
}

func (o *GetMessagingSupportedcontentUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetMessagingSupportedcontentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMessagingSupportedcontentForbidden creates a GetMessagingSupportedcontentForbidden with default headers values
func NewGetMessagingSupportedcontentForbidden() *GetMessagingSupportedcontentForbidden {
	return &GetMessagingSupportedcontentForbidden{}
}

/*
GetMessagingSupportedcontentForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetMessagingSupportedcontentForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get messaging supportedcontent forbidden response has a 2xx status code
func (o *GetMessagingSupportedcontentForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get messaging supportedcontent forbidden response has a 3xx status code
func (o *GetMessagingSupportedcontentForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get messaging supportedcontent forbidden response has a 4xx status code
func (o *GetMessagingSupportedcontentForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get messaging supportedcontent forbidden response has a 5xx status code
func (o *GetMessagingSupportedcontentForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get messaging supportedcontent forbidden response a status code equal to that given
func (o *GetMessagingSupportedcontentForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetMessagingSupportedcontentForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/messaging/supportedcontent][%d] getMessagingSupportedcontentForbidden  %+v", 403, o.Payload)
}

func (o *GetMessagingSupportedcontentForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/messaging/supportedcontent][%d] getMessagingSupportedcontentForbidden  %+v", 403, o.Payload)
}

func (o *GetMessagingSupportedcontentForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetMessagingSupportedcontentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMessagingSupportedcontentNotFound creates a GetMessagingSupportedcontentNotFound with default headers values
func NewGetMessagingSupportedcontentNotFound() *GetMessagingSupportedcontentNotFound {
	return &GetMessagingSupportedcontentNotFound{}
}

/*
GetMessagingSupportedcontentNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetMessagingSupportedcontentNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get messaging supportedcontent not found response has a 2xx status code
func (o *GetMessagingSupportedcontentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get messaging supportedcontent not found response has a 3xx status code
func (o *GetMessagingSupportedcontentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get messaging supportedcontent not found response has a 4xx status code
func (o *GetMessagingSupportedcontentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get messaging supportedcontent not found response has a 5xx status code
func (o *GetMessagingSupportedcontentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get messaging supportedcontent not found response a status code equal to that given
func (o *GetMessagingSupportedcontentNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetMessagingSupportedcontentNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/messaging/supportedcontent][%d] getMessagingSupportedcontentNotFound  %+v", 404, o.Payload)
}

func (o *GetMessagingSupportedcontentNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/messaging/supportedcontent][%d] getMessagingSupportedcontentNotFound  %+v", 404, o.Payload)
}

func (o *GetMessagingSupportedcontentNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetMessagingSupportedcontentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMessagingSupportedcontentRequestTimeout creates a GetMessagingSupportedcontentRequestTimeout with default headers values
func NewGetMessagingSupportedcontentRequestTimeout() *GetMessagingSupportedcontentRequestTimeout {
	return &GetMessagingSupportedcontentRequestTimeout{}
}

/*
GetMessagingSupportedcontentRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetMessagingSupportedcontentRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get messaging supportedcontent request timeout response has a 2xx status code
func (o *GetMessagingSupportedcontentRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get messaging supportedcontent request timeout response has a 3xx status code
func (o *GetMessagingSupportedcontentRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get messaging supportedcontent request timeout response has a 4xx status code
func (o *GetMessagingSupportedcontentRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get messaging supportedcontent request timeout response has a 5xx status code
func (o *GetMessagingSupportedcontentRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get messaging supportedcontent request timeout response a status code equal to that given
func (o *GetMessagingSupportedcontentRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetMessagingSupportedcontentRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/messaging/supportedcontent][%d] getMessagingSupportedcontentRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetMessagingSupportedcontentRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/messaging/supportedcontent][%d] getMessagingSupportedcontentRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetMessagingSupportedcontentRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetMessagingSupportedcontentRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMessagingSupportedcontentRequestEntityTooLarge creates a GetMessagingSupportedcontentRequestEntityTooLarge with default headers values
func NewGetMessagingSupportedcontentRequestEntityTooLarge() *GetMessagingSupportedcontentRequestEntityTooLarge {
	return &GetMessagingSupportedcontentRequestEntityTooLarge{}
}

/*
GetMessagingSupportedcontentRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type GetMessagingSupportedcontentRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get messaging supportedcontent request entity too large response has a 2xx status code
func (o *GetMessagingSupportedcontentRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get messaging supportedcontent request entity too large response has a 3xx status code
func (o *GetMessagingSupportedcontentRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get messaging supportedcontent request entity too large response has a 4xx status code
func (o *GetMessagingSupportedcontentRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get messaging supportedcontent request entity too large response has a 5xx status code
func (o *GetMessagingSupportedcontentRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get messaging supportedcontent request entity too large response a status code equal to that given
func (o *GetMessagingSupportedcontentRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetMessagingSupportedcontentRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/messaging/supportedcontent][%d] getMessagingSupportedcontentRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetMessagingSupportedcontentRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/messaging/supportedcontent][%d] getMessagingSupportedcontentRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetMessagingSupportedcontentRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetMessagingSupportedcontentRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMessagingSupportedcontentUnsupportedMediaType creates a GetMessagingSupportedcontentUnsupportedMediaType with default headers values
func NewGetMessagingSupportedcontentUnsupportedMediaType() *GetMessagingSupportedcontentUnsupportedMediaType {
	return &GetMessagingSupportedcontentUnsupportedMediaType{}
}

/*
GetMessagingSupportedcontentUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetMessagingSupportedcontentUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get messaging supportedcontent unsupported media type response has a 2xx status code
func (o *GetMessagingSupportedcontentUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get messaging supportedcontent unsupported media type response has a 3xx status code
func (o *GetMessagingSupportedcontentUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get messaging supportedcontent unsupported media type response has a 4xx status code
func (o *GetMessagingSupportedcontentUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get messaging supportedcontent unsupported media type response has a 5xx status code
func (o *GetMessagingSupportedcontentUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get messaging supportedcontent unsupported media type response a status code equal to that given
func (o *GetMessagingSupportedcontentUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetMessagingSupportedcontentUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/messaging/supportedcontent][%d] getMessagingSupportedcontentUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetMessagingSupportedcontentUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/messaging/supportedcontent][%d] getMessagingSupportedcontentUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetMessagingSupportedcontentUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetMessagingSupportedcontentUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMessagingSupportedcontentTooManyRequests creates a GetMessagingSupportedcontentTooManyRequests with default headers values
func NewGetMessagingSupportedcontentTooManyRequests() *GetMessagingSupportedcontentTooManyRequests {
	return &GetMessagingSupportedcontentTooManyRequests{}
}

/*
GetMessagingSupportedcontentTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetMessagingSupportedcontentTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get messaging supportedcontent too many requests response has a 2xx status code
func (o *GetMessagingSupportedcontentTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get messaging supportedcontent too many requests response has a 3xx status code
func (o *GetMessagingSupportedcontentTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get messaging supportedcontent too many requests response has a 4xx status code
func (o *GetMessagingSupportedcontentTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get messaging supportedcontent too many requests response has a 5xx status code
func (o *GetMessagingSupportedcontentTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get messaging supportedcontent too many requests response a status code equal to that given
func (o *GetMessagingSupportedcontentTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetMessagingSupportedcontentTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/messaging/supportedcontent][%d] getMessagingSupportedcontentTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetMessagingSupportedcontentTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/messaging/supportedcontent][%d] getMessagingSupportedcontentTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetMessagingSupportedcontentTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetMessagingSupportedcontentTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMessagingSupportedcontentInternalServerError creates a GetMessagingSupportedcontentInternalServerError with default headers values
func NewGetMessagingSupportedcontentInternalServerError() *GetMessagingSupportedcontentInternalServerError {
	return &GetMessagingSupportedcontentInternalServerError{}
}

/*
GetMessagingSupportedcontentInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetMessagingSupportedcontentInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get messaging supportedcontent internal server error response has a 2xx status code
func (o *GetMessagingSupportedcontentInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get messaging supportedcontent internal server error response has a 3xx status code
func (o *GetMessagingSupportedcontentInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get messaging supportedcontent internal server error response has a 4xx status code
func (o *GetMessagingSupportedcontentInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get messaging supportedcontent internal server error response has a 5xx status code
func (o *GetMessagingSupportedcontentInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get messaging supportedcontent internal server error response a status code equal to that given
func (o *GetMessagingSupportedcontentInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetMessagingSupportedcontentInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/messaging/supportedcontent][%d] getMessagingSupportedcontentInternalServerError  %+v", 500, o.Payload)
}

func (o *GetMessagingSupportedcontentInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/messaging/supportedcontent][%d] getMessagingSupportedcontentInternalServerError  %+v", 500, o.Payload)
}

func (o *GetMessagingSupportedcontentInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetMessagingSupportedcontentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMessagingSupportedcontentServiceUnavailable creates a GetMessagingSupportedcontentServiceUnavailable with default headers values
func NewGetMessagingSupportedcontentServiceUnavailable() *GetMessagingSupportedcontentServiceUnavailable {
	return &GetMessagingSupportedcontentServiceUnavailable{}
}

/*
GetMessagingSupportedcontentServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetMessagingSupportedcontentServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get messaging supportedcontent service unavailable response has a 2xx status code
func (o *GetMessagingSupportedcontentServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get messaging supportedcontent service unavailable response has a 3xx status code
func (o *GetMessagingSupportedcontentServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get messaging supportedcontent service unavailable response has a 4xx status code
func (o *GetMessagingSupportedcontentServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get messaging supportedcontent service unavailable response has a 5xx status code
func (o *GetMessagingSupportedcontentServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get messaging supportedcontent service unavailable response a status code equal to that given
func (o *GetMessagingSupportedcontentServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetMessagingSupportedcontentServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/messaging/supportedcontent][%d] getMessagingSupportedcontentServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetMessagingSupportedcontentServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/messaging/supportedcontent][%d] getMessagingSupportedcontentServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetMessagingSupportedcontentServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetMessagingSupportedcontentServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMessagingSupportedcontentGatewayTimeout creates a GetMessagingSupportedcontentGatewayTimeout with default headers values
func NewGetMessagingSupportedcontentGatewayTimeout() *GetMessagingSupportedcontentGatewayTimeout {
	return &GetMessagingSupportedcontentGatewayTimeout{}
}

/*
GetMessagingSupportedcontentGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetMessagingSupportedcontentGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get messaging supportedcontent gateway timeout response has a 2xx status code
func (o *GetMessagingSupportedcontentGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get messaging supportedcontent gateway timeout response has a 3xx status code
func (o *GetMessagingSupportedcontentGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get messaging supportedcontent gateway timeout response has a 4xx status code
func (o *GetMessagingSupportedcontentGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get messaging supportedcontent gateway timeout response has a 5xx status code
func (o *GetMessagingSupportedcontentGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get messaging supportedcontent gateway timeout response a status code equal to that given
func (o *GetMessagingSupportedcontentGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetMessagingSupportedcontentGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/messaging/supportedcontent][%d] getMessagingSupportedcontentGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetMessagingSupportedcontentGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/messaging/supportedcontent][%d] getMessagingSupportedcontentGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetMessagingSupportedcontentGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetMessagingSupportedcontentGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

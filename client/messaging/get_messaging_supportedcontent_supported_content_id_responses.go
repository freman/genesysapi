// Code generated by go-swagger; DO NOT EDIT.

package messaging

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetMessagingSupportedcontentSupportedContentIDReader is a Reader for the GetMessagingSupportedcontentSupportedContentID structure.
type GetMessagingSupportedcontentSupportedContentIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetMessagingSupportedcontentSupportedContentIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetMessagingSupportedcontentSupportedContentIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetMessagingSupportedcontentSupportedContentIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetMessagingSupportedcontentSupportedContentIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetMessagingSupportedcontentSupportedContentIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetMessagingSupportedcontentSupportedContentIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetMessagingSupportedcontentSupportedContentIDRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetMessagingSupportedcontentSupportedContentIDUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetMessagingSupportedcontentSupportedContentIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetMessagingSupportedcontentSupportedContentIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetMessagingSupportedcontentSupportedContentIDServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetMessagingSupportedcontentSupportedContentIDGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetMessagingSupportedcontentSupportedContentIDOK creates a GetMessagingSupportedcontentSupportedContentIDOK with default headers values
func NewGetMessagingSupportedcontentSupportedContentIDOK() *GetMessagingSupportedcontentSupportedContentIDOK {
	return &GetMessagingSupportedcontentSupportedContentIDOK{}
}

/*GetMessagingSupportedcontentSupportedContentIDOK handles this case with default header values.

successful operation
*/
type GetMessagingSupportedcontentSupportedContentIDOK struct {
	Payload *models.SupportedContent
}

func (o *GetMessagingSupportedcontentSupportedContentIDOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/messaging/supportedcontent/{supportedContentId}][%d] getMessagingSupportedcontentSupportedContentIdOK  %+v", 200, o.Payload)
}

func (o *GetMessagingSupportedcontentSupportedContentIDOK) GetPayload() *models.SupportedContent {
	return o.Payload
}

func (o *GetMessagingSupportedcontentSupportedContentIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SupportedContent)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMessagingSupportedcontentSupportedContentIDBadRequest creates a GetMessagingSupportedcontentSupportedContentIDBadRequest with default headers values
func NewGetMessagingSupportedcontentSupportedContentIDBadRequest() *GetMessagingSupportedcontentSupportedContentIDBadRequest {
	return &GetMessagingSupportedcontentSupportedContentIDBadRequest{}
}

/*GetMessagingSupportedcontentSupportedContentIDBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetMessagingSupportedcontentSupportedContentIDBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetMessagingSupportedcontentSupportedContentIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/messaging/supportedcontent/{supportedContentId}][%d] getMessagingSupportedcontentSupportedContentIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetMessagingSupportedcontentSupportedContentIDBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetMessagingSupportedcontentSupportedContentIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMessagingSupportedcontentSupportedContentIDUnauthorized creates a GetMessagingSupportedcontentSupportedContentIDUnauthorized with default headers values
func NewGetMessagingSupportedcontentSupportedContentIDUnauthorized() *GetMessagingSupportedcontentSupportedContentIDUnauthorized {
	return &GetMessagingSupportedcontentSupportedContentIDUnauthorized{}
}

/*GetMessagingSupportedcontentSupportedContentIDUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetMessagingSupportedcontentSupportedContentIDUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetMessagingSupportedcontentSupportedContentIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/messaging/supportedcontent/{supportedContentId}][%d] getMessagingSupportedcontentSupportedContentIdUnauthorized  %+v", 401, o.Payload)
}

func (o *GetMessagingSupportedcontentSupportedContentIDUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetMessagingSupportedcontentSupportedContentIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMessagingSupportedcontentSupportedContentIDForbidden creates a GetMessagingSupportedcontentSupportedContentIDForbidden with default headers values
func NewGetMessagingSupportedcontentSupportedContentIDForbidden() *GetMessagingSupportedcontentSupportedContentIDForbidden {
	return &GetMessagingSupportedcontentSupportedContentIDForbidden{}
}

/*GetMessagingSupportedcontentSupportedContentIDForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetMessagingSupportedcontentSupportedContentIDForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetMessagingSupportedcontentSupportedContentIDForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/messaging/supportedcontent/{supportedContentId}][%d] getMessagingSupportedcontentSupportedContentIdForbidden  %+v", 403, o.Payload)
}

func (o *GetMessagingSupportedcontentSupportedContentIDForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetMessagingSupportedcontentSupportedContentIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMessagingSupportedcontentSupportedContentIDNotFound creates a GetMessagingSupportedcontentSupportedContentIDNotFound with default headers values
func NewGetMessagingSupportedcontentSupportedContentIDNotFound() *GetMessagingSupportedcontentSupportedContentIDNotFound {
	return &GetMessagingSupportedcontentSupportedContentIDNotFound{}
}

/*GetMessagingSupportedcontentSupportedContentIDNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetMessagingSupportedcontentSupportedContentIDNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetMessagingSupportedcontentSupportedContentIDNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/messaging/supportedcontent/{supportedContentId}][%d] getMessagingSupportedcontentSupportedContentIdNotFound  %+v", 404, o.Payload)
}

func (o *GetMessagingSupportedcontentSupportedContentIDNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetMessagingSupportedcontentSupportedContentIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMessagingSupportedcontentSupportedContentIDRequestTimeout creates a GetMessagingSupportedcontentSupportedContentIDRequestTimeout with default headers values
func NewGetMessagingSupportedcontentSupportedContentIDRequestTimeout() *GetMessagingSupportedcontentSupportedContentIDRequestTimeout {
	return &GetMessagingSupportedcontentSupportedContentIDRequestTimeout{}
}

/*GetMessagingSupportedcontentSupportedContentIDRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetMessagingSupportedcontentSupportedContentIDRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetMessagingSupportedcontentSupportedContentIDRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/messaging/supportedcontent/{supportedContentId}][%d] getMessagingSupportedcontentSupportedContentIdRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetMessagingSupportedcontentSupportedContentIDRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetMessagingSupportedcontentSupportedContentIDRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge creates a GetMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge with default headers values
func NewGetMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge() *GetMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge {
	return &GetMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge{}
}

/*GetMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/messaging/supportedcontent/{supportedContentId}][%d] getMessagingSupportedcontentSupportedContentIdRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetMessagingSupportedcontentSupportedContentIDRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMessagingSupportedcontentSupportedContentIDUnsupportedMediaType creates a GetMessagingSupportedcontentSupportedContentIDUnsupportedMediaType with default headers values
func NewGetMessagingSupportedcontentSupportedContentIDUnsupportedMediaType() *GetMessagingSupportedcontentSupportedContentIDUnsupportedMediaType {
	return &GetMessagingSupportedcontentSupportedContentIDUnsupportedMediaType{}
}

/*GetMessagingSupportedcontentSupportedContentIDUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetMessagingSupportedcontentSupportedContentIDUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetMessagingSupportedcontentSupportedContentIDUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/messaging/supportedcontent/{supportedContentId}][%d] getMessagingSupportedcontentSupportedContentIdUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetMessagingSupportedcontentSupportedContentIDUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetMessagingSupportedcontentSupportedContentIDUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMessagingSupportedcontentSupportedContentIDTooManyRequests creates a GetMessagingSupportedcontentSupportedContentIDTooManyRequests with default headers values
func NewGetMessagingSupportedcontentSupportedContentIDTooManyRequests() *GetMessagingSupportedcontentSupportedContentIDTooManyRequests {
	return &GetMessagingSupportedcontentSupportedContentIDTooManyRequests{}
}

/*GetMessagingSupportedcontentSupportedContentIDTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetMessagingSupportedcontentSupportedContentIDTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetMessagingSupportedcontentSupportedContentIDTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/messaging/supportedcontent/{supportedContentId}][%d] getMessagingSupportedcontentSupportedContentIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetMessagingSupportedcontentSupportedContentIDTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetMessagingSupportedcontentSupportedContentIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMessagingSupportedcontentSupportedContentIDInternalServerError creates a GetMessagingSupportedcontentSupportedContentIDInternalServerError with default headers values
func NewGetMessagingSupportedcontentSupportedContentIDInternalServerError() *GetMessagingSupportedcontentSupportedContentIDInternalServerError {
	return &GetMessagingSupportedcontentSupportedContentIDInternalServerError{}
}

/*GetMessagingSupportedcontentSupportedContentIDInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetMessagingSupportedcontentSupportedContentIDInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetMessagingSupportedcontentSupportedContentIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/messaging/supportedcontent/{supportedContentId}][%d] getMessagingSupportedcontentSupportedContentIdInternalServerError  %+v", 500, o.Payload)
}

func (o *GetMessagingSupportedcontentSupportedContentIDInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetMessagingSupportedcontentSupportedContentIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMessagingSupportedcontentSupportedContentIDServiceUnavailable creates a GetMessagingSupportedcontentSupportedContentIDServiceUnavailable with default headers values
func NewGetMessagingSupportedcontentSupportedContentIDServiceUnavailable() *GetMessagingSupportedcontentSupportedContentIDServiceUnavailable {
	return &GetMessagingSupportedcontentSupportedContentIDServiceUnavailable{}
}

/*GetMessagingSupportedcontentSupportedContentIDServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetMessagingSupportedcontentSupportedContentIDServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetMessagingSupportedcontentSupportedContentIDServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/messaging/supportedcontent/{supportedContentId}][%d] getMessagingSupportedcontentSupportedContentIdServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetMessagingSupportedcontentSupportedContentIDServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetMessagingSupportedcontentSupportedContentIDServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMessagingSupportedcontentSupportedContentIDGatewayTimeout creates a GetMessagingSupportedcontentSupportedContentIDGatewayTimeout with default headers values
func NewGetMessagingSupportedcontentSupportedContentIDGatewayTimeout() *GetMessagingSupportedcontentSupportedContentIDGatewayTimeout {
	return &GetMessagingSupportedcontentSupportedContentIDGatewayTimeout{}
}

/*GetMessagingSupportedcontentSupportedContentIDGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetMessagingSupportedcontentSupportedContentIDGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetMessagingSupportedcontentSupportedContentIDGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/messaging/supportedcontent/{supportedContentId}][%d] getMessagingSupportedcontentSupportedContentIdGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetMessagingSupportedcontentSupportedContentIDGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetMessagingSupportedcontentSupportedContentIDGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

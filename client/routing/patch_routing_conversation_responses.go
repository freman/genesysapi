// Code generated by go-swagger; DO NOT EDIT.

package routing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchRoutingConversationReader is a Reader for the PatchRoutingConversation structure.
type PatchRoutingConversationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchRoutingConversationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchRoutingConversationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchRoutingConversationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchRoutingConversationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchRoutingConversationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchRoutingConversationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchRoutingConversationRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchRoutingConversationRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchRoutingConversationUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchRoutingConversationTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchRoutingConversationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchRoutingConversationServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchRoutingConversationGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchRoutingConversationOK creates a PatchRoutingConversationOK with default headers values
func NewPatchRoutingConversationOK() *PatchRoutingConversationOK {
	return &PatchRoutingConversationOK{}
}

/*PatchRoutingConversationOK handles this case with default header values.

successful operation
*/
type PatchRoutingConversationOK struct {
	Payload *models.RoutingConversationAttributesResponse
}

func (o *PatchRoutingConversationOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/conversations/{conversationId}][%d] patchRoutingConversationOK  %+v", 200, o.Payload)
}

func (o *PatchRoutingConversationOK) GetPayload() *models.RoutingConversationAttributesResponse {
	return o.Payload
}

func (o *PatchRoutingConversationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RoutingConversationAttributesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingConversationBadRequest creates a PatchRoutingConversationBadRequest with default headers values
func NewPatchRoutingConversationBadRequest() *PatchRoutingConversationBadRequest {
	return &PatchRoutingConversationBadRequest{}
}

/*PatchRoutingConversationBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchRoutingConversationBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PatchRoutingConversationBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/conversations/{conversationId}][%d] patchRoutingConversationBadRequest  %+v", 400, o.Payload)
}

func (o *PatchRoutingConversationBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingConversationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingConversationUnauthorized creates a PatchRoutingConversationUnauthorized with default headers values
func NewPatchRoutingConversationUnauthorized() *PatchRoutingConversationUnauthorized {
	return &PatchRoutingConversationUnauthorized{}
}

/*PatchRoutingConversationUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchRoutingConversationUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PatchRoutingConversationUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/conversations/{conversationId}][%d] patchRoutingConversationUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchRoutingConversationUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingConversationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingConversationForbidden creates a PatchRoutingConversationForbidden with default headers values
func NewPatchRoutingConversationForbidden() *PatchRoutingConversationForbidden {
	return &PatchRoutingConversationForbidden{}
}

/*PatchRoutingConversationForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PatchRoutingConversationForbidden struct {
	Payload *models.ErrorBody
}

func (o *PatchRoutingConversationForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/conversations/{conversationId}][%d] patchRoutingConversationForbidden  %+v", 403, o.Payload)
}

func (o *PatchRoutingConversationForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingConversationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingConversationNotFound creates a PatchRoutingConversationNotFound with default headers values
func NewPatchRoutingConversationNotFound() *PatchRoutingConversationNotFound {
	return &PatchRoutingConversationNotFound{}
}

/*PatchRoutingConversationNotFound handles this case with default header values.

The requested resource was not found.
*/
type PatchRoutingConversationNotFound struct {
	Payload *models.ErrorBody
}

func (o *PatchRoutingConversationNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/conversations/{conversationId}][%d] patchRoutingConversationNotFound  %+v", 404, o.Payload)
}

func (o *PatchRoutingConversationNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingConversationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingConversationRequestTimeout creates a PatchRoutingConversationRequestTimeout with default headers values
func NewPatchRoutingConversationRequestTimeout() *PatchRoutingConversationRequestTimeout {
	return &PatchRoutingConversationRequestTimeout{}
}

/*PatchRoutingConversationRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchRoutingConversationRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PatchRoutingConversationRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/conversations/{conversationId}][%d] patchRoutingConversationRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchRoutingConversationRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingConversationRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingConversationRequestEntityTooLarge creates a PatchRoutingConversationRequestEntityTooLarge with default headers values
func NewPatchRoutingConversationRequestEntityTooLarge() *PatchRoutingConversationRequestEntityTooLarge {
	return &PatchRoutingConversationRequestEntityTooLarge{}
}

/*PatchRoutingConversationRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type PatchRoutingConversationRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PatchRoutingConversationRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/conversations/{conversationId}][%d] patchRoutingConversationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchRoutingConversationRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingConversationRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingConversationUnsupportedMediaType creates a PatchRoutingConversationUnsupportedMediaType with default headers values
func NewPatchRoutingConversationUnsupportedMediaType() *PatchRoutingConversationUnsupportedMediaType {
	return &PatchRoutingConversationUnsupportedMediaType{}
}

/*PatchRoutingConversationUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchRoutingConversationUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PatchRoutingConversationUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/conversations/{conversationId}][%d] patchRoutingConversationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchRoutingConversationUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingConversationUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingConversationTooManyRequests creates a PatchRoutingConversationTooManyRequests with default headers values
func NewPatchRoutingConversationTooManyRequests() *PatchRoutingConversationTooManyRequests {
	return &PatchRoutingConversationTooManyRequests{}
}

/*PatchRoutingConversationTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchRoutingConversationTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PatchRoutingConversationTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/conversations/{conversationId}][%d] patchRoutingConversationTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchRoutingConversationTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingConversationTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingConversationInternalServerError creates a PatchRoutingConversationInternalServerError with default headers values
func NewPatchRoutingConversationInternalServerError() *PatchRoutingConversationInternalServerError {
	return &PatchRoutingConversationInternalServerError{}
}

/*PatchRoutingConversationInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchRoutingConversationInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PatchRoutingConversationInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/conversations/{conversationId}][%d] patchRoutingConversationInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchRoutingConversationInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingConversationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingConversationServiceUnavailable creates a PatchRoutingConversationServiceUnavailable with default headers values
func NewPatchRoutingConversationServiceUnavailable() *PatchRoutingConversationServiceUnavailable {
	return &PatchRoutingConversationServiceUnavailable{}
}

/*PatchRoutingConversationServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchRoutingConversationServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PatchRoutingConversationServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/conversations/{conversationId}][%d] patchRoutingConversationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchRoutingConversationServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingConversationServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingConversationGatewayTimeout creates a PatchRoutingConversationGatewayTimeout with default headers values
func NewPatchRoutingConversationGatewayTimeout() *PatchRoutingConversationGatewayTimeout {
	return &PatchRoutingConversationGatewayTimeout{}
}

/*PatchRoutingConversationGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PatchRoutingConversationGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PatchRoutingConversationGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/conversations/{conversationId}][%d] patchRoutingConversationGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchRoutingConversationGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingConversationGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

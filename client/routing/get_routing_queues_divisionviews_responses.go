// Code generated by go-swagger; DO NOT EDIT.

package routing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetRoutingQueuesDivisionviewsReader is a Reader for the GetRoutingQueuesDivisionviews structure.
type GetRoutingQueuesDivisionviewsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRoutingQueuesDivisionviewsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRoutingQueuesDivisionviewsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRoutingQueuesDivisionviewsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetRoutingQueuesDivisionviewsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRoutingQueuesDivisionviewsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRoutingQueuesDivisionviewsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetRoutingQueuesDivisionviewsRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetRoutingQueuesDivisionviewsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetRoutingQueuesDivisionviewsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetRoutingQueuesDivisionviewsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetRoutingQueuesDivisionviewsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetRoutingQueuesDivisionviewsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetRoutingQueuesDivisionviewsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRoutingQueuesDivisionviewsOK creates a GetRoutingQueuesDivisionviewsOK with default headers values
func NewGetRoutingQueuesDivisionviewsOK() *GetRoutingQueuesDivisionviewsOK {
	return &GetRoutingQueuesDivisionviewsOK{}
}

/*
GetRoutingQueuesDivisionviewsOK describes a response with status code 200, with default header values.

successful operation
*/
type GetRoutingQueuesDivisionviewsOK struct {
	Payload *models.QueueEntityListing
}

// IsSuccess returns true when this get routing queues divisionviews o k response has a 2xx status code
func (o *GetRoutingQueuesDivisionviewsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get routing queues divisionviews o k response has a 3xx status code
func (o *GetRoutingQueuesDivisionviewsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing queues divisionviews o k response has a 4xx status code
func (o *GetRoutingQueuesDivisionviewsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get routing queues divisionviews o k response has a 5xx status code
func (o *GetRoutingQueuesDivisionviewsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing queues divisionviews o k response a status code equal to that given
func (o *GetRoutingQueuesDivisionviewsOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetRoutingQueuesDivisionviewsOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/divisionviews][%d] getRoutingQueuesDivisionviewsOK  %+v", 200, o.Payload)
}

func (o *GetRoutingQueuesDivisionviewsOK) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/divisionviews][%d] getRoutingQueuesDivisionviewsOK  %+v", 200, o.Payload)
}

func (o *GetRoutingQueuesDivisionviewsOK) GetPayload() *models.QueueEntityListing {
	return o.Payload
}

func (o *GetRoutingQueuesDivisionviewsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.QueueEntityListing)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingQueuesDivisionviewsBadRequest creates a GetRoutingQueuesDivisionviewsBadRequest with default headers values
func NewGetRoutingQueuesDivisionviewsBadRequest() *GetRoutingQueuesDivisionviewsBadRequest {
	return &GetRoutingQueuesDivisionviewsBadRequest{}
}

/*
GetRoutingQueuesDivisionviewsBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetRoutingQueuesDivisionviewsBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing queues divisionviews bad request response has a 2xx status code
func (o *GetRoutingQueuesDivisionviewsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing queues divisionviews bad request response has a 3xx status code
func (o *GetRoutingQueuesDivisionviewsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing queues divisionviews bad request response has a 4xx status code
func (o *GetRoutingQueuesDivisionviewsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing queues divisionviews bad request response has a 5xx status code
func (o *GetRoutingQueuesDivisionviewsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing queues divisionviews bad request response a status code equal to that given
func (o *GetRoutingQueuesDivisionviewsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetRoutingQueuesDivisionviewsBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/divisionviews][%d] getRoutingQueuesDivisionviewsBadRequest  %+v", 400, o.Payload)
}

func (o *GetRoutingQueuesDivisionviewsBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/divisionviews][%d] getRoutingQueuesDivisionviewsBadRequest  %+v", 400, o.Payload)
}

func (o *GetRoutingQueuesDivisionviewsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingQueuesDivisionviewsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingQueuesDivisionviewsUnauthorized creates a GetRoutingQueuesDivisionviewsUnauthorized with default headers values
func NewGetRoutingQueuesDivisionviewsUnauthorized() *GetRoutingQueuesDivisionviewsUnauthorized {
	return &GetRoutingQueuesDivisionviewsUnauthorized{}
}

/*
GetRoutingQueuesDivisionviewsUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetRoutingQueuesDivisionviewsUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing queues divisionviews unauthorized response has a 2xx status code
func (o *GetRoutingQueuesDivisionviewsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing queues divisionviews unauthorized response has a 3xx status code
func (o *GetRoutingQueuesDivisionviewsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing queues divisionviews unauthorized response has a 4xx status code
func (o *GetRoutingQueuesDivisionviewsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing queues divisionviews unauthorized response has a 5xx status code
func (o *GetRoutingQueuesDivisionviewsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing queues divisionviews unauthorized response a status code equal to that given
func (o *GetRoutingQueuesDivisionviewsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetRoutingQueuesDivisionviewsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/divisionviews][%d] getRoutingQueuesDivisionviewsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRoutingQueuesDivisionviewsUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/divisionviews][%d] getRoutingQueuesDivisionviewsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRoutingQueuesDivisionviewsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingQueuesDivisionviewsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingQueuesDivisionviewsForbidden creates a GetRoutingQueuesDivisionviewsForbidden with default headers values
func NewGetRoutingQueuesDivisionviewsForbidden() *GetRoutingQueuesDivisionviewsForbidden {
	return &GetRoutingQueuesDivisionviewsForbidden{}
}

/*
GetRoutingQueuesDivisionviewsForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetRoutingQueuesDivisionviewsForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing queues divisionviews forbidden response has a 2xx status code
func (o *GetRoutingQueuesDivisionviewsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing queues divisionviews forbidden response has a 3xx status code
func (o *GetRoutingQueuesDivisionviewsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing queues divisionviews forbidden response has a 4xx status code
func (o *GetRoutingQueuesDivisionviewsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing queues divisionviews forbidden response has a 5xx status code
func (o *GetRoutingQueuesDivisionviewsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing queues divisionviews forbidden response a status code equal to that given
func (o *GetRoutingQueuesDivisionviewsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetRoutingQueuesDivisionviewsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/divisionviews][%d] getRoutingQueuesDivisionviewsForbidden  %+v", 403, o.Payload)
}

func (o *GetRoutingQueuesDivisionviewsForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/divisionviews][%d] getRoutingQueuesDivisionviewsForbidden  %+v", 403, o.Payload)
}

func (o *GetRoutingQueuesDivisionviewsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingQueuesDivisionviewsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingQueuesDivisionviewsNotFound creates a GetRoutingQueuesDivisionviewsNotFound with default headers values
func NewGetRoutingQueuesDivisionviewsNotFound() *GetRoutingQueuesDivisionviewsNotFound {
	return &GetRoutingQueuesDivisionviewsNotFound{}
}

/*
GetRoutingQueuesDivisionviewsNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetRoutingQueuesDivisionviewsNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing queues divisionviews not found response has a 2xx status code
func (o *GetRoutingQueuesDivisionviewsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing queues divisionviews not found response has a 3xx status code
func (o *GetRoutingQueuesDivisionviewsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing queues divisionviews not found response has a 4xx status code
func (o *GetRoutingQueuesDivisionviewsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing queues divisionviews not found response has a 5xx status code
func (o *GetRoutingQueuesDivisionviewsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing queues divisionviews not found response a status code equal to that given
func (o *GetRoutingQueuesDivisionviewsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetRoutingQueuesDivisionviewsNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/divisionviews][%d] getRoutingQueuesDivisionviewsNotFound  %+v", 404, o.Payload)
}

func (o *GetRoutingQueuesDivisionviewsNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/divisionviews][%d] getRoutingQueuesDivisionviewsNotFound  %+v", 404, o.Payload)
}

func (o *GetRoutingQueuesDivisionviewsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingQueuesDivisionviewsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingQueuesDivisionviewsRequestTimeout creates a GetRoutingQueuesDivisionviewsRequestTimeout with default headers values
func NewGetRoutingQueuesDivisionviewsRequestTimeout() *GetRoutingQueuesDivisionviewsRequestTimeout {
	return &GetRoutingQueuesDivisionviewsRequestTimeout{}
}

/*
GetRoutingQueuesDivisionviewsRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetRoutingQueuesDivisionviewsRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing queues divisionviews request timeout response has a 2xx status code
func (o *GetRoutingQueuesDivisionviewsRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing queues divisionviews request timeout response has a 3xx status code
func (o *GetRoutingQueuesDivisionviewsRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing queues divisionviews request timeout response has a 4xx status code
func (o *GetRoutingQueuesDivisionviewsRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing queues divisionviews request timeout response has a 5xx status code
func (o *GetRoutingQueuesDivisionviewsRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing queues divisionviews request timeout response a status code equal to that given
func (o *GetRoutingQueuesDivisionviewsRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetRoutingQueuesDivisionviewsRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/divisionviews][%d] getRoutingQueuesDivisionviewsRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetRoutingQueuesDivisionviewsRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/divisionviews][%d] getRoutingQueuesDivisionviewsRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetRoutingQueuesDivisionviewsRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingQueuesDivisionviewsRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingQueuesDivisionviewsRequestEntityTooLarge creates a GetRoutingQueuesDivisionviewsRequestEntityTooLarge with default headers values
func NewGetRoutingQueuesDivisionviewsRequestEntityTooLarge() *GetRoutingQueuesDivisionviewsRequestEntityTooLarge {
	return &GetRoutingQueuesDivisionviewsRequestEntityTooLarge{}
}

/*
GetRoutingQueuesDivisionviewsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type GetRoutingQueuesDivisionviewsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing queues divisionviews request entity too large response has a 2xx status code
func (o *GetRoutingQueuesDivisionviewsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing queues divisionviews request entity too large response has a 3xx status code
func (o *GetRoutingQueuesDivisionviewsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing queues divisionviews request entity too large response has a 4xx status code
func (o *GetRoutingQueuesDivisionviewsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing queues divisionviews request entity too large response has a 5xx status code
func (o *GetRoutingQueuesDivisionviewsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing queues divisionviews request entity too large response a status code equal to that given
func (o *GetRoutingQueuesDivisionviewsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetRoutingQueuesDivisionviewsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/divisionviews][%d] getRoutingQueuesDivisionviewsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetRoutingQueuesDivisionviewsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/divisionviews][%d] getRoutingQueuesDivisionviewsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetRoutingQueuesDivisionviewsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingQueuesDivisionviewsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingQueuesDivisionviewsUnsupportedMediaType creates a GetRoutingQueuesDivisionviewsUnsupportedMediaType with default headers values
func NewGetRoutingQueuesDivisionviewsUnsupportedMediaType() *GetRoutingQueuesDivisionviewsUnsupportedMediaType {
	return &GetRoutingQueuesDivisionviewsUnsupportedMediaType{}
}

/*
GetRoutingQueuesDivisionviewsUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetRoutingQueuesDivisionviewsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing queues divisionviews unsupported media type response has a 2xx status code
func (o *GetRoutingQueuesDivisionviewsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing queues divisionviews unsupported media type response has a 3xx status code
func (o *GetRoutingQueuesDivisionviewsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing queues divisionviews unsupported media type response has a 4xx status code
func (o *GetRoutingQueuesDivisionviewsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing queues divisionviews unsupported media type response has a 5xx status code
func (o *GetRoutingQueuesDivisionviewsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing queues divisionviews unsupported media type response a status code equal to that given
func (o *GetRoutingQueuesDivisionviewsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetRoutingQueuesDivisionviewsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/divisionviews][%d] getRoutingQueuesDivisionviewsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetRoutingQueuesDivisionviewsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/divisionviews][%d] getRoutingQueuesDivisionviewsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetRoutingQueuesDivisionviewsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingQueuesDivisionviewsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingQueuesDivisionviewsTooManyRequests creates a GetRoutingQueuesDivisionviewsTooManyRequests with default headers values
func NewGetRoutingQueuesDivisionviewsTooManyRequests() *GetRoutingQueuesDivisionviewsTooManyRequests {
	return &GetRoutingQueuesDivisionviewsTooManyRequests{}
}

/*
GetRoutingQueuesDivisionviewsTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetRoutingQueuesDivisionviewsTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing queues divisionviews too many requests response has a 2xx status code
func (o *GetRoutingQueuesDivisionviewsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing queues divisionviews too many requests response has a 3xx status code
func (o *GetRoutingQueuesDivisionviewsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing queues divisionviews too many requests response has a 4xx status code
func (o *GetRoutingQueuesDivisionviewsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing queues divisionviews too many requests response has a 5xx status code
func (o *GetRoutingQueuesDivisionviewsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing queues divisionviews too many requests response a status code equal to that given
func (o *GetRoutingQueuesDivisionviewsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetRoutingQueuesDivisionviewsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/divisionviews][%d] getRoutingQueuesDivisionviewsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetRoutingQueuesDivisionviewsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/divisionviews][%d] getRoutingQueuesDivisionviewsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetRoutingQueuesDivisionviewsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingQueuesDivisionviewsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingQueuesDivisionviewsInternalServerError creates a GetRoutingQueuesDivisionviewsInternalServerError with default headers values
func NewGetRoutingQueuesDivisionviewsInternalServerError() *GetRoutingQueuesDivisionviewsInternalServerError {
	return &GetRoutingQueuesDivisionviewsInternalServerError{}
}

/*
GetRoutingQueuesDivisionviewsInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetRoutingQueuesDivisionviewsInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing queues divisionviews internal server error response has a 2xx status code
func (o *GetRoutingQueuesDivisionviewsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing queues divisionviews internal server error response has a 3xx status code
func (o *GetRoutingQueuesDivisionviewsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing queues divisionviews internal server error response has a 4xx status code
func (o *GetRoutingQueuesDivisionviewsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get routing queues divisionviews internal server error response has a 5xx status code
func (o *GetRoutingQueuesDivisionviewsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get routing queues divisionviews internal server error response a status code equal to that given
func (o *GetRoutingQueuesDivisionviewsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetRoutingQueuesDivisionviewsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/divisionviews][%d] getRoutingQueuesDivisionviewsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRoutingQueuesDivisionviewsInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/divisionviews][%d] getRoutingQueuesDivisionviewsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRoutingQueuesDivisionviewsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingQueuesDivisionviewsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingQueuesDivisionviewsServiceUnavailable creates a GetRoutingQueuesDivisionviewsServiceUnavailable with default headers values
func NewGetRoutingQueuesDivisionviewsServiceUnavailable() *GetRoutingQueuesDivisionviewsServiceUnavailable {
	return &GetRoutingQueuesDivisionviewsServiceUnavailable{}
}

/*
GetRoutingQueuesDivisionviewsServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetRoutingQueuesDivisionviewsServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing queues divisionviews service unavailable response has a 2xx status code
func (o *GetRoutingQueuesDivisionviewsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing queues divisionviews service unavailable response has a 3xx status code
func (o *GetRoutingQueuesDivisionviewsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing queues divisionviews service unavailable response has a 4xx status code
func (o *GetRoutingQueuesDivisionviewsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get routing queues divisionviews service unavailable response has a 5xx status code
func (o *GetRoutingQueuesDivisionviewsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get routing queues divisionviews service unavailable response a status code equal to that given
func (o *GetRoutingQueuesDivisionviewsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetRoutingQueuesDivisionviewsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/divisionviews][%d] getRoutingQueuesDivisionviewsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetRoutingQueuesDivisionviewsServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/divisionviews][%d] getRoutingQueuesDivisionviewsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetRoutingQueuesDivisionviewsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingQueuesDivisionviewsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingQueuesDivisionviewsGatewayTimeout creates a GetRoutingQueuesDivisionviewsGatewayTimeout with default headers values
func NewGetRoutingQueuesDivisionviewsGatewayTimeout() *GetRoutingQueuesDivisionviewsGatewayTimeout {
	return &GetRoutingQueuesDivisionviewsGatewayTimeout{}
}

/*
GetRoutingQueuesDivisionviewsGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetRoutingQueuesDivisionviewsGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing queues divisionviews gateway timeout response has a 2xx status code
func (o *GetRoutingQueuesDivisionviewsGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing queues divisionviews gateway timeout response has a 3xx status code
func (o *GetRoutingQueuesDivisionviewsGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing queues divisionviews gateway timeout response has a 4xx status code
func (o *GetRoutingQueuesDivisionviewsGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get routing queues divisionviews gateway timeout response has a 5xx status code
func (o *GetRoutingQueuesDivisionviewsGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get routing queues divisionviews gateway timeout response a status code equal to that given
func (o *GetRoutingQueuesDivisionviewsGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetRoutingQueuesDivisionviewsGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/divisionviews][%d] getRoutingQueuesDivisionviewsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetRoutingQueuesDivisionviewsGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/divisionviews][%d] getRoutingQueuesDivisionviewsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetRoutingQueuesDivisionviewsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingQueuesDivisionviewsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

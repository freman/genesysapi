// Code generated by go-swagger; DO NOT EDIT.

package routing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetRoutingLanguageReader is a Reader for the GetRoutingLanguage structure.
type GetRoutingLanguageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRoutingLanguageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRoutingLanguageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRoutingLanguageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetRoutingLanguageUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRoutingLanguageForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRoutingLanguageNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetRoutingLanguageRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetRoutingLanguageRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetRoutingLanguageUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetRoutingLanguageTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetRoutingLanguageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetRoutingLanguageServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetRoutingLanguageGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRoutingLanguageOK creates a GetRoutingLanguageOK with default headers values
func NewGetRoutingLanguageOK() *GetRoutingLanguageOK {
	return &GetRoutingLanguageOK{}
}

/*
GetRoutingLanguageOK describes a response with status code 200, with default header values.

successful operation
*/
type GetRoutingLanguageOK struct {
	Payload *models.Language
}

// IsSuccess returns true when this get routing language o k response has a 2xx status code
func (o *GetRoutingLanguageOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get routing language o k response has a 3xx status code
func (o *GetRoutingLanguageOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing language o k response has a 4xx status code
func (o *GetRoutingLanguageOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get routing language o k response has a 5xx status code
func (o *GetRoutingLanguageOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing language o k response a status code equal to that given
func (o *GetRoutingLanguageOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetRoutingLanguageOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/languages/{languageId}][%d] getRoutingLanguageOK  %+v", 200, o.Payload)
}

func (o *GetRoutingLanguageOK) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/languages/{languageId}][%d] getRoutingLanguageOK  %+v", 200, o.Payload)
}

func (o *GetRoutingLanguageOK) GetPayload() *models.Language {
	return o.Payload
}

func (o *GetRoutingLanguageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Language)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingLanguageBadRequest creates a GetRoutingLanguageBadRequest with default headers values
func NewGetRoutingLanguageBadRequest() *GetRoutingLanguageBadRequest {
	return &GetRoutingLanguageBadRequest{}
}

/*
GetRoutingLanguageBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetRoutingLanguageBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing language bad request response has a 2xx status code
func (o *GetRoutingLanguageBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing language bad request response has a 3xx status code
func (o *GetRoutingLanguageBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing language bad request response has a 4xx status code
func (o *GetRoutingLanguageBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing language bad request response has a 5xx status code
func (o *GetRoutingLanguageBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing language bad request response a status code equal to that given
func (o *GetRoutingLanguageBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetRoutingLanguageBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/languages/{languageId}][%d] getRoutingLanguageBadRequest  %+v", 400, o.Payload)
}

func (o *GetRoutingLanguageBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/languages/{languageId}][%d] getRoutingLanguageBadRequest  %+v", 400, o.Payload)
}

func (o *GetRoutingLanguageBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingLanguageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingLanguageUnauthorized creates a GetRoutingLanguageUnauthorized with default headers values
func NewGetRoutingLanguageUnauthorized() *GetRoutingLanguageUnauthorized {
	return &GetRoutingLanguageUnauthorized{}
}

/*
GetRoutingLanguageUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetRoutingLanguageUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing language unauthorized response has a 2xx status code
func (o *GetRoutingLanguageUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing language unauthorized response has a 3xx status code
func (o *GetRoutingLanguageUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing language unauthorized response has a 4xx status code
func (o *GetRoutingLanguageUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing language unauthorized response has a 5xx status code
func (o *GetRoutingLanguageUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing language unauthorized response a status code equal to that given
func (o *GetRoutingLanguageUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetRoutingLanguageUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/languages/{languageId}][%d] getRoutingLanguageUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRoutingLanguageUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/languages/{languageId}][%d] getRoutingLanguageUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRoutingLanguageUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingLanguageUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingLanguageForbidden creates a GetRoutingLanguageForbidden with default headers values
func NewGetRoutingLanguageForbidden() *GetRoutingLanguageForbidden {
	return &GetRoutingLanguageForbidden{}
}

/*
GetRoutingLanguageForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetRoutingLanguageForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing language forbidden response has a 2xx status code
func (o *GetRoutingLanguageForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing language forbidden response has a 3xx status code
func (o *GetRoutingLanguageForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing language forbidden response has a 4xx status code
func (o *GetRoutingLanguageForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing language forbidden response has a 5xx status code
func (o *GetRoutingLanguageForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing language forbidden response a status code equal to that given
func (o *GetRoutingLanguageForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetRoutingLanguageForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/languages/{languageId}][%d] getRoutingLanguageForbidden  %+v", 403, o.Payload)
}

func (o *GetRoutingLanguageForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/languages/{languageId}][%d] getRoutingLanguageForbidden  %+v", 403, o.Payload)
}

func (o *GetRoutingLanguageForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingLanguageForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingLanguageNotFound creates a GetRoutingLanguageNotFound with default headers values
func NewGetRoutingLanguageNotFound() *GetRoutingLanguageNotFound {
	return &GetRoutingLanguageNotFound{}
}

/*
GetRoutingLanguageNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetRoutingLanguageNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing language not found response has a 2xx status code
func (o *GetRoutingLanguageNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing language not found response has a 3xx status code
func (o *GetRoutingLanguageNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing language not found response has a 4xx status code
func (o *GetRoutingLanguageNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing language not found response has a 5xx status code
func (o *GetRoutingLanguageNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing language not found response a status code equal to that given
func (o *GetRoutingLanguageNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetRoutingLanguageNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/languages/{languageId}][%d] getRoutingLanguageNotFound  %+v", 404, o.Payload)
}

func (o *GetRoutingLanguageNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/languages/{languageId}][%d] getRoutingLanguageNotFound  %+v", 404, o.Payload)
}

func (o *GetRoutingLanguageNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingLanguageNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingLanguageRequestTimeout creates a GetRoutingLanguageRequestTimeout with default headers values
func NewGetRoutingLanguageRequestTimeout() *GetRoutingLanguageRequestTimeout {
	return &GetRoutingLanguageRequestTimeout{}
}

/*
GetRoutingLanguageRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetRoutingLanguageRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing language request timeout response has a 2xx status code
func (o *GetRoutingLanguageRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing language request timeout response has a 3xx status code
func (o *GetRoutingLanguageRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing language request timeout response has a 4xx status code
func (o *GetRoutingLanguageRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing language request timeout response has a 5xx status code
func (o *GetRoutingLanguageRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing language request timeout response a status code equal to that given
func (o *GetRoutingLanguageRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetRoutingLanguageRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/languages/{languageId}][%d] getRoutingLanguageRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetRoutingLanguageRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/languages/{languageId}][%d] getRoutingLanguageRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetRoutingLanguageRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingLanguageRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingLanguageRequestEntityTooLarge creates a GetRoutingLanguageRequestEntityTooLarge with default headers values
func NewGetRoutingLanguageRequestEntityTooLarge() *GetRoutingLanguageRequestEntityTooLarge {
	return &GetRoutingLanguageRequestEntityTooLarge{}
}

/*
GetRoutingLanguageRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type GetRoutingLanguageRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing language request entity too large response has a 2xx status code
func (o *GetRoutingLanguageRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing language request entity too large response has a 3xx status code
func (o *GetRoutingLanguageRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing language request entity too large response has a 4xx status code
func (o *GetRoutingLanguageRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing language request entity too large response has a 5xx status code
func (o *GetRoutingLanguageRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing language request entity too large response a status code equal to that given
func (o *GetRoutingLanguageRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetRoutingLanguageRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/languages/{languageId}][%d] getRoutingLanguageRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetRoutingLanguageRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/languages/{languageId}][%d] getRoutingLanguageRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetRoutingLanguageRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingLanguageRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingLanguageUnsupportedMediaType creates a GetRoutingLanguageUnsupportedMediaType with default headers values
func NewGetRoutingLanguageUnsupportedMediaType() *GetRoutingLanguageUnsupportedMediaType {
	return &GetRoutingLanguageUnsupportedMediaType{}
}

/*
GetRoutingLanguageUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetRoutingLanguageUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing language unsupported media type response has a 2xx status code
func (o *GetRoutingLanguageUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing language unsupported media type response has a 3xx status code
func (o *GetRoutingLanguageUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing language unsupported media type response has a 4xx status code
func (o *GetRoutingLanguageUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing language unsupported media type response has a 5xx status code
func (o *GetRoutingLanguageUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing language unsupported media type response a status code equal to that given
func (o *GetRoutingLanguageUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetRoutingLanguageUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/languages/{languageId}][%d] getRoutingLanguageUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetRoutingLanguageUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/languages/{languageId}][%d] getRoutingLanguageUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetRoutingLanguageUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingLanguageUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingLanguageTooManyRequests creates a GetRoutingLanguageTooManyRequests with default headers values
func NewGetRoutingLanguageTooManyRequests() *GetRoutingLanguageTooManyRequests {
	return &GetRoutingLanguageTooManyRequests{}
}

/*
GetRoutingLanguageTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetRoutingLanguageTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing language too many requests response has a 2xx status code
func (o *GetRoutingLanguageTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing language too many requests response has a 3xx status code
func (o *GetRoutingLanguageTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing language too many requests response has a 4xx status code
func (o *GetRoutingLanguageTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing language too many requests response has a 5xx status code
func (o *GetRoutingLanguageTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing language too many requests response a status code equal to that given
func (o *GetRoutingLanguageTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetRoutingLanguageTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/languages/{languageId}][%d] getRoutingLanguageTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetRoutingLanguageTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/languages/{languageId}][%d] getRoutingLanguageTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetRoutingLanguageTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingLanguageTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingLanguageInternalServerError creates a GetRoutingLanguageInternalServerError with default headers values
func NewGetRoutingLanguageInternalServerError() *GetRoutingLanguageInternalServerError {
	return &GetRoutingLanguageInternalServerError{}
}

/*
GetRoutingLanguageInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetRoutingLanguageInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing language internal server error response has a 2xx status code
func (o *GetRoutingLanguageInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing language internal server error response has a 3xx status code
func (o *GetRoutingLanguageInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing language internal server error response has a 4xx status code
func (o *GetRoutingLanguageInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get routing language internal server error response has a 5xx status code
func (o *GetRoutingLanguageInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get routing language internal server error response a status code equal to that given
func (o *GetRoutingLanguageInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetRoutingLanguageInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/languages/{languageId}][%d] getRoutingLanguageInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRoutingLanguageInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/languages/{languageId}][%d] getRoutingLanguageInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRoutingLanguageInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingLanguageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingLanguageServiceUnavailable creates a GetRoutingLanguageServiceUnavailable with default headers values
func NewGetRoutingLanguageServiceUnavailable() *GetRoutingLanguageServiceUnavailable {
	return &GetRoutingLanguageServiceUnavailable{}
}

/*
GetRoutingLanguageServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetRoutingLanguageServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing language service unavailable response has a 2xx status code
func (o *GetRoutingLanguageServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing language service unavailable response has a 3xx status code
func (o *GetRoutingLanguageServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing language service unavailable response has a 4xx status code
func (o *GetRoutingLanguageServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get routing language service unavailable response has a 5xx status code
func (o *GetRoutingLanguageServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get routing language service unavailable response a status code equal to that given
func (o *GetRoutingLanguageServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetRoutingLanguageServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/languages/{languageId}][%d] getRoutingLanguageServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetRoutingLanguageServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/languages/{languageId}][%d] getRoutingLanguageServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetRoutingLanguageServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingLanguageServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingLanguageGatewayTimeout creates a GetRoutingLanguageGatewayTimeout with default headers values
func NewGetRoutingLanguageGatewayTimeout() *GetRoutingLanguageGatewayTimeout {
	return &GetRoutingLanguageGatewayTimeout{}
}

/*
GetRoutingLanguageGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetRoutingLanguageGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing language gateway timeout response has a 2xx status code
func (o *GetRoutingLanguageGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing language gateway timeout response has a 3xx status code
func (o *GetRoutingLanguageGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing language gateway timeout response has a 4xx status code
func (o *GetRoutingLanguageGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get routing language gateway timeout response has a 5xx status code
func (o *GetRoutingLanguageGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get routing language gateway timeout response a status code equal to that given
func (o *GetRoutingLanguageGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetRoutingLanguageGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/languages/{languageId}][%d] getRoutingLanguageGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetRoutingLanguageGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/languages/{languageId}][%d] getRoutingLanguageGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetRoutingLanguageGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingLanguageGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

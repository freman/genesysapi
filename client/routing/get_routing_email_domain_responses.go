// Code generated by go-swagger; DO NOT EDIT.

package routing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetRoutingEmailDomainReader is a Reader for the GetRoutingEmailDomain structure.
type GetRoutingEmailDomainReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRoutingEmailDomainReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRoutingEmailDomainOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRoutingEmailDomainBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetRoutingEmailDomainUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRoutingEmailDomainForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRoutingEmailDomainNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetRoutingEmailDomainRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetRoutingEmailDomainRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetRoutingEmailDomainUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetRoutingEmailDomainTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetRoutingEmailDomainInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetRoutingEmailDomainServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetRoutingEmailDomainGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRoutingEmailDomainOK creates a GetRoutingEmailDomainOK with default headers values
func NewGetRoutingEmailDomainOK() *GetRoutingEmailDomainOK {
	return &GetRoutingEmailDomainOK{}
}

/*GetRoutingEmailDomainOK handles this case with default header values.

successful operation
*/
type GetRoutingEmailDomainOK struct {
	Payload *models.InboundDomain
}

func (o *GetRoutingEmailDomainOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/email/domains/{domainId}][%d] getRoutingEmailDomainOK  %+v", 200, o.Payload)
}

func (o *GetRoutingEmailDomainOK) GetPayload() *models.InboundDomain {
	return o.Payload
}

func (o *GetRoutingEmailDomainOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InboundDomain)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingEmailDomainBadRequest creates a GetRoutingEmailDomainBadRequest with default headers values
func NewGetRoutingEmailDomainBadRequest() *GetRoutingEmailDomainBadRequest {
	return &GetRoutingEmailDomainBadRequest{}
}

/*GetRoutingEmailDomainBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetRoutingEmailDomainBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetRoutingEmailDomainBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/email/domains/{domainId}][%d] getRoutingEmailDomainBadRequest  %+v", 400, o.Payload)
}

func (o *GetRoutingEmailDomainBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingEmailDomainBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingEmailDomainUnauthorized creates a GetRoutingEmailDomainUnauthorized with default headers values
func NewGetRoutingEmailDomainUnauthorized() *GetRoutingEmailDomainUnauthorized {
	return &GetRoutingEmailDomainUnauthorized{}
}

/*GetRoutingEmailDomainUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetRoutingEmailDomainUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetRoutingEmailDomainUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/email/domains/{domainId}][%d] getRoutingEmailDomainUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRoutingEmailDomainUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingEmailDomainUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingEmailDomainForbidden creates a GetRoutingEmailDomainForbidden with default headers values
func NewGetRoutingEmailDomainForbidden() *GetRoutingEmailDomainForbidden {
	return &GetRoutingEmailDomainForbidden{}
}

/*GetRoutingEmailDomainForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetRoutingEmailDomainForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetRoutingEmailDomainForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/email/domains/{domainId}][%d] getRoutingEmailDomainForbidden  %+v", 403, o.Payload)
}

func (o *GetRoutingEmailDomainForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingEmailDomainForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingEmailDomainNotFound creates a GetRoutingEmailDomainNotFound with default headers values
func NewGetRoutingEmailDomainNotFound() *GetRoutingEmailDomainNotFound {
	return &GetRoutingEmailDomainNotFound{}
}

/*GetRoutingEmailDomainNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetRoutingEmailDomainNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetRoutingEmailDomainNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/email/domains/{domainId}][%d] getRoutingEmailDomainNotFound  %+v", 404, o.Payload)
}

func (o *GetRoutingEmailDomainNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingEmailDomainNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingEmailDomainRequestTimeout creates a GetRoutingEmailDomainRequestTimeout with default headers values
func NewGetRoutingEmailDomainRequestTimeout() *GetRoutingEmailDomainRequestTimeout {
	return &GetRoutingEmailDomainRequestTimeout{}
}

/*GetRoutingEmailDomainRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetRoutingEmailDomainRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetRoutingEmailDomainRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/email/domains/{domainId}][%d] getRoutingEmailDomainRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetRoutingEmailDomainRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingEmailDomainRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingEmailDomainRequestEntityTooLarge creates a GetRoutingEmailDomainRequestEntityTooLarge with default headers values
func NewGetRoutingEmailDomainRequestEntityTooLarge() *GetRoutingEmailDomainRequestEntityTooLarge {
	return &GetRoutingEmailDomainRequestEntityTooLarge{}
}

/*GetRoutingEmailDomainRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetRoutingEmailDomainRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetRoutingEmailDomainRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/email/domains/{domainId}][%d] getRoutingEmailDomainRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetRoutingEmailDomainRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingEmailDomainRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingEmailDomainUnsupportedMediaType creates a GetRoutingEmailDomainUnsupportedMediaType with default headers values
func NewGetRoutingEmailDomainUnsupportedMediaType() *GetRoutingEmailDomainUnsupportedMediaType {
	return &GetRoutingEmailDomainUnsupportedMediaType{}
}

/*GetRoutingEmailDomainUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetRoutingEmailDomainUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetRoutingEmailDomainUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/email/domains/{domainId}][%d] getRoutingEmailDomainUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetRoutingEmailDomainUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingEmailDomainUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingEmailDomainTooManyRequests creates a GetRoutingEmailDomainTooManyRequests with default headers values
func NewGetRoutingEmailDomainTooManyRequests() *GetRoutingEmailDomainTooManyRequests {
	return &GetRoutingEmailDomainTooManyRequests{}
}

/*GetRoutingEmailDomainTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetRoutingEmailDomainTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetRoutingEmailDomainTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/email/domains/{domainId}][%d] getRoutingEmailDomainTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetRoutingEmailDomainTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingEmailDomainTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingEmailDomainInternalServerError creates a GetRoutingEmailDomainInternalServerError with default headers values
func NewGetRoutingEmailDomainInternalServerError() *GetRoutingEmailDomainInternalServerError {
	return &GetRoutingEmailDomainInternalServerError{}
}

/*GetRoutingEmailDomainInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetRoutingEmailDomainInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetRoutingEmailDomainInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/email/domains/{domainId}][%d] getRoutingEmailDomainInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRoutingEmailDomainInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingEmailDomainInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingEmailDomainServiceUnavailable creates a GetRoutingEmailDomainServiceUnavailable with default headers values
func NewGetRoutingEmailDomainServiceUnavailable() *GetRoutingEmailDomainServiceUnavailable {
	return &GetRoutingEmailDomainServiceUnavailable{}
}

/*GetRoutingEmailDomainServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetRoutingEmailDomainServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetRoutingEmailDomainServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/email/domains/{domainId}][%d] getRoutingEmailDomainServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetRoutingEmailDomainServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingEmailDomainServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingEmailDomainGatewayTimeout creates a GetRoutingEmailDomainGatewayTimeout with default headers values
func NewGetRoutingEmailDomainGatewayTimeout() *GetRoutingEmailDomainGatewayTimeout {
	return &GetRoutingEmailDomainGatewayTimeout{}
}

/*GetRoutingEmailDomainGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetRoutingEmailDomainGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetRoutingEmailDomainGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/email/domains/{domainId}][%d] getRoutingEmailDomainGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetRoutingEmailDomainGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingEmailDomainGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

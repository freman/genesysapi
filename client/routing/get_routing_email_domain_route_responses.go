// Code generated by go-swagger; DO NOT EDIT.

package routing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetRoutingEmailDomainRouteReader is a Reader for the GetRoutingEmailDomainRoute structure.
type GetRoutingEmailDomainRouteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRoutingEmailDomainRouteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRoutingEmailDomainRouteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRoutingEmailDomainRouteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetRoutingEmailDomainRouteUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRoutingEmailDomainRouteForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRoutingEmailDomainRouteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetRoutingEmailDomainRouteRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetRoutingEmailDomainRouteRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetRoutingEmailDomainRouteUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetRoutingEmailDomainRouteTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetRoutingEmailDomainRouteInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetRoutingEmailDomainRouteServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetRoutingEmailDomainRouteGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRoutingEmailDomainRouteOK creates a GetRoutingEmailDomainRouteOK with default headers values
func NewGetRoutingEmailDomainRouteOK() *GetRoutingEmailDomainRouteOK {
	return &GetRoutingEmailDomainRouteOK{}
}

/*
GetRoutingEmailDomainRouteOK describes a response with status code 200, with default header values.

successful operation
*/
type GetRoutingEmailDomainRouteOK struct {
	Payload *models.InboundRoute
}

// IsSuccess returns true when this get routing email domain route o k response has a 2xx status code
func (o *GetRoutingEmailDomainRouteOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get routing email domain route o k response has a 3xx status code
func (o *GetRoutingEmailDomainRouteOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing email domain route o k response has a 4xx status code
func (o *GetRoutingEmailDomainRouteOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get routing email domain route o k response has a 5xx status code
func (o *GetRoutingEmailDomainRouteOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing email domain route o k response a status code equal to that given
func (o *GetRoutingEmailDomainRouteOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetRoutingEmailDomainRouteOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/email/domains/{domainName}/routes/{routeId}][%d] getRoutingEmailDomainRouteOK  %+v", 200, o.Payload)
}

func (o *GetRoutingEmailDomainRouteOK) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/email/domains/{domainName}/routes/{routeId}][%d] getRoutingEmailDomainRouteOK  %+v", 200, o.Payload)
}

func (o *GetRoutingEmailDomainRouteOK) GetPayload() *models.InboundRoute {
	return o.Payload
}

func (o *GetRoutingEmailDomainRouteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InboundRoute)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingEmailDomainRouteBadRequest creates a GetRoutingEmailDomainRouteBadRequest with default headers values
func NewGetRoutingEmailDomainRouteBadRequest() *GetRoutingEmailDomainRouteBadRequest {
	return &GetRoutingEmailDomainRouteBadRequest{}
}

/*
GetRoutingEmailDomainRouteBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetRoutingEmailDomainRouteBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing email domain route bad request response has a 2xx status code
func (o *GetRoutingEmailDomainRouteBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing email domain route bad request response has a 3xx status code
func (o *GetRoutingEmailDomainRouteBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing email domain route bad request response has a 4xx status code
func (o *GetRoutingEmailDomainRouteBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing email domain route bad request response has a 5xx status code
func (o *GetRoutingEmailDomainRouteBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing email domain route bad request response a status code equal to that given
func (o *GetRoutingEmailDomainRouteBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetRoutingEmailDomainRouteBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/email/domains/{domainName}/routes/{routeId}][%d] getRoutingEmailDomainRouteBadRequest  %+v", 400, o.Payload)
}

func (o *GetRoutingEmailDomainRouteBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/email/domains/{domainName}/routes/{routeId}][%d] getRoutingEmailDomainRouteBadRequest  %+v", 400, o.Payload)
}

func (o *GetRoutingEmailDomainRouteBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingEmailDomainRouteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingEmailDomainRouteUnauthorized creates a GetRoutingEmailDomainRouteUnauthorized with default headers values
func NewGetRoutingEmailDomainRouteUnauthorized() *GetRoutingEmailDomainRouteUnauthorized {
	return &GetRoutingEmailDomainRouteUnauthorized{}
}

/*
GetRoutingEmailDomainRouteUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetRoutingEmailDomainRouteUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing email domain route unauthorized response has a 2xx status code
func (o *GetRoutingEmailDomainRouteUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing email domain route unauthorized response has a 3xx status code
func (o *GetRoutingEmailDomainRouteUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing email domain route unauthorized response has a 4xx status code
func (o *GetRoutingEmailDomainRouteUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing email domain route unauthorized response has a 5xx status code
func (o *GetRoutingEmailDomainRouteUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing email domain route unauthorized response a status code equal to that given
func (o *GetRoutingEmailDomainRouteUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetRoutingEmailDomainRouteUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/email/domains/{domainName}/routes/{routeId}][%d] getRoutingEmailDomainRouteUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRoutingEmailDomainRouteUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/email/domains/{domainName}/routes/{routeId}][%d] getRoutingEmailDomainRouteUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRoutingEmailDomainRouteUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingEmailDomainRouteUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingEmailDomainRouteForbidden creates a GetRoutingEmailDomainRouteForbidden with default headers values
func NewGetRoutingEmailDomainRouteForbidden() *GetRoutingEmailDomainRouteForbidden {
	return &GetRoutingEmailDomainRouteForbidden{}
}

/*
GetRoutingEmailDomainRouteForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetRoutingEmailDomainRouteForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing email domain route forbidden response has a 2xx status code
func (o *GetRoutingEmailDomainRouteForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing email domain route forbidden response has a 3xx status code
func (o *GetRoutingEmailDomainRouteForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing email domain route forbidden response has a 4xx status code
func (o *GetRoutingEmailDomainRouteForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing email domain route forbidden response has a 5xx status code
func (o *GetRoutingEmailDomainRouteForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing email domain route forbidden response a status code equal to that given
func (o *GetRoutingEmailDomainRouteForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetRoutingEmailDomainRouteForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/email/domains/{domainName}/routes/{routeId}][%d] getRoutingEmailDomainRouteForbidden  %+v", 403, o.Payload)
}

func (o *GetRoutingEmailDomainRouteForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/email/domains/{domainName}/routes/{routeId}][%d] getRoutingEmailDomainRouteForbidden  %+v", 403, o.Payload)
}

func (o *GetRoutingEmailDomainRouteForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingEmailDomainRouteForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingEmailDomainRouteNotFound creates a GetRoutingEmailDomainRouteNotFound with default headers values
func NewGetRoutingEmailDomainRouteNotFound() *GetRoutingEmailDomainRouteNotFound {
	return &GetRoutingEmailDomainRouteNotFound{}
}

/*
GetRoutingEmailDomainRouteNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetRoutingEmailDomainRouteNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing email domain route not found response has a 2xx status code
func (o *GetRoutingEmailDomainRouteNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing email domain route not found response has a 3xx status code
func (o *GetRoutingEmailDomainRouteNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing email domain route not found response has a 4xx status code
func (o *GetRoutingEmailDomainRouteNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing email domain route not found response has a 5xx status code
func (o *GetRoutingEmailDomainRouteNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing email domain route not found response a status code equal to that given
func (o *GetRoutingEmailDomainRouteNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetRoutingEmailDomainRouteNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/email/domains/{domainName}/routes/{routeId}][%d] getRoutingEmailDomainRouteNotFound  %+v", 404, o.Payload)
}

func (o *GetRoutingEmailDomainRouteNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/email/domains/{domainName}/routes/{routeId}][%d] getRoutingEmailDomainRouteNotFound  %+v", 404, o.Payload)
}

func (o *GetRoutingEmailDomainRouteNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingEmailDomainRouteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingEmailDomainRouteRequestTimeout creates a GetRoutingEmailDomainRouteRequestTimeout with default headers values
func NewGetRoutingEmailDomainRouteRequestTimeout() *GetRoutingEmailDomainRouteRequestTimeout {
	return &GetRoutingEmailDomainRouteRequestTimeout{}
}

/*
GetRoutingEmailDomainRouteRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetRoutingEmailDomainRouteRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing email domain route request timeout response has a 2xx status code
func (o *GetRoutingEmailDomainRouteRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing email domain route request timeout response has a 3xx status code
func (o *GetRoutingEmailDomainRouteRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing email domain route request timeout response has a 4xx status code
func (o *GetRoutingEmailDomainRouteRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing email domain route request timeout response has a 5xx status code
func (o *GetRoutingEmailDomainRouteRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing email domain route request timeout response a status code equal to that given
func (o *GetRoutingEmailDomainRouteRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetRoutingEmailDomainRouteRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/email/domains/{domainName}/routes/{routeId}][%d] getRoutingEmailDomainRouteRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetRoutingEmailDomainRouteRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/email/domains/{domainName}/routes/{routeId}][%d] getRoutingEmailDomainRouteRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetRoutingEmailDomainRouteRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingEmailDomainRouteRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingEmailDomainRouteRequestEntityTooLarge creates a GetRoutingEmailDomainRouteRequestEntityTooLarge with default headers values
func NewGetRoutingEmailDomainRouteRequestEntityTooLarge() *GetRoutingEmailDomainRouteRequestEntityTooLarge {
	return &GetRoutingEmailDomainRouteRequestEntityTooLarge{}
}

/*
GetRoutingEmailDomainRouteRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type GetRoutingEmailDomainRouteRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing email domain route request entity too large response has a 2xx status code
func (o *GetRoutingEmailDomainRouteRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing email domain route request entity too large response has a 3xx status code
func (o *GetRoutingEmailDomainRouteRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing email domain route request entity too large response has a 4xx status code
func (o *GetRoutingEmailDomainRouteRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing email domain route request entity too large response has a 5xx status code
func (o *GetRoutingEmailDomainRouteRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing email domain route request entity too large response a status code equal to that given
func (o *GetRoutingEmailDomainRouteRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetRoutingEmailDomainRouteRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/email/domains/{domainName}/routes/{routeId}][%d] getRoutingEmailDomainRouteRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetRoutingEmailDomainRouteRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/email/domains/{domainName}/routes/{routeId}][%d] getRoutingEmailDomainRouteRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetRoutingEmailDomainRouteRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingEmailDomainRouteRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingEmailDomainRouteUnsupportedMediaType creates a GetRoutingEmailDomainRouteUnsupportedMediaType with default headers values
func NewGetRoutingEmailDomainRouteUnsupportedMediaType() *GetRoutingEmailDomainRouteUnsupportedMediaType {
	return &GetRoutingEmailDomainRouteUnsupportedMediaType{}
}

/*
GetRoutingEmailDomainRouteUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetRoutingEmailDomainRouteUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing email domain route unsupported media type response has a 2xx status code
func (o *GetRoutingEmailDomainRouteUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing email domain route unsupported media type response has a 3xx status code
func (o *GetRoutingEmailDomainRouteUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing email domain route unsupported media type response has a 4xx status code
func (o *GetRoutingEmailDomainRouteUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing email domain route unsupported media type response has a 5xx status code
func (o *GetRoutingEmailDomainRouteUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing email domain route unsupported media type response a status code equal to that given
func (o *GetRoutingEmailDomainRouteUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetRoutingEmailDomainRouteUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/email/domains/{domainName}/routes/{routeId}][%d] getRoutingEmailDomainRouteUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetRoutingEmailDomainRouteUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/email/domains/{domainName}/routes/{routeId}][%d] getRoutingEmailDomainRouteUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetRoutingEmailDomainRouteUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingEmailDomainRouteUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingEmailDomainRouteTooManyRequests creates a GetRoutingEmailDomainRouteTooManyRequests with default headers values
func NewGetRoutingEmailDomainRouteTooManyRequests() *GetRoutingEmailDomainRouteTooManyRequests {
	return &GetRoutingEmailDomainRouteTooManyRequests{}
}

/*
GetRoutingEmailDomainRouteTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetRoutingEmailDomainRouteTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing email domain route too many requests response has a 2xx status code
func (o *GetRoutingEmailDomainRouteTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing email domain route too many requests response has a 3xx status code
func (o *GetRoutingEmailDomainRouteTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing email domain route too many requests response has a 4xx status code
func (o *GetRoutingEmailDomainRouteTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing email domain route too many requests response has a 5xx status code
func (o *GetRoutingEmailDomainRouteTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing email domain route too many requests response a status code equal to that given
func (o *GetRoutingEmailDomainRouteTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetRoutingEmailDomainRouteTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/email/domains/{domainName}/routes/{routeId}][%d] getRoutingEmailDomainRouteTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetRoutingEmailDomainRouteTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/email/domains/{domainName}/routes/{routeId}][%d] getRoutingEmailDomainRouteTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetRoutingEmailDomainRouteTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingEmailDomainRouteTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingEmailDomainRouteInternalServerError creates a GetRoutingEmailDomainRouteInternalServerError with default headers values
func NewGetRoutingEmailDomainRouteInternalServerError() *GetRoutingEmailDomainRouteInternalServerError {
	return &GetRoutingEmailDomainRouteInternalServerError{}
}

/*
GetRoutingEmailDomainRouteInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetRoutingEmailDomainRouteInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing email domain route internal server error response has a 2xx status code
func (o *GetRoutingEmailDomainRouteInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing email domain route internal server error response has a 3xx status code
func (o *GetRoutingEmailDomainRouteInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing email domain route internal server error response has a 4xx status code
func (o *GetRoutingEmailDomainRouteInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get routing email domain route internal server error response has a 5xx status code
func (o *GetRoutingEmailDomainRouteInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get routing email domain route internal server error response a status code equal to that given
func (o *GetRoutingEmailDomainRouteInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetRoutingEmailDomainRouteInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/email/domains/{domainName}/routes/{routeId}][%d] getRoutingEmailDomainRouteInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRoutingEmailDomainRouteInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/email/domains/{domainName}/routes/{routeId}][%d] getRoutingEmailDomainRouteInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRoutingEmailDomainRouteInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingEmailDomainRouteInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingEmailDomainRouteServiceUnavailable creates a GetRoutingEmailDomainRouteServiceUnavailable with default headers values
func NewGetRoutingEmailDomainRouteServiceUnavailable() *GetRoutingEmailDomainRouteServiceUnavailable {
	return &GetRoutingEmailDomainRouteServiceUnavailable{}
}

/*
GetRoutingEmailDomainRouteServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetRoutingEmailDomainRouteServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing email domain route service unavailable response has a 2xx status code
func (o *GetRoutingEmailDomainRouteServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing email domain route service unavailable response has a 3xx status code
func (o *GetRoutingEmailDomainRouteServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing email domain route service unavailable response has a 4xx status code
func (o *GetRoutingEmailDomainRouteServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get routing email domain route service unavailable response has a 5xx status code
func (o *GetRoutingEmailDomainRouteServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get routing email domain route service unavailable response a status code equal to that given
func (o *GetRoutingEmailDomainRouteServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetRoutingEmailDomainRouteServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/email/domains/{domainName}/routes/{routeId}][%d] getRoutingEmailDomainRouteServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetRoutingEmailDomainRouteServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/email/domains/{domainName}/routes/{routeId}][%d] getRoutingEmailDomainRouteServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetRoutingEmailDomainRouteServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingEmailDomainRouteServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingEmailDomainRouteGatewayTimeout creates a GetRoutingEmailDomainRouteGatewayTimeout with default headers values
func NewGetRoutingEmailDomainRouteGatewayTimeout() *GetRoutingEmailDomainRouteGatewayTimeout {
	return &GetRoutingEmailDomainRouteGatewayTimeout{}
}

/*
GetRoutingEmailDomainRouteGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetRoutingEmailDomainRouteGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing email domain route gateway timeout response has a 2xx status code
func (o *GetRoutingEmailDomainRouteGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing email domain route gateway timeout response has a 3xx status code
func (o *GetRoutingEmailDomainRouteGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing email domain route gateway timeout response has a 4xx status code
func (o *GetRoutingEmailDomainRouteGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get routing email domain route gateway timeout response has a 5xx status code
func (o *GetRoutingEmailDomainRouteGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get routing email domain route gateway timeout response a status code equal to that given
func (o *GetRoutingEmailDomainRouteGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetRoutingEmailDomainRouteGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/email/domains/{domainName}/routes/{routeId}][%d] getRoutingEmailDomainRouteGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetRoutingEmailDomainRouteGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/email/domains/{domainName}/routes/{routeId}][%d] getRoutingEmailDomainRouteGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetRoutingEmailDomainRouteGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingEmailDomainRouteGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

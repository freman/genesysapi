// Code generated by go-swagger; DO NOT EDIT.

package routing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetRoutingAssessmentsJobsParams creates a new GetRoutingAssessmentsJobsParams object
// with the default values initialized.
func NewGetRoutingAssessmentsJobsParams() *GetRoutingAssessmentsJobsParams {
	var ()
	return &GetRoutingAssessmentsJobsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetRoutingAssessmentsJobsParamsWithTimeout creates a new GetRoutingAssessmentsJobsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetRoutingAssessmentsJobsParamsWithTimeout(timeout time.Duration) *GetRoutingAssessmentsJobsParams {
	var ()
	return &GetRoutingAssessmentsJobsParams{

		timeout: timeout,
	}
}

// NewGetRoutingAssessmentsJobsParamsWithContext creates a new GetRoutingAssessmentsJobsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetRoutingAssessmentsJobsParamsWithContext(ctx context.Context) *GetRoutingAssessmentsJobsParams {
	var ()
	return &GetRoutingAssessmentsJobsParams{

		Context: ctx,
	}
}

// NewGetRoutingAssessmentsJobsParamsWithHTTPClient creates a new GetRoutingAssessmentsJobsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetRoutingAssessmentsJobsParamsWithHTTPClient(client *http.Client) *GetRoutingAssessmentsJobsParams {
	var ()
	return &GetRoutingAssessmentsJobsParams{
		HTTPClient: client,
	}
}

/*GetRoutingAssessmentsJobsParams contains all the parameters to send to the API endpoint
for the get routing assessments jobs operation typically these are written to a http.Request
*/
type GetRoutingAssessmentsJobsParams struct {

	/*DivisionID
	  Division ID(s) to filter assessment jobs by.

	*/
	DivisionID []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get routing assessments jobs params
func (o *GetRoutingAssessmentsJobsParams) WithTimeout(timeout time.Duration) *GetRoutingAssessmentsJobsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get routing assessments jobs params
func (o *GetRoutingAssessmentsJobsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get routing assessments jobs params
func (o *GetRoutingAssessmentsJobsParams) WithContext(ctx context.Context) *GetRoutingAssessmentsJobsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get routing assessments jobs params
func (o *GetRoutingAssessmentsJobsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get routing assessments jobs params
func (o *GetRoutingAssessmentsJobsParams) WithHTTPClient(client *http.Client) *GetRoutingAssessmentsJobsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get routing assessments jobs params
func (o *GetRoutingAssessmentsJobsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDivisionID adds the divisionID to the get routing assessments jobs params
func (o *GetRoutingAssessmentsJobsParams) WithDivisionID(divisionID []string) *GetRoutingAssessmentsJobsParams {
	o.SetDivisionID(divisionID)
	return o
}

// SetDivisionID adds the divisionId to the get routing assessments jobs params
func (o *GetRoutingAssessmentsJobsParams) SetDivisionID(divisionID []string) {
	o.DivisionID = divisionID
}

// WriteToRequest writes these params to a swagger request
func (o *GetRoutingAssessmentsJobsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesDivisionID := o.DivisionID

	joinedDivisionID := swag.JoinByFormat(valuesDivisionID, "multi")
	// query array param divisionId
	if err := r.SetQueryParam("divisionId", joinedDivisionID...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

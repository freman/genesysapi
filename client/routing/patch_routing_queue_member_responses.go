// Code generated by go-swagger; DO NOT EDIT.

package routing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchRoutingQueueMemberReader is a Reader for the PatchRoutingQueueMember structure.
type PatchRoutingQueueMemberReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchRoutingQueueMemberReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewPatchRoutingQueueMemberAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchRoutingQueueMemberBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchRoutingQueueMemberUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchRoutingQueueMemberForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchRoutingQueueMemberNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchRoutingQueueMemberRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchRoutingQueueMemberRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchRoutingQueueMemberUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchRoutingQueueMemberTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchRoutingQueueMemberInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchRoutingQueueMemberServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchRoutingQueueMemberGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchRoutingQueueMemberAccepted creates a PatchRoutingQueueMemberAccepted with default headers values
func NewPatchRoutingQueueMemberAccepted() *PatchRoutingQueueMemberAccepted {
	return &PatchRoutingQueueMemberAccepted{}
}

/*
PatchRoutingQueueMemberAccepted describes a response with status code 202, with default header values.

User update has been accepted
*/
type PatchRoutingQueueMemberAccepted struct {
}

// IsSuccess returns true when this patch routing queue member accepted response has a 2xx status code
func (o *PatchRoutingQueueMemberAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch routing queue member accepted response has a 3xx status code
func (o *PatchRoutingQueueMemberAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing queue member accepted response has a 4xx status code
func (o *PatchRoutingQueueMemberAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch routing queue member accepted response has a 5xx status code
func (o *PatchRoutingQueueMemberAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this patch routing queue member accepted response a status code equal to that given
func (o *PatchRoutingQueueMemberAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *PatchRoutingQueueMemberAccepted) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/members/{memberId}][%d] patchRoutingQueueMemberAccepted ", 202)
}

func (o *PatchRoutingQueueMemberAccepted) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/members/{memberId}][%d] patchRoutingQueueMemberAccepted ", 202)
}

func (o *PatchRoutingQueueMemberAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchRoutingQueueMemberBadRequest creates a PatchRoutingQueueMemberBadRequest with default headers values
func NewPatchRoutingQueueMemberBadRequest() *PatchRoutingQueueMemberBadRequest {
	return &PatchRoutingQueueMemberBadRequest{}
}

/*
PatchRoutingQueueMemberBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchRoutingQueueMemberBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch routing queue member bad request response has a 2xx status code
func (o *PatchRoutingQueueMemberBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch routing queue member bad request response has a 3xx status code
func (o *PatchRoutingQueueMemberBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing queue member bad request response has a 4xx status code
func (o *PatchRoutingQueueMemberBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch routing queue member bad request response has a 5xx status code
func (o *PatchRoutingQueueMemberBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch routing queue member bad request response a status code equal to that given
func (o *PatchRoutingQueueMemberBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchRoutingQueueMemberBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/members/{memberId}][%d] patchRoutingQueueMemberBadRequest  %+v", 400, o.Payload)
}

func (o *PatchRoutingQueueMemberBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/members/{memberId}][%d] patchRoutingQueueMemberBadRequest  %+v", 400, o.Payload)
}

func (o *PatchRoutingQueueMemberBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingQueueMemberBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingQueueMemberUnauthorized creates a PatchRoutingQueueMemberUnauthorized with default headers values
func NewPatchRoutingQueueMemberUnauthorized() *PatchRoutingQueueMemberUnauthorized {
	return &PatchRoutingQueueMemberUnauthorized{}
}

/*
PatchRoutingQueueMemberUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchRoutingQueueMemberUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch routing queue member unauthorized response has a 2xx status code
func (o *PatchRoutingQueueMemberUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch routing queue member unauthorized response has a 3xx status code
func (o *PatchRoutingQueueMemberUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing queue member unauthorized response has a 4xx status code
func (o *PatchRoutingQueueMemberUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch routing queue member unauthorized response has a 5xx status code
func (o *PatchRoutingQueueMemberUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch routing queue member unauthorized response a status code equal to that given
func (o *PatchRoutingQueueMemberUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchRoutingQueueMemberUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/members/{memberId}][%d] patchRoutingQueueMemberUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchRoutingQueueMemberUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/members/{memberId}][%d] patchRoutingQueueMemberUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchRoutingQueueMemberUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingQueueMemberUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingQueueMemberForbidden creates a PatchRoutingQueueMemberForbidden with default headers values
func NewPatchRoutingQueueMemberForbidden() *PatchRoutingQueueMemberForbidden {
	return &PatchRoutingQueueMemberForbidden{}
}

/*
PatchRoutingQueueMemberForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PatchRoutingQueueMemberForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch routing queue member forbidden response has a 2xx status code
func (o *PatchRoutingQueueMemberForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch routing queue member forbidden response has a 3xx status code
func (o *PatchRoutingQueueMemberForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing queue member forbidden response has a 4xx status code
func (o *PatchRoutingQueueMemberForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch routing queue member forbidden response has a 5xx status code
func (o *PatchRoutingQueueMemberForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch routing queue member forbidden response a status code equal to that given
func (o *PatchRoutingQueueMemberForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchRoutingQueueMemberForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/members/{memberId}][%d] patchRoutingQueueMemberForbidden  %+v", 403, o.Payload)
}

func (o *PatchRoutingQueueMemberForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/members/{memberId}][%d] patchRoutingQueueMemberForbidden  %+v", 403, o.Payload)
}

func (o *PatchRoutingQueueMemberForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingQueueMemberForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingQueueMemberNotFound creates a PatchRoutingQueueMemberNotFound with default headers values
func NewPatchRoutingQueueMemberNotFound() *PatchRoutingQueueMemberNotFound {
	return &PatchRoutingQueueMemberNotFound{}
}

/*
PatchRoutingQueueMemberNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PatchRoutingQueueMemberNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch routing queue member not found response has a 2xx status code
func (o *PatchRoutingQueueMemberNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch routing queue member not found response has a 3xx status code
func (o *PatchRoutingQueueMemberNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing queue member not found response has a 4xx status code
func (o *PatchRoutingQueueMemberNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch routing queue member not found response has a 5xx status code
func (o *PatchRoutingQueueMemberNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch routing queue member not found response a status code equal to that given
func (o *PatchRoutingQueueMemberNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchRoutingQueueMemberNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/members/{memberId}][%d] patchRoutingQueueMemberNotFound  %+v", 404, o.Payload)
}

func (o *PatchRoutingQueueMemberNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/members/{memberId}][%d] patchRoutingQueueMemberNotFound  %+v", 404, o.Payload)
}

func (o *PatchRoutingQueueMemberNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingQueueMemberNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingQueueMemberRequestTimeout creates a PatchRoutingQueueMemberRequestTimeout with default headers values
func NewPatchRoutingQueueMemberRequestTimeout() *PatchRoutingQueueMemberRequestTimeout {
	return &PatchRoutingQueueMemberRequestTimeout{}
}

/*
PatchRoutingQueueMemberRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchRoutingQueueMemberRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch routing queue member request timeout response has a 2xx status code
func (o *PatchRoutingQueueMemberRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch routing queue member request timeout response has a 3xx status code
func (o *PatchRoutingQueueMemberRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing queue member request timeout response has a 4xx status code
func (o *PatchRoutingQueueMemberRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch routing queue member request timeout response has a 5xx status code
func (o *PatchRoutingQueueMemberRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this patch routing queue member request timeout response a status code equal to that given
func (o *PatchRoutingQueueMemberRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PatchRoutingQueueMemberRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/members/{memberId}][%d] patchRoutingQueueMemberRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchRoutingQueueMemberRequestTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/members/{memberId}][%d] patchRoutingQueueMemberRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchRoutingQueueMemberRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingQueueMemberRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingQueueMemberRequestEntityTooLarge creates a PatchRoutingQueueMemberRequestEntityTooLarge with default headers values
func NewPatchRoutingQueueMemberRequestEntityTooLarge() *PatchRoutingQueueMemberRequestEntityTooLarge {
	return &PatchRoutingQueueMemberRequestEntityTooLarge{}
}

/*
PatchRoutingQueueMemberRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PatchRoutingQueueMemberRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch routing queue member request entity too large response has a 2xx status code
func (o *PatchRoutingQueueMemberRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch routing queue member request entity too large response has a 3xx status code
func (o *PatchRoutingQueueMemberRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing queue member request entity too large response has a 4xx status code
func (o *PatchRoutingQueueMemberRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch routing queue member request entity too large response has a 5xx status code
func (o *PatchRoutingQueueMemberRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this patch routing queue member request entity too large response a status code equal to that given
func (o *PatchRoutingQueueMemberRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PatchRoutingQueueMemberRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/members/{memberId}][%d] patchRoutingQueueMemberRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchRoutingQueueMemberRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/members/{memberId}][%d] patchRoutingQueueMemberRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchRoutingQueueMemberRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingQueueMemberRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingQueueMemberUnsupportedMediaType creates a PatchRoutingQueueMemberUnsupportedMediaType with default headers values
func NewPatchRoutingQueueMemberUnsupportedMediaType() *PatchRoutingQueueMemberUnsupportedMediaType {
	return &PatchRoutingQueueMemberUnsupportedMediaType{}
}

/*
PatchRoutingQueueMemberUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchRoutingQueueMemberUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch routing queue member unsupported media type response has a 2xx status code
func (o *PatchRoutingQueueMemberUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch routing queue member unsupported media type response has a 3xx status code
func (o *PatchRoutingQueueMemberUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing queue member unsupported media type response has a 4xx status code
func (o *PatchRoutingQueueMemberUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch routing queue member unsupported media type response has a 5xx status code
func (o *PatchRoutingQueueMemberUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this patch routing queue member unsupported media type response a status code equal to that given
func (o *PatchRoutingQueueMemberUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PatchRoutingQueueMemberUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/members/{memberId}][%d] patchRoutingQueueMemberUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchRoutingQueueMemberUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/members/{memberId}][%d] patchRoutingQueueMemberUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchRoutingQueueMemberUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingQueueMemberUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingQueueMemberTooManyRequests creates a PatchRoutingQueueMemberTooManyRequests with default headers values
func NewPatchRoutingQueueMemberTooManyRequests() *PatchRoutingQueueMemberTooManyRequests {
	return &PatchRoutingQueueMemberTooManyRequests{}
}

/*
PatchRoutingQueueMemberTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchRoutingQueueMemberTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch routing queue member too many requests response has a 2xx status code
func (o *PatchRoutingQueueMemberTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch routing queue member too many requests response has a 3xx status code
func (o *PatchRoutingQueueMemberTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing queue member too many requests response has a 4xx status code
func (o *PatchRoutingQueueMemberTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch routing queue member too many requests response has a 5xx status code
func (o *PatchRoutingQueueMemberTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch routing queue member too many requests response a status code equal to that given
func (o *PatchRoutingQueueMemberTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchRoutingQueueMemberTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/members/{memberId}][%d] patchRoutingQueueMemberTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchRoutingQueueMemberTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/members/{memberId}][%d] patchRoutingQueueMemberTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchRoutingQueueMemberTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingQueueMemberTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingQueueMemberInternalServerError creates a PatchRoutingQueueMemberInternalServerError with default headers values
func NewPatchRoutingQueueMemberInternalServerError() *PatchRoutingQueueMemberInternalServerError {
	return &PatchRoutingQueueMemberInternalServerError{}
}

/*
PatchRoutingQueueMemberInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchRoutingQueueMemberInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch routing queue member internal server error response has a 2xx status code
func (o *PatchRoutingQueueMemberInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch routing queue member internal server error response has a 3xx status code
func (o *PatchRoutingQueueMemberInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing queue member internal server error response has a 4xx status code
func (o *PatchRoutingQueueMemberInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch routing queue member internal server error response has a 5xx status code
func (o *PatchRoutingQueueMemberInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch routing queue member internal server error response a status code equal to that given
func (o *PatchRoutingQueueMemberInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchRoutingQueueMemberInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/members/{memberId}][%d] patchRoutingQueueMemberInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchRoutingQueueMemberInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/members/{memberId}][%d] patchRoutingQueueMemberInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchRoutingQueueMemberInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingQueueMemberInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingQueueMemberServiceUnavailable creates a PatchRoutingQueueMemberServiceUnavailable with default headers values
func NewPatchRoutingQueueMemberServiceUnavailable() *PatchRoutingQueueMemberServiceUnavailable {
	return &PatchRoutingQueueMemberServiceUnavailable{}
}

/*
PatchRoutingQueueMemberServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchRoutingQueueMemberServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch routing queue member service unavailable response has a 2xx status code
func (o *PatchRoutingQueueMemberServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch routing queue member service unavailable response has a 3xx status code
func (o *PatchRoutingQueueMemberServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing queue member service unavailable response has a 4xx status code
func (o *PatchRoutingQueueMemberServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch routing queue member service unavailable response has a 5xx status code
func (o *PatchRoutingQueueMemberServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this patch routing queue member service unavailable response a status code equal to that given
func (o *PatchRoutingQueueMemberServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PatchRoutingQueueMemberServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/members/{memberId}][%d] patchRoutingQueueMemberServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchRoutingQueueMemberServiceUnavailable) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/members/{memberId}][%d] patchRoutingQueueMemberServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchRoutingQueueMemberServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingQueueMemberServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingQueueMemberGatewayTimeout creates a PatchRoutingQueueMemberGatewayTimeout with default headers values
func NewPatchRoutingQueueMemberGatewayTimeout() *PatchRoutingQueueMemberGatewayTimeout {
	return &PatchRoutingQueueMemberGatewayTimeout{}
}

/*
PatchRoutingQueueMemberGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PatchRoutingQueueMemberGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch routing queue member gateway timeout response has a 2xx status code
func (o *PatchRoutingQueueMemberGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch routing queue member gateway timeout response has a 3xx status code
func (o *PatchRoutingQueueMemberGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing queue member gateway timeout response has a 4xx status code
func (o *PatchRoutingQueueMemberGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch routing queue member gateway timeout response has a 5xx status code
func (o *PatchRoutingQueueMemberGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this patch routing queue member gateway timeout response a status code equal to that given
func (o *PatchRoutingQueueMemberGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PatchRoutingQueueMemberGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/members/{memberId}][%d] patchRoutingQueueMemberGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchRoutingQueueMemberGatewayTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/members/{memberId}][%d] patchRoutingQueueMemberGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchRoutingQueueMemberGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingQueueMemberGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

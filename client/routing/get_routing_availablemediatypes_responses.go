// Code generated by go-swagger; DO NOT EDIT.

package routing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetRoutingAvailablemediatypesReader is a Reader for the GetRoutingAvailablemediatypes structure.
type GetRoutingAvailablemediatypesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRoutingAvailablemediatypesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRoutingAvailablemediatypesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRoutingAvailablemediatypesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetRoutingAvailablemediatypesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRoutingAvailablemediatypesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRoutingAvailablemediatypesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetRoutingAvailablemediatypesRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetRoutingAvailablemediatypesRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetRoutingAvailablemediatypesUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetRoutingAvailablemediatypesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetRoutingAvailablemediatypesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetRoutingAvailablemediatypesServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetRoutingAvailablemediatypesGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRoutingAvailablemediatypesOK creates a GetRoutingAvailablemediatypesOK with default headers values
func NewGetRoutingAvailablemediatypesOK() *GetRoutingAvailablemediatypesOK {
	return &GetRoutingAvailablemediatypesOK{}
}

/*
GetRoutingAvailablemediatypesOK describes a response with status code 200, with default header values.

successful operation
*/
type GetRoutingAvailablemediatypesOK struct {
	Payload *models.AvailableMediaTypeEntityListing
}

// IsSuccess returns true when this get routing availablemediatypes o k response has a 2xx status code
func (o *GetRoutingAvailablemediatypesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get routing availablemediatypes o k response has a 3xx status code
func (o *GetRoutingAvailablemediatypesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing availablemediatypes o k response has a 4xx status code
func (o *GetRoutingAvailablemediatypesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get routing availablemediatypes o k response has a 5xx status code
func (o *GetRoutingAvailablemediatypesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing availablemediatypes o k response a status code equal to that given
func (o *GetRoutingAvailablemediatypesOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetRoutingAvailablemediatypesOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/availablemediatypes][%d] getRoutingAvailablemediatypesOK  %+v", 200, o.Payload)
}

func (o *GetRoutingAvailablemediatypesOK) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/availablemediatypes][%d] getRoutingAvailablemediatypesOK  %+v", 200, o.Payload)
}

func (o *GetRoutingAvailablemediatypesOK) GetPayload() *models.AvailableMediaTypeEntityListing {
	return o.Payload
}

func (o *GetRoutingAvailablemediatypesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AvailableMediaTypeEntityListing)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingAvailablemediatypesBadRequest creates a GetRoutingAvailablemediatypesBadRequest with default headers values
func NewGetRoutingAvailablemediatypesBadRequest() *GetRoutingAvailablemediatypesBadRequest {
	return &GetRoutingAvailablemediatypesBadRequest{}
}

/*
GetRoutingAvailablemediatypesBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetRoutingAvailablemediatypesBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing availablemediatypes bad request response has a 2xx status code
func (o *GetRoutingAvailablemediatypesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing availablemediatypes bad request response has a 3xx status code
func (o *GetRoutingAvailablemediatypesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing availablemediatypes bad request response has a 4xx status code
func (o *GetRoutingAvailablemediatypesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing availablemediatypes bad request response has a 5xx status code
func (o *GetRoutingAvailablemediatypesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing availablemediatypes bad request response a status code equal to that given
func (o *GetRoutingAvailablemediatypesBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetRoutingAvailablemediatypesBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/availablemediatypes][%d] getRoutingAvailablemediatypesBadRequest  %+v", 400, o.Payload)
}

func (o *GetRoutingAvailablemediatypesBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/availablemediatypes][%d] getRoutingAvailablemediatypesBadRequest  %+v", 400, o.Payload)
}

func (o *GetRoutingAvailablemediatypesBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingAvailablemediatypesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingAvailablemediatypesUnauthorized creates a GetRoutingAvailablemediatypesUnauthorized with default headers values
func NewGetRoutingAvailablemediatypesUnauthorized() *GetRoutingAvailablemediatypesUnauthorized {
	return &GetRoutingAvailablemediatypesUnauthorized{}
}

/*
GetRoutingAvailablemediatypesUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetRoutingAvailablemediatypesUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing availablemediatypes unauthorized response has a 2xx status code
func (o *GetRoutingAvailablemediatypesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing availablemediatypes unauthorized response has a 3xx status code
func (o *GetRoutingAvailablemediatypesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing availablemediatypes unauthorized response has a 4xx status code
func (o *GetRoutingAvailablemediatypesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing availablemediatypes unauthorized response has a 5xx status code
func (o *GetRoutingAvailablemediatypesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing availablemediatypes unauthorized response a status code equal to that given
func (o *GetRoutingAvailablemediatypesUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetRoutingAvailablemediatypesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/availablemediatypes][%d] getRoutingAvailablemediatypesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRoutingAvailablemediatypesUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/availablemediatypes][%d] getRoutingAvailablemediatypesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRoutingAvailablemediatypesUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingAvailablemediatypesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingAvailablemediatypesForbidden creates a GetRoutingAvailablemediatypesForbidden with default headers values
func NewGetRoutingAvailablemediatypesForbidden() *GetRoutingAvailablemediatypesForbidden {
	return &GetRoutingAvailablemediatypesForbidden{}
}

/*
GetRoutingAvailablemediatypesForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetRoutingAvailablemediatypesForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing availablemediatypes forbidden response has a 2xx status code
func (o *GetRoutingAvailablemediatypesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing availablemediatypes forbidden response has a 3xx status code
func (o *GetRoutingAvailablemediatypesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing availablemediatypes forbidden response has a 4xx status code
func (o *GetRoutingAvailablemediatypesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing availablemediatypes forbidden response has a 5xx status code
func (o *GetRoutingAvailablemediatypesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing availablemediatypes forbidden response a status code equal to that given
func (o *GetRoutingAvailablemediatypesForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetRoutingAvailablemediatypesForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/availablemediatypes][%d] getRoutingAvailablemediatypesForbidden  %+v", 403, o.Payload)
}

func (o *GetRoutingAvailablemediatypesForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/availablemediatypes][%d] getRoutingAvailablemediatypesForbidden  %+v", 403, o.Payload)
}

func (o *GetRoutingAvailablemediatypesForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingAvailablemediatypesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingAvailablemediatypesNotFound creates a GetRoutingAvailablemediatypesNotFound with default headers values
func NewGetRoutingAvailablemediatypesNotFound() *GetRoutingAvailablemediatypesNotFound {
	return &GetRoutingAvailablemediatypesNotFound{}
}

/*
GetRoutingAvailablemediatypesNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetRoutingAvailablemediatypesNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing availablemediatypes not found response has a 2xx status code
func (o *GetRoutingAvailablemediatypesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing availablemediatypes not found response has a 3xx status code
func (o *GetRoutingAvailablemediatypesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing availablemediatypes not found response has a 4xx status code
func (o *GetRoutingAvailablemediatypesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing availablemediatypes not found response has a 5xx status code
func (o *GetRoutingAvailablemediatypesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing availablemediatypes not found response a status code equal to that given
func (o *GetRoutingAvailablemediatypesNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetRoutingAvailablemediatypesNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/availablemediatypes][%d] getRoutingAvailablemediatypesNotFound  %+v", 404, o.Payload)
}

func (o *GetRoutingAvailablemediatypesNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/availablemediatypes][%d] getRoutingAvailablemediatypesNotFound  %+v", 404, o.Payload)
}

func (o *GetRoutingAvailablemediatypesNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingAvailablemediatypesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingAvailablemediatypesRequestTimeout creates a GetRoutingAvailablemediatypesRequestTimeout with default headers values
func NewGetRoutingAvailablemediatypesRequestTimeout() *GetRoutingAvailablemediatypesRequestTimeout {
	return &GetRoutingAvailablemediatypesRequestTimeout{}
}

/*
GetRoutingAvailablemediatypesRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetRoutingAvailablemediatypesRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing availablemediatypes request timeout response has a 2xx status code
func (o *GetRoutingAvailablemediatypesRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing availablemediatypes request timeout response has a 3xx status code
func (o *GetRoutingAvailablemediatypesRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing availablemediatypes request timeout response has a 4xx status code
func (o *GetRoutingAvailablemediatypesRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing availablemediatypes request timeout response has a 5xx status code
func (o *GetRoutingAvailablemediatypesRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing availablemediatypes request timeout response a status code equal to that given
func (o *GetRoutingAvailablemediatypesRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetRoutingAvailablemediatypesRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/availablemediatypes][%d] getRoutingAvailablemediatypesRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetRoutingAvailablemediatypesRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/availablemediatypes][%d] getRoutingAvailablemediatypesRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetRoutingAvailablemediatypesRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingAvailablemediatypesRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingAvailablemediatypesRequestEntityTooLarge creates a GetRoutingAvailablemediatypesRequestEntityTooLarge with default headers values
func NewGetRoutingAvailablemediatypesRequestEntityTooLarge() *GetRoutingAvailablemediatypesRequestEntityTooLarge {
	return &GetRoutingAvailablemediatypesRequestEntityTooLarge{}
}

/*
GetRoutingAvailablemediatypesRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetRoutingAvailablemediatypesRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing availablemediatypes request entity too large response has a 2xx status code
func (o *GetRoutingAvailablemediatypesRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing availablemediatypes request entity too large response has a 3xx status code
func (o *GetRoutingAvailablemediatypesRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing availablemediatypes request entity too large response has a 4xx status code
func (o *GetRoutingAvailablemediatypesRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing availablemediatypes request entity too large response has a 5xx status code
func (o *GetRoutingAvailablemediatypesRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing availablemediatypes request entity too large response a status code equal to that given
func (o *GetRoutingAvailablemediatypesRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetRoutingAvailablemediatypesRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/availablemediatypes][%d] getRoutingAvailablemediatypesRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetRoutingAvailablemediatypesRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/availablemediatypes][%d] getRoutingAvailablemediatypesRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetRoutingAvailablemediatypesRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingAvailablemediatypesRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingAvailablemediatypesUnsupportedMediaType creates a GetRoutingAvailablemediatypesUnsupportedMediaType with default headers values
func NewGetRoutingAvailablemediatypesUnsupportedMediaType() *GetRoutingAvailablemediatypesUnsupportedMediaType {
	return &GetRoutingAvailablemediatypesUnsupportedMediaType{}
}

/*
GetRoutingAvailablemediatypesUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetRoutingAvailablemediatypesUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing availablemediatypes unsupported media type response has a 2xx status code
func (o *GetRoutingAvailablemediatypesUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing availablemediatypes unsupported media type response has a 3xx status code
func (o *GetRoutingAvailablemediatypesUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing availablemediatypes unsupported media type response has a 4xx status code
func (o *GetRoutingAvailablemediatypesUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing availablemediatypes unsupported media type response has a 5xx status code
func (o *GetRoutingAvailablemediatypesUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing availablemediatypes unsupported media type response a status code equal to that given
func (o *GetRoutingAvailablemediatypesUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetRoutingAvailablemediatypesUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/availablemediatypes][%d] getRoutingAvailablemediatypesUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetRoutingAvailablemediatypesUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/availablemediatypes][%d] getRoutingAvailablemediatypesUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetRoutingAvailablemediatypesUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingAvailablemediatypesUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingAvailablemediatypesTooManyRequests creates a GetRoutingAvailablemediatypesTooManyRequests with default headers values
func NewGetRoutingAvailablemediatypesTooManyRequests() *GetRoutingAvailablemediatypesTooManyRequests {
	return &GetRoutingAvailablemediatypesTooManyRequests{}
}

/*
GetRoutingAvailablemediatypesTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetRoutingAvailablemediatypesTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing availablemediatypes too many requests response has a 2xx status code
func (o *GetRoutingAvailablemediatypesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing availablemediatypes too many requests response has a 3xx status code
func (o *GetRoutingAvailablemediatypesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing availablemediatypes too many requests response has a 4xx status code
func (o *GetRoutingAvailablemediatypesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing availablemediatypes too many requests response has a 5xx status code
func (o *GetRoutingAvailablemediatypesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing availablemediatypes too many requests response a status code equal to that given
func (o *GetRoutingAvailablemediatypesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetRoutingAvailablemediatypesTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/availablemediatypes][%d] getRoutingAvailablemediatypesTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetRoutingAvailablemediatypesTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/availablemediatypes][%d] getRoutingAvailablemediatypesTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetRoutingAvailablemediatypesTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingAvailablemediatypesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingAvailablemediatypesInternalServerError creates a GetRoutingAvailablemediatypesInternalServerError with default headers values
func NewGetRoutingAvailablemediatypesInternalServerError() *GetRoutingAvailablemediatypesInternalServerError {
	return &GetRoutingAvailablemediatypesInternalServerError{}
}

/*
GetRoutingAvailablemediatypesInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetRoutingAvailablemediatypesInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing availablemediatypes internal server error response has a 2xx status code
func (o *GetRoutingAvailablemediatypesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing availablemediatypes internal server error response has a 3xx status code
func (o *GetRoutingAvailablemediatypesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing availablemediatypes internal server error response has a 4xx status code
func (o *GetRoutingAvailablemediatypesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get routing availablemediatypes internal server error response has a 5xx status code
func (o *GetRoutingAvailablemediatypesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get routing availablemediatypes internal server error response a status code equal to that given
func (o *GetRoutingAvailablemediatypesInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetRoutingAvailablemediatypesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/availablemediatypes][%d] getRoutingAvailablemediatypesInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRoutingAvailablemediatypesInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/availablemediatypes][%d] getRoutingAvailablemediatypesInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRoutingAvailablemediatypesInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingAvailablemediatypesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingAvailablemediatypesServiceUnavailable creates a GetRoutingAvailablemediatypesServiceUnavailable with default headers values
func NewGetRoutingAvailablemediatypesServiceUnavailable() *GetRoutingAvailablemediatypesServiceUnavailable {
	return &GetRoutingAvailablemediatypesServiceUnavailable{}
}

/*
GetRoutingAvailablemediatypesServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetRoutingAvailablemediatypesServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing availablemediatypes service unavailable response has a 2xx status code
func (o *GetRoutingAvailablemediatypesServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing availablemediatypes service unavailable response has a 3xx status code
func (o *GetRoutingAvailablemediatypesServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing availablemediatypes service unavailable response has a 4xx status code
func (o *GetRoutingAvailablemediatypesServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get routing availablemediatypes service unavailable response has a 5xx status code
func (o *GetRoutingAvailablemediatypesServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get routing availablemediatypes service unavailable response a status code equal to that given
func (o *GetRoutingAvailablemediatypesServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetRoutingAvailablemediatypesServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/availablemediatypes][%d] getRoutingAvailablemediatypesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetRoutingAvailablemediatypesServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/availablemediatypes][%d] getRoutingAvailablemediatypesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetRoutingAvailablemediatypesServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingAvailablemediatypesServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingAvailablemediatypesGatewayTimeout creates a GetRoutingAvailablemediatypesGatewayTimeout with default headers values
func NewGetRoutingAvailablemediatypesGatewayTimeout() *GetRoutingAvailablemediatypesGatewayTimeout {
	return &GetRoutingAvailablemediatypesGatewayTimeout{}
}

/*
GetRoutingAvailablemediatypesGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetRoutingAvailablemediatypesGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing availablemediatypes gateway timeout response has a 2xx status code
func (o *GetRoutingAvailablemediatypesGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing availablemediatypes gateway timeout response has a 3xx status code
func (o *GetRoutingAvailablemediatypesGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing availablemediatypes gateway timeout response has a 4xx status code
func (o *GetRoutingAvailablemediatypesGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get routing availablemediatypes gateway timeout response has a 5xx status code
func (o *GetRoutingAvailablemediatypesGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get routing availablemediatypes gateway timeout response a status code equal to that given
func (o *GetRoutingAvailablemediatypesGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetRoutingAvailablemediatypesGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/availablemediatypes][%d] getRoutingAvailablemediatypesGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetRoutingAvailablemediatypesGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/availablemediatypes][%d] getRoutingAvailablemediatypesGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetRoutingAvailablemediatypesGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingAvailablemediatypesGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

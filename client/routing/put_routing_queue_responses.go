// Code generated by go-swagger; DO NOT EDIT.

package routing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutRoutingQueueReader is a Reader for the PutRoutingQueue structure.
type PutRoutingQueueReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRoutingQueueReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutRoutingQueueOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRoutingQueueBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRoutingQueueUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRoutingQueueForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutRoutingQueueNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPutRoutingQueueRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutRoutingQueueRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutRoutingQueueUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutRoutingQueueTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutRoutingQueueInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutRoutingQueueServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutRoutingQueueGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutRoutingQueueOK creates a PutRoutingQueueOK with default headers values
func NewPutRoutingQueueOK() *PutRoutingQueueOK {
	return &PutRoutingQueueOK{}
}

/*
PutRoutingQueueOK describes a response with status code 200, with default header values.

successful operation
*/
type PutRoutingQueueOK struct {
	Payload *models.Queue
}

// IsSuccess returns true when this put routing queue o k response has a 2xx status code
func (o *PutRoutingQueueOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put routing queue o k response has a 3xx status code
func (o *PutRoutingQueueOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put routing queue o k response has a 4xx status code
func (o *PutRoutingQueueOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put routing queue o k response has a 5xx status code
func (o *PutRoutingQueueOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put routing queue o k response a status code equal to that given
func (o *PutRoutingQueueOK) IsCode(code int) bool {
	return code == 200
}

func (o *PutRoutingQueueOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/routing/queues/{queueId}][%d] putRoutingQueueOK  %+v", 200, o.Payload)
}

func (o *PutRoutingQueueOK) String() string {
	return fmt.Sprintf("[PUT /api/v2/routing/queues/{queueId}][%d] putRoutingQueueOK  %+v", 200, o.Payload)
}

func (o *PutRoutingQueueOK) GetPayload() *models.Queue {
	return o.Payload
}

func (o *PutRoutingQueueOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Queue)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRoutingQueueBadRequest creates a PutRoutingQueueBadRequest with default headers values
func NewPutRoutingQueueBadRequest() *PutRoutingQueueBadRequest {
	return &PutRoutingQueueBadRequest{}
}

/*
PutRoutingQueueBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutRoutingQueueBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put routing queue bad request response has a 2xx status code
func (o *PutRoutingQueueBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put routing queue bad request response has a 3xx status code
func (o *PutRoutingQueueBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put routing queue bad request response has a 4xx status code
func (o *PutRoutingQueueBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put routing queue bad request response has a 5xx status code
func (o *PutRoutingQueueBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put routing queue bad request response a status code equal to that given
func (o *PutRoutingQueueBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PutRoutingQueueBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/routing/queues/{queueId}][%d] putRoutingQueueBadRequest  %+v", 400, o.Payload)
}

func (o *PutRoutingQueueBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/v2/routing/queues/{queueId}][%d] putRoutingQueueBadRequest  %+v", 400, o.Payload)
}

func (o *PutRoutingQueueBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRoutingQueueBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRoutingQueueUnauthorized creates a PutRoutingQueueUnauthorized with default headers values
func NewPutRoutingQueueUnauthorized() *PutRoutingQueueUnauthorized {
	return &PutRoutingQueueUnauthorized{}
}

/*
PutRoutingQueueUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PutRoutingQueueUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put routing queue unauthorized response has a 2xx status code
func (o *PutRoutingQueueUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put routing queue unauthorized response has a 3xx status code
func (o *PutRoutingQueueUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put routing queue unauthorized response has a 4xx status code
func (o *PutRoutingQueueUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put routing queue unauthorized response has a 5xx status code
func (o *PutRoutingQueueUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put routing queue unauthorized response a status code equal to that given
func (o *PutRoutingQueueUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PutRoutingQueueUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/routing/queues/{queueId}][%d] putRoutingQueueUnauthorized  %+v", 401, o.Payload)
}

func (o *PutRoutingQueueUnauthorized) String() string {
	return fmt.Sprintf("[PUT /api/v2/routing/queues/{queueId}][%d] putRoutingQueueUnauthorized  %+v", 401, o.Payload)
}

func (o *PutRoutingQueueUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRoutingQueueUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRoutingQueueForbidden creates a PutRoutingQueueForbidden with default headers values
func NewPutRoutingQueueForbidden() *PutRoutingQueueForbidden {
	return &PutRoutingQueueForbidden{}
}

/*
PutRoutingQueueForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PutRoutingQueueForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put routing queue forbidden response has a 2xx status code
func (o *PutRoutingQueueForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put routing queue forbidden response has a 3xx status code
func (o *PutRoutingQueueForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put routing queue forbidden response has a 4xx status code
func (o *PutRoutingQueueForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put routing queue forbidden response has a 5xx status code
func (o *PutRoutingQueueForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put routing queue forbidden response a status code equal to that given
func (o *PutRoutingQueueForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PutRoutingQueueForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/routing/queues/{queueId}][%d] putRoutingQueueForbidden  %+v", 403, o.Payload)
}

func (o *PutRoutingQueueForbidden) String() string {
	return fmt.Sprintf("[PUT /api/v2/routing/queues/{queueId}][%d] putRoutingQueueForbidden  %+v", 403, o.Payload)
}

func (o *PutRoutingQueueForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRoutingQueueForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRoutingQueueNotFound creates a PutRoutingQueueNotFound with default headers values
func NewPutRoutingQueueNotFound() *PutRoutingQueueNotFound {
	return &PutRoutingQueueNotFound{}
}

/*
PutRoutingQueueNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PutRoutingQueueNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put routing queue not found response has a 2xx status code
func (o *PutRoutingQueueNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put routing queue not found response has a 3xx status code
func (o *PutRoutingQueueNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put routing queue not found response has a 4xx status code
func (o *PutRoutingQueueNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put routing queue not found response has a 5xx status code
func (o *PutRoutingQueueNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put routing queue not found response a status code equal to that given
func (o *PutRoutingQueueNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PutRoutingQueueNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/routing/queues/{queueId}][%d] putRoutingQueueNotFound  %+v", 404, o.Payload)
}

func (o *PutRoutingQueueNotFound) String() string {
	return fmt.Sprintf("[PUT /api/v2/routing/queues/{queueId}][%d] putRoutingQueueNotFound  %+v", 404, o.Payload)
}

func (o *PutRoutingQueueNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRoutingQueueNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRoutingQueueRequestTimeout creates a PutRoutingQueueRequestTimeout with default headers values
func NewPutRoutingQueueRequestTimeout() *PutRoutingQueueRequestTimeout {
	return &PutRoutingQueueRequestTimeout{}
}

/*
PutRoutingQueueRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PutRoutingQueueRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put routing queue request timeout response has a 2xx status code
func (o *PutRoutingQueueRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put routing queue request timeout response has a 3xx status code
func (o *PutRoutingQueueRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put routing queue request timeout response has a 4xx status code
func (o *PutRoutingQueueRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this put routing queue request timeout response has a 5xx status code
func (o *PutRoutingQueueRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this put routing queue request timeout response a status code equal to that given
func (o *PutRoutingQueueRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PutRoutingQueueRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/routing/queues/{queueId}][%d] putRoutingQueueRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutRoutingQueueRequestTimeout) String() string {
	return fmt.Sprintf("[PUT /api/v2/routing/queues/{queueId}][%d] putRoutingQueueRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutRoutingQueueRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRoutingQueueRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRoutingQueueRequestEntityTooLarge creates a PutRoutingQueueRequestEntityTooLarge with default headers values
func NewPutRoutingQueueRequestEntityTooLarge() *PutRoutingQueueRequestEntityTooLarge {
	return &PutRoutingQueueRequestEntityTooLarge{}
}

/*
PutRoutingQueueRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PutRoutingQueueRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put routing queue request entity too large response has a 2xx status code
func (o *PutRoutingQueueRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put routing queue request entity too large response has a 3xx status code
func (o *PutRoutingQueueRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put routing queue request entity too large response has a 4xx status code
func (o *PutRoutingQueueRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this put routing queue request entity too large response has a 5xx status code
func (o *PutRoutingQueueRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this put routing queue request entity too large response a status code equal to that given
func (o *PutRoutingQueueRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PutRoutingQueueRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/routing/queues/{queueId}][%d] putRoutingQueueRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutRoutingQueueRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PUT /api/v2/routing/queues/{queueId}][%d] putRoutingQueueRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutRoutingQueueRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRoutingQueueRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRoutingQueueUnsupportedMediaType creates a PutRoutingQueueUnsupportedMediaType with default headers values
func NewPutRoutingQueueUnsupportedMediaType() *PutRoutingQueueUnsupportedMediaType {
	return &PutRoutingQueueUnsupportedMediaType{}
}

/*
PutRoutingQueueUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutRoutingQueueUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put routing queue unsupported media type response has a 2xx status code
func (o *PutRoutingQueueUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put routing queue unsupported media type response has a 3xx status code
func (o *PutRoutingQueueUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put routing queue unsupported media type response has a 4xx status code
func (o *PutRoutingQueueUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this put routing queue unsupported media type response has a 5xx status code
func (o *PutRoutingQueueUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this put routing queue unsupported media type response a status code equal to that given
func (o *PutRoutingQueueUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PutRoutingQueueUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/routing/queues/{queueId}][%d] putRoutingQueueUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutRoutingQueueUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PUT /api/v2/routing/queues/{queueId}][%d] putRoutingQueueUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutRoutingQueueUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRoutingQueueUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRoutingQueueTooManyRequests creates a PutRoutingQueueTooManyRequests with default headers values
func NewPutRoutingQueueTooManyRequests() *PutRoutingQueueTooManyRequests {
	return &PutRoutingQueueTooManyRequests{}
}

/*
PutRoutingQueueTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PutRoutingQueueTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put routing queue too many requests response has a 2xx status code
func (o *PutRoutingQueueTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put routing queue too many requests response has a 3xx status code
func (o *PutRoutingQueueTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put routing queue too many requests response has a 4xx status code
func (o *PutRoutingQueueTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this put routing queue too many requests response has a 5xx status code
func (o *PutRoutingQueueTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this put routing queue too many requests response a status code equal to that given
func (o *PutRoutingQueueTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PutRoutingQueueTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/routing/queues/{queueId}][%d] putRoutingQueueTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutRoutingQueueTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /api/v2/routing/queues/{queueId}][%d] putRoutingQueueTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutRoutingQueueTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRoutingQueueTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRoutingQueueInternalServerError creates a PutRoutingQueueInternalServerError with default headers values
func NewPutRoutingQueueInternalServerError() *PutRoutingQueueInternalServerError {
	return &PutRoutingQueueInternalServerError{}
}

/*
PutRoutingQueueInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutRoutingQueueInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put routing queue internal server error response has a 2xx status code
func (o *PutRoutingQueueInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put routing queue internal server error response has a 3xx status code
func (o *PutRoutingQueueInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put routing queue internal server error response has a 4xx status code
func (o *PutRoutingQueueInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this put routing queue internal server error response has a 5xx status code
func (o *PutRoutingQueueInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this put routing queue internal server error response a status code equal to that given
func (o *PutRoutingQueueInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PutRoutingQueueInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/routing/queues/{queueId}][%d] putRoutingQueueInternalServerError  %+v", 500, o.Payload)
}

func (o *PutRoutingQueueInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/v2/routing/queues/{queueId}][%d] putRoutingQueueInternalServerError  %+v", 500, o.Payload)
}

func (o *PutRoutingQueueInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRoutingQueueInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRoutingQueueServiceUnavailable creates a PutRoutingQueueServiceUnavailable with default headers values
func NewPutRoutingQueueServiceUnavailable() *PutRoutingQueueServiceUnavailable {
	return &PutRoutingQueueServiceUnavailable{}
}

/*
PutRoutingQueueServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutRoutingQueueServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put routing queue service unavailable response has a 2xx status code
func (o *PutRoutingQueueServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put routing queue service unavailable response has a 3xx status code
func (o *PutRoutingQueueServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put routing queue service unavailable response has a 4xx status code
func (o *PutRoutingQueueServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this put routing queue service unavailable response has a 5xx status code
func (o *PutRoutingQueueServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this put routing queue service unavailable response a status code equal to that given
func (o *PutRoutingQueueServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PutRoutingQueueServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/routing/queues/{queueId}][%d] putRoutingQueueServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutRoutingQueueServiceUnavailable) String() string {
	return fmt.Sprintf("[PUT /api/v2/routing/queues/{queueId}][%d] putRoutingQueueServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutRoutingQueueServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRoutingQueueServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRoutingQueueGatewayTimeout creates a PutRoutingQueueGatewayTimeout with default headers values
func NewPutRoutingQueueGatewayTimeout() *PutRoutingQueueGatewayTimeout {
	return &PutRoutingQueueGatewayTimeout{}
}

/*
PutRoutingQueueGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PutRoutingQueueGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put routing queue gateway timeout response has a 2xx status code
func (o *PutRoutingQueueGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put routing queue gateway timeout response has a 3xx status code
func (o *PutRoutingQueueGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put routing queue gateway timeout response has a 4xx status code
func (o *PutRoutingQueueGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this put routing queue gateway timeout response has a 5xx status code
func (o *PutRoutingQueueGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this put routing queue gateway timeout response a status code equal to that given
func (o *PutRoutingQueueGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PutRoutingQueueGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/routing/queues/{queueId}][%d] putRoutingQueueGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutRoutingQueueGatewayTimeout) String() string {
	return fmt.Sprintf("[PUT /api/v2/routing/queues/{queueId}][%d] putRoutingQueueGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutRoutingQueueGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRoutingQueueGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

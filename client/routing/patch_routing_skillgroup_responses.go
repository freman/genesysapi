// Code generated by go-swagger; DO NOT EDIT.

package routing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchRoutingSkillgroupReader is a Reader for the PatchRoutingSkillgroup structure.
type PatchRoutingSkillgroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchRoutingSkillgroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchRoutingSkillgroupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchRoutingSkillgroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchRoutingSkillgroupUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchRoutingSkillgroupForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchRoutingSkillgroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchRoutingSkillgroupRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchRoutingSkillgroupRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchRoutingSkillgroupUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchRoutingSkillgroupTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchRoutingSkillgroupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchRoutingSkillgroupServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchRoutingSkillgroupGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchRoutingSkillgroupOK creates a PatchRoutingSkillgroupOK with default headers values
func NewPatchRoutingSkillgroupOK() *PatchRoutingSkillgroupOK {
	return &PatchRoutingSkillgroupOK{}
}

/*
PatchRoutingSkillgroupOK describes a response with status code 200, with default header values.

successful operation
*/
type PatchRoutingSkillgroupOK struct {
	Payload *models.SkillGroup
}

// IsSuccess returns true when this patch routing skillgroup o k response has a 2xx status code
func (o *PatchRoutingSkillgroupOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch routing skillgroup o k response has a 3xx status code
func (o *PatchRoutingSkillgroupOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing skillgroup o k response has a 4xx status code
func (o *PatchRoutingSkillgroupOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch routing skillgroup o k response has a 5xx status code
func (o *PatchRoutingSkillgroupOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch routing skillgroup o k response a status code equal to that given
func (o *PatchRoutingSkillgroupOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchRoutingSkillgroupOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/skillgroups/{skillGroupId}][%d] patchRoutingSkillgroupOK  %+v", 200, o.Payload)
}

func (o *PatchRoutingSkillgroupOK) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/skillgroups/{skillGroupId}][%d] patchRoutingSkillgroupOK  %+v", 200, o.Payload)
}

func (o *PatchRoutingSkillgroupOK) GetPayload() *models.SkillGroup {
	return o.Payload
}

func (o *PatchRoutingSkillgroupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SkillGroup)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingSkillgroupBadRequest creates a PatchRoutingSkillgroupBadRequest with default headers values
func NewPatchRoutingSkillgroupBadRequest() *PatchRoutingSkillgroupBadRequest {
	return &PatchRoutingSkillgroupBadRequest{}
}

/*
PatchRoutingSkillgroupBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchRoutingSkillgroupBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch routing skillgroup bad request response has a 2xx status code
func (o *PatchRoutingSkillgroupBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch routing skillgroup bad request response has a 3xx status code
func (o *PatchRoutingSkillgroupBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing skillgroup bad request response has a 4xx status code
func (o *PatchRoutingSkillgroupBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch routing skillgroup bad request response has a 5xx status code
func (o *PatchRoutingSkillgroupBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch routing skillgroup bad request response a status code equal to that given
func (o *PatchRoutingSkillgroupBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchRoutingSkillgroupBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/skillgroups/{skillGroupId}][%d] patchRoutingSkillgroupBadRequest  %+v", 400, o.Payload)
}

func (o *PatchRoutingSkillgroupBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/skillgroups/{skillGroupId}][%d] patchRoutingSkillgroupBadRequest  %+v", 400, o.Payload)
}

func (o *PatchRoutingSkillgroupBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingSkillgroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingSkillgroupUnauthorized creates a PatchRoutingSkillgroupUnauthorized with default headers values
func NewPatchRoutingSkillgroupUnauthorized() *PatchRoutingSkillgroupUnauthorized {
	return &PatchRoutingSkillgroupUnauthorized{}
}

/*
PatchRoutingSkillgroupUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchRoutingSkillgroupUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch routing skillgroup unauthorized response has a 2xx status code
func (o *PatchRoutingSkillgroupUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch routing skillgroup unauthorized response has a 3xx status code
func (o *PatchRoutingSkillgroupUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing skillgroup unauthorized response has a 4xx status code
func (o *PatchRoutingSkillgroupUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch routing skillgroup unauthorized response has a 5xx status code
func (o *PatchRoutingSkillgroupUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch routing skillgroup unauthorized response a status code equal to that given
func (o *PatchRoutingSkillgroupUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchRoutingSkillgroupUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/skillgroups/{skillGroupId}][%d] patchRoutingSkillgroupUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchRoutingSkillgroupUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/skillgroups/{skillGroupId}][%d] patchRoutingSkillgroupUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchRoutingSkillgroupUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingSkillgroupUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingSkillgroupForbidden creates a PatchRoutingSkillgroupForbidden with default headers values
func NewPatchRoutingSkillgroupForbidden() *PatchRoutingSkillgroupForbidden {
	return &PatchRoutingSkillgroupForbidden{}
}

/*
PatchRoutingSkillgroupForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PatchRoutingSkillgroupForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch routing skillgroup forbidden response has a 2xx status code
func (o *PatchRoutingSkillgroupForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch routing skillgroup forbidden response has a 3xx status code
func (o *PatchRoutingSkillgroupForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing skillgroup forbidden response has a 4xx status code
func (o *PatchRoutingSkillgroupForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch routing skillgroup forbidden response has a 5xx status code
func (o *PatchRoutingSkillgroupForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch routing skillgroup forbidden response a status code equal to that given
func (o *PatchRoutingSkillgroupForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchRoutingSkillgroupForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/skillgroups/{skillGroupId}][%d] patchRoutingSkillgroupForbidden  %+v", 403, o.Payload)
}

func (o *PatchRoutingSkillgroupForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/skillgroups/{skillGroupId}][%d] patchRoutingSkillgroupForbidden  %+v", 403, o.Payload)
}

func (o *PatchRoutingSkillgroupForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingSkillgroupForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingSkillgroupNotFound creates a PatchRoutingSkillgroupNotFound with default headers values
func NewPatchRoutingSkillgroupNotFound() *PatchRoutingSkillgroupNotFound {
	return &PatchRoutingSkillgroupNotFound{}
}

/*
PatchRoutingSkillgroupNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PatchRoutingSkillgroupNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch routing skillgroup not found response has a 2xx status code
func (o *PatchRoutingSkillgroupNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch routing skillgroup not found response has a 3xx status code
func (o *PatchRoutingSkillgroupNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing skillgroup not found response has a 4xx status code
func (o *PatchRoutingSkillgroupNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch routing skillgroup not found response has a 5xx status code
func (o *PatchRoutingSkillgroupNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch routing skillgroup not found response a status code equal to that given
func (o *PatchRoutingSkillgroupNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchRoutingSkillgroupNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/skillgroups/{skillGroupId}][%d] patchRoutingSkillgroupNotFound  %+v", 404, o.Payload)
}

func (o *PatchRoutingSkillgroupNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/skillgroups/{skillGroupId}][%d] patchRoutingSkillgroupNotFound  %+v", 404, o.Payload)
}

func (o *PatchRoutingSkillgroupNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingSkillgroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingSkillgroupRequestTimeout creates a PatchRoutingSkillgroupRequestTimeout with default headers values
func NewPatchRoutingSkillgroupRequestTimeout() *PatchRoutingSkillgroupRequestTimeout {
	return &PatchRoutingSkillgroupRequestTimeout{}
}

/*
PatchRoutingSkillgroupRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchRoutingSkillgroupRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch routing skillgroup request timeout response has a 2xx status code
func (o *PatchRoutingSkillgroupRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch routing skillgroup request timeout response has a 3xx status code
func (o *PatchRoutingSkillgroupRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing skillgroup request timeout response has a 4xx status code
func (o *PatchRoutingSkillgroupRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch routing skillgroup request timeout response has a 5xx status code
func (o *PatchRoutingSkillgroupRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this patch routing skillgroup request timeout response a status code equal to that given
func (o *PatchRoutingSkillgroupRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PatchRoutingSkillgroupRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/skillgroups/{skillGroupId}][%d] patchRoutingSkillgroupRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchRoutingSkillgroupRequestTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/skillgroups/{skillGroupId}][%d] patchRoutingSkillgroupRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchRoutingSkillgroupRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingSkillgroupRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingSkillgroupRequestEntityTooLarge creates a PatchRoutingSkillgroupRequestEntityTooLarge with default headers values
func NewPatchRoutingSkillgroupRequestEntityTooLarge() *PatchRoutingSkillgroupRequestEntityTooLarge {
	return &PatchRoutingSkillgroupRequestEntityTooLarge{}
}

/*
PatchRoutingSkillgroupRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PatchRoutingSkillgroupRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch routing skillgroup request entity too large response has a 2xx status code
func (o *PatchRoutingSkillgroupRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch routing skillgroup request entity too large response has a 3xx status code
func (o *PatchRoutingSkillgroupRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing skillgroup request entity too large response has a 4xx status code
func (o *PatchRoutingSkillgroupRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch routing skillgroup request entity too large response has a 5xx status code
func (o *PatchRoutingSkillgroupRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this patch routing skillgroup request entity too large response a status code equal to that given
func (o *PatchRoutingSkillgroupRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PatchRoutingSkillgroupRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/skillgroups/{skillGroupId}][%d] patchRoutingSkillgroupRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchRoutingSkillgroupRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/skillgroups/{skillGroupId}][%d] patchRoutingSkillgroupRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchRoutingSkillgroupRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingSkillgroupRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingSkillgroupUnsupportedMediaType creates a PatchRoutingSkillgroupUnsupportedMediaType with default headers values
func NewPatchRoutingSkillgroupUnsupportedMediaType() *PatchRoutingSkillgroupUnsupportedMediaType {
	return &PatchRoutingSkillgroupUnsupportedMediaType{}
}

/*
PatchRoutingSkillgroupUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchRoutingSkillgroupUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch routing skillgroup unsupported media type response has a 2xx status code
func (o *PatchRoutingSkillgroupUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch routing skillgroup unsupported media type response has a 3xx status code
func (o *PatchRoutingSkillgroupUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing skillgroup unsupported media type response has a 4xx status code
func (o *PatchRoutingSkillgroupUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch routing skillgroup unsupported media type response has a 5xx status code
func (o *PatchRoutingSkillgroupUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this patch routing skillgroup unsupported media type response a status code equal to that given
func (o *PatchRoutingSkillgroupUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PatchRoutingSkillgroupUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/skillgroups/{skillGroupId}][%d] patchRoutingSkillgroupUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchRoutingSkillgroupUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/skillgroups/{skillGroupId}][%d] patchRoutingSkillgroupUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchRoutingSkillgroupUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingSkillgroupUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingSkillgroupTooManyRequests creates a PatchRoutingSkillgroupTooManyRequests with default headers values
func NewPatchRoutingSkillgroupTooManyRequests() *PatchRoutingSkillgroupTooManyRequests {
	return &PatchRoutingSkillgroupTooManyRequests{}
}

/*
PatchRoutingSkillgroupTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchRoutingSkillgroupTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch routing skillgroup too many requests response has a 2xx status code
func (o *PatchRoutingSkillgroupTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch routing skillgroup too many requests response has a 3xx status code
func (o *PatchRoutingSkillgroupTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing skillgroup too many requests response has a 4xx status code
func (o *PatchRoutingSkillgroupTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch routing skillgroup too many requests response has a 5xx status code
func (o *PatchRoutingSkillgroupTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch routing skillgroup too many requests response a status code equal to that given
func (o *PatchRoutingSkillgroupTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchRoutingSkillgroupTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/skillgroups/{skillGroupId}][%d] patchRoutingSkillgroupTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchRoutingSkillgroupTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/skillgroups/{skillGroupId}][%d] patchRoutingSkillgroupTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchRoutingSkillgroupTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingSkillgroupTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingSkillgroupInternalServerError creates a PatchRoutingSkillgroupInternalServerError with default headers values
func NewPatchRoutingSkillgroupInternalServerError() *PatchRoutingSkillgroupInternalServerError {
	return &PatchRoutingSkillgroupInternalServerError{}
}

/*
PatchRoutingSkillgroupInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchRoutingSkillgroupInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch routing skillgroup internal server error response has a 2xx status code
func (o *PatchRoutingSkillgroupInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch routing skillgroup internal server error response has a 3xx status code
func (o *PatchRoutingSkillgroupInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing skillgroup internal server error response has a 4xx status code
func (o *PatchRoutingSkillgroupInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch routing skillgroup internal server error response has a 5xx status code
func (o *PatchRoutingSkillgroupInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch routing skillgroup internal server error response a status code equal to that given
func (o *PatchRoutingSkillgroupInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchRoutingSkillgroupInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/skillgroups/{skillGroupId}][%d] patchRoutingSkillgroupInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchRoutingSkillgroupInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/skillgroups/{skillGroupId}][%d] patchRoutingSkillgroupInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchRoutingSkillgroupInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingSkillgroupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingSkillgroupServiceUnavailable creates a PatchRoutingSkillgroupServiceUnavailable with default headers values
func NewPatchRoutingSkillgroupServiceUnavailable() *PatchRoutingSkillgroupServiceUnavailable {
	return &PatchRoutingSkillgroupServiceUnavailable{}
}

/*
PatchRoutingSkillgroupServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchRoutingSkillgroupServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch routing skillgroup service unavailable response has a 2xx status code
func (o *PatchRoutingSkillgroupServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch routing skillgroup service unavailable response has a 3xx status code
func (o *PatchRoutingSkillgroupServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing skillgroup service unavailable response has a 4xx status code
func (o *PatchRoutingSkillgroupServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch routing skillgroup service unavailable response has a 5xx status code
func (o *PatchRoutingSkillgroupServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this patch routing skillgroup service unavailable response a status code equal to that given
func (o *PatchRoutingSkillgroupServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PatchRoutingSkillgroupServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/skillgroups/{skillGroupId}][%d] patchRoutingSkillgroupServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchRoutingSkillgroupServiceUnavailable) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/skillgroups/{skillGroupId}][%d] patchRoutingSkillgroupServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchRoutingSkillgroupServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingSkillgroupServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingSkillgroupGatewayTimeout creates a PatchRoutingSkillgroupGatewayTimeout with default headers values
func NewPatchRoutingSkillgroupGatewayTimeout() *PatchRoutingSkillgroupGatewayTimeout {
	return &PatchRoutingSkillgroupGatewayTimeout{}
}

/*
PatchRoutingSkillgroupGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PatchRoutingSkillgroupGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch routing skillgroup gateway timeout response has a 2xx status code
func (o *PatchRoutingSkillgroupGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch routing skillgroup gateway timeout response has a 3xx status code
func (o *PatchRoutingSkillgroupGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing skillgroup gateway timeout response has a 4xx status code
func (o *PatchRoutingSkillgroupGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch routing skillgroup gateway timeout response has a 5xx status code
func (o *PatchRoutingSkillgroupGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this patch routing skillgroup gateway timeout response a status code equal to that given
func (o *PatchRoutingSkillgroupGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PatchRoutingSkillgroupGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/skillgroups/{skillGroupId}][%d] patchRoutingSkillgroupGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchRoutingSkillgroupGatewayTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/skillgroups/{skillGroupId}][%d] patchRoutingSkillgroupGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchRoutingSkillgroupGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingSkillgroupGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

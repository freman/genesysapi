// Code generated by go-swagger; DO NOT EDIT.

package routing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchRoutingQueueUsersReader is a Reader for the PatchRoutingQueueUsers structure.
type PatchRoutingQueueUsersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchRoutingQueueUsersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchRoutingQueueUsersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchRoutingQueueUsersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchRoutingQueueUsersUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchRoutingQueueUsersForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchRoutingQueueUsersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchRoutingQueueUsersRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchRoutingQueueUsersRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchRoutingQueueUsersUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchRoutingQueueUsersTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchRoutingQueueUsersInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchRoutingQueueUsersServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchRoutingQueueUsersGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchRoutingQueueUsersOK creates a PatchRoutingQueueUsersOK with default headers values
func NewPatchRoutingQueueUsersOK() *PatchRoutingQueueUsersOK {
	return &PatchRoutingQueueUsersOK{}
}

/*
PatchRoutingQueueUsersOK describes a response with status code 200, with default header values.

successful operation
*/
type PatchRoutingQueueUsersOK struct {
	Payload *models.QueueMemberEntityListingV1
}

// IsSuccess returns true when this patch routing queue users o k response has a 2xx status code
func (o *PatchRoutingQueueUsersOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch routing queue users o k response has a 3xx status code
func (o *PatchRoutingQueueUsersOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing queue users o k response has a 4xx status code
func (o *PatchRoutingQueueUsersOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch routing queue users o k response has a 5xx status code
func (o *PatchRoutingQueueUsersOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch routing queue users o k response a status code equal to that given
func (o *PatchRoutingQueueUsersOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchRoutingQueueUsersOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/users][%d] patchRoutingQueueUsersOK  %+v", 200, o.Payload)
}

func (o *PatchRoutingQueueUsersOK) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/users][%d] patchRoutingQueueUsersOK  %+v", 200, o.Payload)
}

func (o *PatchRoutingQueueUsersOK) GetPayload() *models.QueueMemberEntityListingV1 {
	return o.Payload
}

func (o *PatchRoutingQueueUsersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.QueueMemberEntityListingV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingQueueUsersBadRequest creates a PatchRoutingQueueUsersBadRequest with default headers values
func NewPatchRoutingQueueUsersBadRequest() *PatchRoutingQueueUsersBadRequest {
	return &PatchRoutingQueueUsersBadRequest{}
}

/*
PatchRoutingQueueUsersBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchRoutingQueueUsersBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch routing queue users bad request response has a 2xx status code
func (o *PatchRoutingQueueUsersBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch routing queue users bad request response has a 3xx status code
func (o *PatchRoutingQueueUsersBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing queue users bad request response has a 4xx status code
func (o *PatchRoutingQueueUsersBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch routing queue users bad request response has a 5xx status code
func (o *PatchRoutingQueueUsersBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch routing queue users bad request response a status code equal to that given
func (o *PatchRoutingQueueUsersBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchRoutingQueueUsersBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/users][%d] patchRoutingQueueUsersBadRequest  %+v", 400, o.Payload)
}

func (o *PatchRoutingQueueUsersBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/users][%d] patchRoutingQueueUsersBadRequest  %+v", 400, o.Payload)
}

func (o *PatchRoutingQueueUsersBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingQueueUsersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingQueueUsersUnauthorized creates a PatchRoutingQueueUsersUnauthorized with default headers values
func NewPatchRoutingQueueUsersUnauthorized() *PatchRoutingQueueUsersUnauthorized {
	return &PatchRoutingQueueUsersUnauthorized{}
}

/*
PatchRoutingQueueUsersUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchRoutingQueueUsersUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch routing queue users unauthorized response has a 2xx status code
func (o *PatchRoutingQueueUsersUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch routing queue users unauthorized response has a 3xx status code
func (o *PatchRoutingQueueUsersUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing queue users unauthorized response has a 4xx status code
func (o *PatchRoutingQueueUsersUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch routing queue users unauthorized response has a 5xx status code
func (o *PatchRoutingQueueUsersUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch routing queue users unauthorized response a status code equal to that given
func (o *PatchRoutingQueueUsersUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchRoutingQueueUsersUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/users][%d] patchRoutingQueueUsersUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchRoutingQueueUsersUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/users][%d] patchRoutingQueueUsersUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchRoutingQueueUsersUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingQueueUsersUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingQueueUsersForbidden creates a PatchRoutingQueueUsersForbidden with default headers values
func NewPatchRoutingQueueUsersForbidden() *PatchRoutingQueueUsersForbidden {
	return &PatchRoutingQueueUsersForbidden{}
}

/*
PatchRoutingQueueUsersForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PatchRoutingQueueUsersForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch routing queue users forbidden response has a 2xx status code
func (o *PatchRoutingQueueUsersForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch routing queue users forbidden response has a 3xx status code
func (o *PatchRoutingQueueUsersForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing queue users forbidden response has a 4xx status code
func (o *PatchRoutingQueueUsersForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch routing queue users forbidden response has a 5xx status code
func (o *PatchRoutingQueueUsersForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch routing queue users forbidden response a status code equal to that given
func (o *PatchRoutingQueueUsersForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchRoutingQueueUsersForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/users][%d] patchRoutingQueueUsersForbidden  %+v", 403, o.Payload)
}

func (o *PatchRoutingQueueUsersForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/users][%d] patchRoutingQueueUsersForbidden  %+v", 403, o.Payload)
}

func (o *PatchRoutingQueueUsersForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingQueueUsersForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingQueueUsersNotFound creates a PatchRoutingQueueUsersNotFound with default headers values
func NewPatchRoutingQueueUsersNotFound() *PatchRoutingQueueUsersNotFound {
	return &PatchRoutingQueueUsersNotFound{}
}

/*
PatchRoutingQueueUsersNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PatchRoutingQueueUsersNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch routing queue users not found response has a 2xx status code
func (o *PatchRoutingQueueUsersNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch routing queue users not found response has a 3xx status code
func (o *PatchRoutingQueueUsersNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing queue users not found response has a 4xx status code
func (o *PatchRoutingQueueUsersNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch routing queue users not found response has a 5xx status code
func (o *PatchRoutingQueueUsersNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch routing queue users not found response a status code equal to that given
func (o *PatchRoutingQueueUsersNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchRoutingQueueUsersNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/users][%d] patchRoutingQueueUsersNotFound  %+v", 404, o.Payload)
}

func (o *PatchRoutingQueueUsersNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/users][%d] patchRoutingQueueUsersNotFound  %+v", 404, o.Payload)
}

func (o *PatchRoutingQueueUsersNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingQueueUsersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingQueueUsersRequestTimeout creates a PatchRoutingQueueUsersRequestTimeout with default headers values
func NewPatchRoutingQueueUsersRequestTimeout() *PatchRoutingQueueUsersRequestTimeout {
	return &PatchRoutingQueueUsersRequestTimeout{}
}

/*
PatchRoutingQueueUsersRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchRoutingQueueUsersRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch routing queue users request timeout response has a 2xx status code
func (o *PatchRoutingQueueUsersRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch routing queue users request timeout response has a 3xx status code
func (o *PatchRoutingQueueUsersRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing queue users request timeout response has a 4xx status code
func (o *PatchRoutingQueueUsersRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch routing queue users request timeout response has a 5xx status code
func (o *PatchRoutingQueueUsersRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this patch routing queue users request timeout response a status code equal to that given
func (o *PatchRoutingQueueUsersRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PatchRoutingQueueUsersRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/users][%d] patchRoutingQueueUsersRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchRoutingQueueUsersRequestTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/users][%d] patchRoutingQueueUsersRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchRoutingQueueUsersRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingQueueUsersRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingQueueUsersRequestEntityTooLarge creates a PatchRoutingQueueUsersRequestEntityTooLarge with default headers values
func NewPatchRoutingQueueUsersRequestEntityTooLarge() *PatchRoutingQueueUsersRequestEntityTooLarge {
	return &PatchRoutingQueueUsersRequestEntityTooLarge{}
}

/*
PatchRoutingQueueUsersRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PatchRoutingQueueUsersRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch routing queue users request entity too large response has a 2xx status code
func (o *PatchRoutingQueueUsersRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch routing queue users request entity too large response has a 3xx status code
func (o *PatchRoutingQueueUsersRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing queue users request entity too large response has a 4xx status code
func (o *PatchRoutingQueueUsersRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch routing queue users request entity too large response has a 5xx status code
func (o *PatchRoutingQueueUsersRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this patch routing queue users request entity too large response a status code equal to that given
func (o *PatchRoutingQueueUsersRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PatchRoutingQueueUsersRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/users][%d] patchRoutingQueueUsersRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchRoutingQueueUsersRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/users][%d] patchRoutingQueueUsersRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchRoutingQueueUsersRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingQueueUsersRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingQueueUsersUnsupportedMediaType creates a PatchRoutingQueueUsersUnsupportedMediaType with default headers values
func NewPatchRoutingQueueUsersUnsupportedMediaType() *PatchRoutingQueueUsersUnsupportedMediaType {
	return &PatchRoutingQueueUsersUnsupportedMediaType{}
}

/*
PatchRoutingQueueUsersUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchRoutingQueueUsersUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch routing queue users unsupported media type response has a 2xx status code
func (o *PatchRoutingQueueUsersUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch routing queue users unsupported media type response has a 3xx status code
func (o *PatchRoutingQueueUsersUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing queue users unsupported media type response has a 4xx status code
func (o *PatchRoutingQueueUsersUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch routing queue users unsupported media type response has a 5xx status code
func (o *PatchRoutingQueueUsersUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this patch routing queue users unsupported media type response a status code equal to that given
func (o *PatchRoutingQueueUsersUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PatchRoutingQueueUsersUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/users][%d] patchRoutingQueueUsersUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchRoutingQueueUsersUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/users][%d] patchRoutingQueueUsersUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchRoutingQueueUsersUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingQueueUsersUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingQueueUsersTooManyRequests creates a PatchRoutingQueueUsersTooManyRequests with default headers values
func NewPatchRoutingQueueUsersTooManyRequests() *PatchRoutingQueueUsersTooManyRequests {
	return &PatchRoutingQueueUsersTooManyRequests{}
}

/*
PatchRoutingQueueUsersTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchRoutingQueueUsersTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch routing queue users too many requests response has a 2xx status code
func (o *PatchRoutingQueueUsersTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch routing queue users too many requests response has a 3xx status code
func (o *PatchRoutingQueueUsersTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing queue users too many requests response has a 4xx status code
func (o *PatchRoutingQueueUsersTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch routing queue users too many requests response has a 5xx status code
func (o *PatchRoutingQueueUsersTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch routing queue users too many requests response a status code equal to that given
func (o *PatchRoutingQueueUsersTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchRoutingQueueUsersTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/users][%d] patchRoutingQueueUsersTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchRoutingQueueUsersTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/users][%d] patchRoutingQueueUsersTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchRoutingQueueUsersTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingQueueUsersTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingQueueUsersInternalServerError creates a PatchRoutingQueueUsersInternalServerError with default headers values
func NewPatchRoutingQueueUsersInternalServerError() *PatchRoutingQueueUsersInternalServerError {
	return &PatchRoutingQueueUsersInternalServerError{}
}

/*
PatchRoutingQueueUsersInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchRoutingQueueUsersInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch routing queue users internal server error response has a 2xx status code
func (o *PatchRoutingQueueUsersInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch routing queue users internal server error response has a 3xx status code
func (o *PatchRoutingQueueUsersInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing queue users internal server error response has a 4xx status code
func (o *PatchRoutingQueueUsersInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch routing queue users internal server error response has a 5xx status code
func (o *PatchRoutingQueueUsersInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch routing queue users internal server error response a status code equal to that given
func (o *PatchRoutingQueueUsersInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchRoutingQueueUsersInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/users][%d] patchRoutingQueueUsersInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchRoutingQueueUsersInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/users][%d] patchRoutingQueueUsersInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchRoutingQueueUsersInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingQueueUsersInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingQueueUsersServiceUnavailable creates a PatchRoutingQueueUsersServiceUnavailable with default headers values
func NewPatchRoutingQueueUsersServiceUnavailable() *PatchRoutingQueueUsersServiceUnavailable {
	return &PatchRoutingQueueUsersServiceUnavailable{}
}

/*
PatchRoutingQueueUsersServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchRoutingQueueUsersServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch routing queue users service unavailable response has a 2xx status code
func (o *PatchRoutingQueueUsersServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch routing queue users service unavailable response has a 3xx status code
func (o *PatchRoutingQueueUsersServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing queue users service unavailable response has a 4xx status code
func (o *PatchRoutingQueueUsersServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch routing queue users service unavailable response has a 5xx status code
func (o *PatchRoutingQueueUsersServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this patch routing queue users service unavailable response a status code equal to that given
func (o *PatchRoutingQueueUsersServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PatchRoutingQueueUsersServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/users][%d] patchRoutingQueueUsersServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchRoutingQueueUsersServiceUnavailable) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/users][%d] patchRoutingQueueUsersServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchRoutingQueueUsersServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingQueueUsersServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingQueueUsersGatewayTimeout creates a PatchRoutingQueueUsersGatewayTimeout with default headers values
func NewPatchRoutingQueueUsersGatewayTimeout() *PatchRoutingQueueUsersGatewayTimeout {
	return &PatchRoutingQueueUsersGatewayTimeout{}
}

/*
PatchRoutingQueueUsersGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PatchRoutingQueueUsersGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch routing queue users gateway timeout response has a 2xx status code
func (o *PatchRoutingQueueUsersGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch routing queue users gateway timeout response has a 3xx status code
func (o *PatchRoutingQueueUsersGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing queue users gateway timeout response has a 4xx status code
func (o *PatchRoutingQueueUsersGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch routing queue users gateway timeout response has a 5xx status code
func (o *PatchRoutingQueueUsersGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this patch routing queue users gateway timeout response a status code equal to that given
func (o *PatchRoutingQueueUsersGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PatchRoutingQueueUsersGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/users][%d] patchRoutingQueueUsersGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchRoutingQueueUsersGatewayTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/queues/{queueId}/users][%d] patchRoutingQueueUsersGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchRoutingQueueUsersGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingQueueUsersGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

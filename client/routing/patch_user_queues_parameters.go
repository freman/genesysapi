// Code generated by go-swagger; DO NOT EDIT.

package routing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/freman/genesysapi/models"
)

// NewPatchUserQueuesParams creates a new PatchUserQueuesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPatchUserQueuesParams() *PatchUserQueuesParams {
	return &PatchUserQueuesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPatchUserQueuesParamsWithTimeout creates a new PatchUserQueuesParams object
// with the ability to set a timeout on a request.
func NewPatchUserQueuesParamsWithTimeout(timeout time.Duration) *PatchUserQueuesParams {
	return &PatchUserQueuesParams{
		timeout: timeout,
	}
}

// NewPatchUserQueuesParamsWithContext creates a new PatchUserQueuesParams object
// with the ability to set a context for a request.
func NewPatchUserQueuesParamsWithContext(ctx context.Context) *PatchUserQueuesParams {
	return &PatchUserQueuesParams{
		Context: ctx,
	}
}

// NewPatchUserQueuesParamsWithHTTPClient creates a new PatchUserQueuesParams object
// with the ability to set a custom HTTPClient for a request.
func NewPatchUserQueuesParamsWithHTTPClient(client *http.Client) *PatchUserQueuesParams {
	return &PatchUserQueuesParams{
		HTTPClient: client,
	}
}

/*
PatchUserQueuesParams contains all the parameters to send to the API endpoint

	for the patch user queues operation.

	Typically these are written to a http.Request.
*/
type PatchUserQueuesParams struct {

	/* Body.

	   User Queues
	*/
	Body []*models.UserQueue

	/* DivisionID.

	   Division ID(s)
	*/
	DivisionID []string

	/* UserID.

	   User ID
	*/
	UserID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the patch user queues params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PatchUserQueuesParams) WithDefaults() *PatchUserQueuesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the patch user queues params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PatchUserQueuesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the patch user queues params
func (o *PatchUserQueuesParams) WithTimeout(timeout time.Duration) *PatchUserQueuesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the patch user queues params
func (o *PatchUserQueuesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the patch user queues params
func (o *PatchUserQueuesParams) WithContext(ctx context.Context) *PatchUserQueuesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the patch user queues params
func (o *PatchUserQueuesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the patch user queues params
func (o *PatchUserQueuesParams) WithHTTPClient(client *http.Client) *PatchUserQueuesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the patch user queues params
func (o *PatchUserQueuesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the patch user queues params
func (o *PatchUserQueuesParams) WithBody(body []*models.UserQueue) *PatchUserQueuesParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the patch user queues params
func (o *PatchUserQueuesParams) SetBody(body []*models.UserQueue) {
	o.Body = body
}

// WithDivisionID adds the divisionID to the patch user queues params
func (o *PatchUserQueuesParams) WithDivisionID(divisionID []string) *PatchUserQueuesParams {
	o.SetDivisionID(divisionID)
	return o
}

// SetDivisionID adds the divisionId to the patch user queues params
func (o *PatchUserQueuesParams) SetDivisionID(divisionID []string) {
	o.DivisionID = divisionID
}

// WithUserID adds the userID to the patch user queues params
func (o *PatchUserQueuesParams) WithUserID(userID string) *PatchUserQueuesParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the patch user queues params
func (o *PatchUserQueuesParams) SetUserID(userID string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *PatchUserQueuesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.DivisionID != nil {

		// binding items for divisionId
		joinedDivisionID := o.bindParamDivisionID(reg)

		// query array param divisionId
		if err := r.SetQueryParam("divisionId", joinedDivisionID...); err != nil {
			return err
		}
	}

	// path param userId
	if err := r.SetPathParam("userId", o.UserID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamPatchUserQueues binds the parameter divisionId
func (o *PatchUserQueuesParams) bindParamDivisionID(formats strfmt.Registry) []string {
	divisionIDIR := o.DivisionID

	var divisionIDIC []string
	for _, divisionIDIIR := range divisionIDIR { // explode []string

		divisionIDIIV := divisionIDIIR // string as string
		divisionIDIC = append(divisionIDIC, divisionIDIIV)
	}

	// items.CollectionFormat: "multi"
	divisionIDIS := swag.JoinByFormat(divisionIDIC, "multi")

	return divisionIDIS
}

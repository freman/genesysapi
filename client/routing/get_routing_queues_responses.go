// Code generated by go-swagger; DO NOT EDIT.

package routing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetRoutingQueuesReader is a Reader for the GetRoutingQueues structure.
type GetRoutingQueuesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRoutingQueuesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRoutingQueuesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRoutingQueuesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetRoutingQueuesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRoutingQueuesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRoutingQueuesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetRoutingQueuesRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetRoutingQueuesRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetRoutingQueuesUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetRoutingQueuesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetRoutingQueuesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetRoutingQueuesServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetRoutingQueuesGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRoutingQueuesOK creates a GetRoutingQueuesOK with default headers values
func NewGetRoutingQueuesOK() *GetRoutingQueuesOK {
	return &GetRoutingQueuesOK{}
}

/*
GetRoutingQueuesOK describes a response with status code 200, with default header values.

successful operation
*/
type GetRoutingQueuesOK struct {
	Payload *models.QueueEntityListing
}

// IsSuccess returns true when this get routing queues o k response has a 2xx status code
func (o *GetRoutingQueuesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get routing queues o k response has a 3xx status code
func (o *GetRoutingQueuesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing queues o k response has a 4xx status code
func (o *GetRoutingQueuesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get routing queues o k response has a 5xx status code
func (o *GetRoutingQueuesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing queues o k response a status code equal to that given
func (o *GetRoutingQueuesOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetRoutingQueuesOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues][%d] getRoutingQueuesOK  %+v", 200, o.Payload)
}

func (o *GetRoutingQueuesOK) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues][%d] getRoutingQueuesOK  %+v", 200, o.Payload)
}

func (o *GetRoutingQueuesOK) GetPayload() *models.QueueEntityListing {
	return o.Payload
}

func (o *GetRoutingQueuesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.QueueEntityListing)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingQueuesBadRequest creates a GetRoutingQueuesBadRequest with default headers values
func NewGetRoutingQueuesBadRequest() *GetRoutingQueuesBadRequest {
	return &GetRoutingQueuesBadRequest{}
}

/*
GetRoutingQueuesBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetRoutingQueuesBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing queues bad request response has a 2xx status code
func (o *GetRoutingQueuesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing queues bad request response has a 3xx status code
func (o *GetRoutingQueuesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing queues bad request response has a 4xx status code
func (o *GetRoutingQueuesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing queues bad request response has a 5xx status code
func (o *GetRoutingQueuesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing queues bad request response a status code equal to that given
func (o *GetRoutingQueuesBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetRoutingQueuesBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues][%d] getRoutingQueuesBadRequest  %+v", 400, o.Payload)
}

func (o *GetRoutingQueuesBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues][%d] getRoutingQueuesBadRequest  %+v", 400, o.Payload)
}

func (o *GetRoutingQueuesBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingQueuesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingQueuesUnauthorized creates a GetRoutingQueuesUnauthorized with default headers values
func NewGetRoutingQueuesUnauthorized() *GetRoutingQueuesUnauthorized {
	return &GetRoutingQueuesUnauthorized{}
}

/*
GetRoutingQueuesUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetRoutingQueuesUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing queues unauthorized response has a 2xx status code
func (o *GetRoutingQueuesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing queues unauthorized response has a 3xx status code
func (o *GetRoutingQueuesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing queues unauthorized response has a 4xx status code
func (o *GetRoutingQueuesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing queues unauthorized response has a 5xx status code
func (o *GetRoutingQueuesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing queues unauthorized response a status code equal to that given
func (o *GetRoutingQueuesUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetRoutingQueuesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues][%d] getRoutingQueuesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRoutingQueuesUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues][%d] getRoutingQueuesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRoutingQueuesUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingQueuesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingQueuesForbidden creates a GetRoutingQueuesForbidden with default headers values
func NewGetRoutingQueuesForbidden() *GetRoutingQueuesForbidden {
	return &GetRoutingQueuesForbidden{}
}

/*
GetRoutingQueuesForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetRoutingQueuesForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing queues forbidden response has a 2xx status code
func (o *GetRoutingQueuesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing queues forbidden response has a 3xx status code
func (o *GetRoutingQueuesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing queues forbidden response has a 4xx status code
func (o *GetRoutingQueuesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing queues forbidden response has a 5xx status code
func (o *GetRoutingQueuesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing queues forbidden response a status code equal to that given
func (o *GetRoutingQueuesForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetRoutingQueuesForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues][%d] getRoutingQueuesForbidden  %+v", 403, o.Payload)
}

func (o *GetRoutingQueuesForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues][%d] getRoutingQueuesForbidden  %+v", 403, o.Payload)
}

func (o *GetRoutingQueuesForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingQueuesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingQueuesNotFound creates a GetRoutingQueuesNotFound with default headers values
func NewGetRoutingQueuesNotFound() *GetRoutingQueuesNotFound {
	return &GetRoutingQueuesNotFound{}
}

/*
GetRoutingQueuesNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetRoutingQueuesNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing queues not found response has a 2xx status code
func (o *GetRoutingQueuesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing queues not found response has a 3xx status code
func (o *GetRoutingQueuesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing queues not found response has a 4xx status code
func (o *GetRoutingQueuesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing queues not found response has a 5xx status code
func (o *GetRoutingQueuesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing queues not found response a status code equal to that given
func (o *GetRoutingQueuesNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetRoutingQueuesNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues][%d] getRoutingQueuesNotFound  %+v", 404, o.Payload)
}

func (o *GetRoutingQueuesNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues][%d] getRoutingQueuesNotFound  %+v", 404, o.Payload)
}

func (o *GetRoutingQueuesNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingQueuesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingQueuesRequestTimeout creates a GetRoutingQueuesRequestTimeout with default headers values
func NewGetRoutingQueuesRequestTimeout() *GetRoutingQueuesRequestTimeout {
	return &GetRoutingQueuesRequestTimeout{}
}

/*
GetRoutingQueuesRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetRoutingQueuesRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing queues request timeout response has a 2xx status code
func (o *GetRoutingQueuesRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing queues request timeout response has a 3xx status code
func (o *GetRoutingQueuesRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing queues request timeout response has a 4xx status code
func (o *GetRoutingQueuesRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing queues request timeout response has a 5xx status code
func (o *GetRoutingQueuesRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing queues request timeout response a status code equal to that given
func (o *GetRoutingQueuesRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetRoutingQueuesRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues][%d] getRoutingQueuesRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetRoutingQueuesRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues][%d] getRoutingQueuesRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetRoutingQueuesRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingQueuesRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingQueuesRequestEntityTooLarge creates a GetRoutingQueuesRequestEntityTooLarge with default headers values
func NewGetRoutingQueuesRequestEntityTooLarge() *GetRoutingQueuesRequestEntityTooLarge {
	return &GetRoutingQueuesRequestEntityTooLarge{}
}

/*
GetRoutingQueuesRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type GetRoutingQueuesRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing queues request entity too large response has a 2xx status code
func (o *GetRoutingQueuesRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing queues request entity too large response has a 3xx status code
func (o *GetRoutingQueuesRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing queues request entity too large response has a 4xx status code
func (o *GetRoutingQueuesRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing queues request entity too large response has a 5xx status code
func (o *GetRoutingQueuesRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing queues request entity too large response a status code equal to that given
func (o *GetRoutingQueuesRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetRoutingQueuesRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues][%d] getRoutingQueuesRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetRoutingQueuesRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues][%d] getRoutingQueuesRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetRoutingQueuesRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingQueuesRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingQueuesUnsupportedMediaType creates a GetRoutingQueuesUnsupportedMediaType with default headers values
func NewGetRoutingQueuesUnsupportedMediaType() *GetRoutingQueuesUnsupportedMediaType {
	return &GetRoutingQueuesUnsupportedMediaType{}
}

/*
GetRoutingQueuesUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetRoutingQueuesUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing queues unsupported media type response has a 2xx status code
func (o *GetRoutingQueuesUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing queues unsupported media type response has a 3xx status code
func (o *GetRoutingQueuesUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing queues unsupported media type response has a 4xx status code
func (o *GetRoutingQueuesUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing queues unsupported media type response has a 5xx status code
func (o *GetRoutingQueuesUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing queues unsupported media type response a status code equal to that given
func (o *GetRoutingQueuesUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetRoutingQueuesUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues][%d] getRoutingQueuesUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetRoutingQueuesUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues][%d] getRoutingQueuesUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetRoutingQueuesUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingQueuesUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingQueuesTooManyRequests creates a GetRoutingQueuesTooManyRequests with default headers values
func NewGetRoutingQueuesTooManyRequests() *GetRoutingQueuesTooManyRequests {
	return &GetRoutingQueuesTooManyRequests{}
}

/*
GetRoutingQueuesTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetRoutingQueuesTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing queues too many requests response has a 2xx status code
func (o *GetRoutingQueuesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing queues too many requests response has a 3xx status code
func (o *GetRoutingQueuesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing queues too many requests response has a 4xx status code
func (o *GetRoutingQueuesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing queues too many requests response has a 5xx status code
func (o *GetRoutingQueuesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing queues too many requests response a status code equal to that given
func (o *GetRoutingQueuesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetRoutingQueuesTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues][%d] getRoutingQueuesTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetRoutingQueuesTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues][%d] getRoutingQueuesTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetRoutingQueuesTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingQueuesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingQueuesInternalServerError creates a GetRoutingQueuesInternalServerError with default headers values
func NewGetRoutingQueuesInternalServerError() *GetRoutingQueuesInternalServerError {
	return &GetRoutingQueuesInternalServerError{}
}

/*
GetRoutingQueuesInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetRoutingQueuesInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing queues internal server error response has a 2xx status code
func (o *GetRoutingQueuesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing queues internal server error response has a 3xx status code
func (o *GetRoutingQueuesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing queues internal server error response has a 4xx status code
func (o *GetRoutingQueuesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get routing queues internal server error response has a 5xx status code
func (o *GetRoutingQueuesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get routing queues internal server error response a status code equal to that given
func (o *GetRoutingQueuesInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetRoutingQueuesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues][%d] getRoutingQueuesInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRoutingQueuesInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues][%d] getRoutingQueuesInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRoutingQueuesInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingQueuesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingQueuesServiceUnavailable creates a GetRoutingQueuesServiceUnavailable with default headers values
func NewGetRoutingQueuesServiceUnavailable() *GetRoutingQueuesServiceUnavailable {
	return &GetRoutingQueuesServiceUnavailable{}
}

/*
GetRoutingQueuesServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetRoutingQueuesServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing queues service unavailable response has a 2xx status code
func (o *GetRoutingQueuesServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing queues service unavailable response has a 3xx status code
func (o *GetRoutingQueuesServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing queues service unavailable response has a 4xx status code
func (o *GetRoutingQueuesServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get routing queues service unavailable response has a 5xx status code
func (o *GetRoutingQueuesServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get routing queues service unavailable response a status code equal to that given
func (o *GetRoutingQueuesServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetRoutingQueuesServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues][%d] getRoutingQueuesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetRoutingQueuesServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues][%d] getRoutingQueuesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetRoutingQueuesServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingQueuesServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingQueuesGatewayTimeout creates a GetRoutingQueuesGatewayTimeout with default headers values
func NewGetRoutingQueuesGatewayTimeout() *GetRoutingQueuesGatewayTimeout {
	return &GetRoutingQueuesGatewayTimeout{}
}

/*
GetRoutingQueuesGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetRoutingQueuesGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing queues gateway timeout response has a 2xx status code
func (o *GetRoutingQueuesGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing queues gateway timeout response has a 3xx status code
func (o *GetRoutingQueuesGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing queues gateway timeout response has a 4xx status code
func (o *GetRoutingQueuesGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get routing queues gateway timeout response has a 5xx status code
func (o *GetRoutingQueuesGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get routing queues gateway timeout response a status code equal to that given
func (o *GetRoutingQueuesGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetRoutingQueuesGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues][%d] getRoutingQueuesGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetRoutingQueuesGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues][%d] getRoutingQueuesGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetRoutingQueuesGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingQueuesGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

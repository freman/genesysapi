// Code generated by go-swagger; DO NOT EDIT.

package routing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetRoutingEmailOutboundDomainParams creates a new GetRoutingEmailOutboundDomainParams object
// with the default values initialized.
func NewGetRoutingEmailOutboundDomainParams() *GetRoutingEmailOutboundDomainParams {
	var ()
	return &GetRoutingEmailOutboundDomainParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetRoutingEmailOutboundDomainParamsWithTimeout creates a new GetRoutingEmailOutboundDomainParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetRoutingEmailOutboundDomainParamsWithTimeout(timeout time.Duration) *GetRoutingEmailOutboundDomainParams {
	var ()
	return &GetRoutingEmailOutboundDomainParams{

		timeout: timeout,
	}
}

// NewGetRoutingEmailOutboundDomainParamsWithContext creates a new GetRoutingEmailOutboundDomainParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetRoutingEmailOutboundDomainParamsWithContext(ctx context.Context) *GetRoutingEmailOutboundDomainParams {
	var ()
	return &GetRoutingEmailOutboundDomainParams{

		Context: ctx,
	}
}

// NewGetRoutingEmailOutboundDomainParamsWithHTTPClient creates a new GetRoutingEmailOutboundDomainParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetRoutingEmailOutboundDomainParamsWithHTTPClient(client *http.Client) *GetRoutingEmailOutboundDomainParams {
	var ()
	return &GetRoutingEmailOutboundDomainParams{
		HTTPClient: client,
	}
}

/*GetRoutingEmailOutboundDomainParams contains all the parameters to send to the API endpoint
for the get routing email outbound domain operation typically these are written to a http.Request
*/
type GetRoutingEmailOutboundDomainParams struct {

	/*DomainID
	  domain ID

	*/
	DomainID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get routing email outbound domain params
func (o *GetRoutingEmailOutboundDomainParams) WithTimeout(timeout time.Duration) *GetRoutingEmailOutboundDomainParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get routing email outbound domain params
func (o *GetRoutingEmailOutboundDomainParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get routing email outbound domain params
func (o *GetRoutingEmailOutboundDomainParams) WithContext(ctx context.Context) *GetRoutingEmailOutboundDomainParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get routing email outbound domain params
func (o *GetRoutingEmailOutboundDomainParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get routing email outbound domain params
func (o *GetRoutingEmailOutboundDomainParams) WithHTTPClient(client *http.Client) *GetRoutingEmailOutboundDomainParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get routing email outbound domain params
func (o *GetRoutingEmailOutboundDomainParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDomainID adds the domainID to the get routing email outbound domain params
func (o *GetRoutingEmailOutboundDomainParams) WithDomainID(domainID string) *GetRoutingEmailOutboundDomainParams {
	o.SetDomainID(domainID)
	return o
}

// SetDomainID adds the domainId to the get routing email outbound domain params
func (o *GetRoutingEmailOutboundDomainParams) SetDomainID(domainID string) {
	o.DomainID = domainID
}

// WriteToRequest writes these params to a swagger request
func (o *GetRoutingEmailOutboundDomainParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param domainId
	if err := r.SetPathParam("domainId", o.DomainID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

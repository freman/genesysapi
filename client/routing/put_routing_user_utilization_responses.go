// Code generated by go-swagger; DO NOT EDIT.

package routing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutRoutingUserUtilizationReader is a Reader for the PutRoutingUserUtilization structure.
type PutRoutingUserUtilizationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRoutingUserUtilizationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutRoutingUserUtilizationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRoutingUserUtilizationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRoutingUserUtilizationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRoutingUserUtilizationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutRoutingUserUtilizationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPutRoutingUserUtilizationRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutRoutingUserUtilizationRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutRoutingUserUtilizationUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutRoutingUserUtilizationTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutRoutingUserUtilizationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutRoutingUserUtilizationServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutRoutingUserUtilizationGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutRoutingUserUtilizationOK creates a PutRoutingUserUtilizationOK with default headers values
func NewPutRoutingUserUtilizationOK() *PutRoutingUserUtilizationOK {
	return &PutRoutingUserUtilizationOK{}
}

/*PutRoutingUserUtilizationOK handles this case with default header values.

Operation was successful.
*/
type PutRoutingUserUtilizationOK struct {
	Payload *models.AgentMaxUtilization
}

func (o *PutRoutingUserUtilizationOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/routing/users/{userId}/utilization][%d] putRoutingUserUtilizationOK  %+v", 200, o.Payload)
}

func (o *PutRoutingUserUtilizationOK) GetPayload() *models.AgentMaxUtilization {
	return o.Payload
}

func (o *PutRoutingUserUtilizationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AgentMaxUtilization)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRoutingUserUtilizationBadRequest creates a PutRoutingUserUtilizationBadRequest with default headers values
func NewPutRoutingUserUtilizationBadRequest() *PutRoutingUserUtilizationBadRequest {
	return &PutRoutingUserUtilizationBadRequest{}
}

/*PutRoutingUserUtilizationBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutRoutingUserUtilizationBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PutRoutingUserUtilizationBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/routing/users/{userId}/utilization][%d] putRoutingUserUtilizationBadRequest  %+v", 400, o.Payload)
}

func (o *PutRoutingUserUtilizationBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRoutingUserUtilizationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRoutingUserUtilizationUnauthorized creates a PutRoutingUserUtilizationUnauthorized with default headers values
func NewPutRoutingUserUtilizationUnauthorized() *PutRoutingUserUtilizationUnauthorized {
	return &PutRoutingUserUtilizationUnauthorized{}
}

/*PutRoutingUserUtilizationUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PutRoutingUserUtilizationUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PutRoutingUserUtilizationUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/routing/users/{userId}/utilization][%d] putRoutingUserUtilizationUnauthorized  %+v", 401, o.Payload)
}

func (o *PutRoutingUserUtilizationUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRoutingUserUtilizationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRoutingUserUtilizationForbidden creates a PutRoutingUserUtilizationForbidden with default headers values
func NewPutRoutingUserUtilizationForbidden() *PutRoutingUserUtilizationForbidden {
	return &PutRoutingUserUtilizationForbidden{}
}

/*PutRoutingUserUtilizationForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PutRoutingUserUtilizationForbidden struct {
	Payload *models.ErrorBody
}

func (o *PutRoutingUserUtilizationForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/routing/users/{userId}/utilization][%d] putRoutingUserUtilizationForbidden  %+v", 403, o.Payload)
}

func (o *PutRoutingUserUtilizationForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRoutingUserUtilizationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRoutingUserUtilizationNotFound creates a PutRoutingUserUtilizationNotFound with default headers values
func NewPutRoutingUserUtilizationNotFound() *PutRoutingUserUtilizationNotFound {
	return &PutRoutingUserUtilizationNotFound{}
}

/*PutRoutingUserUtilizationNotFound handles this case with default header values.

The requested resource was not found.
*/
type PutRoutingUserUtilizationNotFound struct {
	Payload *models.ErrorBody
}

func (o *PutRoutingUserUtilizationNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/routing/users/{userId}/utilization][%d] putRoutingUserUtilizationNotFound  %+v", 404, o.Payload)
}

func (o *PutRoutingUserUtilizationNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRoutingUserUtilizationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRoutingUserUtilizationRequestTimeout creates a PutRoutingUserUtilizationRequestTimeout with default headers values
func NewPutRoutingUserUtilizationRequestTimeout() *PutRoutingUserUtilizationRequestTimeout {
	return &PutRoutingUserUtilizationRequestTimeout{}
}

/*PutRoutingUserUtilizationRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PutRoutingUserUtilizationRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutRoutingUserUtilizationRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/routing/users/{userId}/utilization][%d] putRoutingUserUtilizationRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutRoutingUserUtilizationRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRoutingUserUtilizationRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRoutingUserUtilizationRequestEntityTooLarge creates a PutRoutingUserUtilizationRequestEntityTooLarge with default headers values
func NewPutRoutingUserUtilizationRequestEntityTooLarge() *PutRoutingUserUtilizationRequestEntityTooLarge {
	return &PutRoutingUserUtilizationRequestEntityTooLarge{}
}

/*PutRoutingUserUtilizationRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type PutRoutingUserUtilizationRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PutRoutingUserUtilizationRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/routing/users/{userId}/utilization][%d] putRoutingUserUtilizationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutRoutingUserUtilizationRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRoutingUserUtilizationRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRoutingUserUtilizationUnsupportedMediaType creates a PutRoutingUserUtilizationUnsupportedMediaType with default headers values
func NewPutRoutingUserUtilizationUnsupportedMediaType() *PutRoutingUserUtilizationUnsupportedMediaType {
	return &PutRoutingUserUtilizationUnsupportedMediaType{}
}

/*PutRoutingUserUtilizationUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutRoutingUserUtilizationUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PutRoutingUserUtilizationUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/routing/users/{userId}/utilization][%d] putRoutingUserUtilizationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutRoutingUserUtilizationUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRoutingUserUtilizationUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRoutingUserUtilizationTooManyRequests creates a PutRoutingUserUtilizationTooManyRequests with default headers values
func NewPutRoutingUserUtilizationTooManyRequests() *PutRoutingUserUtilizationTooManyRequests {
	return &PutRoutingUserUtilizationTooManyRequests{}
}

/*PutRoutingUserUtilizationTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PutRoutingUserUtilizationTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PutRoutingUserUtilizationTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/routing/users/{userId}/utilization][%d] putRoutingUserUtilizationTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutRoutingUserUtilizationTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRoutingUserUtilizationTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRoutingUserUtilizationInternalServerError creates a PutRoutingUserUtilizationInternalServerError with default headers values
func NewPutRoutingUserUtilizationInternalServerError() *PutRoutingUserUtilizationInternalServerError {
	return &PutRoutingUserUtilizationInternalServerError{}
}

/*PutRoutingUserUtilizationInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutRoutingUserUtilizationInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PutRoutingUserUtilizationInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/routing/users/{userId}/utilization][%d] putRoutingUserUtilizationInternalServerError  %+v", 500, o.Payload)
}

func (o *PutRoutingUserUtilizationInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRoutingUserUtilizationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRoutingUserUtilizationServiceUnavailable creates a PutRoutingUserUtilizationServiceUnavailable with default headers values
func NewPutRoutingUserUtilizationServiceUnavailable() *PutRoutingUserUtilizationServiceUnavailable {
	return &PutRoutingUserUtilizationServiceUnavailable{}
}

/*PutRoutingUserUtilizationServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutRoutingUserUtilizationServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PutRoutingUserUtilizationServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/routing/users/{userId}/utilization][%d] putRoutingUserUtilizationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutRoutingUserUtilizationServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRoutingUserUtilizationServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRoutingUserUtilizationGatewayTimeout creates a PutRoutingUserUtilizationGatewayTimeout with default headers values
func NewPutRoutingUserUtilizationGatewayTimeout() *PutRoutingUserUtilizationGatewayTimeout {
	return &PutRoutingUserUtilizationGatewayTimeout{}
}

/*PutRoutingUserUtilizationGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PutRoutingUserUtilizationGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutRoutingUserUtilizationGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/routing/users/{userId}/utilization][%d] putRoutingUserUtilizationGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutRoutingUserUtilizationGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRoutingUserUtilizationGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

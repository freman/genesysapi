// Code generated by go-swagger; DO NOT EDIT.

package routing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchRoutingEmailDomainReader is a Reader for the PatchRoutingEmailDomain structure.
type PatchRoutingEmailDomainReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchRoutingEmailDomainReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchRoutingEmailDomainOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchRoutingEmailDomainBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchRoutingEmailDomainUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchRoutingEmailDomainForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchRoutingEmailDomainNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchRoutingEmailDomainRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchRoutingEmailDomainRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchRoutingEmailDomainUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchRoutingEmailDomainTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchRoutingEmailDomainInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchRoutingEmailDomainServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchRoutingEmailDomainGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchRoutingEmailDomainOK creates a PatchRoutingEmailDomainOK with default headers values
func NewPatchRoutingEmailDomainOK() *PatchRoutingEmailDomainOK {
	return &PatchRoutingEmailDomainOK{}
}

/*PatchRoutingEmailDomainOK handles this case with default header values.

successful operation
*/
type PatchRoutingEmailDomainOK struct {
	Payload *models.InboundDomain
}

func (o *PatchRoutingEmailDomainOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/domains/{domainId}][%d] patchRoutingEmailDomainOK  %+v", 200, o.Payload)
}

func (o *PatchRoutingEmailDomainOK) GetPayload() *models.InboundDomain {
	return o.Payload
}

func (o *PatchRoutingEmailDomainOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InboundDomain)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingEmailDomainBadRequest creates a PatchRoutingEmailDomainBadRequest with default headers values
func NewPatchRoutingEmailDomainBadRequest() *PatchRoutingEmailDomainBadRequest {
	return &PatchRoutingEmailDomainBadRequest{}
}

/*PatchRoutingEmailDomainBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchRoutingEmailDomainBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PatchRoutingEmailDomainBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/domains/{domainId}][%d] patchRoutingEmailDomainBadRequest  %+v", 400, o.Payload)
}

func (o *PatchRoutingEmailDomainBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingEmailDomainBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingEmailDomainUnauthorized creates a PatchRoutingEmailDomainUnauthorized with default headers values
func NewPatchRoutingEmailDomainUnauthorized() *PatchRoutingEmailDomainUnauthorized {
	return &PatchRoutingEmailDomainUnauthorized{}
}

/*PatchRoutingEmailDomainUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchRoutingEmailDomainUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PatchRoutingEmailDomainUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/domains/{domainId}][%d] patchRoutingEmailDomainUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchRoutingEmailDomainUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingEmailDomainUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingEmailDomainForbidden creates a PatchRoutingEmailDomainForbidden with default headers values
func NewPatchRoutingEmailDomainForbidden() *PatchRoutingEmailDomainForbidden {
	return &PatchRoutingEmailDomainForbidden{}
}

/*PatchRoutingEmailDomainForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PatchRoutingEmailDomainForbidden struct {
	Payload *models.ErrorBody
}

func (o *PatchRoutingEmailDomainForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/domains/{domainId}][%d] patchRoutingEmailDomainForbidden  %+v", 403, o.Payload)
}

func (o *PatchRoutingEmailDomainForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingEmailDomainForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingEmailDomainNotFound creates a PatchRoutingEmailDomainNotFound with default headers values
func NewPatchRoutingEmailDomainNotFound() *PatchRoutingEmailDomainNotFound {
	return &PatchRoutingEmailDomainNotFound{}
}

/*PatchRoutingEmailDomainNotFound handles this case with default header values.

The requested resource was not found.
*/
type PatchRoutingEmailDomainNotFound struct {
	Payload *models.ErrorBody
}

func (o *PatchRoutingEmailDomainNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/domains/{domainId}][%d] patchRoutingEmailDomainNotFound  %+v", 404, o.Payload)
}

func (o *PatchRoutingEmailDomainNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingEmailDomainNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingEmailDomainRequestTimeout creates a PatchRoutingEmailDomainRequestTimeout with default headers values
func NewPatchRoutingEmailDomainRequestTimeout() *PatchRoutingEmailDomainRequestTimeout {
	return &PatchRoutingEmailDomainRequestTimeout{}
}

/*PatchRoutingEmailDomainRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchRoutingEmailDomainRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PatchRoutingEmailDomainRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/domains/{domainId}][%d] patchRoutingEmailDomainRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchRoutingEmailDomainRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingEmailDomainRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingEmailDomainRequestEntityTooLarge creates a PatchRoutingEmailDomainRequestEntityTooLarge with default headers values
func NewPatchRoutingEmailDomainRequestEntityTooLarge() *PatchRoutingEmailDomainRequestEntityTooLarge {
	return &PatchRoutingEmailDomainRequestEntityTooLarge{}
}

/*PatchRoutingEmailDomainRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type PatchRoutingEmailDomainRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PatchRoutingEmailDomainRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/domains/{domainId}][%d] patchRoutingEmailDomainRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchRoutingEmailDomainRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingEmailDomainRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingEmailDomainUnsupportedMediaType creates a PatchRoutingEmailDomainUnsupportedMediaType with default headers values
func NewPatchRoutingEmailDomainUnsupportedMediaType() *PatchRoutingEmailDomainUnsupportedMediaType {
	return &PatchRoutingEmailDomainUnsupportedMediaType{}
}

/*PatchRoutingEmailDomainUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchRoutingEmailDomainUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PatchRoutingEmailDomainUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/domains/{domainId}][%d] patchRoutingEmailDomainUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchRoutingEmailDomainUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingEmailDomainUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingEmailDomainTooManyRequests creates a PatchRoutingEmailDomainTooManyRequests with default headers values
func NewPatchRoutingEmailDomainTooManyRequests() *PatchRoutingEmailDomainTooManyRequests {
	return &PatchRoutingEmailDomainTooManyRequests{}
}

/*PatchRoutingEmailDomainTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchRoutingEmailDomainTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PatchRoutingEmailDomainTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/domains/{domainId}][%d] patchRoutingEmailDomainTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchRoutingEmailDomainTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingEmailDomainTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingEmailDomainInternalServerError creates a PatchRoutingEmailDomainInternalServerError with default headers values
func NewPatchRoutingEmailDomainInternalServerError() *PatchRoutingEmailDomainInternalServerError {
	return &PatchRoutingEmailDomainInternalServerError{}
}

/*PatchRoutingEmailDomainInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchRoutingEmailDomainInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PatchRoutingEmailDomainInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/domains/{domainId}][%d] patchRoutingEmailDomainInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchRoutingEmailDomainInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingEmailDomainInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingEmailDomainServiceUnavailable creates a PatchRoutingEmailDomainServiceUnavailable with default headers values
func NewPatchRoutingEmailDomainServiceUnavailable() *PatchRoutingEmailDomainServiceUnavailable {
	return &PatchRoutingEmailDomainServiceUnavailable{}
}

/*PatchRoutingEmailDomainServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchRoutingEmailDomainServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PatchRoutingEmailDomainServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/domains/{domainId}][%d] patchRoutingEmailDomainServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchRoutingEmailDomainServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingEmailDomainServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingEmailDomainGatewayTimeout creates a PatchRoutingEmailDomainGatewayTimeout with default headers values
func NewPatchRoutingEmailDomainGatewayTimeout() *PatchRoutingEmailDomainGatewayTimeout {
	return &PatchRoutingEmailDomainGatewayTimeout{}
}

/*PatchRoutingEmailDomainGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PatchRoutingEmailDomainGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PatchRoutingEmailDomainGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/domains/{domainId}][%d] patchRoutingEmailDomainGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchRoutingEmailDomainGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingEmailDomainGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

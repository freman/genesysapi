// Code generated by go-swagger; DO NOT EDIT.

package routing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchRoutingEmailOutboundDomainReader is a Reader for the PatchRoutingEmailOutboundDomain structure.
type PatchRoutingEmailOutboundDomainReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchRoutingEmailOutboundDomainReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchRoutingEmailOutboundDomainOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchRoutingEmailOutboundDomainBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchRoutingEmailOutboundDomainUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchRoutingEmailOutboundDomainForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchRoutingEmailOutboundDomainNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchRoutingEmailOutboundDomainRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchRoutingEmailOutboundDomainRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchRoutingEmailOutboundDomainUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchRoutingEmailOutboundDomainTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchRoutingEmailOutboundDomainInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchRoutingEmailOutboundDomainServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchRoutingEmailOutboundDomainGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchRoutingEmailOutboundDomainOK creates a PatchRoutingEmailOutboundDomainOK with default headers values
func NewPatchRoutingEmailOutboundDomainOK() *PatchRoutingEmailOutboundDomainOK {
	return &PatchRoutingEmailOutboundDomainOK{}
}

/*PatchRoutingEmailOutboundDomainOK handles this case with default header values.

successful operation
*/
type PatchRoutingEmailOutboundDomainOK struct {
	Payload *models.OutboundDomain
}

func (o *PatchRoutingEmailOutboundDomainOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/outbound/domains/{domainId}][%d] patchRoutingEmailOutboundDomainOK  %+v", 200, o.Payload)
}

func (o *PatchRoutingEmailOutboundDomainOK) GetPayload() *models.OutboundDomain {
	return o.Payload
}

func (o *PatchRoutingEmailOutboundDomainOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OutboundDomain)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingEmailOutboundDomainBadRequest creates a PatchRoutingEmailOutboundDomainBadRequest with default headers values
func NewPatchRoutingEmailOutboundDomainBadRequest() *PatchRoutingEmailOutboundDomainBadRequest {
	return &PatchRoutingEmailOutboundDomainBadRequest{}
}

/*PatchRoutingEmailOutboundDomainBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchRoutingEmailOutboundDomainBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PatchRoutingEmailOutboundDomainBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/outbound/domains/{domainId}][%d] patchRoutingEmailOutboundDomainBadRequest  %+v", 400, o.Payload)
}

func (o *PatchRoutingEmailOutboundDomainBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingEmailOutboundDomainBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingEmailOutboundDomainUnauthorized creates a PatchRoutingEmailOutboundDomainUnauthorized with default headers values
func NewPatchRoutingEmailOutboundDomainUnauthorized() *PatchRoutingEmailOutboundDomainUnauthorized {
	return &PatchRoutingEmailOutboundDomainUnauthorized{}
}

/*PatchRoutingEmailOutboundDomainUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchRoutingEmailOutboundDomainUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PatchRoutingEmailOutboundDomainUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/outbound/domains/{domainId}][%d] patchRoutingEmailOutboundDomainUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchRoutingEmailOutboundDomainUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingEmailOutboundDomainUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingEmailOutboundDomainForbidden creates a PatchRoutingEmailOutboundDomainForbidden with default headers values
func NewPatchRoutingEmailOutboundDomainForbidden() *PatchRoutingEmailOutboundDomainForbidden {
	return &PatchRoutingEmailOutboundDomainForbidden{}
}

/*PatchRoutingEmailOutboundDomainForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PatchRoutingEmailOutboundDomainForbidden struct {
	Payload *models.ErrorBody
}

func (o *PatchRoutingEmailOutboundDomainForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/outbound/domains/{domainId}][%d] patchRoutingEmailOutboundDomainForbidden  %+v", 403, o.Payload)
}

func (o *PatchRoutingEmailOutboundDomainForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingEmailOutboundDomainForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingEmailOutboundDomainNotFound creates a PatchRoutingEmailOutboundDomainNotFound with default headers values
func NewPatchRoutingEmailOutboundDomainNotFound() *PatchRoutingEmailOutboundDomainNotFound {
	return &PatchRoutingEmailOutboundDomainNotFound{}
}

/*PatchRoutingEmailOutboundDomainNotFound handles this case with default header values.

The requested resource was not found.
*/
type PatchRoutingEmailOutboundDomainNotFound struct {
	Payload *models.ErrorBody
}

func (o *PatchRoutingEmailOutboundDomainNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/outbound/domains/{domainId}][%d] patchRoutingEmailOutboundDomainNotFound  %+v", 404, o.Payload)
}

func (o *PatchRoutingEmailOutboundDomainNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingEmailOutboundDomainNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingEmailOutboundDomainRequestTimeout creates a PatchRoutingEmailOutboundDomainRequestTimeout with default headers values
func NewPatchRoutingEmailOutboundDomainRequestTimeout() *PatchRoutingEmailOutboundDomainRequestTimeout {
	return &PatchRoutingEmailOutboundDomainRequestTimeout{}
}

/*PatchRoutingEmailOutboundDomainRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchRoutingEmailOutboundDomainRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PatchRoutingEmailOutboundDomainRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/outbound/domains/{domainId}][%d] patchRoutingEmailOutboundDomainRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchRoutingEmailOutboundDomainRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingEmailOutboundDomainRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingEmailOutboundDomainRequestEntityTooLarge creates a PatchRoutingEmailOutboundDomainRequestEntityTooLarge with default headers values
func NewPatchRoutingEmailOutboundDomainRequestEntityTooLarge() *PatchRoutingEmailOutboundDomainRequestEntityTooLarge {
	return &PatchRoutingEmailOutboundDomainRequestEntityTooLarge{}
}

/*PatchRoutingEmailOutboundDomainRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type PatchRoutingEmailOutboundDomainRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PatchRoutingEmailOutboundDomainRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/outbound/domains/{domainId}][%d] patchRoutingEmailOutboundDomainRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchRoutingEmailOutboundDomainRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingEmailOutboundDomainRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingEmailOutboundDomainUnsupportedMediaType creates a PatchRoutingEmailOutboundDomainUnsupportedMediaType with default headers values
func NewPatchRoutingEmailOutboundDomainUnsupportedMediaType() *PatchRoutingEmailOutboundDomainUnsupportedMediaType {
	return &PatchRoutingEmailOutboundDomainUnsupportedMediaType{}
}

/*PatchRoutingEmailOutboundDomainUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchRoutingEmailOutboundDomainUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PatchRoutingEmailOutboundDomainUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/outbound/domains/{domainId}][%d] patchRoutingEmailOutboundDomainUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchRoutingEmailOutboundDomainUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingEmailOutboundDomainUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingEmailOutboundDomainTooManyRequests creates a PatchRoutingEmailOutboundDomainTooManyRequests with default headers values
func NewPatchRoutingEmailOutboundDomainTooManyRequests() *PatchRoutingEmailOutboundDomainTooManyRequests {
	return &PatchRoutingEmailOutboundDomainTooManyRequests{}
}

/*PatchRoutingEmailOutboundDomainTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchRoutingEmailOutboundDomainTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PatchRoutingEmailOutboundDomainTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/outbound/domains/{domainId}][%d] patchRoutingEmailOutboundDomainTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchRoutingEmailOutboundDomainTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingEmailOutboundDomainTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingEmailOutboundDomainInternalServerError creates a PatchRoutingEmailOutboundDomainInternalServerError with default headers values
func NewPatchRoutingEmailOutboundDomainInternalServerError() *PatchRoutingEmailOutboundDomainInternalServerError {
	return &PatchRoutingEmailOutboundDomainInternalServerError{}
}

/*PatchRoutingEmailOutboundDomainInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchRoutingEmailOutboundDomainInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PatchRoutingEmailOutboundDomainInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/outbound/domains/{domainId}][%d] patchRoutingEmailOutboundDomainInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchRoutingEmailOutboundDomainInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingEmailOutboundDomainInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingEmailOutboundDomainServiceUnavailable creates a PatchRoutingEmailOutboundDomainServiceUnavailable with default headers values
func NewPatchRoutingEmailOutboundDomainServiceUnavailable() *PatchRoutingEmailOutboundDomainServiceUnavailable {
	return &PatchRoutingEmailOutboundDomainServiceUnavailable{}
}

/*PatchRoutingEmailOutboundDomainServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchRoutingEmailOutboundDomainServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PatchRoutingEmailOutboundDomainServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/outbound/domains/{domainId}][%d] patchRoutingEmailOutboundDomainServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchRoutingEmailOutboundDomainServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingEmailOutboundDomainServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingEmailOutboundDomainGatewayTimeout creates a PatchRoutingEmailOutboundDomainGatewayTimeout with default headers values
func NewPatchRoutingEmailOutboundDomainGatewayTimeout() *PatchRoutingEmailOutboundDomainGatewayTimeout {
	return &PatchRoutingEmailOutboundDomainGatewayTimeout{}
}

/*PatchRoutingEmailOutboundDomainGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PatchRoutingEmailOutboundDomainGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PatchRoutingEmailOutboundDomainGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/outbound/domains/{domainId}][%d] patchRoutingEmailOutboundDomainGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchRoutingEmailOutboundDomainGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingEmailOutboundDomainGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package routing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetRoutingWrapupcodesReader is a Reader for the GetRoutingWrapupcodes structure.
type GetRoutingWrapupcodesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRoutingWrapupcodesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRoutingWrapupcodesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRoutingWrapupcodesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetRoutingWrapupcodesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRoutingWrapupcodesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRoutingWrapupcodesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetRoutingWrapupcodesRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetRoutingWrapupcodesRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetRoutingWrapupcodesUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetRoutingWrapupcodesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetRoutingWrapupcodesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetRoutingWrapupcodesServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetRoutingWrapupcodesGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRoutingWrapupcodesOK creates a GetRoutingWrapupcodesOK with default headers values
func NewGetRoutingWrapupcodesOK() *GetRoutingWrapupcodesOK {
	return &GetRoutingWrapupcodesOK{}
}

/*
GetRoutingWrapupcodesOK describes a response with status code 200, with default header values.

successful operation
*/
type GetRoutingWrapupcodesOK struct {
	Payload *models.WrapupCodeEntityListing
}

// IsSuccess returns true when this get routing wrapupcodes o k response has a 2xx status code
func (o *GetRoutingWrapupcodesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get routing wrapupcodes o k response has a 3xx status code
func (o *GetRoutingWrapupcodesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing wrapupcodes o k response has a 4xx status code
func (o *GetRoutingWrapupcodesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get routing wrapupcodes o k response has a 5xx status code
func (o *GetRoutingWrapupcodesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing wrapupcodes o k response a status code equal to that given
func (o *GetRoutingWrapupcodesOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetRoutingWrapupcodesOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/wrapupcodes][%d] getRoutingWrapupcodesOK  %+v", 200, o.Payload)
}

func (o *GetRoutingWrapupcodesOK) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/wrapupcodes][%d] getRoutingWrapupcodesOK  %+v", 200, o.Payload)
}

func (o *GetRoutingWrapupcodesOK) GetPayload() *models.WrapupCodeEntityListing {
	return o.Payload
}

func (o *GetRoutingWrapupcodesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.WrapupCodeEntityListing)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingWrapupcodesBadRequest creates a GetRoutingWrapupcodesBadRequest with default headers values
func NewGetRoutingWrapupcodesBadRequest() *GetRoutingWrapupcodesBadRequest {
	return &GetRoutingWrapupcodesBadRequest{}
}

/*
GetRoutingWrapupcodesBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetRoutingWrapupcodesBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing wrapupcodes bad request response has a 2xx status code
func (o *GetRoutingWrapupcodesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing wrapupcodes bad request response has a 3xx status code
func (o *GetRoutingWrapupcodesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing wrapupcodes bad request response has a 4xx status code
func (o *GetRoutingWrapupcodesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing wrapupcodes bad request response has a 5xx status code
func (o *GetRoutingWrapupcodesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing wrapupcodes bad request response a status code equal to that given
func (o *GetRoutingWrapupcodesBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetRoutingWrapupcodesBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/wrapupcodes][%d] getRoutingWrapupcodesBadRequest  %+v", 400, o.Payload)
}

func (o *GetRoutingWrapupcodesBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/wrapupcodes][%d] getRoutingWrapupcodesBadRequest  %+v", 400, o.Payload)
}

func (o *GetRoutingWrapupcodesBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingWrapupcodesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingWrapupcodesUnauthorized creates a GetRoutingWrapupcodesUnauthorized with default headers values
func NewGetRoutingWrapupcodesUnauthorized() *GetRoutingWrapupcodesUnauthorized {
	return &GetRoutingWrapupcodesUnauthorized{}
}

/*
GetRoutingWrapupcodesUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetRoutingWrapupcodesUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing wrapupcodes unauthorized response has a 2xx status code
func (o *GetRoutingWrapupcodesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing wrapupcodes unauthorized response has a 3xx status code
func (o *GetRoutingWrapupcodesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing wrapupcodes unauthorized response has a 4xx status code
func (o *GetRoutingWrapupcodesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing wrapupcodes unauthorized response has a 5xx status code
func (o *GetRoutingWrapupcodesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing wrapupcodes unauthorized response a status code equal to that given
func (o *GetRoutingWrapupcodesUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetRoutingWrapupcodesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/wrapupcodes][%d] getRoutingWrapupcodesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRoutingWrapupcodesUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/wrapupcodes][%d] getRoutingWrapupcodesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRoutingWrapupcodesUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingWrapupcodesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingWrapupcodesForbidden creates a GetRoutingWrapupcodesForbidden with default headers values
func NewGetRoutingWrapupcodesForbidden() *GetRoutingWrapupcodesForbidden {
	return &GetRoutingWrapupcodesForbidden{}
}

/*
GetRoutingWrapupcodesForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetRoutingWrapupcodesForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing wrapupcodes forbidden response has a 2xx status code
func (o *GetRoutingWrapupcodesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing wrapupcodes forbidden response has a 3xx status code
func (o *GetRoutingWrapupcodesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing wrapupcodes forbidden response has a 4xx status code
func (o *GetRoutingWrapupcodesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing wrapupcodes forbidden response has a 5xx status code
func (o *GetRoutingWrapupcodesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing wrapupcodes forbidden response a status code equal to that given
func (o *GetRoutingWrapupcodesForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetRoutingWrapupcodesForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/wrapupcodes][%d] getRoutingWrapupcodesForbidden  %+v", 403, o.Payload)
}

func (o *GetRoutingWrapupcodesForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/wrapupcodes][%d] getRoutingWrapupcodesForbidden  %+v", 403, o.Payload)
}

func (o *GetRoutingWrapupcodesForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingWrapupcodesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingWrapupcodesNotFound creates a GetRoutingWrapupcodesNotFound with default headers values
func NewGetRoutingWrapupcodesNotFound() *GetRoutingWrapupcodesNotFound {
	return &GetRoutingWrapupcodesNotFound{}
}

/*
GetRoutingWrapupcodesNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetRoutingWrapupcodesNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing wrapupcodes not found response has a 2xx status code
func (o *GetRoutingWrapupcodesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing wrapupcodes not found response has a 3xx status code
func (o *GetRoutingWrapupcodesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing wrapupcodes not found response has a 4xx status code
func (o *GetRoutingWrapupcodesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing wrapupcodes not found response has a 5xx status code
func (o *GetRoutingWrapupcodesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing wrapupcodes not found response a status code equal to that given
func (o *GetRoutingWrapupcodesNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetRoutingWrapupcodesNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/wrapupcodes][%d] getRoutingWrapupcodesNotFound  %+v", 404, o.Payload)
}

func (o *GetRoutingWrapupcodesNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/wrapupcodes][%d] getRoutingWrapupcodesNotFound  %+v", 404, o.Payload)
}

func (o *GetRoutingWrapupcodesNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingWrapupcodesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingWrapupcodesRequestTimeout creates a GetRoutingWrapupcodesRequestTimeout with default headers values
func NewGetRoutingWrapupcodesRequestTimeout() *GetRoutingWrapupcodesRequestTimeout {
	return &GetRoutingWrapupcodesRequestTimeout{}
}

/*
GetRoutingWrapupcodesRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetRoutingWrapupcodesRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing wrapupcodes request timeout response has a 2xx status code
func (o *GetRoutingWrapupcodesRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing wrapupcodes request timeout response has a 3xx status code
func (o *GetRoutingWrapupcodesRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing wrapupcodes request timeout response has a 4xx status code
func (o *GetRoutingWrapupcodesRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing wrapupcodes request timeout response has a 5xx status code
func (o *GetRoutingWrapupcodesRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing wrapupcodes request timeout response a status code equal to that given
func (o *GetRoutingWrapupcodesRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetRoutingWrapupcodesRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/wrapupcodes][%d] getRoutingWrapupcodesRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetRoutingWrapupcodesRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/wrapupcodes][%d] getRoutingWrapupcodesRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetRoutingWrapupcodesRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingWrapupcodesRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingWrapupcodesRequestEntityTooLarge creates a GetRoutingWrapupcodesRequestEntityTooLarge with default headers values
func NewGetRoutingWrapupcodesRequestEntityTooLarge() *GetRoutingWrapupcodesRequestEntityTooLarge {
	return &GetRoutingWrapupcodesRequestEntityTooLarge{}
}

/*
GetRoutingWrapupcodesRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type GetRoutingWrapupcodesRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing wrapupcodes request entity too large response has a 2xx status code
func (o *GetRoutingWrapupcodesRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing wrapupcodes request entity too large response has a 3xx status code
func (o *GetRoutingWrapupcodesRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing wrapupcodes request entity too large response has a 4xx status code
func (o *GetRoutingWrapupcodesRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing wrapupcodes request entity too large response has a 5xx status code
func (o *GetRoutingWrapupcodesRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing wrapupcodes request entity too large response a status code equal to that given
func (o *GetRoutingWrapupcodesRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetRoutingWrapupcodesRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/wrapupcodes][%d] getRoutingWrapupcodesRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetRoutingWrapupcodesRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/wrapupcodes][%d] getRoutingWrapupcodesRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetRoutingWrapupcodesRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingWrapupcodesRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingWrapupcodesUnsupportedMediaType creates a GetRoutingWrapupcodesUnsupportedMediaType with default headers values
func NewGetRoutingWrapupcodesUnsupportedMediaType() *GetRoutingWrapupcodesUnsupportedMediaType {
	return &GetRoutingWrapupcodesUnsupportedMediaType{}
}

/*
GetRoutingWrapupcodesUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetRoutingWrapupcodesUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing wrapupcodes unsupported media type response has a 2xx status code
func (o *GetRoutingWrapupcodesUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing wrapupcodes unsupported media type response has a 3xx status code
func (o *GetRoutingWrapupcodesUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing wrapupcodes unsupported media type response has a 4xx status code
func (o *GetRoutingWrapupcodesUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing wrapupcodes unsupported media type response has a 5xx status code
func (o *GetRoutingWrapupcodesUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing wrapupcodes unsupported media type response a status code equal to that given
func (o *GetRoutingWrapupcodesUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetRoutingWrapupcodesUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/wrapupcodes][%d] getRoutingWrapupcodesUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetRoutingWrapupcodesUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/wrapupcodes][%d] getRoutingWrapupcodesUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetRoutingWrapupcodesUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingWrapupcodesUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingWrapupcodesTooManyRequests creates a GetRoutingWrapupcodesTooManyRequests with default headers values
func NewGetRoutingWrapupcodesTooManyRequests() *GetRoutingWrapupcodesTooManyRequests {
	return &GetRoutingWrapupcodesTooManyRequests{}
}

/*
GetRoutingWrapupcodesTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetRoutingWrapupcodesTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing wrapupcodes too many requests response has a 2xx status code
func (o *GetRoutingWrapupcodesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing wrapupcodes too many requests response has a 3xx status code
func (o *GetRoutingWrapupcodesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing wrapupcodes too many requests response has a 4xx status code
func (o *GetRoutingWrapupcodesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing wrapupcodes too many requests response has a 5xx status code
func (o *GetRoutingWrapupcodesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing wrapupcodes too many requests response a status code equal to that given
func (o *GetRoutingWrapupcodesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetRoutingWrapupcodesTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/wrapupcodes][%d] getRoutingWrapupcodesTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetRoutingWrapupcodesTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/wrapupcodes][%d] getRoutingWrapupcodesTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetRoutingWrapupcodesTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingWrapupcodesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingWrapupcodesInternalServerError creates a GetRoutingWrapupcodesInternalServerError with default headers values
func NewGetRoutingWrapupcodesInternalServerError() *GetRoutingWrapupcodesInternalServerError {
	return &GetRoutingWrapupcodesInternalServerError{}
}

/*
GetRoutingWrapupcodesInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetRoutingWrapupcodesInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing wrapupcodes internal server error response has a 2xx status code
func (o *GetRoutingWrapupcodesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing wrapupcodes internal server error response has a 3xx status code
func (o *GetRoutingWrapupcodesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing wrapupcodes internal server error response has a 4xx status code
func (o *GetRoutingWrapupcodesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get routing wrapupcodes internal server error response has a 5xx status code
func (o *GetRoutingWrapupcodesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get routing wrapupcodes internal server error response a status code equal to that given
func (o *GetRoutingWrapupcodesInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetRoutingWrapupcodesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/wrapupcodes][%d] getRoutingWrapupcodesInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRoutingWrapupcodesInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/wrapupcodes][%d] getRoutingWrapupcodesInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRoutingWrapupcodesInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingWrapupcodesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingWrapupcodesServiceUnavailable creates a GetRoutingWrapupcodesServiceUnavailable with default headers values
func NewGetRoutingWrapupcodesServiceUnavailable() *GetRoutingWrapupcodesServiceUnavailable {
	return &GetRoutingWrapupcodesServiceUnavailable{}
}

/*
GetRoutingWrapupcodesServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetRoutingWrapupcodesServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing wrapupcodes service unavailable response has a 2xx status code
func (o *GetRoutingWrapupcodesServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing wrapupcodes service unavailable response has a 3xx status code
func (o *GetRoutingWrapupcodesServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing wrapupcodes service unavailable response has a 4xx status code
func (o *GetRoutingWrapupcodesServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get routing wrapupcodes service unavailable response has a 5xx status code
func (o *GetRoutingWrapupcodesServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get routing wrapupcodes service unavailable response a status code equal to that given
func (o *GetRoutingWrapupcodesServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetRoutingWrapupcodesServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/wrapupcodes][%d] getRoutingWrapupcodesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetRoutingWrapupcodesServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/wrapupcodes][%d] getRoutingWrapupcodesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetRoutingWrapupcodesServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingWrapupcodesServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingWrapupcodesGatewayTimeout creates a GetRoutingWrapupcodesGatewayTimeout with default headers values
func NewGetRoutingWrapupcodesGatewayTimeout() *GetRoutingWrapupcodesGatewayTimeout {
	return &GetRoutingWrapupcodesGatewayTimeout{}
}

/*
GetRoutingWrapupcodesGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetRoutingWrapupcodesGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing wrapupcodes gateway timeout response has a 2xx status code
func (o *GetRoutingWrapupcodesGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing wrapupcodes gateway timeout response has a 3xx status code
func (o *GetRoutingWrapupcodesGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing wrapupcodes gateway timeout response has a 4xx status code
func (o *GetRoutingWrapupcodesGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get routing wrapupcodes gateway timeout response has a 5xx status code
func (o *GetRoutingWrapupcodesGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get routing wrapupcodes gateway timeout response a status code equal to that given
func (o *GetRoutingWrapupcodesGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetRoutingWrapupcodesGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/wrapupcodes][%d] getRoutingWrapupcodesGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetRoutingWrapupcodesGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/wrapupcodes][%d] getRoutingWrapupcodesGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetRoutingWrapupcodesGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingWrapupcodesGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

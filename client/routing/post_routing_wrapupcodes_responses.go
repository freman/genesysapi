// Code generated by go-swagger; DO NOT EDIT.

package routing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostRoutingWrapupcodesReader is a Reader for the PostRoutingWrapupcodes structure.
type PostRoutingWrapupcodesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostRoutingWrapupcodesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostRoutingWrapupcodesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostRoutingWrapupcodesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostRoutingWrapupcodesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostRoutingWrapupcodesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostRoutingWrapupcodesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostRoutingWrapupcodesRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostRoutingWrapupcodesRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostRoutingWrapupcodesUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostRoutingWrapupcodesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostRoutingWrapupcodesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostRoutingWrapupcodesServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostRoutingWrapupcodesGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostRoutingWrapupcodesOK creates a PostRoutingWrapupcodesOK with default headers values
func NewPostRoutingWrapupcodesOK() *PostRoutingWrapupcodesOK {
	return &PostRoutingWrapupcodesOK{}
}

/*PostRoutingWrapupcodesOK handles this case with default header values.

successful operation
*/
type PostRoutingWrapupcodesOK struct {
	Payload *models.WrapupCode
}

func (o *PostRoutingWrapupcodesOK) Error() string {
	return fmt.Sprintf("[POST /api/v2/routing/wrapupcodes][%d] postRoutingWrapupcodesOK  %+v", 200, o.Payload)
}

func (o *PostRoutingWrapupcodesOK) GetPayload() *models.WrapupCode {
	return o.Payload
}

func (o *PostRoutingWrapupcodesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.WrapupCode)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRoutingWrapupcodesBadRequest creates a PostRoutingWrapupcodesBadRequest with default headers values
func NewPostRoutingWrapupcodesBadRequest() *PostRoutingWrapupcodesBadRequest {
	return &PostRoutingWrapupcodesBadRequest{}
}

/*PostRoutingWrapupcodesBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostRoutingWrapupcodesBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PostRoutingWrapupcodesBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/routing/wrapupcodes][%d] postRoutingWrapupcodesBadRequest  %+v", 400, o.Payload)
}

func (o *PostRoutingWrapupcodesBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRoutingWrapupcodesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRoutingWrapupcodesUnauthorized creates a PostRoutingWrapupcodesUnauthorized with default headers values
func NewPostRoutingWrapupcodesUnauthorized() *PostRoutingWrapupcodesUnauthorized {
	return &PostRoutingWrapupcodesUnauthorized{}
}

/*PostRoutingWrapupcodesUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PostRoutingWrapupcodesUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PostRoutingWrapupcodesUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/routing/wrapupcodes][%d] postRoutingWrapupcodesUnauthorized  %+v", 401, o.Payload)
}

func (o *PostRoutingWrapupcodesUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRoutingWrapupcodesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRoutingWrapupcodesForbidden creates a PostRoutingWrapupcodesForbidden with default headers values
func NewPostRoutingWrapupcodesForbidden() *PostRoutingWrapupcodesForbidden {
	return &PostRoutingWrapupcodesForbidden{}
}

/*PostRoutingWrapupcodesForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PostRoutingWrapupcodesForbidden struct {
	Payload *models.ErrorBody
}

func (o *PostRoutingWrapupcodesForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/routing/wrapupcodes][%d] postRoutingWrapupcodesForbidden  %+v", 403, o.Payload)
}

func (o *PostRoutingWrapupcodesForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRoutingWrapupcodesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRoutingWrapupcodesNotFound creates a PostRoutingWrapupcodesNotFound with default headers values
func NewPostRoutingWrapupcodesNotFound() *PostRoutingWrapupcodesNotFound {
	return &PostRoutingWrapupcodesNotFound{}
}

/*PostRoutingWrapupcodesNotFound handles this case with default header values.

The requested resource was not found.
*/
type PostRoutingWrapupcodesNotFound struct {
	Payload *models.ErrorBody
}

func (o *PostRoutingWrapupcodesNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/routing/wrapupcodes][%d] postRoutingWrapupcodesNotFound  %+v", 404, o.Payload)
}

func (o *PostRoutingWrapupcodesNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRoutingWrapupcodesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRoutingWrapupcodesRequestTimeout creates a PostRoutingWrapupcodesRequestTimeout with default headers values
func NewPostRoutingWrapupcodesRequestTimeout() *PostRoutingWrapupcodesRequestTimeout {
	return &PostRoutingWrapupcodesRequestTimeout{}
}

/*PostRoutingWrapupcodesRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PostRoutingWrapupcodesRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PostRoutingWrapupcodesRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/routing/wrapupcodes][%d] postRoutingWrapupcodesRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostRoutingWrapupcodesRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRoutingWrapupcodesRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRoutingWrapupcodesRequestEntityTooLarge creates a PostRoutingWrapupcodesRequestEntityTooLarge with default headers values
func NewPostRoutingWrapupcodesRequestEntityTooLarge() *PostRoutingWrapupcodesRequestEntityTooLarge {
	return &PostRoutingWrapupcodesRequestEntityTooLarge{}
}

/*PostRoutingWrapupcodesRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PostRoutingWrapupcodesRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PostRoutingWrapupcodesRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/routing/wrapupcodes][%d] postRoutingWrapupcodesRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostRoutingWrapupcodesRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRoutingWrapupcodesRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRoutingWrapupcodesUnsupportedMediaType creates a PostRoutingWrapupcodesUnsupportedMediaType with default headers values
func NewPostRoutingWrapupcodesUnsupportedMediaType() *PostRoutingWrapupcodesUnsupportedMediaType {
	return &PostRoutingWrapupcodesUnsupportedMediaType{}
}

/*PostRoutingWrapupcodesUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostRoutingWrapupcodesUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PostRoutingWrapupcodesUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/routing/wrapupcodes][%d] postRoutingWrapupcodesUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostRoutingWrapupcodesUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRoutingWrapupcodesUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRoutingWrapupcodesTooManyRequests creates a PostRoutingWrapupcodesTooManyRequests with default headers values
func NewPostRoutingWrapupcodesTooManyRequests() *PostRoutingWrapupcodesTooManyRequests {
	return &PostRoutingWrapupcodesTooManyRequests{}
}

/*PostRoutingWrapupcodesTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PostRoutingWrapupcodesTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PostRoutingWrapupcodesTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/routing/wrapupcodes][%d] postRoutingWrapupcodesTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostRoutingWrapupcodesTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRoutingWrapupcodesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRoutingWrapupcodesInternalServerError creates a PostRoutingWrapupcodesInternalServerError with default headers values
func NewPostRoutingWrapupcodesInternalServerError() *PostRoutingWrapupcodesInternalServerError {
	return &PostRoutingWrapupcodesInternalServerError{}
}

/*PostRoutingWrapupcodesInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostRoutingWrapupcodesInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PostRoutingWrapupcodesInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/routing/wrapupcodes][%d] postRoutingWrapupcodesInternalServerError  %+v", 500, o.Payload)
}

func (o *PostRoutingWrapupcodesInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRoutingWrapupcodesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRoutingWrapupcodesServiceUnavailable creates a PostRoutingWrapupcodesServiceUnavailable with default headers values
func NewPostRoutingWrapupcodesServiceUnavailable() *PostRoutingWrapupcodesServiceUnavailable {
	return &PostRoutingWrapupcodesServiceUnavailable{}
}

/*PostRoutingWrapupcodesServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostRoutingWrapupcodesServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PostRoutingWrapupcodesServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/routing/wrapupcodes][%d] postRoutingWrapupcodesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostRoutingWrapupcodesServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRoutingWrapupcodesServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRoutingWrapupcodesGatewayTimeout creates a PostRoutingWrapupcodesGatewayTimeout with default headers values
func NewPostRoutingWrapupcodesGatewayTimeout() *PostRoutingWrapupcodesGatewayTimeout {
	return &PostRoutingWrapupcodesGatewayTimeout{}
}

/*PostRoutingWrapupcodesGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PostRoutingWrapupcodesGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PostRoutingWrapupcodesGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/routing/wrapupcodes][%d] postRoutingWrapupcodesGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostRoutingWrapupcodesGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRoutingWrapupcodesGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

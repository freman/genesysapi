// Code generated by go-swagger; DO NOT EDIT.

package routing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostRoutingQueueWrapupcodesReader is a Reader for the PostRoutingQueueWrapupcodes structure.
type PostRoutingQueueWrapupcodesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostRoutingQueueWrapupcodesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostRoutingQueueWrapupcodesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostRoutingQueueWrapupcodesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostRoutingQueueWrapupcodesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostRoutingQueueWrapupcodesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostRoutingQueueWrapupcodesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostRoutingQueueWrapupcodesRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostRoutingQueueWrapupcodesRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostRoutingQueueWrapupcodesUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostRoutingQueueWrapupcodesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostRoutingQueueWrapupcodesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostRoutingQueueWrapupcodesServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostRoutingQueueWrapupcodesGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostRoutingQueueWrapupcodesOK creates a PostRoutingQueueWrapupcodesOK with default headers values
func NewPostRoutingQueueWrapupcodesOK() *PostRoutingQueueWrapupcodesOK {
	return &PostRoutingQueueWrapupcodesOK{}
}

/*
PostRoutingQueueWrapupcodesOK describes a response with status code 200, with default header values.

successful operation
*/
type PostRoutingQueueWrapupcodesOK struct {
	Payload []*models.WrapupCode
}

// IsSuccess returns true when this post routing queue wrapupcodes o k response has a 2xx status code
func (o *PostRoutingQueueWrapupcodesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post routing queue wrapupcodes o k response has a 3xx status code
func (o *PostRoutingQueueWrapupcodesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post routing queue wrapupcodes o k response has a 4xx status code
func (o *PostRoutingQueueWrapupcodesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post routing queue wrapupcodes o k response has a 5xx status code
func (o *PostRoutingQueueWrapupcodesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post routing queue wrapupcodes o k response a status code equal to that given
func (o *PostRoutingQueueWrapupcodesOK) IsCode(code int) bool {
	return code == 200
}

func (o *PostRoutingQueueWrapupcodesOK) Error() string {
	return fmt.Sprintf("[POST /api/v2/routing/queues/{queueId}/wrapupcodes][%d] postRoutingQueueWrapupcodesOK  %+v", 200, o.Payload)
}

func (o *PostRoutingQueueWrapupcodesOK) String() string {
	return fmt.Sprintf("[POST /api/v2/routing/queues/{queueId}/wrapupcodes][%d] postRoutingQueueWrapupcodesOK  %+v", 200, o.Payload)
}

func (o *PostRoutingQueueWrapupcodesOK) GetPayload() []*models.WrapupCode {
	return o.Payload
}

func (o *PostRoutingQueueWrapupcodesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRoutingQueueWrapupcodesBadRequest creates a PostRoutingQueueWrapupcodesBadRequest with default headers values
func NewPostRoutingQueueWrapupcodesBadRequest() *PostRoutingQueueWrapupcodesBadRequest {
	return &PostRoutingQueueWrapupcodesBadRequest{}
}

/*
PostRoutingQueueWrapupcodesBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostRoutingQueueWrapupcodesBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post routing queue wrapupcodes bad request response has a 2xx status code
func (o *PostRoutingQueueWrapupcodesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post routing queue wrapupcodes bad request response has a 3xx status code
func (o *PostRoutingQueueWrapupcodesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post routing queue wrapupcodes bad request response has a 4xx status code
func (o *PostRoutingQueueWrapupcodesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post routing queue wrapupcodes bad request response has a 5xx status code
func (o *PostRoutingQueueWrapupcodesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post routing queue wrapupcodes bad request response a status code equal to that given
func (o *PostRoutingQueueWrapupcodesBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PostRoutingQueueWrapupcodesBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/routing/queues/{queueId}/wrapupcodes][%d] postRoutingQueueWrapupcodesBadRequest  %+v", 400, o.Payload)
}

func (o *PostRoutingQueueWrapupcodesBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v2/routing/queues/{queueId}/wrapupcodes][%d] postRoutingQueueWrapupcodesBadRequest  %+v", 400, o.Payload)
}

func (o *PostRoutingQueueWrapupcodesBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRoutingQueueWrapupcodesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRoutingQueueWrapupcodesUnauthorized creates a PostRoutingQueueWrapupcodesUnauthorized with default headers values
func NewPostRoutingQueueWrapupcodesUnauthorized() *PostRoutingQueueWrapupcodesUnauthorized {
	return &PostRoutingQueueWrapupcodesUnauthorized{}
}

/*
PostRoutingQueueWrapupcodesUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PostRoutingQueueWrapupcodesUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post routing queue wrapupcodes unauthorized response has a 2xx status code
func (o *PostRoutingQueueWrapupcodesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post routing queue wrapupcodes unauthorized response has a 3xx status code
func (o *PostRoutingQueueWrapupcodesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post routing queue wrapupcodes unauthorized response has a 4xx status code
func (o *PostRoutingQueueWrapupcodesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post routing queue wrapupcodes unauthorized response has a 5xx status code
func (o *PostRoutingQueueWrapupcodesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post routing queue wrapupcodes unauthorized response a status code equal to that given
func (o *PostRoutingQueueWrapupcodesUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PostRoutingQueueWrapupcodesUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/routing/queues/{queueId}/wrapupcodes][%d] postRoutingQueueWrapupcodesUnauthorized  %+v", 401, o.Payload)
}

func (o *PostRoutingQueueWrapupcodesUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v2/routing/queues/{queueId}/wrapupcodes][%d] postRoutingQueueWrapupcodesUnauthorized  %+v", 401, o.Payload)
}

func (o *PostRoutingQueueWrapupcodesUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRoutingQueueWrapupcodesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRoutingQueueWrapupcodesForbidden creates a PostRoutingQueueWrapupcodesForbidden with default headers values
func NewPostRoutingQueueWrapupcodesForbidden() *PostRoutingQueueWrapupcodesForbidden {
	return &PostRoutingQueueWrapupcodesForbidden{}
}

/*
PostRoutingQueueWrapupcodesForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PostRoutingQueueWrapupcodesForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post routing queue wrapupcodes forbidden response has a 2xx status code
func (o *PostRoutingQueueWrapupcodesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post routing queue wrapupcodes forbidden response has a 3xx status code
func (o *PostRoutingQueueWrapupcodesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post routing queue wrapupcodes forbidden response has a 4xx status code
func (o *PostRoutingQueueWrapupcodesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post routing queue wrapupcodes forbidden response has a 5xx status code
func (o *PostRoutingQueueWrapupcodesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post routing queue wrapupcodes forbidden response a status code equal to that given
func (o *PostRoutingQueueWrapupcodesForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PostRoutingQueueWrapupcodesForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/routing/queues/{queueId}/wrapupcodes][%d] postRoutingQueueWrapupcodesForbidden  %+v", 403, o.Payload)
}

func (o *PostRoutingQueueWrapupcodesForbidden) String() string {
	return fmt.Sprintf("[POST /api/v2/routing/queues/{queueId}/wrapupcodes][%d] postRoutingQueueWrapupcodesForbidden  %+v", 403, o.Payload)
}

func (o *PostRoutingQueueWrapupcodesForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRoutingQueueWrapupcodesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRoutingQueueWrapupcodesNotFound creates a PostRoutingQueueWrapupcodesNotFound with default headers values
func NewPostRoutingQueueWrapupcodesNotFound() *PostRoutingQueueWrapupcodesNotFound {
	return &PostRoutingQueueWrapupcodesNotFound{}
}

/*
PostRoutingQueueWrapupcodesNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PostRoutingQueueWrapupcodesNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post routing queue wrapupcodes not found response has a 2xx status code
func (o *PostRoutingQueueWrapupcodesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post routing queue wrapupcodes not found response has a 3xx status code
func (o *PostRoutingQueueWrapupcodesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post routing queue wrapupcodes not found response has a 4xx status code
func (o *PostRoutingQueueWrapupcodesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post routing queue wrapupcodes not found response has a 5xx status code
func (o *PostRoutingQueueWrapupcodesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post routing queue wrapupcodes not found response a status code equal to that given
func (o *PostRoutingQueueWrapupcodesNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PostRoutingQueueWrapupcodesNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/routing/queues/{queueId}/wrapupcodes][%d] postRoutingQueueWrapupcodesNotFound  %+v", 404, o.Payload)
}

func (o *PostRoutingQueueWrapupcodesNotFound) String() string {
	return fmt.Sprintf("[POST /api/v2/routing/queues/{queueId}/wrapupcodes][%d] postRoutingQueueWrapupcodesNotFound  %+v", 404, o.Payload)
}

func (o *PostRoutingQueueWrapupcodesNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRoutingQueueWrapupcodesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRoutingQueueWrapupcodesRequestTimeout creates a PostRoutingQueueWrapupcodesRequestTimeout with default headers values
func NewPostRoutingQueueWrapupcodesRequestTimeout() *PostRoutingQueueWrapupcodesRequestTimeout {
	return &PostRoutingQueueWrapupcodesRequestTimeout{}
}

/*
PostRoutingQueueWrapupcodesRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PostRoutingQueueWrapupcodesRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post routing queue wrapupcodes request timeout response has a 2xx status code
func (o *PostRoutingQueueWrapupcodesRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post routing queue wrapupcodes request timeout response has a 3xx status code
func (o *PostRoutingQueueWrapupcodesRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post routing queue wrapupcodes request timeout response has a 4xx status code
func (o *PostRoutingQueueWrapupcodesRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this post routing queue wrapupcodes request timeout response has a 5xx status code
func (o *PostRoutingQueueWrapupcodesRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this post routing queue wrapupcodes request timeout response a status code equal to that given
func (o *PostRoutingQueueWrapupcodesRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PostRoutingQueueWrapupcodesRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/routing/queues/{queueId}/wrapupcodes][%d] postRoutingQueueWrapupcodesRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostRoutingQueueWrapupcodesRequestTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/routing/queues/{queueId}/wrapupcodes][%d] postRoutingQueueWrapupcodesRequestTimeout  %+v", 408, o.Payload)
}

func (o *PostRoutingQueueWrapupcodesRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRoutingQueueWrapupcodesRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRoutingQueueWrapupcodesRequestEntityTooLarge creates a PostRoutingQueueWrapupcodesRequestEntityTooLarge with default headers values
func NewPostRoutingQueueWrapupcodesRequestEntityTooLarge() *PostRoutingQueueWrapupcodesRequestEntityTooLarge {
	return &PostRoutingQueueWrapupcodesRequestEntityTooLarge{}
}

/*
PostRoutingQueueWrapupcodesRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PostRoutingQueueWrapupcodesRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post routing queue wrapupcodes request entity too large response has a 2xx status code
func (o *PostRoutingQueueWrapupcodesRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post routing queue wrapupcodes request entity too large response has a 3xx status code
func (o *PostRoutingQueueWrapupcodesRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post routing queue wrapupcodes request entity too large response has a 4xx status code
func (o *PostRoutingQueueWrapupcodesRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this post routing queue wrapupcodes request entity too large response has a 5xx status code
func (o *PostRoutingQueueWrapupcodesRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this post routing queue wrapupcodes request entity too large response a status code equal to that given
func (o *PostRoutingQueueWrapupcodesRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PostRoutingQueueWrapupcodesRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/routing/queues/{queueId}/wrapupcodes][%d] postRoutingQueueWrapupcodesRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostRoutingQueueWrapupcodesRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /api/v2/routing/queues/{queueId}/wrapupcodes][%d] postRoutingQueueWrapupcodesRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostRoutingQueueWrapupcodesRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRoutingQueueWrapupcodesRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRoutingQueueWrapupcodesUnsupportedMediaType creates a PostRoutingQueueWrapupcodesUnsupportedMediaType with default headers values
func NewPostRoutingQueueWrapupcodesUnsupportedMediaType() *PostRoutingQueueWrapupcodesUnsupportedMediaType {
	return &PostRoutingQueueWrapupcodesUnsupportedMediaType{}
}

/*
PostRoutingQueueWrapupcodesUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostRoutingQueueWrapupcodesUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post routing queue wrapupcodes unsupported media type response has a 2xx status code
func (o *PostRoutingQueueWrapupcodesUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post routing queue wrapupcodes unsupported media type response has a 3xx status code
func (o *PostRoutingQueueWrapupcodesUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post routing queue wrapupcodes unsupported media type response has a 4xx status code
func (o *PostRoutingQueueWrapupcodesUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this post routing queue wrapupcodes unsupported media type response has a 5xx status code
func (o *PostRoutingQueueWrapupcodesUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this post routing queue wrapupcodes unsupported media type response a status code equal to that given
func (o *PostRoutingQueueWrapupcodesUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PostRoutingQueueWrapupcodesUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/routing/queues/{queueId}/wrapupcodes][%d] postRoutingQueueWrapupcodesUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostRoutingQueueWrapupcodesUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /api/v2/routing/queues/{queueId}/wrapupcodes][%d] postRoutingQueueWrapupcodesUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostRoutingQueueWrapupcodesUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRoutingQueueWrapupcodesUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRoutingQueueWrapupcodesTooManyRequests creates a PostRoutingQueueWrapupcodesTooManyRequests with default headers values
func NewPostRoutingQueueWrapupcodesTooManyRequests() *PostRoutingQueueWrapupcodesTooManyRequests {
	return &PostRoutingQueueWrapupcodesTooManyRequests{}
}

/*
PostRoutingQueueWrapupcodesTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PostRoutingQueueWrapupcodesTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post routing queue wrapupcodes too many requests response has a 2xx status code
func (o *PostRoutingQueueWrapupcodesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post routing queue wrapupcodes too many requests response has a 3xx status code
func (o *PostRoutingQueueWrapupcodesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post routing queue wrapupcodes too many requests response has a 4xx status code
func (o *PostRoutingQueueWrapupcodesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this post routing queue wrapupcodes too many requests response has a 5xx status code
func (o *PostRoutingQueueWrapupcodesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this post routing queue wrapupcodes too many requests response a status code equal to that given
func (o *PostRoutingQueueWrapupcodesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PostRoutingQueueWrapupcodesTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/routing/queues/{queueId}/wrapupcodes][%d] postRoutingQueueWrapupcodesTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostRoutingQueueWrapupcodesTooManyRequests) String() string {
	return fmt.Sprintf("[POST /api/v2/routing/queues/{queueId}/wrapupcodes][%d] postRoutingQueueWrapupcodesTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostRoutingQueueWrapupcodesTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRoutingQueueWrapupcodesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRoutingQueueWrapupcodesInternalServerError creates a PostRoutingQueueWrapupcodesInternalServerError with default headers values
func NewPostRoutingQueueWrapupcodesInternalServerError() *PostRoutingQueueWrapupcodesInternalServerError {
	return &PostRoutingQueueWrapupcodesInternalServerError{}
}

/*
PostRoutingQueueWrapupcodesInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostRoutingQueueWrapupcodesInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post routing queue wrapupcodes internal server error response has a 2xx status code
func (o *PostRoutingQueueWrapupcodesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post routing queue wrapupcodes internal server error response has a 3xx status code
func (o *PostRoutingQueueWrapupcodesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post routing queue wrapupcodes internal server error response has a 4xx status code
func (o *PostRoutingQueueWrapupcodesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post routing queue wrapupcodes internal server error response has a 5xx status code
func (o *PostRoutingQueueWrapupcodesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post routing queue wrapupcodes internal server error response a status code equal to that given
func (o *PostRoutingQueueWrapupcodesInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PostRoutingQueueWrapupcodesInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/routing/queues/{queueId}/wrapupcodes][%d] postRoutingQueueWrapupcodesInternalServerError  %+v", 500, o.Payload)
}

func (o *PostRoutingQueueWrapupcodesInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v2/routing/queues/{queueId}/wrapupcodes][%d] postRoutingQueueWrapupcodesInternalServerError  %+v", 500, o.Payload)
}

func (o *PostRoutingQueueWrapupcodesInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRoutingQueueWrapupcodesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRoutingQueueWrapupcodesServiceUnavailable creates a PostRoutingQueueWrapupcodesServiceUnavailable with default headers values
func NewPostRoutingQueueWrapupcodesServiceUnavailable() *PostRoutingQueueWrapupcodesServiceUnavailable {
	return &PostRoutingQueueWrapupcodesServiceUnavailable{}
}

/*
PostRoutingQueueWrapupcodesServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostRoutingQueueWrapupcodesServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post routing queue wrapupcodes service unavailable response has a 2xx status code
func (o *PostRoutingQueueWrapupcodesServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post routing queue wrapupcodes service unavailable response has a 3xx status code
func (o *PostRoutingQueueWrapupcodesServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post routing queue wrapupcodes service unavailable response has a 4xx status code
func (o *PostRoutingQueueWrapupcodesServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this post routing queue wrapupcodes service unavailable response has a 5xx status code
func (o *PostRoutingQueueWrapupcodesServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this post routing queue wrapupcodes service unavailable response a status code equal to that given
func (o *PostRoutingQueueWrapupcodesServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PostRoutingQueueWrapupcodesServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/routing/queues/{queueId}/wrapupcodes][%d] postRoutingQueueWrapupcodesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostRoutingQueueWrapupcodesServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /api/v2/routing/queues/{queueId}/wrapupcodes][%d] postRoutingQueueWrapupcodesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostRoutingQueueWrapupcodesServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRoutingQueueWrapupcodesServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRoutingQueueWrapupcodesGatewayTimeout creates a PostRoutingQueueWrapupcodesGatewayTimeout with default headers values
func NewPostRoutingQueueWrapupcodesGatewayTimeout() *PostRoutingQueueWrapupcodesGatewayTimeout {
	return &PostRoutingQueueWrapupcodesGatewayTimeout{}
}

/*
PostRoutingQueueWrapupcodesGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PostRoutingQueueWrapupcodesGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this post routing queue wrapupcodes gateway timeout response has a 2xx status code
func (o *PostRoutingQueueWrapupcodesGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post routing queue wrapupcodes gateway timeout response has a 3xx status code
func (o *PostRoutingQueueWrapupcodesGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post routing queue wrapupcodes gateway timeout response has a 4xx status code
func (o *PostRoutingQueueWrapupcodesGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this post routing queue wrapupcodes gateway timeout response has a 5xx status code
func (o *PostRoutingQueueWrapupcodesGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this post routing queue wrapupcodes gateway timeout response a status code equal to that given
func (o *PostRoutingQueueWrapupcodesGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PostRoutingQueueWrapupcodesGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/routing/queues/{queueId}/wrapupcodes][%d] postRoutingQueueWrapupcodesGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostRoutingQueueWrapupcodesGatewayTimeout) String() string {
	return fmt.Sprintf("[POST /api/v2/routing/queues/{queueId}/wrapupcodes][%d] postRoutingQueueWrapupcodesGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostRoutingQueueWrapupcodesGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostRoutingQueueWrapupcodesGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

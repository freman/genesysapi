// Code generated by go-swagger; DO NOT EDIT.

package routing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetRoutingQueuesParams creates a new GetRoutingQueuesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetRoutingQueuesParams() *GetRoutingQueuesParams {
	return &GetRoutingQueuesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetRoutingQueuesParamsWithTimeout creates a new GetRoutingQueuesParams object
// with the ability to set a timeout on a request.
func NewGetRoutingQueuesParamsWithTimeout(timeout time.Duration) *GetRoutingQueuesParams {
	return &GetRoutingQueuesParams{
		timeout: timeout,
	}
}

// NewGetRoutingQueuesParamsWithContext creates a new GetRoutingQueuesParams object
// with the ability to set a context for a request.
func NewGetRoutingQueuesParamsWithContext(ctx context.Context) *GetRoutingQueuesParams {
	return &GetRoutingQueuesParams{
		Context: ctx,
	}
}

// NewGetRoutingQueuesParamsWithHTTPClient creates a new GetRoutingQueuesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetRoutingQueuesParamsWithHTTPClient(client *http.Client) *GetRoutingQueuesParams {
	return &GetRoutingQueuesParams{
		HTTPClient: client,
	}
}

/*
GetRoutingQueuesParams contains all the parameters to send to the API endpoint

	for the get routing queues operation.

	Typically these are written to a http.Request.
*/
type GetRoutingQueuesParams struct {

	/* DivisionID.

	   Filter by queue division ID(s)
	*/
	DivisionID []string

	/* HasPeer.

	   Filter by queues associated with peer
	*/
	HasPeer *bool

	/* ID.

	   Filter by queue ID(s)
	*/
	ID []string

	/* Name.

	   Filter by queue name
	*/
	Name *string

	/* PageNumber.

	   Page number

	   Format: int32
	   Default: 1
	*/
	PageNumber *int32

	/* PageSize.

	   Page size

	   Format: int32
	   Default: 25
	*/
	PageSize *int32

	/* PeerID.

	   Filter by queue peer ID(s)
	*/
	PeerID []string

	/* SortOrder.

	   Note: results are sorted by name.

	   Default: "asc"
	*/
	SortOrder *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get routing queues params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetRoutingQueuesParams) WithDefaults() *GetRoutingQueuesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get routing queues params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetRoutingQueuesParams) SetDefaults() {
	var (
		pageNumberDefault = int32(1)

		pageSizeDefault = int32(25)

		sortOrderDefault = string("asc")
	)

	val := GetRoutingQueuesParams{
		PageNumber: &pageNumberDefault,
		PageSize:   &pageSizeDefault,
		SortOrder:  &sortOrderDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get routing queues params
func (o *GetRoutingQueuesParams) WithTimeout(timeout time.Duration) *GetRoutingQueuesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get routing queues params
func (o *GetRoutingQueuesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get routing queues params
func (o *GetRoutingQueuesParams) WithContext(ctx context.Context) *GetRoutingQueuesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get routing queues params
func (o *GetRoutingQueuesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get routing queues params
func (o *GetRoutingQueuesParams) WithHTTPClient(client *http.Client) *GetRoutingQueuesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get routing queues params
func (o *GetRoutingQueuesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDivisionID adds the divisionID to the get routing queues params
func (o *GetRoutingQueuesParams) WithDivisionID(divisionID []string) *GetRoutingQueuesParams {
	o.SetDivisionID(divisionID)
	return o
}

// SetDivisionID adds the divisionId to the get routing queues params
func (o *GetRoutingQueuesParams) SetDivisionID(divisionID []string) {
	o.DivisionID = divisionID
}

// WithHasPeer adds the hasPeer to the get routing queues params
func (o *GetRoutingQueuesParams) WithHasPeer(hasPeer *bool) *GetRoutingQueuesParams {
	o.SetHasPeer(hasPeer)
	return o
}

// SetHasPeer adds the hasPeer to the get routing queues params
func (o *GetRoutingQueuesParams) SetHasPeer(hasPeer *bool) {
	o.HasPeer = hasPeer
}

// WithID adds the id to the get routing queues params
func (o *GetRoutingQueuesParams) WithID(id []string) *GetRoutingQueuesParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get routing queues params
func (o *GetRoutingQueuesParams) SetID(id []string) {
	o.ID = id
}

// WithName adds the name to the get routing queues params
func (o *GetRoutingQueuesParams) WithName(name *string) *GetRoutingQueuesParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get routing queues params
func (o *GetRoutingQueuesParams) SetName(name *string) {
	o.Name = name
}

// WithPageNumber adds the pageNumber to the get routing queues params
func (o *GetRoutingQueuesParams) WithPageNumber(pageNumber *int32) *GetRoutingQueuesParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the get routing queues params
func (o *GetRoutingQueuesParams) SetPageNumber(pageNumber *int32) {
	o.PageNumber = pageNumber
}

// WithPageSize adds the pageSize to the get routing queues params
func (o *GetRoutingQueuesParams) WithPageSize(pageSize *int32) *GetRoutingQueuesParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get routing queues params
func (o *GetRoutingQueuesParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithPeerID adds the peerID to the get routing queues params
func (o *GetRoutingQueuesParams) WithPeerID(peerID []string) *GetRoutingQueuesParams {
	o.SetPeerID(peerID)
	return o
}

// SetPeerID adds the peerId to the get routing queues params
func (o *GetRoutingQueuesParams) SetPeerID(peerID []string) {
	o.PeerID = peerID
}

// WithSortOrder adds the sortOrder to the get routing queues params
func (o *GetRoutingQueuesParams) WithSortOrder(sortOrder *string) *GetRoutingQueuesParams {
	o.SetSortOrder(sortOrder)
	return o
}

// SetSortOrder adds the sortOrder to the get routing queues params
func (o *GetRoutingQueuesParams) SetSortOrder(sortOrder *string) {
	o.SortOrder = sortOrder
}

// WriteToRequest writes these params to a swagger request
func (o *GetRoutingQueuesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DivisionID != nil {

		// binding items for divisionId
		joinedDivisionID := o.bindParamDivisionID(reg)

		// query array param divisionId
		if err := r.SetQueryParam("divisionId", joinedDivisionID...); err != nil {
			return err
		}
	}

	if o.HasPeer != nil {

		// query param hasPeer
		var qrHasPeer bool

		if o.HasPeer != nil {
			qrHasPeer = *o.HasPeer
		}
		qHasPeer := swag.FormatBool(qrHasPeer)
		if qHasPeer != "" {

			if err := r.SetQueryParam("hasPeer", qHasPeer); err != nil {
				return err
			}
		}
	}

	if o.ID != nil {

		// binding items for id
		joinedID := o.bindParamID(reg)

		// query array param id
		if err := r.SetQueryParam("id", joinedID...); err != nil {
			return err
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.PageNumber != nil {

		// query param pageNumber
		var qrPageNumber int32

		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := swag.FormatInt32(qrPageNumber)
		if qPageNumber != "" {

			if err := r.SetQueryParam("pageNumber", qPageNumber); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int32

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.PeerID != nil {

		// binding items for peerId
		joinedPeerID := o.bindParamPeerID(reg)

		// query array param peerId
		if err := r.SetQueryParam("peerId", joinedPeerID...); err != nil {
			return err
		}
	}

	if o.SortOrder != nil {

		// query param sortOrder
		var qrSortOrder string

		if o.SortOrder != nil {
			qrSortOrder = *o.SortOrder
		}
		qSortOrder := qrSortOrder
		if qSortOrder != "" {

			if err := r.SetQueryParam("sortOrder", qSortOrder); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetRoutingQueues binds the parameter divisionId
func (o *GetRoutingQueuesParams) bindParamDivisionID(formats strfmt.Registry) []string {
	divisionIDIR := o.DivisionID

	var divisionIDIC []string
	for _, divisionIDIIR := range divisionIDIR { // explode []string

		divisionIDIIV := divisionIDIIR // string as string
		divisionIDIC = append(divisionIDIC, divisionIDIIV)
	}

	// items.CollectionFormat: "multi"
	divisionIDIS := swag.JoinByFormat(divisionIDIC, "multi")

	return divisionIDIS
}

// bindParamGetRoutingQueues binds the parameter id
func (o *GetRoutingQueuesParams) bindParamID(formats strfmt.Registry) []string {
	iDIR := o.ID

	var iDIC []string
	for _, iDIIR := range iDIR { // explode []string

		iDIIV := iDIIR // string as string
		iDIC = append(iDIC, iDIIV)
	}

	// items.CollectionFormat: "multi"
	iDIS := swag.JoinByFormat(iDIC, "multi")

	return iDIS
}

// bindParamGetRoutingQueues binds the parameter peerId
func (o *GetRoutingQueuesParams) bindParamPeerID(formats strfmt.Registry) []string {
	peerIDIR := o.PeerID

	var peerIDIC []string
	for _, peerIDIIR := range peerIDIR { // explode []string

		peerIDIIV := peerIDIIR // string as string
		peerIDIC = append(peerIDIC, peerIDIIV)
	}

	// items.CollectionFormat: "multi"
	peerIDIS := swag.JoinByFormat(peerIDIC, "multi")

	return peerIDIS
}

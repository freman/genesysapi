// Code generated by go-swagger; DO NOT EDIT.

package routing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the routing client
type API interface {
	/*
	   DeleteRoutingEmailDomain deletes a domain
	*/
	DeleteRoutingEmailDomain(ctx context.Context, params *DeleteRoutingEmailDomainParams) (*DeleteRoutingEmailDomainOK, error)
	/*
	   DeleteRoutingEmailDomainRoute deletes a route
	*/
	DeleteRoutingEmailDomainRoute(ctx context.Context, params *DeleteRoutingEmailDomainRouteParams) (*DeleteRoutingEmailDomainRouteOK, error)
	/*
	   DeleteRoutingQueue deletes a queue
	*/
	DeleteRoutingQueue(ctx context.Context, params *DeleteRoutingQueueParams) (*DeleteRoutingQueueOK, error)
	/*
	   DeleteRoutingQueueMember deletes a queue member
	*/
	DeleteRoutingQueueMember(ctx context.Context, params *DeleteRoutingQueueMemberParams) (*DeleteRoutingQueueMemberNoContent, error)
	/*
	   DeleteRoutingQueueUser ds e p r e c a t e d use d e l e t e routing queues queue Id members member Id delete queue member
	*/
	DeleteRoutingQueueUser(ctx context.Context, params *DeleteRoutingQueueUserParams) (*DeleteRoutingQueueUserOK, error)
	/*
	   DeleteRoutingQueueWrapupcode deletes a wrap up code from a queue
	*/
	DeleteRoutingQueueWrapupcode(ctx context.Context, params *DeleteRoutingQueueWrapupcodeParams) (*DeleteRoutingQueueWrapupcodeOK, error)
	/*
	   DeleteRoutingSettings deletes an organization s routing settings
	*/
	DeleteRoutingSettings(ctx context.Context, params *DeleteRoutingSettingsParams) (*DeleteRoutingSettingsNoContent, error)
	/*
	   DeleteRoutingSkill deletes routing skill
	*/
	DeleteRoutingSkill(ctx context.Context, params *DeleteRoutingSkillParams) (*DeleteRoutingSkillOK, error)
	/*
	   DeleteRoutingSmsAddress deletes an address by Id for s m s
	*/
	DeleteRoutingSmsAddress(ctx context.Context, params *DeleteRoutingSmsAddressParams) (*DeleteRoutingSmsAddressNoContent, error)
	/*
	   DeleteRoutingSmsPhonenumber deletes a phone number provisioned for s m s
	*/
	DeleteRoutingSmsPhonenumber(ctx context.Context, params *DeleteRoutingSmsPhonenumberParams) (*DeleteRoutingSmsPhonenumberOK, error)
	/*
	   DeleteRoutingUserUtilization deletes the user s max utilization settings and revert to the organization wide default
	*/
	DeleteRoutingUserUtilization(ctx context.Context, params *DeleteRoutingUserUtilizationParams) (*DeleteRoutingUserUtilizationOK, error)
	/*
	   DeleteRoutingUtilization deletes the organization wide max utilization settings and revert to the system default
	*/
	DeleteRoutingUtilization(ctx context.Context, params *DeleteRoutingUtilizationParams) (*DeleteRoutingUtilizationOK, error)
	/*
	   DeleteRoutingWrapupcode deletes wrap up code
	*/
	DeleteRoutingWrapupcode(ctx context.Context, params *DeleteRoutingWrapupcodeParams) (*DeleteRoutingWrapupcodeOK, error)
	/*
	   DeleteUserRoutinglanguage removes routing language from user
	*/
	DeleteUserRoutinglanguage(ctx context.Context, params *DeleteUserRoutinglanguageParams) (*DeleteUserRoutinglanguageNoContent, error)
	/*
	   DeleteUserRoutingskill removes routing skill from user
	*/
	DeleteUserRoutingskill(ctx context.Context, params *DeleteUserRoutingskillParams) (*DeleteUserRoutingskillOK, error)
	/*
	   GetRoutingEmailDomain gets domain
	*/
	GetRoutingEmailDomain(ctx context.Context, params *GetRoutingEmailDomainParams) (*GetRoutingEmailDomainOK, error)
	/*
	   GetRoutingEmailDomainRoute gets a route
	*/
	GetRoutingEmailDomainRoute(ctx context.Context, params *GetRoutingEmailDomainRouteParams) (*GetRoutingEmailDomainRouteOK, error)
	/*
	   GetRoutingEmailDomainRoutes gets routes
	*/
	GetRoutingEmailDomainRoutes(ctx context.Context, params *GetRoutingEmailDomainRoutesParams) (*GetRoutingEmailDomainRoutesOK, error)
	/*
	   GetRoutingEmailDomains gets domains
	*/
	GetRoutingEmailDomains(ctx context.Context, params *GetRoutingEmailDomainsParams) (*GetRoutingEmailDomainsOK, error)
	/*
	   GetRoutingEmailSetup gets email setup
	*/
	GetRoutingEmailSetup(ctx context.Context, params *GetRoutingEmailSetupParams) (*GetRoutingEmailSetupOK, error)
	/*
	   GetRoutingLanguages gets the list of supported languages
	*/
	GetRoutingLanguages(ctx context.Context, params *GetRoutingLanguagesParams) (*GetRoutingLanguagesOK, error)
	/*
	   GetRoutingMessageRecipient gets a recipient
	*/
	GetRoutingMessageRecipient(ctx context.Context, params *GetRoutingMessageRecipientParams) (*GetRoutingMessageRecipientOK, error)
	/*
	   GetRoutingMessageRecipients gets recipients
	*/
	GetRoutingMessageRecipients(ctx context.Context, params *GetRoutingMessageRecipientsParams) (*GetRoutingMessageRecipientsOK, error)
	/*
	   GetRoutingQueue gets details about this queue
	*/
	GetRoutingQueue(ctx context.Context, params *GetRoutingQueueParams) (*GetRoutingQueueOK, error)
	/*
	   GetRoutingQueueEstimatedwaittime gets estimated wait time
	*/
	GetRoutingQueueEstimatedwaittime(ctx context.Context, params *GetRoutingQueueEstimatedwaittimeParams) (*GetRoutingQueueEstimatedwaittimeOK, error)
	/*
	   GetRoutingQueueMediatypeEstimatedwaittime gets estimated wait time
	*/
	GetRoutingQueueMediatypeEstimatedwaittime(ctx context.Context, params *GetRoutingQueueMediatypeEstimatedwaittimeParams) (*GetRoutingQueueMediatypeEstimatedwaittimeOK, error)
	/*
	   GetRoutingQueueMembers gets the members of this queue
	*/
	GetRoutingQueueMembers(ctx context.Context, params *GetRoutingQueueMembersParams) (*GetRoutingQueueMembersOK, error)
	/*
	   GetRoutingQueueUsers ds e p r e c a t e d use g e t routing queues queue Id members get the members of this queue
	*/
	GetRoutingQueueUsers(ctx context.Context, params *GetRoutingQueueUsersParams) (*GetRoutingQueueUsersOK, error)
	/*
	   GetRoutingQueueWrapupcodes gets the wrap up codes for a queue
	*/
	GetRoutingQueueWrapupcodes(ctx context.Context, params *GetRoutingQueueWrapupcodesParams) (*GetRoutingQueueWrapupcodesOK, error)
	/*
	   GetRoutingQueues gets list of queues
	*/
	GetRoutingQueues(ctx context.Context, params *GetRoutingQueuesParams) (*GetRoutingQueuesOK, error)
	/*
	   GetRoutingQueuesDivisionviews gets a paged listing of simplified queue objects filterable by name queue ID s or division ID s
	*/
	GetRoutingQueuesDivisionviews(ctx context.Context, params *GetRoutingQueuesDivisionviewsParams) (*GetRoutingQueuesDivisionviewsOK, error)
	/*
	   GetRoutingQueuesDivisionviewsAll gets a paged listing of simplified queue objects can be used to get a digest of all queues in an organization
	*/
	GetRoutingQueuesDivisionviewsAll(ctx context.Context, params *GetRoutingQueuesDivisionviewsAllParams) (*GetRoutingQueuesDivisionviewsAllOK, error)
	/*
	   GetRoutingQueuesMe gets a paged listing of queues the user is a member of
	*/
	GetRoutingQueuesMe(ctx context.Context, params *GetRoutingQueuesMeParams) (*GetRoutingQueuesMeOK, error)
	/*
	   GetRoutingSettings gets an organization s routing settings
	*/
	GetRoutingSettings(ctx context.Context, params *GetRoutingSettingsParams) (*GetRoutingSettingsOK, error)
	/*
	   GetRoutingSettingsContactcenter gets contact center settings
	*/
	GetRoutingSettingsContactcenter(ctx context.Context, params *GetRoutingSettingsContactcenterParams) (*GetRoutingSettingsContactcenterOK, error)
	/*
	   GetRoutingSettingsTranscription gets transcription settings
	*/
	GetRoutingSettingsTranscription(ctx context.Context, params *GetRoutingSettingsTranscriptionParams) (*GetRoutingSettingsTranscriptionOK, error)
	/*
	   GetRoutingSkill gets routing skill
	*/
	GetRoutingSkill(ctx context.Context, params *GetRoutingSkillParams) (*GetRoutingSkillOK, error)
	/*
	   GetRoutingSkills gets the list of routing skills
	*/
	GetRoutingSkills(ctx context.Context, params *GetRoutingSkillsParams) (*GetRoutingSkillsOK, error)
	/*
	   GetRoutingSmsAddress gets an address by Id for s m s
	*/
	GetRoutingSmsAddress(ctx context.Context, params *GetRoutingSmsAddressParams) (*GetRoutingSmsAddressOK, error)
	/*
	   GetRoutingSmsAddresses gets a list of addresses for s m s
	*/
	GetRoutingSmsAddresses(ctx context.Context, params *GetRoutingSmsAddressesParams) (*GetRoutingSmsAddressesOK, error)
	/*
	   GetRoutingSmsAvailablephonenumbers gets a list of available phone numbers for s m s provisioning
	   This request will return up to 30 random phone numbers matching the criteria specified.  To get additional phone numbers repeat the request.
	*/
	GetRoutingSmsAvailablephonenumbers(ctx context.Context, params *GetRoutingSmsAvailablephonenumbersParams) (*GetRoutingSmsAvailablephonenumbersOK, error)
	/*
	   GetRoutingSmsPhonenumber gets a phone number provisioned for s m s
	*/
	GetRoutingSmsPhonenumber(ctx context.Context, params *GetRoutingSmsPhonenumberParams) (*GetRoutingSmsPhonenumberOK, error)
	/*
	   GetRoutingSmsPhonenumbers gets a list of provisioned phone numbers
	*/
	GetRoutingSmsPhonenumbers(ctx context.Context, params *GetRoutingSmsPhonenumbersParams) (*GetRoutingSmsPhonenumbersOK, error)
	/*
	   GetRoutingUserUtilization gets the user s max utilization settings if not configured the organization wide default is returned
	*/
	GetRoutingUserUtilization(ctx context.Context, params *GetRoutingUserUtilizationParams) (*GetRoutingUserUtilizationOK, error)
	/*
	   GetRoutingUtilization gets the organization wide max utilization settings
	*/
	GetRoutingUtilization(ctx context.Context, params *GetRoutingUtilizationParams) (*GetRoutingUtilizationOK, error)
	/*
	   GetRoutingWrapupcode gets details about this wrap up code
	*/
	GetRoutingWrapupcode(ctx context.Context, params *GetRoutingWrapupcodeParams) (*GetRoutingWrapupcodeOK, error)
	/*
	   GetRoutingWrapupcodes gets list of wrapup codes
	*/
	GetRoutingWrapupcodes(ctx context.Context, params *GetRoutingWrapupcodesParams) (*GetRoutingWrapupcodesOK, error)
	/*
	   GetUserQueues gets queues for user
	*/
	GetUserQueues(ctx context.Context, params *GetUserQueuesParams) (*GetUserQueuesOK, error)
	/*
	   GetUserRoutinglanguages lists routing language for user
	*/
	GetUserRoutinglanguages(ctx context.Context, params *GetUserRoutinglanguagesParams) (*GetUserRoutinglanguagesOK, error)
	/*
	   GetUserRoutingskills lists routing skills for user
	*/
	GetUserRoutingskills(ctx context.Context, params *GetUserRoutingskillsParams) (*GetUserRoutingskillsOK, error)
	/*
	   PatchRoutingEmailDomain updates domain settings
	*/
	PatchRoutingEmailDomain(ctx context.Context, params *PatchRoutingEmailDomainParams) (*PatchRoutingEmailDomainOK, error)
	/*
	   PatchRoutingEmailDomainValidate validates domain settings
	*/
	PatchRoutingEmailDomainValidate(ctx context.Context, params *PatchRoutingEmailDomainValidateParams) (*PatchRoutingEmailDomainValidateOK, error)
	/*
	   PatchRoutingQueueMember updates the ring number o r joined status for a queue member
	*/
	PatchRoutingQueueMember(ctx context.Context, params *PatchRoutingQueueMemberParams) (*PatchRoutingQueueMemberOK, *PatchRoutingQueueMemberAccepted, error)
	/*
	   PatchRoutingQueueMembers joins or unjoin a set of users for a queue
	*/
	PatchRoutingQueueMembers(ctx context.Context, params *PatchRoutingQueueMembersParams) (*PatchRoutingQueueMembersOK, error)
	/*
	   PatchRoutingQueueUser ds e p r e c a t e d use p a t c h routing queues queue Id members member Id update the ring number o r joined status for a user in a queue
	*/
	PatchRoutingQueueUser(ctx context.Context, params *PatchRoutingQueueUserParams) (*PatchRoutingQueueUserOK, *PatchRoutingQueueUserAccepted, error)
	/*
	   PatchRoutingQueueUsers ds e p r e c a t e d use p a t c h routing queues queue Id members join or unjoin a set of users for a queue
	*/
	PatchRoutingQueueUsers(ctx context.Context, params *PatchRoutingQueueUsersParams) (*PatchRoutingQueueUsersOK, error)
	/*
	   PatchRoutingSettingsContactcenter updates contact center settings
	*/
	PatchRoutingSettingsContactcenter(ctx context.Context, params *PatchRoutingSettingsContactcenterParams) (*PatchRoutingSettingsContactcenterAccepted, error)
	/*
	   PatchUserQueue joins or unjoin a queue for a user
	*/
	PatchUserQueue(ctx context.Context, params *PatchUserQueueParams) (*PatchUserQueueOK, error)
	/*
	   PatchUserQueues joins or unjoin a set of queues for a user
	*/
	PatchUserQueues(ctx context.Context, params *PatchUserQueuesParams) (*PatchUserQueuesOK, error)
	/*
	   PatchUserRoutinglanguage updates routing language proficiency or state
	*/
	PatchUserRoutinglanguage(ctx context.Context, params *PatchUserRoutinglanguageParams) (*PatchUserRoutinglanguageOK, error)
	/*
	   PatchUserRoutinglanguagesBulk adds bulk routing language to user max limit 50 languages
	*/
	PatchUserRoutinglanguagesBulk(ctx context.Context, params *PatchUserRoutinglanguagesBulkParams) (*PatchUserRoutinglanguagesBulkOK, error)
	/*
	   PatchUserRoutingskillsBulk bulks add routing skills to user
	*/
	PatchUserRoutingskillsBulk(ctx context.Context, params *PatchUserRoutingskillsBulkParams) (*PatchUserRoutingskillsBulkOK, error)
	/*
	   PostAnalyticsQueuesObservationsQuery queries for queue observations
	*/
	PostAnalyticsQueuesObservationsQuery(ctx context.Context, params *PostAnalyticsQueuesObservationsQueryParams) (*PostAnalyticsQueuesObservationsQueryOK, error)
	/*
	   PostRoutingEmailDomainRoutes creates a route
	*/
	PostRoutingEmailDomainRoutes(ctx context.Context, params *PostRoutingEmailDomainRoutesParams) (*PostRoutingEmailDomainRoutesOK, error)
	/*
	   PostRoutingEmailDomainTestconnection tests the custom SMTP server integration connection set on this domain
	   The request body is optional. If omitted, this endpoint will just test the connection of the Custom SMTP Server. If the body is specified, there will be an attempt to send an email message to the server.
	*/
	PostRoutingEmailDomainTestconnection(ctx context.Context, params *PostRoutingEmailDomainTestconnectionParams) (*PostRoutingEmailDomainTestconnectionOK, error)
	/*
	   PostRoutingEmailDomains creates a domain
	*/
	PostRoutingEmailDomains(ctx context.Context, params *PostRoutingEmailDomainsParams) (*PostRoutingEmailDomainsOK, error)
	/*
	   PostRoutingLanguages creates language
	*/
	PostRoutingLanguages(ctx context.Context, params *PostRoutingLanguagesParams) (*PostRoutingLanguagesOK, error)
	/*
	   PostRoutingQueueMembers bulks add or delete up to 100 queue members
	*/
	PostRoutingQueueMembers(ctx context.Context, params *PostRoutingQueueMembersParams) error
	/*
	   PostRoutingQueueUsers ds e p r e c a t e d use p o s t routing queues queue Id members bulk add or delete up to 100 queue members
	*/
	PostRoutingQueueUsers(ctx context.Context, params *PostRoutingQueueUsersParams) error
	/*
	   PostRoutingQueueWrapupcodes adds up to 100 wrap up codes to a queue
	*/
	PostRoutingQueueWrapupcodes(ctx context.Context, params *PostRoutingQueueWrapupcodesParams) (*PostRoutingQueueWrapupcodesOK, error)
	/*
	   PostRoutingQueues creates a queue
	*/
	PostRoutingQueues(ctx context.Context, params *PostRoutingQueuesParams) (*PostRoutingQueuesOK, error)
	/*
	   PostRoutingSkills creates skill
	*/
	PostRoutingSkills(ctx context.Context, params *PostRoutingSkillsParams) (*PostRoutingSkillsOK, error)
	/*
	   PostRoutingSmsAddresses provisions an address for s m s
	*/
	PostRoutingSmsAddresses(ctx context.Context, params *PostRoutingSmsAddressesParams) (*PostRoutingSmsAddressesOK, error)
	/*
	   PostRoutingSmsPhonenumbers provisions a phone number for s m s
	*/
	PostRoutingSmsPhonenumbers(ctx context.Context, params *PostRoutingSmsPhonenumbersParams) (*PostRoutingSmsPhonenumbersOK, error)
	/*
	   PostRoutingWrapupcodes creates a wrap up code
	*/
	PostRoutingWrapupcodes(ctx context.Context, params *PostRoutingWrapupcodesParams) (*PostRoutingWrapupcodesOK, error)
	/*
	   PostUserRoutinglanguages adds routing language to user
	*/
	PostUserRoutinglanguages(ctx context.Context, params *PostUserRoutinglanguagesParams) (*PostUserRoutinglanguagesOK, error)
	/*
	   PostUserRoutingskills adds routing skill to user
	*/
	PostUserRoutingskills(ctx context.Context, params *PostUserRoutingskillsParams) (*PostUserRoutingskillsOK, error)
	/*
	   PutRoutingEmailDomainRoute updates a route
	*/
	PutRoutingEmailDomainRoute(ctx context.Context, params *PutRoutingEmailDomainRouteParams) (*PutRoutingEmailDomainRouteOK, error)
	/*
	   PutRoutingMessageRecipient updates a recipient
	*/
	PutRoutingMessageRecipient(ctx context.Context, params *PutRoutingMessageRecipientParams) (*PutRoutingMessageRecipientOK, error)
	/*
	   PutRoutingQueue updates a queue
	*/
	PutRoutingQueue(ctx context.Context, params *PutRoutingQueueParams) (*PutRoutingQueueOK, error)
	/*
	   PutRoutingSettings updates an organization s routing settings
	*/
	PutRoutingSettings(ctx context.Context, params *PutRoutingSettingsParams) (*PutRoutingSettingsOK, error)
	/*
	   PutRoutingSettingsTranscription updates transcription settings
	*/
	PutRoutingSettingsTranscription(ctx context.Context, params *PutRoutingSettingsTranscriptionParams) (*PutRoutingSettingsTranscriptionOK, *PutRoutingSettingsTranscriptionAccepted, error)
	/*
	   PutRoutingSmsPhonenumber updates a phone number provisioned for s m s
	*/
	PutRoutingSmsPhonenumber(ctx context.Context, params *PutRoutingSmsPhonenumberParams) (*PutRoutingSmsPhonenumberOK, error)
	/*
	   PutRoutingUserUtilization updates the user s max utilization settings include only those media types requiring custom configuration
	*/
	PutRoutingUserUtilization(ctx context.Context, params *PutRoutingUserUtilizationParams) (*PutRoutingUserUtilizationOK, error)
	/*
	   PutRoutingUtilization updates the organization wide max utilization settings include only those media types requiring custom configuration
	*/
	PutRoutingUtilization(ctx context.Context, params *PutRoutingUtilizationParams) (*PutRoutingUtilizationOK, error)
	/*
	   PutRoutingWrapupcode updates wrap up code
	*/
	PutRoutingWrapupcode(ctx context.Context, params *PutRoutingWrapupcodeParams) (*PutRoutingWrapupcodeOK, error)
	/*
	   PutUserRoutingskill updates routing skill proficiency or state
	*/
	PutUserRoutingskill(ctx context.Context, params *PutUserRoutingskillParams) (*PutUserRoutingskillOK, error)
	/*
	   PutUserRoutingskillsBulk replaces all routing skills assigned to a user
	*/
	PutUserRoutingskillsBulk(ctx context.Context, params *PutUserRoutingskillsBulkParams) (*PutUserRoutingskillsBulkOK, error)
}

// New creates a new routing API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for routing API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
DeleteRoutingEmailDomain deletes a domain
*/
func (a *Client) DeleteRoutingEmailDomain(ctx context.Context, params *DeleteRoutingEmailDomainParams) (*DeleteRoutingEmailDomainOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRoutingEmailDomain",
		Method:             "DELETE",
		PathPattern:        "/api/v2/routing/email/domains/{domainId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRoutingEmailDomainReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteRoutingEmailDomainOK), nil

}

/*
DeleteRoutingEmailDomainRoute deletes a route
*/
func (a *Client) DeleteRoutingEmailDomainRoute(ctx context.Context, params *DeleteRoutingEmailDomainRouteParams) (*DeleteRoutingEmailDomainRouteOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRoutingEmailDomainRoute",
		Method:             "DELETE",
		PathPattern:        "/api/v2/routing/email/domains/{domainName}/routes/{routeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRoutingEmailDomainRouteReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteRoutingEmailDomainRouteOK), nil

}

/*
DeleteRoutingQueue deletes a queue
*/
func (a *Client) DeleteRoutingQueue(ctx context.Context, params *DeleteRoutingQueueParams) (*DeleteRoutingQueueOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRoutingQueue",
		Method:             "DELETE",
		PathPattern:        "/api/v2/routing/queues/{queueId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRoutingQueueReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteRoutingQueueOK), nil

}

/*
DeleteRoutingQueueMember deletes a queue member
*/
func (a *Client) DeleteRoutingQueueMember(ctx context.Context, params *DeleteRoutingQueueMemberParams) (*DeleteRoutingQueueMemberNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRoutingQueueMember",
		Method:             "DELETE",
		PathPattern:        "/api/v2/routing/queues/{queueId}/members/{memberId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRoutingQueueMemberReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteRoutingQueueMemberNoContent), nil

}

/*
DeleteRoutingQueueUser ds e p r e c a t e d use d e l e t e routing queues queue Id members member Id delete queue member
*/
func (a *Client) DeleteRoutingQueueUser(ctx context.Context, params *DeleteRoutingQueueUserParams) (*DeleteRoutingQueueUserOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRoutingQueueUser",
		Method:             "DELETE",
		PathPattern:        "/api/v2/routing/queues/{queueId}/users/{memberId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRoutingQueueUserReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteRoutingQueueUserOK), nil

}

/*
DeleteRoutingQueueWrapupcode deletes a wrap up code from a queue
*/
func (a *Client) DeleteRoutingQueueWrapupcode(ctx context.Context, params *DeleteRoutingQueueWrapupcodeParams) (*DeleteRoutingQueueWrapupcodeOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRoutingQueueWrapupcode",
		Method:             "DELETE",
		PathPattern:        "/api/v2/routing/queues/{queueId}/wrapupcodes/{codeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRoutingQueueWrapupcodeReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteRoutingQueueWrapupcodeOK), nil

}

/*
DeleteRoutingSettings deletes an organization s routing settings
*/
func (a *Client) DeleteRoutingSettings(ctx context.Context, params *DeleteRoutingSettingsParams) (*DeleteRoutingSettingsNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRoutingSettings",
		Method:             "DELETE",
		PathPattern:        "/api/v2/routing/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRoutingSettingsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteRoutingSettingsNoContent), nil

}

/*
DeleteRoutingSkill deletes routing skill
*/
func (a *Client) DeleteRoutingSkill(ctx context.Context, params *DeleteRoutingSkillParams) (*DeleteRoutingSkillOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRoutingSkill",
		Method:             "DELETE",
		PathPattern:        "/api/v2/routing/skills/{skillId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRoutingSkillReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteRoutingSkillOK), nil

}

/*
DeleteRoutingSmsAddress deletes an address by Id for s m s
*/
func (a *Client) DeleteRoutingSmsAddress(ctx context.Context, params *DeleteRoutingSmsAddressParams) (*DeleteRoutingSmsAddressNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRoutingSmsAddress",
		Method:             "DELETE",
		PathPattern:        "/api/v2/routing/sms/addresses/{addressId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRoutingSmsAddressReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteRoutingSmsAddressNoContent), nil

}

/*
DeleteRoutingSmsPhonenumber deletes a phone number provisioned for s m s
*/
func (a *Client) DeleteRoutingSmsPhonenumber(ctx context.Context, params *DeleteRoutingSmsPhonenumberParams) (*DeleteRoutingSmsPhonenumberOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRoutingSmsPhonenumber",
		Method:             "DELETE",
		PathPattern:        "/api/v2/routing/sms/phonenumbers/{addressId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRoutingSmsPhonenumberReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteRoutingSmsPhonenumberOK), nil

}

/*
DeleteRoutingUserUtilization deletes the user s max utilization settings and revert to the organization wide default
*/
func (a *Client) DeleteRoutingUserUtilization(ctx context.Context, params *DeleteRoutingUserUtilizationParams) (*DeleteRoutingUserUtilizationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRoutingUserUtilization",
		Method:             "DELETE",
		PathPattern:        "/api/v2/routing/users/{userId}/utilization",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRoutingUserUtilizationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteRoutingUserUtilizationOK), nil

}

/*
DeleteRoutingUtilization deletes the organization wide max utilization settings and revert to the system default
*/
func (a *Client) DeleteRoutingUtilization(ctx context.Context, params *DeleteRoutingUtilizationParams) (*DeleteRoutingUtilizationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRoutingUtilization",
		Method:             "DELETE",
		PathPattern:        "/api/v2/routing/utilization",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRoutingUtilizationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteRoutingUtilizationOK), nil

}

/*
DeleteRoutingWrapupcode deletes wrap up code
*/
func (a *Client) DeleteRoutingWrapupcode(ctx context.Context, params *DeleteRoutingWrapupcodeParams) (*DeleteRoutingWrapupcodeOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRoutingWrapupcode",
		Method:             "DELETE",
		PathPattern:        "/api/v2/routing/wrapupcodes/{codeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRoutingWrapupcodeReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteRoutingWrapupcodeOK), nil

}

/*
DeleteUserRoutinglanguage removes routing language from user
*/
func (a *Client) DeleteUserRoutinglanguage(ctx context.Context, params *DeleteUserRoutinglanguageParams) (*DeleteUserRoutinglanguageNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUserRoutinglanguage",
		Method:             "DELETE",
		PathPattern:        "/api/v2/users/{userId}/routinglanguages/{languageId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserRoutinglanguageReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserRoutinglanguageNoContent), nil

}

/*
DeleteUserRoutingskill removes routing skill from user
*/
func (a *Client) DeleteUserRoutingskill(ctx context.Context, params *DeleteUserRoutingskillParams) (*DeleteUserRoutingskillOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUserRoutingskill",
		Method:             "DELETE",
		PathPattern:        "/api/v2/users/{userId}/routingskills/{skillId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserRoutingskillReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserRoutingskillOK), nil

}

/*
GetRoutingEmailDomain gets domain
*/
func (a *Client) GetRoutingEmailDomain(ctx context.Context, params *GetRoutingEmailDomainParams) (*GetRoutingEmailDomainOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRoutingEmailDomain",
		Method:             "GET",
		PathPattern:        "/api/v2/routing/email/domains/{domainId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoutingEmailDomainReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRoutingEmailDomainOK), nil

}

/*
GetRoutingEmailDomainRoute gets a route
*/
func (a *Client) GetRoutingEmailDomainRoute(ctx context.Context, params *GetRoutingEmailDomainRouteParams) (*GetRoutingEmailDomainRouteOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRoutingEmailDomainRoute",
		Method:             "GET",
		PathPattern:        "/api/v2/routing/email/domains/{domainName}/routes/{routeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoutingEmailDomainRouteReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRoutingEmailDomainRouteOK), nil

}

/*
GetRoutingEmailDomainRoutes gets routes
*/
func (a *Client) GetRoutingEmailDomainRoutes(ctx context.Context, params *GetRoutingEmailDomainRoutesParams) (*GetRoutingEmailDomainRoutesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRoutingEmailDomainRoutes",
		Method:             "GET",
		PathPattern:        "/api/v2/routing/email/domains/{domainName}/routes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoutingEmailDomainRoutesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRoutingEmailDomainRoutesOK), nil

}

/*
GetRoutingEmailDomains gets domains
*/
func (a *Client) GetRoutingEmailDomains(ctx context.Context, params *GetRoutingEmailDomainsParams) (*GetRoutingEmailDomainsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRoutingEmailDomains",
		Method:             "GET",
		PathPattern:        "/api/v2/routing/email/domains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoutingEmailDomainsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRoutingEmailDomainsOK), nil

}

/*
GetRoutingEmailSetup gets email setup
*/
func (a *Client) GetRoutingEmailSetup(ctx context.Context, params *GetRoutingEmailSetupParams) (*GetRoutingEmailSetupOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRoutingEmailSetup",
		Method:             "GET",
		PathPattern:        "/api/v2/routing/email/setup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoutingEmailSetupReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRoutingEmailSetupOK), nil

}

/*
GetRoutingLanguages gets the list of supported languages
*/
func (a *Client) GetRoutingLanguages(ctx context.Context, params *GetRoutingLanguagesParams) (*GetRoutingLanguagesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRoutingLanguages",
		Method:             "GET",
		PathPattern:        "/api/v2/routing/languages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoutingLanguagesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRoutingLanguagesOK), nil

}

/*
GetRoutingMessageRecipient gets a recipient
*/
func (a *Client) GetRoutingMessageRecipient(ctx context.Context, params *GetRoutingMessageRecipientParams) (*GetRoutingMessageRecipientOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRoutingMessageRecipient",
		Method:             "GET",
		PathPattern:        "/api/v2/routing/message/recipients/{recipientId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoutingMessageRecipientReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRoutingMessageRecipientOK), nil

}

/*
GetRoutingMessageRecipients gets recipients
*/
func (a *Client) GetRoutingMessageRecipients(ctx context.Context, params *GetRoutingMessageRecipientsParams) (*GetRoutingMessageRecipientsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRoutingMessageRecipients",
		Method:             "GET",
		PathPattern:        "/api/v2/routing/message/recipients",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoutingMessageRecipientsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRoutingMessageRecipientsOK), nil

}

/*
GetRoutingQueue gets details about this queue
*/
func (a *Client) GetRoutingQueue(ctx context.Context, params *GetRoutingQueueParams) (*GetRoutingQueueOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRoutingQueue",
		Method:             "GET",
		PathPattern:        "/api/v2/routing/queues/{queueId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoutingQueueReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRoutingQueueOK), nil

}

/*
GetRoutingQueueEstimatedwaittime gets estimated wait time
*/
func (a *Client) GetRoutingQueueEstimatedwaittime(ctx context.Context, params *GetRoutingQueueEstimatedwaittimeParams) (*GetRoutingQueueEstimatedwaittimeOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRoutingQueueEstimatedwaittime",
		Method:             "GET",
		PathPattern:        "/api/v2/routing/queues/{queueId}/estimatedwaittime",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoutingQueueEstimatedwaittimeReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRoutingQueueEstimatedwaittimeOK), nil

}

/*
GetRoutingQueueMediatypeEstimatedwaittime gets estimated wait time
*/
func (a *Client) GetRoutingQueueMediatypeEstimatedwaittime(ctx context.Context, params *GetRoutingQueueMediatypeEstimatedwaittimeParams) (*GetRoutingQueueMediatypeEstimatedwaittimeOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRoutingQueueMediatypeEstimatedwaittime",
		Method:             "GET",
		PathPattern:        "/api/v2/routing/queues/{queueId}/mediatypes/{mediaType}/estimatedwaittime",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoutingQueueMediatypeEstimatedwaittimeReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRoutingQueueMediatypeEstimatedwaittimeOK), nil

}

/*
GetRoutingQueueMembers gets the members of this queue
*/
func (a *Client) GetRoutingQueueMembers(ctx context.Context, params *GetRoutingQueueMembersParams) (*GetRoutingQueueMembersOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRoutingQueueMembers",
		Method:             "GET",
		PathPattern:        "/api/v2/routing/queues/{queueId}/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoutingQueueMembersReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRoutingQueueMembersOK), nil

}

/*
GetRoutingQueueUsers ds e p r e c a t e d use g e t routing queues queue Id members get the members of this queue
*/
func (a *Client) GetRoutingQueueUsers(ctx context.Context, params *GetRoutingQueueUsersParams) (*GetRoutingQueueUsersOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRoutingQueueUsers",
		Method:             "GET",
		PathPattern:        "/api/v2/routing/queues/{queueId}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoutingQueueUsersReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRoutingQueueUsersOK), nil

}

/*
GetRoutingQueueWrapupcodes gets the wrap up codes for a queue
*/
func (a *Client) GetRoutingQueueWrapupcodes(ctx context.Context, params *GetRoutingQueueWrapupcodesParams) (*GetRoutingQueueWrapupcodesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRoutingQueueWrapupcodes",
		Method:             "GET",
		PathPattern:        "/api/v2/routing/queues/{queueId}/wrapupcodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoutingQueueWrapupcodesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRoutingQueueWrapupcodesOK), nil

}

/*
GetRoutingQueues gets list of queues
*/
func (a *Client) GetRoutingQueues(ctx context.Context, params *GetRoutingQueuesParams) (*GetRoutingQueuesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRoutingQueues",
		Method:             "GET",
		PathPattern:        "/api/v2/routing/queues",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoutingQueuesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRoutingQueuesOK), nil

}

/*
GetRoutingQueuesDivisionviews gets a paged listing of simplified queue objects filterable by name queue ID s or division ID s
*/
func (a *Client) GetRoutingQueuesDivisionviews(ctx context.Context, params *GetRoutingQueuesDivisionviewsParams) (*GetRoutingQueuesDivisionviewsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRoutingQueuesDivisionviews",
		Method:             "GET",
		PathPattern:        "/api/v2/routing/queues/divisionviews",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoutingQueuesDivisionviewsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRoutingQueuesDivisionviewsOK), nil

}

/*
GetRoutingQueuesDivisionviewsAll gets a paged listing of simplified queue objects can be used to get a digest of all queues in an organization
*/
func (a *Client) GetRoutingQueuesDivisionviewsAll(ctx context.Context, params *GetRoutingQueuesDivisionviewsAllParams) (*GetRoutingQueuesDivisionviewsAllOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRoutingQueuesDivisionviewsAll",
		Method:             "GET",
		PathPattern:        "/api/v2/routing/queues/divisionviews/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoutingQueuesDivisionviewsAllReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRoutingQueuesDivisionviewsAllOK), nil

}

/*
GetRoutingQueuesMe gets a paged listing of queues the user is a member of
*/
func (a *Client) GetRoutingQueuesMe(ctx context.Context, params *GetRoutingQueuesMeParams) (*GetRoutingQueuesMeOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRoutingQueuesMe",
		Method:             "GET",
		PathPattern:        "/api/v2/routing/queues/me",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoutingQueuesMeReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRoutingQueuesMeOK), nil

}

/*
GetRoutingSettings gets an organization s routing settings
*/
func (a *Client) GetRoutingSettings(ctx context.Context, params *GetRoutingSettingsParams) (*GetRoutingSettingsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRoutingSettings",
		Method:             "GET",
		PathPattern:        "/api/v2/routing/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoutingSettingsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRoutingSettingsOK), nil

}

/*
GetRoutingSettingsContactcenter gets contact center settings
*/
func (a *Client) GetRoutingSettingsContactcenter(ctx context.Context, params *GetRoutingSettingsContactcenterParams) (*GetRoutingSettingsContactcenterOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRoutingSettingsContactcenter",
		Method:             "GET",
		PathPattern:        "/api/v2/routing/settings/contactcenter",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoutingSettingsContactcenterReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRoutingSettingsContactcenterOK), nil

}

/*
GetRoutingSettingsTranscription gets transcription settings
*/
func (a *Client) GetRoutingSettingsTranscription(ctx context.Context, params *GetRoutingSettingsTranscriptionParams) (*GetRoutingSettingsTranscriptionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRoutingSettingsTranscription",
		Method:             "GET",
		PathPattern:        "/api/v2/routing/settings/transcription",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoutingSettingsTranscriptionReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRoutingSettingsTranscriptionOK), nil

}

/*
GetRoutingSkill gets routing skill
*/
func (a *Client) GetRoutingSkill(ctx context.Context, params *GetRoutingSkillParams) (*GetRoutingSkillOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRoutingSkill",
		Method:             "GET",
		PathPattern:        "/api/v2/routing/skills/{skillId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoutingSkillReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRoutingSkillOK), nil

}

/*
GetRoutingSkills gets the list of routing skills
*/
func (a *Client) GetRoutingSkills(ctx context.Context, params *GetRoutingSkillsParams) (*GetRoutingSkillsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRoutingSkills",
		Method:             "GET",
		PathPattern:        "/api/v2/routing/skills",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoutingSkillsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRoutingSkillsOK), nil

}

/*
GetRoutingSmsAddress gets an address by Id for s m s
*/
func (a *Client) GetRoutingSmsAddress(ctx context.Context, params *GetRoutingSmsAddressParams) (*GetRoutingSmsAddressOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRoutingSmsAddress",
		Method:             "GET",
		PathPattern:        "/api/v2/routing/sms/addresses/{addressId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoutingSmsAddressReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRoutingSmsAddressOK), nil

}

/*
GetRoutingSmsAddresses gets a list of addresses for s m s
*/
func (a *Client) GetRoutingSmsAddresses(ctx context.Context, params *GetRoutingSmsAddressesParams) (*GetRoutingSmsAddressesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRoutingSmsAddresses",
		Method:             "GET",
		PathPattern:        "/api/v2/routing/sms/addresses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoutingSmsAddressesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRoutingSmsAddressesOK), nil

}

/*
GetRoutingSmsAvailablephonenumbers gets a list of available phone numbers for s m s provisioning

This request will return up to 30 random phone numbers matching the criteria specified.  To get additional phone numbers repeat the request.
*/
func (a *Client) GetRoutingSmsAvailablephonenumbers(ctx context.Context, params *GetRoutingSmsAvailablephonenumbersParams) (*GetRoutingSmsAvailablephonenumbersOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRoutingSmsAvailablephonenumbers",
		Method:             "GET",
		PathPattern:        "/api/v2/routing/sms/availablephonenumbers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoutingSmsAvailablephonenumbersReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRoutingSmsAvailablephonenumbersOK), nil

}

/*
GetRoutingSmsPhonenumber gets a phone number provisioned for s m s
*/
func (a *Client) GetRoutingSmsPhonenumber(ctx context.Context, params *GetRoutingSmsPhonenumberParams) (*GetRoutingSmsPhonenumberOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRoutingSmsPhonenumber",
		Method:             "GET",
		PathPattern:        "/api/v2/routing/sms/phonenumbers/{addressId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoutingSmsPhonenumberReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRoutingSmsPhonenumberOK), nil

}

/*
GetRoutingSmsPhonenumbers gets a list of provisioned phone numbers
*/
func (a *Client) GetRoutingSmsPhonenumbers(ctx context.Context, params *GetRoutingSmsPhonenumbersParams) (*GetRoutingSmsPhonenumbersOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRoutingSmsPhonenumbers",
		Method:             "GET",
		PathPattern:        "/api/v2/routing/sms/phonenumbers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoutingSmsPhonenumbersReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRoutingSmsPhonenumbersOK), nil

}

/*
GetRoutingUserUtilization gets the user s max utilization settings if not configured the organization wide default is returned
*/
func (a *Client) GetRoutingUserUtilization(ctx context.Context, params *GetRoutingUserUtilizationParams) (*GetRoutingUserUtilizationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRoutingUserUtilization",
		Method:             "GET",
		PathPattern:        "/api/v2/routing/users/{userId}/utilization",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoutingUserUtilizationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRoutingUserUtilizationOK), nil

}

/*
GetRoutingUtilization gets the organization wide max utilization settings
*/
func (a *Client) GetRoutingUtilization(ctx context.Context, params *GetRoutingUtilizationParams) (*GetRoutingUtilizationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRoutingUtilization",
		Method:             "GET",
		PathPattern:        "/api/v2/routing/utilization",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoutingUtilizationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRoutingUtilizationOK), nil

}

/*
GetRoutingWrapupcode gets details about this wrap up code
*/
func (a *Client) GetRoutingWrapupcode(ctx context.Context, params *GetRoutingWrapupcodeParams) (*GetRoutingWrapupcodeOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRoutingWrapupcode",
		Method:             "GET",
		PathPattern:        "/api/v2/routing/wrapupcodes/{codeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoutingWrapupcodeReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRoutingWrapupcodeOK), nil

}

/*
GetRoutingWrapupcodes gets list of wrapup codes
*/
func (a *Client) GetRoutingWrapupcodes(ctx context.Context, params *GetRoutingWrapupcodesParams) (*GetRoutingWrapupcodesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRoutingWrapupcodes",
		Method:             "GET",
		PathPattern:        "/api/v2/routing/wrapupcodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoutingWrapupcodesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRoutingWrapupcodesOK), nil

}

/*
GetUserQueues gets queues for user
*/
func (a *Client) GetUserQueues(ctx context.Context, params *GetUserQueuesParams) (*GetUserQueuesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserQueues",
		Method:             "GET",
		PathPattern:        "/api/v2/users/{userId}/queues",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserQueuesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserQueuesOK), nil

}

/*
GetUserRoutinglanguages lists routing language for user
*/
func (a *Client) GetUserRoutinglanguages(ctx context.Context, params *GetUserRoutinglanguagesParams) (*GetUserRoutinglanguagesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserRoutinglanguages",
		Method:             "GET",
		PathPattern:        "/api/v2/users/{userId}/routinglanguages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserRoutinglanguagesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserRoutinglanguagesOK), nil

}

/*
GetUserRoutingskills lists routing skills for user
*/
func (a *Client) GetUserRoutingskills(ctx context.Context, params *GetUserRoutingskillsParams) (*GetUserRoutingskillsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserRoutingskills",
		Method:             "GET",
		PathPattern:        "/api/v2/users/{userId}/routingskills",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserRoutingskillsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserRoutingskillsOK), nil

}

/*
PatchRoutingEmailDomain updates domain settings
*/
func (a *Client) PatchRoutingEmailDomain(ctx context.Context, params *PatchRoutingEmailDomainParams) (*PatchRoutingEmailDomainOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchRoutingEmailDomain",
		Method:             "PATCH",
		PathPattern:        "/api/v2/routing/email/domains/{domainId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchRoutingEmailDomainReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchRoutingEmailDomainOK), nil

}

/*
PatchRoutingEmailDomainValidate validates domain settings
*/
func (a *Client) PatchRoutingEmailDomainValidate(ctx context.Context, params *PatchRoutingEmailDomainValidateParams) (*PatchRoutingEmailDomainValidateOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchRoutingEmailDomainValidate",
		Method:             "PATCH",
		PathPattern:        "/api/v2/routing/email/domains/{domainId}/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchRoutingEmailDomainValidateReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchRoutingEmailDomainValidateOK), nil

}

/*
PatchRoutingQueueMember updates the ring number o r joined status for a queue member
*/
func (a *Client) PatchRoutingQueueMember(ctx context.Context, params *PatchRoutingQueueMemberParams) (*PatchRoutingQueueMemberOK, *PatchRoutingQueueMemberAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchRoutingQueueMember",
		Method:             "PATCH",
		PathPattern:        "/api/v2/routing/queues/{queueId}/members/{memberId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchRoutingQueueMemberReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PatchRoutingQueueMemberOK:
		return value, nil, nil
	case *PatchRoutingQueueMemberAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PatchRoutingQueueMembers joins or unjoin a set of users for a queue
*/
func (a *Client) PatchRoutingQueueMembers(ctx context.Context, params *PatchRoutingQueueMembersParams) (*PatchRoutingQueueMembersOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchRoutingQueueMembers",
		Method:             "PATCH",
		PathPattern:        "/api/v2/routing/queues/{queueId}/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchRoutingQueueMembersReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchRoutingQueueMembersOK), nil

}

/*
PatchRoutingQueueUser ds e p r e c a t e d use p a t c h routing queues queue Id members member Id update the ring number o r joined status for a user in a queue
*/
func (a *Client) PatchRoutingQueueUser(ctx context.Context, params *PatchRoutingQueueUserParams) (*PatchRoutingQueueUserOK, *PatchRoutingQueueUserAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchRoutingQueueUser",
		Method:             "PATCH",
		PathPattern:        "/api/v2/routing/queues/{queueId}/users/{memberId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchRoutingQueueUserReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PatchRoutingQueueUserOK:
		return value, nil, nil
	case *PatchRoutingQueueUserAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PatchRoutingQueueUsers ds e p r e c a t e d use p a t c h routing queues queue Id members join or unjoin a set of users for a queue
*/
func (a *Client) PatchRoutingQueueUsers(ctx context.Context, params *PatchRoutingQueueUsersParams) (*PatchRoutingQueueUsersOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchRoutingQueueUsers",
		Method:             "PATCH",
		PathPattern:        "/api/v2/routing/queues/{queueId}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchRoutingQueueUsersReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchRoutingQueueUsersOK), nil

}

/*
PatchRoutingSettingsContactcenter updates contact center settings
*/
func (a *Client) PatchRoutingSettingsContactcenter(ctx context.Context, params *PatchRoutingSettingsContactcenterParams) (*PatchRoutingSettingsContactcenterAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchRoutingSettingsContactcenter",
		Method:             "PATCH",
		PathPattern:        "/api/v2/routing/settings/contactcenter",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchRoutingSettingsContactcenterReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchRoutingSettingsContactcenterAccepted), nil

}

/*
PatchUserQueue joins or unjoin a queue for a user
*/
func (a *Client) PatchUserQueue(ctx context.Context, params *PatchUserQueueParams) (*PatchUserQueueOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchUserQueue",
		Method:             "PATCH",
		PathPattern:        "/api/v2/users/{userId}/queues/{queueId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchUserQueueReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchUserQueueOK), nil

}

/*
PatchUserQueues joins or unjoin a set of queues for a user
*/
func (a *Client) PatchUserQueues(ctx context.Context, params *PatchUserQueuesParams) (*PatchUserQueuesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchUserQueues",
		Method:             "PATCH",
		PathPattern:        "/api/v2/users/{userId}/queues",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchUserQueuesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchUserQueuesOK), nil

}

/*
PatchUserRoutinglanguage updates routing language proficiency or state
*/
func (a *Client) PatchUserRoutinglanguage(ctx context.Context, params *PatchUserRoutinglanguageParams) (*PatchUserRoutinglanguageOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchUserRoutinglanguage",
		Method:             "PATCH",
		PathPattern:        "/api/v2/users/{userId}/routinglanguages/{languageId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchUserRoutinglanguageReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchUserRoutinglanguageOK), nil

}

/*
PatchUserRoutinglanguagesBulk adds bulk routing language to user max limit 50 languages
*/
func (a *Client) PatchUserRoutinglanguagesBulk(ctx context.Context, params *PatchUserRoutinglanguagesBulkParams) (*PatchUserRoutinglanguagesBulkOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchUserRoutinglanguagesBulk",
		Method:             "PATCH",
		PathPattern:        "/api/v2/users/{userId}/routinglanguages/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchUserRoutinglanguagesBulkReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchUserRoutinglanguagesBulkOK), nil

}

/*
PatchUserRoutingskillsBulk bulks add routing skills to user
*/
func (a *Client) PatchUserRoutingskillsBulk(ctx context.Context, params *PatchUserRoutingskillsBulkParams) (*PatchUserRoutingskillsBulkOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchUserRoutingskillsBulk",
		Method:             "PATCH",
		PathPattern:        "/api/v2/users/{userId}/routingskills/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchUserRoutingskillsBulkReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchUserRoutingskillsBulkOK), nil

}

/*
PostAnalyticsQueuesObservationsQuery queries for queue observations
*/
func (a *Client) PostAnalyticsQueuesObservationsQuery(ctx context.Context, params *PostAnalyticsQueuesObservationsQueryParams) (*PostAnalyticsQueuesObservationsQueryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAnalyticsQueuesObservationsQuery",
		Method:             "POST",
		PathPattern:        "/api/v2/analytics/queues/observations/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAnalyticsQueuesObservationsQueryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAnalyticsQueuesObservationsQueryOK), nil

}

/*
PostRoutingEmailDomainRoutes creates a route
*/
func (a *Client) PostRoutingEmailDomainRoutes(ctx context.Context, params *PostRoutingEmailDomainRoutesParams) (*PostRoutingEmailDomainRoutesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postRoutingEmailDomainRoutes",
		Method:             "POST",
		PathPattern:        "/api/v2/routing/email/domains/{domainName}/routes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostRoutingEmailDomainRoutesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRoutingEmailDomainRoutesOK), nil

}

/*
PostRoutingEmailDomainTestconnection tests the custom SMTP server integration connection set on this domain

The request body is optional. If omitted, this endpoint will just test the connection of the Custom SMTP Server. If the body is specified, there will be an attempt to send an email message to the server.
*/
func (a *Client) PostRoutingEmailDomainTestconnection(ctx context.Context, params *PostRoutingEmailDomainTestconnectionParams) (*PostRoutingEmailDomainTestconnectionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postRoutingEmailDomainTestconnection",
		Method:             "POST",
		PathPattern:        "/api/v2/routing/email/domains/{domainId}/testconnection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostRoutingEmailDomainTestconnectionReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRoutingEmailDomainTestconnectionOK), nil

}

/*
PostRoutingEmailDomains creates a domain
*/
func (a *Client) PostRoutingEmailDomains(ctx context.Context, params *PostRoutingEmailDomainsParams) (*PostRoutingEmailDomainsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postRoutingEmailDomains",
		Method:             "POST",
		PathPattern:        "/api/v2/routing/email/domains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostRoutingEmailDomainsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRoutingEmailDomainsOK), nil

}

/*
PostRoutingLanguages creates language
*/
func (a *Client) PostRoutingLanguages(ctx context.Context, params *PostRoutingLanguagesParams) (*PostRoutingLanguagesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postRoutingLanguages",
		Method:             "POST",
		PathPattern:        "/api/v2/routing/languages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostRoutingLanguagesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRoutingLanguagesOK), nil

}

/*
PostRoutingQueueMembers bulks add or delete up to 100 queue members
*/
func (a *Client) PostRoutingQueueMembers(ctx context.Context, params *PostRoutingQueueMembersParams) error {

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postRoutingQueueMembers",
		Method:             "POST",
		PathPattern:        "/api/v2/routing/queues/{queueId}/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostRoutingQueueMembersReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PostRoutingQueueUsers ds e p r e c a t e d use p o s t routing queues queue Id members bulk add or delete up to 100 queue members
*/
func (a *Client) PostRoutingQueueUsers(ctx context.Context, params *PostRoutingQueueUsersParams) error {

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postRoutingQueueUsers",
		Method:             "POST",
		PathPattern:        "/api/v2/routing/queues/{queueId}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostRoutingQueueUsersReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PostRoutingQueueWrapupcodes adds up to 100 wrap up codes to a queue
*/
func (a *Client) PostRoutingQueueWrapupcodes(ctx context.Context, params *PostRoutingQueueWrapupcodesParams) (*PostRoutingQueueWrapupcodesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postRoutingQueueWrapupcodes",
		Method:             "POST",
		PathPattern:        "/api/v2/routing/queues/{queueId}/wrapupcodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostRoutingQueueWrapupcodesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRoutingQueueWrapupcodesOK), nil

}

/*
PostRoutingQueues creates a queue
*/
func (a *Client) PostRoutingQueues(ctx context.Context, params *PostRoutingQueuesParams) (*PostRoutingQueuesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postRoutingQueues",
		Method:             "POST",
		PathPattern:        "/api/v2/routing/queues",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostRoutingQueuesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRoutingQueuesOK), nil

}

/*
PostRoutingSkills creates skill
*/
func (a *Client) PostRoutingSkills(ctx context.Context, params *PostRoutingSkillsParams) (*PostRoutingSkillsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postRoutingSkills",
		Method:             "POST",
		PathPattern:        "/api/v2/routing/skills",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostRoutingSkillsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRoutingSkillsOK), nil

}

/*
PostRoutingSmsAddresses provisions an address for s m s
*/
func (a *Client) PostRoutingSmsAddresses(ctx context.Context, params *PostRoutingSmsAddressesParams) (*PostRoutingSmsAddressesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postRoutingSmsAddresses",
		Method:             "POST",
		PathPattern:        "/api/v2/routing/sms/addresses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostRoutingSmsAddressesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRoutingSmsAddressesOK), nil

}

/*
PostRoutingSmsPhonenumbers provisions a phone number for s m s
*/
func (a *Client) PostRoutingSmsPhonenumbers(ctx context.Context, params *PostRoutingSmsPhonenumbersParams) (*PostRoutingSmsPhonenumbersOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postRoutingSmsPhonenumbers",
		Method:             "POST",
		PathPattern:        "/api/v2/routing/sms/phonenumbers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostRoutingSmsPhonenumbersReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRoutingSmsPhonenumbersOK), nil

}

/*
PostRoutingWrapupcodes creates a wrap up code
*/
func (a *Client) PostRoutingWrapupcodes(ctx context.Context, params *PostRoutingWrapupcodesParams) (*PostRoutingWrapupcodesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postRoutingWrapupcodes",
		Method:             "POST",
		PathPattern:        "/api/v2/routing/wrapupcodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostRoutingWrapupcodesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRoutingWrapupcodesOK), nil

}

/*
PostUserRoutinglanguages adds routing language to user
*/
func (a *Client) PostUserRoutinglanguages(ctx context.Context, params *PostUserRoutinglanguagesParams) (*PostUserRoutinglanguagesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postUserRoutinglanguages",
		Method:             "POST",
		PathPattern:        "/api/v2/users/{userId}/routinglanguages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUserRoutinglanguagesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostUserRoutinglanguagesOK), nil

}

/*
PostUserRoutingskills adds routing skill to user
*/
func (a *Client) PostUserRoutingskills(ctx context.Context, params *PostUserRoutingskillsParams) (*PostUserRoutingskillsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postUserRoutingskills",
		Method:             "POST",
		PathPattern:        "/api/v2/users/{userId}/routingskills",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUserRoutingskillsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostUserRoutingskillsOK), nil

}

/*
PutRoutingEmailDomainRoute updates a route
*/
func (a *Client) PutRoutingEmailDomainRoute(ctx context.Context, params *PutRoutingEmailDomainRouteParams) (*PutRoutingEmailDomainRouteOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putRoutingEmailDomainRoute",
		Method:             "PUT",
		PathPattern:        "/api/v2/routing/email/domains/{domainName}/routes/{routeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutRoutingEmailDomainRouteReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutRoutingEmailDomainRouteOK), nil

}

/*
PutRoutingMessageRecipient updates a recipient
*/
func (a *Client) PutRoutingMessageRecipient(ctx context.Context, params *PutRoutingMessageRecipientParams) (*PutRoutingMessageRecipientOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putRoutingMessageRecipient",
		Method:             "PUT",
		PathPattern:        "/api/v2/routing/message/recipients/{recipientId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutRoutingMessageRecipientReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutRoutingMessageRecipientOK), nil

}

/*
PutRoutingQueue updates a queue
*/
func (a *Client) PutRoutingQueue(ctx context.Context, params *PutRoutingQueueParams) (*PutRoutingQueueOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putRoutingQueue",
		Method:             "PUT",
		PathPattern:        "/api/v2/routing/queues/{queueId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutRoutingQueueReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutRoutingQueueOK), nil

}

/*
PutRoutingSettings updates an organization s routing settings
*/
func (a *Client) PutRoutingSettings(ctx context.Context, params *PutRoutingSettingsParams) (*PutRoutingSettingsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putRoutingSettings",
		Method:             "PUT",
		PathPattern:        "/api/v2/routing/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutRoutingSettingsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutRoutingSettingsOK), nil

}

/*
PutRoutingSettingsTranscription updates transcription settings
*/
func (a *Client) PutRoutingSettingsTranscription(ctx context.Context, params *PutRoutingSettingsTranscriptionParams) (*PutRoutingSettingsTranscriptionOK, *PutRoutingSettingsTranscriptionAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putRoutingSettingsTranscription",
		Method:             "PUT",
		PathPattern:        "/api/v2/routing/settings/transcription",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutRoutingSettingsTranscriptionReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PutRoutingSettingsTranscriptionOK:
		return value, nil, nil
	case *PutRoutingSettingsTranscriptionAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PutRoutingSmsPhonenumber updates a phone number provisioned for s m s
*/
func (a *Client) PutRoutingSmsPhonenumber(ctx context.Context, params *PutRoutingSmsPhonenumberParams) (*PutRoutingSmsPhonenumberOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putRoutingSmsPhonenumber",
		Method:             "PUT",
		PathPattern:        "/api/v2/routing/sms/phonenumbers/{addressId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutRoutingSmsPhonenumberReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutRoutingSmsPhonenumberOK), nil

}

/*
PutRoutingUserUtilization updates the user s max utilization settings include only those media types requiring custom configuration
*/
func (a *Client) PutRoutingUserUtilization(ctx context.Context, params *PutRoutingUserUtilizationParams) (*PutRoutingUserUtilizationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putRoutingUserUtilization",
		Method:             "PUT",
		PathPattern:        "/api/v2/routing/users/{userId}/utilization",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutRoutingUserUtilizationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutRoutingUserUtilizationOK), nil

}

/*
PutRoutingUtilization updates the organization wide max utilization settings include only those media types requiring custom configuration
*/
func (a *Client) PutRoutingUtilization(ctx context.Context, params *PutRoutingUtilizationParams) (*PutRoutingUtilizationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putRoutingUtilization",
		Method:             "PUT",
		PathPattern:        "/api/v2/routing/utilization",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutRoutingUtilizationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutRoutingUtilizationOK), nil

}

/*
PutRoutingWrapupcode updates wrap up code
*/
func (a *Client) PutRoutingWrapupcode(ctx context.Context, params *PutRoutingWrapupcodeParams) (*PutRoutingWrapupcodeOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putRoutingWrapupcode",
		Method:             "PUT",
		PathPattern:        "/api/v2/routing/wrapupcodes/{codeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutRoutingWrapupcodeReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutRoutingWrapupcodeOK), nil

}

/*
PutUserRoutingskill updates routing skill proficiency or state
*/
func (a *Client) PutUserRoutingskill(ctx context.Context, params *PutUserRoutingskillParams) (*PutUserRoutingskillOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putUserRoutingskill",
		Method:             "PUT",
		PathPattern:        "/api/v2/users/{userId}/routingskills/{skillId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutUserRoutingskillReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutUserRoutingskillOK), nil

}

/*
PutUserRoutingskillsBulk replaces all routing skills assigned to a user
*/
func (a *Client) PutUserRoutingskillsBulk(ctx context.Context, params *PutUserRoutingskillsBulkParams) (*PutUserRoutingskillsBulkOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putUserRoutingskillsBulk",
		Method:             "PUT",
		PathPattern:        "/api/v2/users/{userId}/routingskills/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutUserRoutingskillsBulkReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutUserRoutingskillsBulkOK), nil

}

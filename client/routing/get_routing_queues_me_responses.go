// Code generated by go-swagger; DO NOT EDIT.

package routing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetRoutingQueuesMeReader is a Reader for the GetRoutingQueuesMe structure.
type GetRoutingQueuesMeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRoutingQueuesMeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRoutingQueuesMeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRoutingQueuesMeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetRoutingQueuesMeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRoutingQueuesMeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRoutingQueuesMeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetRoutingQueuesMeRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetRoutingQueuesMeRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetRoutingQueuesMeUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetRoutingQueuesMeTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetRoutingQueuesMeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetRoutingQueuesMeServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetRoutingQueuesMeGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRoutingQueuesMeOK creates a GetRoutingQueuesMeOK with default headers values
func NewGetRoutingQueuesMeOK() *GetRoutingQueuesMeOK {
	return &GetRoutingQueuesMeOK{}
}

/*
GetRoutingQueuesMeOK describes a response with status code 200, with default header values.

successful operation
*/
type GetRoutingQueuesMeOK struct {
	Payload *models.UserQueueEntityListing
}

// IsSuccess returns true when this get routing queues me o k response has a 2xx status code
func (o *GetRoutingQueuesMeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get routing queues me o k response has a 3xx status code
func (o *GetRoutingQueuesMeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing queues me o k response has a 4xx status code
func (o *GetRoutingQueuesMeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get routing queues me o k response has a 5xx status code
func (o *GetRoutingQueuesMeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing queues me o k response a status code equal to that given
func (o *GetRoutingQueuesMeOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetRoutingQueuesMeOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/me][%d] getRoutingQueuesMeOK  %+v", 200, o.Payload)
}

func (o *GetRoutingQueuesMeOK) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/me][%d] getRoutingQueuesMeOK  %+v", 200, o.Payload)
}

func (o *GetRoutingQueuesMeOK) GetPayload() *models.UserQueueEntityListing {
	return o.Payload
}

func (o *GetRoutingQueuesMeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UserQueueEntityListing)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingQueuesMeBadRequest creates a GetRoutingQueuesMeBadRequest with default headers values
func NewGetRoutingQueuesMeBadRequest() *GetRoutingQueuesMeBadRequest {
	return &GetRoutingQueuesMeBadRequest{}
}

/*
GetRoutingQueuesMeBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetRoutingQueuesMeBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing queues me bad request response has a 2xx status code
func (o *GetRoutingQueuesMeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing queues me bad request response has a 3xx status code
func (o *GetRoutingQueuesMeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing queues me bad request response has a 4xx status code
func (o *GetRoutingQueuesMeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing queues me bad request response has a 5xx status code
func (o *GetRoutingQueuesMeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing queues me bad request response a status code equal to that given
func (o *GetRoutingQueuesMeBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetRoutingQueuesMeBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/me][%d] getRoutingQueuesMeBadRequest  %+v", 400, o.Payload)
}

func (o *GetRoutingQueuesMeBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/me][%d] getRoutingQueuesMeBadRequest  %+v", 400, o.Payload)
}

func (o *GetRoutingQueuesMeBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingQueuesMeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingQueuesMeUnauthorized creates a GetRoutingQueuesMeUnauthorized with default headers values
func NewGetRoutingQueuesMeUnauthorized() *GetRoutingQueuesMeUnauthorized {
	return &GetRoutingQueuesMeUnauthorized{}
}

/*
GetRoutingQueuesMeUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetRoutingQueuesMeUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing queues me unauthorized response has a 2xx status code
func (o *GetRoutingQueuesMeUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing queues me unauthorized response has a 3xx status code
func (o *GetRoutingQueuesMeUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing queues me unauthorized response has a 4xx status code
func (o *GetRoutingQueuesMeUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing queues me unauthorized response has a 5xx status code
func (o *GetRoutingQueuesMeUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing queues me unauthorized response a status code equal to that given
func (o *GetRoutingQueuesMeUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetRoutingQueuesMeUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/me][%d] getRoutingQueuesMeUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRoutingQueuesMeUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/me][%d] getRoutingQueuesMeUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRoutingQueuesMeUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingQueuesMeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingQueuesMeForbidden creates a GetRoutingQueuesMeForbidden with default headers values
func NewGetRoutingQueuesMeForbidden() *GetRoutingQueuesMeForbidden {
	return &GetRoutingQueuesMeForbidden{}
}

/*
GetRoutingQueuesMeForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetRoutingQueuesMeForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing queues me forbidden response has a 2xx status code
func (o *GetRoutingQueuesMeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing queues me forbidden response has a 3xx status code
func (o *GetRoutingQueuesMeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing queues me forbidden response has a 4xx status code
func (o *GetRoutingQueuesMeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing queues me forbidden response has a 5xx status code
func (o *GetRoutingQueuesMeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing queues me forbidden response a status code equal to that given
func (o *GetRoutingQueuesMeForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetRoutingQueuesMeForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/me][%d] getRoutingQueuesMeForbidden  %+v", 403, o.Payload)
}

func (o *GetRoutingQueuesMeForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/me][%d] getRoutingQueuesMeForbidden  %+v", 403, o.Payload)
}

func (o *GetRoutingQueuesMeForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingQueuesMeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingQueuesMeNotFound creates a GetRoutingQueuesMeNotFound with default headers values
func NewGetRoutingQueuesMeNotFound() *GetRoutingQueuesMeNotFound {
	return &GetRoutingQueuesMeNotFound{}
}

/*
GetRoutingQueuesMeNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetRoutingQueuesMeNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing queues me not found response has a 2xx status code
func (o *GetRoutingQueuesMeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing queues me not found response has a 3xx status code
func (o *GetRoutingQueuesMeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing queues me not found response has a 4xx status code
func (o *GetRoutingQueuesMeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing queues me not found response has a 5xx status code
func (o *GetRoutingQueuesMeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing queues me not found response a status code equal to that given
func (o *GetRoutingQueuesMeNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetRoutingQueuesMeNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/me][%d] getRoutingQueuesMeNotFound  %+v", 404, o.Payload)
}

func (o *GetRoutingQueuesMeNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/me][%d] getRoutingQueuesMeNotFound  %+v", 404, o.Payload)
}

func (o *GetRoutingQueuesMeNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingQueuesMeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingQueuesMeRequestTimeout creates a GetRoutingQueuesMeRequestTimeout with default headers values
func NewGetRoutingQueuesMeRequestTimeout() *GetRoutingQueuesMeRequestTimeout {
	return &GetRoutingQueuesMeRequestTimeout{}
}

/*
GetRoutingQueuesMeRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetRoutingQueuesMeRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing queues me request timeout response has a 2xx status code
func (o *GetRoutingQueuesMeRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing queues me request timeout response has a 3xx status code
func (o *GetRoutingQueuesMeRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing queues me request timeout response has a 4xx status code
func (o *GetRoutingQueuesMeRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing queues me request timeout response has a 5xx status code
func (o *GetRoutingQueuesMeRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing queues me request timeout response a status code equal to that given
func (o *GetRoutingQueuesMeRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetRoutingQueuesMeRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/me][%d] getRoutingQueuesMeRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetRoutingQueuesMeRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/me][%d] getRoutingQueuesMeRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetRoutingQueuesMeRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingQueuesMeRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingQueuesMeRequestEntityTooLarge creates a GetRoutingQueuesMeRequestEntityTooLarge with default headers values
func NewGetRoutingQueuesMeRequestEntityTooLarge() *GetRoutingQueuesMeRequestEntityTooLarge {
	return &GetRoutingQueuesMeRequestEntityTooLarge{}
}

/*
GetRoutingQueuesMeRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetRoutingQueuesMeRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing queues me request entity too large response has a 2xx status code
func (o *GetRoutingQueuesMeRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing queues me request entity too large response has a 3xx status code
func (o *GetRoutingQueuesMeRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing queues me request entity too large response has a 4xx status code
func (o *GetRoutingQueuesMeRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing queues me request entity too large response has a 5xx status code
func (o *GetRoutingQueuesMeRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing queues me request entity too large response a status code equal to that given
func (o *GetRoutingQueuesMeRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetRoutingQueuesMeRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/me][%d] getRoutingQueuesMeRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetRoutingQueuesMeRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/me][%d] getRoutingQueuesMeRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetRoutingQueuesMeRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingQueuesMeRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingQueuesMeUnsupportedMediaType creates a GetRoutingQueuesMeUnsupportedMediaType with default headers values
func NewGetRoutingQueuesMeUnsupportedMediaType() *GetRoutingQueuesMeUnsupportedMediaType {
	return &GetRoutingQueuesMeUnsupportedMediaType{}
}

/*
GetRoutingQueuesMeUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetRoutingQueuesMeUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing queues me unsupported media type response has a 2xx status code
func (o *GetRoutingQueuesMeUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing queues me unsupported media type response has a 3xx status code
func (o *GetRoutingQueuesMeUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing queues me unsupported media type response has a 4xx status code
func (o *GetRoutingQueuesMeUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing queues me unsupported media type response has a 5xx status code
func (o *GetRoutingQueuesMeUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing queues me unsupported media type response a status code equal to that given
func (o *GetRoutingQueuesMeUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetRoutingQueuesMeUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/me][%d] getRoutingQueuesMeUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetRoutingQueuesMeUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/me][%d] getRoutingQueuesMeUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetRoutingQueuesMeUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingQueuesMeUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingQueuesMeTooManyRequests creates a GetRoutingQueuesMeTooManyRequests with default headers values
func NewGetRoutingQueuesMeTooManyRequests() *GetRoutingQueuesMeTooManyRequests {
	return &GetRoutingQueuesMeTooManyRequests{}
}

/*
GetRoutingQueuesMeTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetRoutingQueuesMeTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing queues me too many requests response has a 2xx status code
func (o *GetRoutingQueuesMeTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing queues me too many requests response has a 3xx status code
func (o *GetRoutingQueuesMeTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing queues me too many requests response has a 4xx status code
func (o *GetRoutingQueuesMeTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get routing queues me too many requests response has a 5xx status code
func (o *GetRoutingQueuesMeTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get routing queues me too many requests response a status code equal to that given
func (o *GetRoutingQueuesMeTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetRoutingQueuesMeTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/me][%d] getRoutingQueuesMeTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetRoutingQueuesMeTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/me][%d] getRoutingQueuesMeTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetRoutingQueuesMeTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingQueuesMeTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingQueuesMeInternalServerError creates a GetRoutingQueuesMeInternalServerError with default headers values
func NewGetRoutingQueuesMeInternalServerError() *GetRoutingQueuesMeInternalServerError {
	return &GetRoutingQueuesMeInternalServerError{}
}

/*
GetRoutingQueuesMeInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetRoutingQueuesMeInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing queues me internal server error response has a 2xx status code
func (o *GetRoutingQueuesMeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing queues me internal server error response has a 3xx status code
func (o *GetRoutingQueuesMeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing queues me internal server error response has a 4xx status code
func (o *GetRoutingQueuesMeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get routing queues me internal server error response has a 5xx status code
func (o *GetRoutingQueuesMeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get routing queues me internal server error response a status code equal to that given
func (o *GetRoutingQueuesMeInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetRoutingQueuesMeInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/me][%d] getRoutingQueuesMeInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRoutingQueuesMeInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/me][%d] getRoutingQueuesMeInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRoutingQueuesMeInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingQueuesMeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingQueuesMeServiceUnavailable creates a GetRoutingQueuesMeServiceUnavailable with default headers values
func NewGetRoutingQueuesMeServiceUnavailable() *GetRoutingQueuesMeServiceUnavailable {
	return &GetRoutingQueuesMeServiceUnavailable{}
}

/*
GetRoutingQueuesMeServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetRoutingQueuesMeServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing queues me service unavailable response has a 2xx status code
func (o *GetRoutingQueuesMeServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing queues me service unavailable response has a 3xx status code
func (o *GetRoutingQueuesMeServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing queues me service unavailable response has a 4xx status code
func (o *GetRoutingQueuesMeServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get routing queues me service unavailable response has a 5xx status code
func (o *GetRoutingQueuesMeServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get routing queues me service unavailable response a status code equal to that given
func (o *GetRoutingQueuesMeServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetRoutingQueuesMeServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/me][%d] getRoutingQueuesMeServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetRoutingQueuesMeServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/me][%d] getRoutingQueuesMeServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetRoutingQueuesMeServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingQueuesMeServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoutingQueuesMeGatewayTimeout creates a GetRoutingQueuesMeGatewayTimeout with default headers values
func NewGetRoutingQueuesMeGatewayTimeout() *GetRoutingQueuesMeGatewayTimeout {
	return &GetRoutingQueuesMeGatewayTimeout{}
}

/*
GetRoutingQueuesMeGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetRoutingQueuesMeGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get routing queues me gateway timeout response has a 2xx status code
func (o *GetRoutingQueuesMeGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get routing queues me gateway timeout response has a 3xx status code
func (o *GetRoutingQueuesMeGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get routing queues me gateway timeout response has a 4xx status code
func (o *GetRoutingQueuesMeGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get routing queues me gateway timeout response has a 5xx status code
func (o *GetRoutingQueuesMeGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get routing queues me gateway timeout response a status code equal to that given
func (o *GetRoutingQueuesMeGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetRoutingQueuesMeGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/me][%d] getRoutingQueuesMeGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetRoutingQueuesMeGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/routing/queues/me][%d] getRoutingQueuesMeGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetRoutingQueuesMeGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetRoutingQueuesMeGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

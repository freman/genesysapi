// Code generated by go-swagger; DO NOT EDIT.

package routing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// DeleteRoutingQueueUserReader is a Reader for the DeleteRoutingQueueUser structure.
type DeleteRoutingQueueUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteRoutingQueueUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteRoutingQueueUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteRoutingQueueUserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteRoutingQueueUserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteRoutingQueueUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteRoutingQueueUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewDeleteRoutingQueueUserRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewDeleteRoutingQueueUserRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewDeleteRoutingQueueUserUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteRoutingQueueUserTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteRoutingQueueUserInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewDeleteRoutingQueueUserServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewDeleteRoutingQueueUserGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteRoutingQueueUserOK creates a DeleteRoutingQueueUserOK with default headers values
func NewDeleteRoutingQueueUserOK() *DeleteRoutingQueueUserOK {
	return &DeleteRoutingQueueUserOK{}
}

/*
DeleteRoutingQueueUserOK describes a response with status code 200, with default header values.

Operation was successful.
*/
type DeleteRoutingQueueUserOK struct {
}

// IsSuccess returns true when this delete routing queue user o k response has a 2xx status code
func (o *DeleteRoutingQueueUserOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete routing queue user o k response has a 3xx status code
func (o *DeleteRoutingQueueUserOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete routing queue user o k response has a 4xx status code
func (o *DeleteRoutingQueueUserOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete routing queue user o k response has a 5xx status code
func (o *DeleteRoutingQueueUserOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete routing queue user o k response a status code equal to that given
func (o *DeleteRoutingQueueUserOK) IsCode(code int) bool {
	return code == 200
}

func (o *DeleteRoutingQueueUserOK) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/routing/queues/{queueId}/users/{memberId}][%d] deleteRoutingQueueUserOK ", 200)
}

func (o *DeleteRoutingQueueUserOK) String() string {
	return fmt.Sprintf("[DELETE /api/v2/routing/queues/{queueId}/users/{memberId}][%d] deleteRoutingQueueUserOK ", 200)
}

func (o *DeleteRoutingQueueUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteRoutingQueueUserBadRequest creates a DeleteRoutingQueueUserBadRequest with default headers values
func NewDeleteRoutingQueueUserBadRequest() *DeleteRoutingQueueUserBadRequest {
	return &DeleteRoutingQueueUserBadRequest{}
}

/*
DeleteRoutingQueueUserBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type DeleteRoutingQueueUserBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete routing queue user bad request response has a 2xx status code
func (o *DeleteRoutingQueueUserBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete routing queue user bad request response has a 3xx status code
func (o *DeleteRoutingQueueUserBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete routing queue user bad request response has a 4xx status code
func (o *DeleteRoutingQueueUserBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete routing queue user bad request response has a 5xx status code
func (o *DeleteRoutingQueueUserBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete routing queue user bad request response a status code equal to that given
func (o *DeleteRoutingQueueUserBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *DeleteRoutingQueueUserBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/routing/queues/{queueId}/users/{memberId}][%d] deleteRoutingQueueUserBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteRoutingQueueUserBadRequest) String() string {
	return fmt.Sprintf("[DELETE /api/v2/routing/queues/{queueId}/users/{memberId}][%d] deleteRoutingQueueUserBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteRoutingQueueUserBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteRoutingQueueUserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRoutingQueueUserUnauthorized creates a DeleteRoutingQueueUserUnauthorized with default headers values
func NewDeleteRoutingQueueUserUnauthorized() *DeleteRoutingQueueUserUnauthorized {
	return &DeleteRoutingQueueUserUnauthorized{}
}

/*
DeleteRoutingQueueUserUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type DeleteRoutingQueueUserUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete routing queue user unauthorized response has a 2xx status code
func (o *DeleteRoutingQueueUserUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete routing queue user unauthorized response has a 3xx status code
func (o *DeleteRoutingQueueUserUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete routing queue user unauthorized response has a 4xx status code
func (o *DeleteRoutingQueueUserUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete routing queue user unauthorized response has a 5xx status code
func (o *DeleteRoutingQueueUserUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete routing queue user unauthorized response a status code equal to that given
func (o *DeleteRoutingQueueUserUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *DeleteRoutingQueueUserUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/routing/queues/{queueId}/users/{memberId}][%d] deleteRoutingQueueUserUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteRoutingQueueUserUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /api/v2/routing/queues/{queueId}/users/{memberId}][%d] deleteRoutingQueueUserUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteRoutingQueueUserUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteRoutingQueueUserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRoutingQueueUserForbidden creates a DeleteRoutingQueueUserForbidden with default headers values
func NewDeleteRoutingQueueUserForbidden() *DeleteRoutingQueueUserForbidden {
	return &DeleteRoutingQueueUserForbidden{}
}

/*
DeleteRoutingQueueUserForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type DeleteRoutingQueueUserForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete routing queue user forbidden response has a 2xx status code
func (o *DeleteRoutingQueueUserForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete routing queue user forbidden response has a 3xx status code
func (o *DeleteRoutingQueueUserForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete routing queue user forbidden response has a 4xx status code
func (o *DeleteRoutingQueueUserForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete routing queue user forbidden response has a 5xx status code
func (o *DeleteRoutingQueueUserForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete routing queue user forbidden response a status code equal to that given
func (o *DeleteRoutingQueueUserForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *DeleteRoutingQueueUserForbidden) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/routing/queues/{queueId}/users/{memberId}][%d] deleteRoutingQueueUserForbidden  %+v", 403, o.Payload)
}

func (o *DeleteRoutingQueueUserForbidden) String() string {
	return fmt.Sprintf("[DELETE /api/v2/routing/queues/{queueId}/users/{memberId}][%d] deleteRoutingQueueUserForbidden  %+v", 403, o.Payload)
}

func (o *DeleteRoutingQueueUserForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteRoutingQueueUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRoutingQueueUserNotFound creates a DeleteRoutingQueueUserNotFound with default headers values
func NewDeleteRoutingQueueUserNotFound() *DeleteRoutingQueueUserNotFound {
	return &DeleteRoutingQueueUserNotFound{}
}

/*
DeleteRoutingQueueUserNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type DeleteRoutingQueueUserNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete routing queue user not found response has a 2xx status code
func (o *DeleteRoutingQueueUserNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete routing queue user not found response has a 3xx status code
func (o *DeleteRoutingQueueUserNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete routing queue user not found response has a 4xx status code
func (o *DeleteRoutingQueueUserNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete routing queue user not found response has a 5xx status code
func (o *DeleteRoutingQueueUserNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete routing queue user not found response a status code equal to that given
func (o *DeleteRoutingQueueUserNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *DeleteRoutingQueueUserNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/routing/queues/{queueId}/users/{memberId}][%d] deleteRoutingQueueUserNotFound  %+v", 404, o.Payload)
}

func (o *DeleteRoutingQueueUserNotFound) String() string {
	return fmt.Sprintf("[DELETE /api/v2/routing/queues/{queueId}/users/{memberId}][%d] deleteRoutingQueueUserNotFound  %+v", 404, o.Payload)
}

func (o *DeleteRoutingQueueUserNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteRoutingQueueUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRoutingQueueUserRequestTimeout creates a DeleteRoutingQueueUserRequestTimeout with default headers values
func NewDeleteRoutingQueueUserRequestTimeout() *DeleteRoutingQueueUserRequestTimeout {
	return &DeleteRoutingQueueUserRequestTimeout{}
}

/*
DeleteRoutingQueueUserRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type DeleteRoutingQueueUserRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete routing queue user request timeout response has a 2xx status code
func (o *DeleteRoutingQueueUserRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete routing queue user request timeout response has a 3xx status code
func (o *DeleteRoutingQueueUserRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete routing queue user request timeout response has a 4xx status code
func (o *DeleteRoutingQueueUserRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete routing queue user request timeout response has a 5xx status code
func (o *DeleteRoutingQueueUserRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this delete routing queue user request timeout response a status code equal to that given
func (o *DeleteRoutingQueueUserRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *DeleteRoutingQueueUserRequestTimeout) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/routing/queues/{queueId}/users/{memberId}][%d] deleteRoutingQueueUserRequestTimeout  %+v", 408, o.Payload)
}

func (o *DeleteRoutingQueueUserRequestTimeout) String() string {
	return fmt.Sprintf("[DELETE /api/v2/routing/queues/{queueId}/users/{memberId}][%d] deleteRoutingQueueUserRequestTimeout  %+v", 408, o.Payload)
}

func (o *DeleteRoutingQueueUserRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteRoutingQueueUserRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRoutingQueueUserRequestEntityTooLarge creates a DeleteRoutingQueueUserRequestEntityTooLarge with default headers values
func NewDeleteRoutingQueueUserRequestEntityTooLarge() *DeleteRoutingQueueUserRequestEntityTooLarge {
	return &DeleteRoutingQueueUserRequestEntityTooLarge{}
}

/*
DeleteRoutingQueueUserRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type DeleteRoutingQueueUserRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete routing queue user request entity too large response has a 2xx status code
func (o *DeleteRoutingQueueUserRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete routing queue user request entity too large response has a 3xx status code
func (o *DeleteRoutingQueueUserRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete routing queue user request entity too large response has a 4xx status code
func (o *DeleteRoutingQueueUserRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete routing queue user request entity too large response has a 5xx status code
func (o *DeleteRoutingQueueUserRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this delete routing queue user request entity too large response a status code equal to that given
func (o *DeleteRoutingQueueUserRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *DeleteRoutingQueueUserRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/routing/queues/{queueId}/users/{memberId}][%d] deleteRoutingQueueUserRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *DeleteRoutingQueueUserRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[DELETE /api/v2/routing/queues/{queueId}/users/{memberId}][%d] deleteRoutingQueueUserRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *DeleteRoutingQueueUserRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteRoutingQueueUserRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRoutingQueueUserUnsupportedMediaType creates a DeleteRoutingQueueUserUnsupportedMediaType with default headers values
func NewDeleteRoutingQueueUserUnsupportedMediaType() *DeleteRoutingQueueUserUnsupportedMediaType {
	return &DeleteRoutingQueueUserUnsupportedMediaType{}
}

/*
DeleteRoutingQueueUserUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type DeleteRoutingQueueUserUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete routing queue user unsupported media type response has a 2xx status code
func (o *DeleteRoutingQueueUserUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete routing queue user unsupported media type response has a 3xx status code
func (o *DeleteRoutingQueueUserUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete routing queue user unsupported media type response has a 4xx status code
func (o *DeleteRoutingQueueUserUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete routing queue user unsupported media type response has a 5xx status code
func (o *DeleteRoutingQueueUserUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this delete routing queue user unsupported media type response a status code equal to that given
func (o *DeleteRoutingQueueUserUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *DeleteRoutingQueueUserUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/routing/queues/{queueId}/users/{memberId}][%d] deleteRoutingQueueUserUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *DeleteRoutingQueueUserUnsupportedMediaType) String() string {
	return fmt.Sprintf("[DELETE /api/v2/routing/queues/{queueId}/users/{memberId}][%d] deleteRoutingQueueUserUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *DeleteRoutingQueueUserUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteRoutingQueueUserUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRoutingQueueUserTooManyRequests creates a DeleteRoutingQueueUserTooManyRequests with default headers values
func NewDeleteRoutingQueueUserTooManyRequests() *DeleteRoutingQueueUserTooManyRequests {
	return &DeleteRoutingQueueUserTooManyRequests{}
}

/*
DeleteRoutingQueueUserTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type DeleteRoutingQueueUserTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete routing queue user too many requests response has a 2xx status code
func (o *DeleteRoutingQueueUserTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete routing queue user too many requests response has a 3xx status code
func (o *DeleteRoutingQueueUserTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete routing queue user too many requests response has a 4xx status code
func (o *DeleteRoutingQueueUserTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete routing queue user too many requests response has a 5xx status code
func (o *DeleteRoutingQueueUserTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this delete routing queue user too many requests response a status code equal to that given
func (o *DeleteRoutingQueueUserTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *DeleteRoutingQueueUserTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/routing/queues/{queueId}/users/{memberId}][%d] deleteRoutingQueueUserTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteRoutingQueueUserTooManyRequests) String() string {
	return fmt.Sprintf("[DELETE /api/v2/routing/queues/{queueId}/users/{memberId}][%d] deleteRoutingQueueUserTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteRoutingQueueUserTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteRoutingQueueUserTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRoutingQueueUserInternalServerError creates a DeleteRoutingQueueUserInternalServerError with default headers values
func NewDeleteRoutingQueueUserInternalServerError() *DeleteRoutingQueueUserInternalServerError {
	return &DeleteRoutingQueueUserInternalServerError{}
}

/*
DeleteRoutingQueueUserInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type DeleteRoutingQueueUserInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete routing queue user internal server error response has a 2xx status code
func (o *DeleteRoutingQueueUserInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete routing queue user internal server error response has a 3xx status code
func (o *DeleteRoutingQueueUserInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete routing queue user internal server error response has a 4xx status code
func (o *DeleteRoutingQueueUserInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete routing queue user internal server error response has a 5xx status code
func (o *DeleteRoutingQueueUserInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete routing queue user internal server error response a status code equal to that given
func (o *DeleteRoutingQueueUserInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *DeleteRoutingQueueUserInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/routing/queues/{queueId}/users/{memberId}][%d] deleteRoutingQueueUserInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteRoutingQueueUserInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /api/v2/routing/queues/{queueId}/users/{memberId}][%d] deleteRoutingQueueUserInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteRoutingQueueUserInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteRoutingQueueUserInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRoutingQueueUserServiceUnavailable creates a DeleteRoutingQueueUserServiceUnavailable with default headers values
func NewDeleteRoutingQueueUserServiceUnavailable() *DeleteRoutingQueueUserServiceUnavailable {
	return &DeleteRoutingQueueUserServiceUnavailable{}
}

/*
DeleteRoutingQueueUserServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type DeleteRoutingQueueUserServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete routing queue user service unavailable response has a 2xx status code
func (o *DeleteRoutingQueueUserServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete routing queue user service unavailable response has a 3xx status code
func (o *DeleteRoutingQueueUserServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete routing queue user service unavailable response has a 4xx status code
func (o *DeleteRoutingQueueUserServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete routing queue user service unavailable response has a 5xx status code
func (o *DeleteRoutingQueueUserServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this delete routing queue user service unavailable response a status code equal to that given
func (o *DeleteRoutingQueueUserServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *DeleteRoutingQueueUserServiceUnavailable) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/routing/queues/{queueId}/users/{memberId}][%d] deleteRoutingQueueUserServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeleteRoutingQueueUserServiceUnavailable) String() string {
	return fmt.Sprintf("[DELETE /api/v2/routing/queues/{queueId}/users/{memberId}][%d] deleteRoutingQueueUserServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeleteRoutingQueueUserServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteRoutingQueueUserServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRoutingQueueUserGatewayTimeout creates a DeleteRoutingQueueUserGatewayTimeout with default headers values
func NewDeleteRoutingQueueUserGatewayTimeout() *DeleteRoutingQueueUserGatewayTimeout {
	return &DeleteRoutingQueueUserGatewayTimeout{}
}

/*
DeleteRoutingQueueUserGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type DeleteRoutingQueueUserGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete routing queue user gateway timeout response has a 2xx status code
func (o *DeleteRoutingQueueUserGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete routing queue user gateway timeout response has a 3xx status code
func (o *DeleteRoutingQueueUserGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete routing queue user gateway timeout response has a 4xx status code
func (o *DeleteRoutingQueueUserGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete routing queue user gateway timeout response has a 5xx status code
func (o *DeleteRoutingQueueUserGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this delete routing queue user gateway timeout response a status code equal to that given
func (o *DeleteRoutingQueueUserGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *DeleteRoutingQueueUserGatewayTimeout) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/routing/queues/{queueId}/users/{memberId}][%d] deleteRoutingQueueUserGatewayTimeout  %+v", 504, o.Payload)
}

func (o *DeleteRoutingQueueUserGatewayTimeout) String() string {
	return fmt.Sprintf("[DELETE /api/v2/routing/queues/{queueId}/users/{memberId}][%d] deleteRoutingQueueUserGatewayTimeout  %+v", 504, o.Payload)
}

func (o *DeleteRoutingQueueUserGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteRoutingQueueUserGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

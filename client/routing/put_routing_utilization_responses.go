// Code generated by go-swagger; DO NOT EDIT.

package routing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutRoutingUtilizationReader is a Reader for the PutRoutingUtilization structure.
type PutRoutingUtilizationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRoutingUtilizationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutRoutingUtilizationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRoutingUtilizationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRoutingUtilizationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRoutingUtilizationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutRoutingUtilizationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPutRoutingUtilizationRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutRoutingUtilizationRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutRoutingUtilizationUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutRoutingUtilizationTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutRoutingUtilizationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutRoutingUtilizationServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutRoutingUtilizationGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutRoutingUtilizationOK creates a PutRoutingUtilizationOK with default headers values
func NewPutRoutingUtilizationOK() *PutRoutingUtilizationOK {
	return &PutRoutingUtilizationOK{}
}

/*
PutRoutingUtilizationOK describes a response with status code 200, with default header values.

successful operation
*/
type PutRoutingUtilizationOK struct {
	Payload *models.Utilization
}

// IsSuccess returns true when this put routing utilization o k response has a 2xx status code
func (o *PutRoutingUtilizationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put routing utilization o k response has a 3xx status code
func (o *PutRoutingUtilizationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put routing utilization o k response has a 4xx status code
func (o *PutRoutingUtilizationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put routing utilization o k response has a 5xx status code
func (o *PutRoutingUtilizationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put routing utilization o k response a status code equal to that given
func (o *PutRoutingUtilizationOK) IsCode(code int) bool {
	return code == 200
}

func (o *PutRoutingUtilizationOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/routing/utilization][%d] putRoutingUtilizationOK  %+v", 200, o.Payload)
}

func (o *PutRoutingUtilizationOK) String() string {
	return fmt.Sprintf("[PUT /api/v2/routing/utilization][%d] putRoutingUtilizationOK  %+v", 200, o.Payload)
}

func (o *PutRoutingUtilizationOK) GetPayload() *models.Utilization {
	return o.Payload
}

func (o *PutRoutingUtilizationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Utilization)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRoutingUtilizationBadRequest creates a PutRoutingUtilizationBadRequest with default headers values
func NewPutRoutingUtilizationBadRequest() *PutRoutingUtilizationBadRequest {
	return &PutRoutingUtilizationBadRequest{}
}

/*
PutRoutingUtilizationBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutRoutingUtilizationBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put routing utilization bad request response has a 2xx status code
func (o *PutRoutingUtilizationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put routing utilization bad request response has a 3xx status code
func (o *PutRoutingUtilizationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put routing utilization bad request response has a 4xx status code
func (o *PutRoutingUtilizationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put routing utilization bad request response has a 5xx status code
func (o *PutRoutingUtilizationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put routing utilization bad request response a status code equal to that given
func (o *PutRoutingUtilizationBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PutRoutingUtilizationBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/routing/utilization][%d] putRoutingUtilizationBadRequest  %+v", 400, o.Payload)
}

func (o *PutRoutingUtilizationBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/v2/routing/utilization][%d] putRoutingUtilizationBadRequest  %+v", 400, o.Payload)
}

func (o *PutRoutingUtilizationBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRoutingUtilizationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRoutingUtilizationUnauthorized creates a PutRoutingUtilizationUnauthorized with default headers values
func NewPutRoutingUtilizationUnauthorized() *PutRoutingUtilizationUnauthorized {
	return &PutRoutingUtilizationUnauthorized{}
}

/*
PutRoutingUtilizationUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PutRoutingUtilizationUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put routing utilization unauthorized response has a 2xx status code
func (o *PutRoutingUtilizationUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put routing utilization unauthorized response has a 3xx status code
func (o *PutRoutingUtilizationUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put routing utilization unauthorized response has a 4xx status code
func (o *PutRoutingUtilizationUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put routing utilization unauthorized response has a 5xx status code
func (o *PutRoutingUtilizationUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put routing utilization unauthorized response a status code equal to that given
func (o *PutRoutingUtilizationUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PutRoutingUtilizationUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/routing/utilization][%d] putRoutingUtilizationUnauthorized  %+v", 401, o.Payload)
}

func (o *PutRoutingUtilizationUnauthorized) String() string {
	return fmt.Sprintf("[PUT /api/v2/routing/utilization][%d] putRoutingUtilizationUnauthorized  %+v", 401, o.Payload)
}

func (o *PutRoutingUtilizationUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRoutingUtilizationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRoutingUtilizationForbidden creates a PutRoutingUtilizationForbidden with default headers values
func NewPutRoutingUtilizationForbidden() *PutRoutingUtilizationForbidden {
	return &PutRoutingUtilizationForbidden{}
}

/*
PutRoutingUtilizationForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PutRoutingUtilizationForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put routing utilization forbidden response has a 2xx status code
func (o *PutRoutingUtilizationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put routing utilization forbidden response has a 3xx status code
func (o *PutRoutingUtilizationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put routing utilization forbidden response has a 4xx status code
func (o *PutRoutingUtilizationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put routing utilization forbidden response has a 5xx status code
func (o *PutRoutingUtilizationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put routing utilization forbidden response a status code equal to that given
func (o *PutRoutingUtilizationForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PutRoutingUtilizationForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/routing/utilization][%d] putRoutingUtilizationForbidden  %+v", 403, o.Payload)
}

func (o *PutRoutingUtilizationForbidden) String() string {
	return fmt.Sprintf("[PUT /api/v2/routing/utilization][%d] putRoutingUtilizationForbidden  %+v", 403, o.Payload)
}

func (o *PutRoutingUtilizationForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRoutingUtilizationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRoutingUtilizationNotFound creates a PutRoutingUtilizationNotFound with default headers values
func NewPutRoutingUtilizationNotFound() *PutRoutingUtilizationNotFound {
	return &PutRoutingUtilizationNotFound{}
}

/*
PutRoutingUtilizationNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PutRoutingUtilizationNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put routing utilization not found response has a 2xx status code
func (o *PutRoutingUtilizationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put routing utilization not found response has a 3xx status code
func (o *PutRoutingUtilizationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put routing utilization not found response has a 4xx status code
func (o *PutRoutingUtilizationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put routing utilization not found response has a 5xx status code
func (o *PutRoutingUtilizationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put routing utilization not found response a status code equal to that given
func (o *PutRoutingUtilizationNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PutRoutingUtilizationNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/routing/utilization][%d] putRoutingUtilizationNotFound  %+v", 404, o.Payload)
}

func (o *PutRoutingUtilizationNotFound) String() string {
	return fmt.Sprintf("[PUT /api/v2/routing/utilization][%d] putRoutingUtilizationNotFound  %+v", 404, o.Payload)
}

func (o *PutRoutingUtilizationNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRoutingUtilizationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRoutingUtilizationRequestTimeout creates a PutRoutingUtilizationRequestTimeout with default headers values
func NewPutRoutingUtilizationRequestTimeout() *PutRoutingUtilizationRequestTimeout {
	return &PutRoutingUtilizationRequestTimeout{}
}

/*
PutRoutingUtilizationRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PutRoutingUtilizationRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put routing utilization request timeout response has a 2xx status code
func (o *PutRoutingUtilizationRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put routing utilization request timeout response has a 3xx status code
func (o *PutRoutingUtilizationRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put routing utilization request timeout response has a 4xx status code
func (o *PutRoutingUtilizationRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this put routing utilization request timeout response has a 5xx status code
func (o *PutRoutingUtilizationRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this put routing utilization request timeout response a status code equal to that given
func (o *PutRoutingUtilizationRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PutRoutingUtilizationRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/routing/utilization][%d] putRoutingUtilizationRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutRoutingUtilizationRequestTimeout) String() string {
	return fmt.Sprintf("[PUT /api/v2/routing/utilization][%d] putRoutingUtilizationRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutRoutingUtilizationRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRoutingUtilizationRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRoutingUtilizationRequestEntityTooLarge creates a PutRoutingUtilizationRequestEntityTooLarge with default headers values
func NewPutRoutingUtilizationRequestEntityTooLarge() *PutRoutingUtilizationRequestEntityTooLarge {
	return &PutRoutingUtilizationRequestEntityTooLarge{}
}

/*
PutRoutingUtilizationRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PutRoutingUtilizationRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put routing utilization request entity too large response has a 2xx status code
func (o *PutRoutingUtilizationRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put routing utilization request entity too large response has a 3xx status code
func (o *PutRoutingUtilizationRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put routing utilization request entity too large response has a 4xx status code
func (o *PutRoutingUtilizationRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this put routing utilization request entity too large response has a 5xx status code
func (o *PutRoutingUtilizationRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this put routing utilization request entity too large response a status code equal to that given
func (o *PutRoutingUtilizationRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PutRoutingUtilizationRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/routing/utilization][%d] putRoutingUtilizationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutRoutingUtilizationRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PUT /api/v2/routing/utilization][%d] putRoutingUtilizationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutRoutingUtilizationRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRoutingUtilizationRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRoutingUtilizationUnsupportedMediaType creates a PutRoutingUtilizationUnsupportedMediaType with default headers values
func NewPutRoutingUtilizationUnsupportedMediaType() *PutRoutingUtilizationUnsupportedMediaType {
	return &PutRoutingUtilizationUnsupportedMediaType{}
}

/*
PutRoutingUtilizationUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutRoutingUtilizationUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put routing utilization unsupported media type response has a 2xx status code
func (o *PutRoutingUtilizationUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put routing utilization unsupported media type response has a 3xx status code
func (o *PutRoutingUtilizationUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put routing utilization unsupported media type response has a 4xx status code
func (o *PutRoutingUtilizationUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this put routing utilization unsupported media type response has a 5xx status code
func (o *PutRoutingUtilizationUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this put routing utilization unsupported media type response a status code equal to that given
func (o *PutRoutingUtilizationUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PutRoutingUtilizationUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/routing/utilization][%d] putRoutingUtilizationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutRoutingUtilizationUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PUT /api/v2/routing/utilization][%d] putRoutingUtilizationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutRoutingUtilizationUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRoutingUtilizationUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRoutingUtilizationTooManyRequests creates a PutRoutingUtilizationTooManyRequests with default headers values
func NewPutRoutingUtilizationTooManyRequests() *PutRoutingUtilizationTooManyRequests {
	return &PutRoutingUtilizationTooManyRequests{}
}

/*
PutRoutingUtilizationTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PutRoutingUtilizationTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put routing utilization too many requests response has a 2xx status code
func (o *PutRoutingUtilizationTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put routing utilization too many requests response has a 3xx status code
func (o *PutRoutingUtilizationTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put routing utilization too many requests response has a 4xx status code
func (o *PutRoutingUtilizationTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this put routing utilization too many requests response has a 5xx status code
func (o *PutRoutingUtilizationTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this put routing utilization too many requests response a status code equal to that given
func (o *PutRoutingUtilizationTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PutRoutingUtilizationTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/routing/utilization][%d] putRoutingUtilizationTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutRoutingUtilizationTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /api/v2/routing/utilization][%d] putRoutingUtilizationTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutRoutingUtilizationTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRoutingUtilizationTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRoutingUtilizationInternalServerError creates a PutRoutingUtilizationInternalServerError with default headers values
func NewPutRoutingUtilizationInternalServerError() *PutRoutingUtilizationInternalServerError {
	return &PutRoutingUtilizationInternalServerError{}
}

/*
PutRoutingUtilizationInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutRoutingUtilizationInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put routing utilization internal server error response has a 2xx status code
func (o *PutRoutingUtilizationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put routing utilization internal server error response has a 3xx status code
func (o *PutRoutingUtilizationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put routing utilization internal server error response has a 4xx status code
func (o *PutRoutingUtilizationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this put routing utilization internal server error response has a 5xx status code
func (o *PutRoutingUtilizationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this put routing utilization internal server error response a status code equal to that given
func (o *PutRoutingUtilizationInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PutRoutingUtilizationInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/routing/utilization][%d] putRoutingUtilizationInternalServerError  %+v", 500, o.Payload)
}

func (o *PutRoutingUtilizationInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/v2/routing/utilization][%d] putRoutingUtilizationInternalServerError  %+v", 500, o.Payload)
}

func (o *PutRoutingUtilizationInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRoutingUtilizationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRoutingUtilizationServiceUnavailable creates a PutRoutingUtilizationServiceUnavailable with default headers values
func NewPutRoutingUtilizationServiceUnavailable() *PutRoutingUtilizationServiceUnavailable {
	return &PutRoutingUtilizationServiceUnavailable{}
}

/*
PutRoutingUtilizationServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutRoutingUtilizationServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put routing utilization service unavailable response has a 2xx status code
func (o *PutRoutingUtilizationServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put routing utilization service unavailable response has a 3xx status code
func (o *PutRoutingUtilizationServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put routing utilization service unavailable response has a 4xx status code
func (o *PutRoutingUtilizationServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this put routing utilization service unavailable response has a 5xx status code
func (o *PutRoutingUtilizationServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this put routing utilization service unavailable response a status code equal to that given
func (o *PutRoutingUtilizationServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PutRoutingUtilizationServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/routing/utilization][%d] putRoutingUtilizationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutRoutingUtilizationServiceUnavailable) String() string {
	return fmt.Sprintf("[PUT /api/v2/routing/utilization][%d] putRoutingUtilizationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutRoutingUtilizationServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRoutingUtilizationServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRoutingUtilizationGatewayTimeout creates a PutRoutingUtilizationGatewayTimeout with default headers values
func NewPutRoutingUtilizationGatewayTimeout() *PutRoutingUtilizationGatewayTimeout {
	return &PutRoutingUtilizationGatewayTimeout{}
}

/*
PutRoutingUtilizationGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PutRoutingUtilizationGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put routing utilization gateway timeout response has a 2xx status code
func (o *PutRoutingUtilizationGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put routing utilization gateway timeout response has a 3xx status code
func (o *PutRoutingUtilizationGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put routing utilization gateway timeout response has a 4xx status code
func (o *PutRoutingUtilizationGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this put routing utilization gateway timeout response has a 5xx status code
func (o *PutRoutingUtilizationGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this put routing utilization gateway timeout response a status code equal to that given
func (o *PutRoutingUtilizationGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PutRoutingUtilizationGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/routing/utilization][%d] putRoutingUtilizationGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutRoutingUtilizationGatewayTimeout) String() string {
	return fmt.Sprintf("[PUT /api/v2/routing/utilization][%d] putRoutingUtilizationGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutRoutingUtilizationGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutRoutingUtilizationGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

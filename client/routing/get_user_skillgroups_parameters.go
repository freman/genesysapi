// Code generated by go-swagger; DO NOT EDIT.

package routing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetUserSkillgroupsParams creates a new GetUserSkillgroupsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetUserSkillgroupsParams() *GetUserSkillgroupsParams {
	return &GetUserSkillgroupsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetUserSkillgroupsParamsWithTimeout creates a new GetUserSkillgroupsParams object
// with the ability to set a timeout on a request.
func NewGetUserSkillgroupsParamsWithTimeout(timeout time.Duration) *GetUserSkillgroupsParams {
	return &GetUserSkillgroupsParams{
		timeout: timeout,
	}
}

// NewGetUserSkillgroupsParamsWithContext creates a new GetUserSkillgroupsParams object
// with the ability to set a context for a request.
func NewGetUserSkillgroupsParamsWithContext(ctx context.Context) *GetUserSkillgroupsParams {
	return &GetUserSkillgroupsParams{
		Context: ctx,
	}
}

// NewGetUserSkillgroupsParamsWithHTTPClient creates a new GetUserSkillgroupsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetUserSkillgroupsParamsWithHTTPClient(client *http.Client) *GetUserSkillgroupsParams {
	return &GetUserSkillgroupsParams{
		HTTPClient: client,
	}
}

/*
GetUserSkillgroupsParams contains all the parameters to send to the API endpoint

	for the get user skillgroups operation.

	Typically these are written to a http.Request.
*/
type GetUserSkillgroupsParams struct {

	/* After.

	   The cursor that points to the next page
	*/
	After *string

	/* Before.

	   The cursor that points to the previous page
	*/
	Before *string

	/* PageSize.

	   Page size

	   Format: int32
	   Default: 25
	*/
	PageSize *int32

	/* UserID.

	   User ID
	*/
	UserID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get user skillgroups params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetUserSkillgroupsParams) WithDefaults() *GetUserSkillgroupsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get user skillgroups params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetUserSkillgroupsParams) SetDefaults() {
	var (
		pageSizeDefault = int32(25)
	)

	val := GetUserSkillgroupsParams{
		PageSize: &pageSizeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get user skillgroups params
func (o *GetUserSkillgroupsParams) WithTimeout(timeout time.Duration) *GetUserSkillgroupsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get user skillgroups params
func (o *GetUserSkillgroupsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get user skillgroups params
func (o *GetUserSkillgroupsParams) WithContext(ctx context.Context) *GetUserSkillgroupsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get user skillgroups params
func (o *GetUserSkillgroupsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get user skillgroups params
func (o *GetUserSkillgroupsParams) WithHTTPClient(client *http.Client) *GetUserSkillgroupsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get user skillgroups params
func (o *GetUserSkillgroupsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAfter adds the after to the get user skillgroups params
func (o *GetUserSkillgroupsParams) WithAfter(after *string) *GetUserSkillgroupsParams {
	o.SetAfter(after)
	return o
}

// SetAfter adds the after to the get user skillgroups params
func (o *GetUserSkillgroupsParams) SetAfter(after *string) {
	o.After = after
}

// WithBefore adds the before to the get user skillgroups params
func (o *GetUserSkillgroupsParams) WithBefore(before *string) *GetUserSkillgroupsParams {
	o.SetBefore(before)
	return o
}

// SetBefore adds the before to the get user skillgroups params
func (o *GetUserSkillgroupsParams) SetBefore(before *string) {
	o.Before = before
}

// WithPageSize adds the pageSize to the get user skillgroups params
func (o *GetUserSkillgroupsParams) WithPageSize(pageSize *int32) *GetUserSkillgroupsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get user skillgroups params
func (o *GetUserSkillgroupsParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithUserID adds the userID to the get user skillgroups params
func (o *GetUserSkillgroupsParams) WithUserID(userID string) *GetUserSkillgroupsParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the get user skillgroups params
func (o *GetUserSkillgroupsParams) SetUserID(userID string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *GetUserSkillgroupsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.After != nil {

		// query param after
		var qrAfter string

		if o.After != nil {
			qrAfter = *o.After
		}
		qAfter := qrAfter
		if qAfter != "" {

			if err := r.SetQueryParam("after", qAfter); err != nil {
				return err
			}
		}
	}

	if o.Before != nil {

		// query param before
		var qrBefore string

		if o.Before != nil {
			qrBefore = *o.Before
		}
		qBefore := qrBefore
		if qBefore != "" {

			if err := r.SetQueryParam("before", qBefore); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int32

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	// path param userId
	if err := r.SetPathParam("userId", o.UserID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package routing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchRoutingEmailDomainValidateReader is a Reader for the PatchRoutingEmailDomainValidate structure.
type PatchRoutingEmailDomainValidateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchRoutingEmailDomainValidateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchRoutingEmailDomainValidateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchRoutingEmailDomainValidateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchRoutingEmailDomainValidateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchRoutingEmailDomainValidateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchRoutingEmailDomainValidateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchRoutingEmailDomainValidateRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchRoutingEmailDomainValidateRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchRoutingEmailDomainValidateUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchRoutingEmailDomainValidateTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchRoutingEmailDomainValidateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchRoutingEmailDomainValidateServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchRoutingEmailDomainValidateGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchRoutingEmailDomainValidateOK creates a PatchRoutingEmailDomainValidateOK with default headers values
func NewPatchRoutingEmailDomainValidateOK() *PatchRoutingEmailDomainValidateOK {
	return &PatchRoutingEmailDomainValidateOK{}
}

/*
PatchRoutingEmailDomainValidateOK describes a response with status code 200, with default header values.

successful operation
*/
type PatchRoutingEmailDomainValidateOK struct {
	Payload *models.InboundDomain
}

// IsSuccess returns true when this patch routing email domain validate o k response has a 2xx status code
func (o *PatchRoutingEmailDomainValidateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch routing email domain validate o k response has a 3xx status code
func (o *PatchRoutingEmailDomainValidateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing email domain validate o k response has a 4xx status code
func (o *PatchRoutingEmailDomainValidateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch routing email domain validate o k response has a 5xx status code
func (o *PatchRoutingEmailDomainValidateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch routing email domain validate o k response a status code equal to that given
func (o *PatchRoutingEmailDomainValidateOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchRoutingEmailDomainValidateOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/domains/{domainId}/validate][%d] patchRoutingEmailDomainValidateOK  %+v", 200, o.Payload)
}

func (o *PatchRoutingEmailDomainValidateOK) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/domains/{domainId}/validate][%d] patchRoutingEmailDomainValidateOK  %+v", 200, o.Payload)
}

func (o *PatchRoutingEmailDomainValidateOK) GetPayload() *models.InboundDomain {
	return o.Payload
}

func (o *PatchRoutingEmailDomainValidateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InboundDomain)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingEmailDomainValidateBadRequest creates a PatchRoutingEmailDomainValidateBadRequest with default headers values
func NewPatchRoutingEmailDomainValidateBadRequest() *PatchRoutingEmailDomainValidateBadRequest {
	return &PatchRoutingEmailDomainValidateBadRequest{}
}

/*
PatchRoutingEmailDomainValidateBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchRoutingEmailDomainValidateBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch routing email domain validate bad request response has a 2xx status code
func (o *PatchRoutingEmailDomainValidateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch routing email domain validate bad request response has a 3xx status code
func (o *PatchRoutingEmailDomainValidateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing email domain validate bad request response has a 4xx status code
func (o *PatchRoutingEmailDomainValidateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch routing email domain validate bad request response has a 5xx status code
func (o *PatchRoutingEmailDomainValidateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch routing email domain validate bad request response a status code equal to that given
func (o *PatchRoutingEmailDomainValidateBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchRoutingEmailDomainValidateBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/domains/{domainId}/validate][%d] patchRoutingEmailDomainValidateBadRequest  %+v", 400, o.Payload)
}

func (o *PatchRoutingEmailDomainValidateBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/domains/{domainId}/validate][%d] patchRoutingEmailDomainValidateBadRequest  %+v", 400, o.Payload)
}

func (o *PatchRoutingEmailDomainValidateBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingEmailDomainValidateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingEmailDomainValidateUnauthorized creates a PatchRoutingEmailDomainValidateUnauthorized with default headers values
func NewPatchRoutingEmailDomainValidateUnauthorized() *PatchRoutingEmailDomainValidateUnauthorized {
	return &PatchRoutingEmailDomainValidateUnauthorized{}
}

/*
PatchRoutingEmailDomainValidateUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchRoutingEmailDomainValidateUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch routing email domain validate unauthorized response has a 2xx status code
func (o *PatchRoutingEmailDomainValidateUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch routing email domain validate unauthorized response has a 3xx status code
func (o *PatchRoutingEmailDomainValidateUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing email domain validate unauthorized response has a 4xx status code
func (o *PatchRoutingEmailDomainValidateUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch routing email domain validate unauthorized response has a 5xx status code
func (o *PatchRoutingEmailDomainValidateUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch routing email domain validate unauthorized response a status code equal to that given
func (o *PatchRoutingEmailDomainValidateUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchRoutingEmailDomainValidateUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/domains/{domainId}/validate][%d] patchRoutingEmailDomainValidateUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchRoutingEmailDomainValidateUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/domains/{domainId}/validate][%d] patchRoutingEmailDomainValidateUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchRoutingEmailDomainValidateUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingEmailDomainValidateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingEmailDomainValidateForbidden creates a PatchRoutingEmailDomainValidateForbidden with default headers values
func NewPatchRoutingEmailDomainValidateForbidden() *PatchRoutingEmailDomainValidateForbidden {
	return &PatchRoutingEmailDomainValidateForbidden{}
}

/*
PatchRoutingEmailDomainValidateForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PatchRoutingEmailDomainValidateForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch routing email domain validate forbidden response has a 2xx status code
func (o *PatchRoutingEmailDomainValidateForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch routing email domain validate forbidden response has a 3xx status code
func (o *PatchRoutingEmailDomainValidateForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing email domain validate forbidden response has a 4xx status code
func (o *PatchRoutingEmailDomainValidateForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch routing email domain validate forbidden response has a 5xx status code
func (o *PatchRoutingEmailDomainValidateForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch routing email domain validate forbidden response a status code equal to that given
func (o *PatchRoutingEmailDomainValidateForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchRoutingEmailDomainValidateForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/domains/{domainId}/validate][%d] patchRoutingEmailDomainValidateForbidden  %+v", 403, o.Payload)
}

func (o *PatchRoutingEmailDomainValidateForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/domains/{domainId}/validate][%d] patchRoutingEmailDomainValidateForbidden  %+v", 403, o.Payload)
}

func (o *PatchRoutingEmailDomainValidateForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingEmailDomainValidateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingEmailDomainValidateNotFound creates a PatchRoutingEmailDomainValidateNotFound with default headers values
func NewPatchRoutingEmailDomainValidateNotFound() *PatchRoutingEmailDomainValidateNotFound {
	return &PatchRoutingEmailDomainValidateNotFound{}
}

/*
PatchRoutingEmailDomainValidateNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PatchRoutingEmailDomainValidateNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch routing email domain validate not found response has a 2xx status code
func (o *PatchRoutingEmailDomainValidateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch routing email domain validate not found response has a 3xx status code
func (o *PatchRoutingEmailDomainValidateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing email domain validate not found response has a 4xx status code
func (o *PatchRoutingEmailDomainValidateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch routing email domain validate not found response has a 5xx status code
func (o *PatchRoutingEmailDomainValidateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch routing email domain validate not found response a status code equal to that given
func (o *PatchRoutingEmailDomainValidateNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchRoutingEmailDomainValidateNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/domains/{domainId}/validate][%d] patchRoutingEmailDomainValidateNotFound  %+v", 404, o.Payload)
}

func (o *PatchRoutingEmailDomainValidateNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/domains/{domainId}/validate][%d] patchRoutingEmailDomainValidateNotFound  %+v", 404, o.Payload)
}

func (o *PatchRoutingEmailDomainValidateNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingEmailDomainValidateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingEmailDomainValidateRequestTimeout creates a PatchRoutingEmailDomainValidateRequestTimeout with default headers values
func NewPatchRoutingEmailDomainValidateRequestTimeout() *PatchRoutingEmailDomainValidateRequestTimeout {
	return &PatchRoutingEmailDomainValidateRequestTimeout{}
}

/*
PatchRoutingEmailDomainValidateRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchRoutingEmailDomainValidateRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch routing email domain validate request timeout response has a 2xx status code
func (o *PatchRoutingEmailDomainValidateRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch routing email domain validate request timeout response has a 3xx status code
func (o *PatchRoutingEmailDomainValidateRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing email domain validate request timeout response has a 4xx status code
func (o *PatchRoutingEmailDomainValidateRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch routing email domain validate request timeout response has a 5xx status code
func (o *PatchRoutingEmailDomainValidateRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this patch routing email domain validate request timeout response a status code equal to that given
func (o *PatchRoutingEmailDomainValidateRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PatchRoutingEmailDomainValidateRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/domains/{domainId}/validate][%d] patchRoutingEmailDomainValidateRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchRoutingEmailDomainValidateRequestTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/domains/{domainId}/validate][%d] patchRoutingEmailDomainValidateRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchRoutingEmailDomainValidateRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingEmailDomainValidateRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingEmailDomainValidateRequestEntityTooLarge creates a PatchRoutingEmailDomainValidateRequestEntityTooLarge with default headers values
func NewPatchRoutingEmailDomainValidateRequestEntityTooLarge() *PatchRoutingEmailDomainValidateRequestEntityTooLarge {
	return &PatchRoutingEmailDomainValidateRequestEntityTooLarge{}
}

/*
PatchRoutingEmailDomainValidateRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PatchRoutingEmailDomainValidateRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch routing email domain validate request entity too large response has a 2xx status code
func (o *PatchRoutingEmailDomainValidateRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch routing email domain validate request entity too large response has a 3xx status code
func (o *PatchRoutingEmailDomainValidateRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing email domain validate request entity too large response has a 4xx status code
func (o *PatchRoutingEmailDomainValidateRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch routing email domain validate request entity too large response has a 5xx status code
func (o *PatchRoutingEmailDomainValidateRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this patch routing email domain validate request entity too large response a status code equal to that given
func (o *PatchRoutingEmailDomainValidateRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PatchRoutingEmailDomainValidateRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/domains/{domainId}/validate][%d] patchRoutingEmailDomainValidateRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchRoutingEmailDomainValidateRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/domains/{domainId}/validate][%d] patchRoutingEmailDomainValidateRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchRoutingEmailDomainValidateRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingEmailDomainValidateRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingEmailDomainValidateUnsupportedMediaType creates a PatchRoutingEmailDomainValidateUnsupportedMediaType with default headers values
func NewPatchRoutingEmailDomainValidateUnsupportedMediaType() *PatchRoutingEmailDomainValidateUnsupportedMediaType {
	return &PatchRoutingEmailDomainValidateUnsupportedMediaType{}
}

/*
PatchRoutingEmailDomainValidateUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchRoutingEmailDomainValidateUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch routing email domain validate unsupported media type response has a 2xx status code
func (o *PatchRoutingEmailDomainValidateUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch routing email domain validate unsupported media type response has a 3xx status code
func (o *PatchRoutingEmailDomainValidateUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing email domain validate unsupported media type response has a 4xx status code
func (o *PatchRoutingEmailDomainValidateUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch routing email domain validate unsupported media type response has a 5xx status code
func (o *PatchRoutingEmailDomainValidateUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this patch routing email domain validate unsupported media type response a status code equal to that given
func (o *PatchRoutingEmailDomainValidateUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PatchRoutingEmailDomainValidateUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/domains/{domainId}/validate][%d] patchRoutingEmailDomainValidateUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchRoutingEmailDomainValidateUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/domains/{domainId}/validate][%d] patchRoutingEmailDomainValidateUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchRoutingEmailDomainValidateUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingEmailDomainValidateUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingEmailDomainValidateTooManyRequests creates a PatchRoutingEmailDomainValidateTooManyRequests with default headers values
func NewPatchRoutingEmailDomainValidateTooManyRequests() *PatchRoutingEmailDomainValidateTooManyRequests {
	return &PatchRoutingEmailDomainValidateTooManyRequests{}
}

/*
PatchRoutingEmailDomainValidateTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchRoutingEmailDomainValidateTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch routing email domain validate too many requests response has a 2xx status code
func (o *PatchRoutingEmailDomainValidateTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch routing email domain validate too many requests response has a 3xx status code
func (o *PatchRoutingEmailDomainValidateTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing email domain validate too many requests response has a 4xx status code
func (o *PatchRoutingEmailDomainValidateTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch routing email domain validate too many requests response has a 5xx status code
func (o *PatchRoutingEmailDomainValidateTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch routing email domain validate too many requests response a status code equal to that given
func (o *PatchRoutingEmailDomainValidateTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchRoutingEmailDomainValidateTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/domains/{domainId}/validate][%d] patchRoutingEmailDomainValidateTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchRoutingEmailDomainValidateTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/domains/{domainId}/validate][%d] patchRoutingEmailDomainValidateTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchRoutingEmailDomainValidateTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingEmailDomainValidateTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingEmailDomainValidateInternalServerError creates a PatchRoutingEmailDomainValidateInternalServerError with default headers values
func NewPatchRoutingEmailDomainValidateInternalServerError() *PatchRoutingEmailDomainValidateInternalServerError {
	return &PatchRoutingEmailDomainValidateInternalServerError{}
}

/*
PatchRoutingEmailDomainValidateInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchRoutingEmailDomainValidateInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch routing email domain validate internal server error response has a 2xx status code
func (o *PatchRoutingEmailDomainValidateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch routing email domain validate internal server error response has a 3xx status code
func (o *PatchRoutingEmailDomainValidateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing email domain validate internal server error response has a 4xx status code
func (o *PatchRoutingEmailDomainValidateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch routing email domain validate internal server error response has a 5xx status code
func (o *PatchRoutingEmailDomainValidateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch routing email domain validate internal server error response a status code equal to that given
func (o *PatchRoutingEmailDomainValidateInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchRoutingEmailDomainValidateInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/domains/{domainId}/validate][%d] patchRoutingEmailDomainValidateInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchRoutingEmailDomainValidateInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/domains/{domainId}/validate][%d] patchRoutingEmailDomainValidateInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchRoutingEmailDomainValidateInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingEmailDomainValidateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingEmailDomainValidateServiceUnavailable creates a PatchRoutingEmailDomainValidateServiceUnavailable with default headers values
func NewPatchRoutingEmailDomainValidateServiceUnavailable() *PatchRoutingEmailDomainValidateServiceUnavailable {
	return &PatchRoutingEmailDomainValidateServiceUnavailable{}
}

/*
PatchRoutingEmailDomainValidateServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchRoutingEmailDomainValidateServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch routing email domain validate service unavailable response has a 2xx status code
func (o *PatchRoutingEmailDomainValidateServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch routing email domain validate service unavailable response has a 3xx status code
func (o *PatchRoutingEmailDomainValidateServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing email domain validate service unavailable response has a 4xx status code
func (o *PatchRoutingEmailDomainValidateServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch routing email domain validate service unavailable response has a 5xx status code
func (o *PatchRoutingEmailDomainValidateServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this patch routing email domain validate service unavailable response a status code equal to that given
func (o *PatchRoutingEmailDomainValidateServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PatchRoutingEmailDomainValidateServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/domains/{domainId}/validate][%d] patchRoutingEmailDomainValidateServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchRoutingEmailDomainValidateServiceUnavailable) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/domains/{domainId}/validate][%d] patchRoutingEmailDomainValidateServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchRoutingEmailDomainValidateServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingEmailDomainValidateServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRoutingEmailDomainValidateGatewayTimeout creates a PatchRoutingEmailDomainValidateGatewayTimeout with default headers values
func NewPatchRoutingEmailDomainValidateGatewayTimeout() *PatchRoutingEmailDomainValidateGatewayTimeout {
	return &PatchRoutingEmailDomainValidateGatewayTimeout{}
}

/*
PatchRoutingEmailDomainValidateGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PatchRoutingEmailDomainValidateGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch routing email domain validate gateway timeout response has a 2xx status code
func (o *PatchRoutingEmailDomainValidateGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch routing email domain validate gateway timeout response has a 3xx status code
func (o *PatchRoutingEmailDomainValidateGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch routing email domain validate gateway timeout response has a 4xx status code
func (o *PatchRoutingEmailDomainValidateGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch routing email domain validate gateway timeout response has a 5xx status code
func (o *PatchRoutingEmailDomainValidateGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this patch routing email domain validate gateway timeout response a status code equal to that given
func (o *PatchRoutingEmailDomainValidateGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PatchRoutingEmailDomainValidateGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/domains/{domainId}/validate][%d] patchRoutingEmailDomainValidateGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchRoutingEmailDomainValidateGatewayTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/routing/email/domains/{domainId}/validate][%d] patchRoutingEmailDomainValidateGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchRoutingEmailDomainValidateGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchRoutingEmailDomainValidateGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

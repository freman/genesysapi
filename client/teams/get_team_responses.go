// Code generated by go-swagger; DO NOT EDIT.

package teams

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetTeamReader is a Reader for the GetTeam structure.
type GetTeamReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTeamReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTeamOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetTeamBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetTeamUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetTeamForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetTeamNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetTeamRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetTeamRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetTeamUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetTeamTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetTeamInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetTeamServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetTeamGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetTeamOK creates a GetTeamOK with default headers values
func NewGetTeamOK() *GetTeamOK {
	return &GetTeamOK{}
}

/*GetTeamOK handles this case with default header values.

successful operation
*/
type GetTeamOK struct {
	Payload *models.Team
}

func (o *GetTeamOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/teams/{teamId}][%d] getTeamOK  %+v", 200, o.Payload)
}

func (o *GetTeamOK) GetPayload() *models.Team {
	return o.Payload
}

func (o *GetTeamOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Team)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTeamBadRequest creates a GetTeamBadRequest with default headers values
func NewGetTeamBadRequest() *GetTeamBadRequest {
	return &GetTeamBadRequest{}
}

/*GetTeamBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetTeamBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetTeamBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/teams/{teamId}][%d] getTeamBadRequest  %+v", 400, o.Payload)
}

func (o *GetTeamBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetTeamBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTeamUnauthorized creates a GetTeamUnauthorized with default headers values
func NewGetTeamUnauthorized() *GetTeamUnauthorized {
	return &GetTeamUnauthorized{}
}

/*GetTeamUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetTeamUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetTeamUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/teams/{teamId}][%d] getTeamUnauthorized  %+v", 401, o.Payload)
}

func (o *GetTeamUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetTeamUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTeamForbidden creates a GetTeamForbidden with default headers values
func NewGetTeamForbidden() *GetTeamForbidden {
	return &GetTeamForbidden{}
}

/*GetTeamForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetTeamForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetTeamForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/teams/{teamId}][%d] getTeamForbidden  %+v", 403, o.Payload)
}

func (o *GetTeamForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetTeamForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTeamNotFound creates a GetTeamNotFound with default headers values
func NewGetTeamNotFound() *GetTeamNotFound {
	return &GetTeamNotFound{}
}

/*GetTeamNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetTeamNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetTeamNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/teams/{teamId}][%d] getTeamNotFound  %+v", 404, o.Payload)
}

func (o *GetTeamNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetTeamNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTeamRequestTimeout creates a GetTeamRequestTimeout with default headers values
func NewGetTeamRequestTimeout() *GetTeamRequestTimeout {
	return &GetTeamRequestTimeout{}
}

/*GetTeamRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetTeamRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetTeamRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/teams/{teamId}][%d] getTeamRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetTeamRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetTeamRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTeamRequestEntityTooLarge creates a GetTeamRequestEntityTooLarge with default headers values
func NewGetTeamRequestEntityTooLarge() *GetTeamRequestEntityTooLarge {
	return &GetTeamRequestEntityTooLarge{}
}

/*GetTeamRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetTeamRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetTeamRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/teams/{teamId}][%d] getTeamRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetTeamRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetTeamRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTeamUnsupportedMediaType creates a GetTeamUnsupportedMediaType with default headers values
func NewGetTeamUnsupportedMediaType() *GetTeamUnsupportedMediaType {
	return &GetTeamUnsupportedMediaType{}
}

/*GetTeamUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetTeamUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetTeamUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/teams/{teamId}][%d] getTeamUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetTeamUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetTeamUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTeamTooManyRequests creates a GetTeamTooManyRequests with default headers values
func NewGetTeamTooManyRequests() *GetTeamTooManyRequests {
	return &GetTeamTooManyRequests{}
}

/*GetTeamTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetTeamTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetTeamTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/teams/{teamId}][%d] getTeamTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetTeamTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetTeamTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTeamInternalServerError creates a GetTeamInternalServerError with default headers values
func NewGetTeamInternalServerError() *GetTeamInternalServerError {
	return &GetTeamInternalServerError{}
}

/*GetTeamInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetTeamInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetTeamInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/teams/{teamId}][%d] getTeamInternalServerError  %+v", 500, o.Payload)
}

func (o *GetTeamInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetTeamInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTeamServiceUnavailable creates a GetTeamServiceUnavailable with default headers values
func NewGetTeamServiceUnavailable() *GetTeamServiceUnavailable {
	return &GetTeamServiceUnavailable{}
}

/*GetTeamServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetTeamServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetTeamServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/teams/{teamId}][%d] getTeamServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetTeamServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetTeamServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTeamGatewayTimeout creates a GetTeamGatewayTimeout with default headers values
func NewGetTeamGatewayTimeout() *GetTeamGatewayTimeout {
	return &GetTeamGatewayTimeout{}
}

/*GetTeamGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetTeamGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetTeamGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/teams/{teamId}][%d] getTeamGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetTeamGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetTeamGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

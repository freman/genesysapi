// Code generated by go-swagger; DO NOT EDIT.

package teams

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the teams client
type API interface {
	/*
	   DeleteTeam deletes team
	*/
	DeleteTeam(ctx context.Context, params *DeleteTeamParams) (*DeleteTeamNoContent, error)
	/*
	   DeleteTeamMembers deletes team members
	*/
	DeleteTeamMembers(ctx context.Context, params *DeleteTeamMembersParams) (*DeleteTeamMembersNoContent, error)
	/*
	   GetTeam gets team
	*/
	GetTeam(ctx context.Context, params *GetTeamParams) (*GetTeamOK, error)
	/*
	   GetTeamMembers gets team membership
	*/
	GetTeamMembers(ctx context.Context, params *GetTeamMembersParams) (*GetTeamMembersOK, error)
	/*
	   GetTeams gets team listing
	*/
	GetTeams(ctx context.Context, params *GetTeamsParams) (*GetTeamsOK, error)
	/*
	   PatchTeam updates team
	*/
	PatchTeam(ctx context.Context, params *PatchTeamParams) (*PatchTeamOK, error)
	/*
	   PostTeamMembers adds team members
	*/
	PostTeamMembers(ctx context.Context, params *PostTeamMembersParams) (*PostTeamMembersOK, error)
	/*
	   PostTeams creates a team
	*/
	PostTeams(ctx context.Context, params *PostTeamsParams) (*PostTeamsOK, error)
	/*
	   PostTeamsSearch searches resources
	*/
	PostTeamsSearch(ctx context.Context, params *PostTeamsSearchParams) (*PostTeamsSearchOK, error)
}

// New creates a new teams API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for teams API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
DeleteTeam deletes team
*/
func (a *Client) DeleteTeam(ctx context.Context, params *DeleteTeamParams) (*DeleteTeamNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTeam",
		Method:             "DELETE",
		PathPattern:        "/api/v2/teams/{teamId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTeamReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteTeamNoContent), nil

}

/*
DeleteTeamMembers deletes team members
*/
func (a *Client) DeleteTeamMembers(ctx context.Context, params *DeleteTeamMembersParams) (*DeleteTeamMembersNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTeamMembers",
		Method:             "DELETE",
		PathPattern:        "/api/v2/teams/{teamId}/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTeamMembersReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteTeamMembersNoContent), nil

}

/*
GetTeam gets team
*/
func (a *Client) GetTeam(ctx context.Context, params *GetTeamParams) (*GetTeamOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTeam",
		Method:             "GET",
		PathPattern:        "/api/v2/teams/{teamId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTeamReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTeamOK), nil

}

/*
GetTeamMembers gets team membership
*/
func (a *Client) GetTeamMembers(ctx context.Context, params *GetTeamMembersParams) (*GetTeamMembersOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTeamMembers",
		Method:             "GET",
		PathPattern:        "/api/v2/teams/{teamId}/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTeamMembersReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTeamMembersOK), nil

}

/*
GetTeams gets team listing
*/
func (a *Client) GetTeams(ctx context.Context, params *GetTeamsParams) (*GetTeamsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTeams",
		Method:             "GET",
		PathPattern:        "/api/v2/teams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTeamsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTeamsOK), nil

}

/*
PatchTeam updates team
*/
func (a *Client) PatchTeam(ctx context.Context, params *PatchTeamParams) (*PatchTeamOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchTeam",
		Method:             "PATCH",
		PathPattern:        "/api/v2/teams/{teamId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchTeamReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchTeamOK), nil

}

/*
PostTeamMembers adds team members
*/
func (a *Client) PostTeamMembers(ctx context.Context, params *PostTeamMembersParams) (*PostTeamMembersOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postTeamMembers",
		Method:             "POST",
		PathPattern:        "/api/v2/teams/{teamId}/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTeamMembersReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTeamMembersOK), nil

}

/*
PostTeams creates a team
*/
func (a *Client) PostTeams(ctx context.Context, params *PostTeamsParams) (*PostTeamsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postTeams",
		Method:             "POST",
		PathPattern:        "/api/v2/teams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTeamsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTeamsOK), nil

}

/*
PostTeamsSearch searches resources
*/
func (a *Client) PostTeamsSearch(ctx context.Context, params *PostTeamsSearchParams) (*PostTeamsSearchOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postTeamsSearch",
		Method:             "POST",
		PathPattern:        "/api/v2/teams/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTeamsSearchReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTeamsSearchOK), nil

}

// Code generated by go-swagger; DO NOT EDIT.

package teams

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// DeleteTeamReader is a Reader for the DeleteTeam structure.
type DeleteTeamReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteTeamReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteTeamNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteTeamBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteTeamUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteTeamForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteTeamNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewDeleteTeamRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewDeleteTeamRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewDeleteTeamUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteTeamTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteTeamInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewDeleteTeamServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewDeleteTeamGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteTeamNoContent creates a DeleteTeamNoContent with default headers values
func NewDeleteTeamNoContent() *DeleteTeamNoContent {
	return &DeleteTeamNoContent{}
}

/*DeleteTeamNoContent handles this case with default header values.

Success, team was deleted
*/
type DeleteTeamNoContent struct {
}

func (o *DeleteTeamNoContent) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/teams/{teamId}][%d] deleteTeamNoContent ", 204)
}

func (o *DeleteTeamNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteTeamBadRequest creates a DeleteTeamBadRequest with default headers values
func NewDeleteTeamBadRequest() *DeleteTeamBadRequest {
	return &DeleteTeamBadRequest{}
}

/*DeleteTeamBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type DeleteTeamBadRequest struct {
	Payload *models.ErrorBody
}

func (o *DeleteTeamBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/teams/{teamId}][%d] deleteTeamBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteTeamBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteTeamBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTeamUnauthorized creates a DeleteTeamUnauthorized with default headers values
func NewDeleteTeamUnauthorized() *DeleteTeamUnauthorized {
	return &DeleteTeamUnauthorized{}
}

/*DeleteTeamUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type DeleteTeamUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *DeleteTeamUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/teams/{teamId}][%d] deleteTeamUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteTeamUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteTeamUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTeamForbidden creates a DeleteTeamForbidden with default headers values
func NewDeleteTeamForbidden() *DeleteTeamForbidden {
	return &DeleteTeamForbidden{}
}

/*DeleteTeamForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type DeleteTeamForbidden struct {
	Payload *models.ErrorBody
}

func (o *DeleteTeamForbidden) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/teams/{teamId}][%d] deleteTeamForbidden  %+v", 403, o.Payload)
}

func (o *DeleteTeamForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteTeamForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTeamNotFound creates a DeleteTeamNotFound with default headers values
func NewDeleteTeamNotFound() *DeleteTeamNotFound {
	return &DeleteTeamNotFound{}
}

/*DeleteTeamNotFound handles this case with default header values.

The requested resource was not found.
*/
type DeleteTeamNotFound struct {
	Payload *models.ErrorBody
}

func (o *DeleteTeamNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/teams/{teamId}][%d] deleteTeamNotFound  %+v", 404, o.Payload)
}

func (o *DeleteTeamNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteTeamNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTeamRequestTimeout creates a DeleteTeamRequestTimeout with default headers values
func NewDeleteTeamRequestTimeout() *DeleteTeamRequestTimeout {
	return &DeleteTeamRequestTimeout{}
}

/*DeleteTeamRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type DeleteTeamRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *DeleteTeamRequestTimeout) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/teams/{teamId}][%d] deleteTeamRequestTimeout  %+v", 408, o.Payload)
}

func (o *DeleteTeamRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteTeamRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTeamRequestEntityTooLarge creates a DeleteTeamRequestEntityTooLarge with default headers values
func NewDeleteTeamRequestEntityTooLarge() *DeleteTeamRequestEntityTooLarge {
	return &DeleteTeamRequestEntityTooLarge{}
}

/*DeleteTeamRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type DeleteTeamRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *DeleteTeamRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/teams/{teamId}][%d] deleteTeamRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *DeleteTeamRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteTeamRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTeamUnsupportedMediaType creates a DeleteTeamUnsupportedMediaType with default headers values
func NewDeleteTeamUnsupportedMediaType() *DeleteTeamUnsupportedMediaType {
	return &DeleteTeamUnsupportedMediaType{}
}

/*DeleteTeamUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type DeleteTeamUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *DeleteTeamUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/teams/{teamId}][%d] deleteTeamUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *DeleteTeamUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteTeamUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTeamTooManyRequests creates a DeleteTeamTooManyRequests with default headers values
func NewDeleteTeamTooManyRequests() *DeleteTeamTooManyRequests {
	return &DeleteTeamTooManyRequests{}
}

/*DeleteTeamTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type DeleteTeamTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *DeleteTeamTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/teams/{teamId}][%d] deleteTeamTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteTeamTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteTeamTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTeamInternalServerError creates a DeleteTeamInternalServerError with default headers values
func NewDeleteTeamInternalServerError() *DeleteTeamInternalServerError {
	return &DeleteTeamInternalServerError{}
}

/*DeleteTeamInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type DeleteTeamInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *DeleteTeamInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/teams/{teamId}][%d] deleteTeamInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteTeamInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteTeamInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTeamServiceUnavailable creates a DeleteTeamServiceUnavailable with default headers values
func NewDeleteTeamServiceUnavailable() *DeleteTeamServiceUnavailable {
	return &DeleteTeamServiceUnavailable{}
}

/*DeleteTeamServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type DeleteTeamServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *DeleteTeamServiceUnavailable) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/teams/{teamId}][%d] deleteTeamServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeleteTeamServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteTeamServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTeamGatewayTimeout creates a DeleteTeamGatewayTimeout with default headers values
func NewDeleteTeamGatewayTimeout() *DeleteTeamGatewayTimeout {
	return &DeleteTeamGatewayTimeout{}
}

/*DeleteTeamGatewayTimeout handles this case with default header values.

The request timed out.
*/
type DeleteTeamGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *DeleteTeamGatewayTimeout) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/teams/{teamId}][%d] deleteTeamGatewayTimeout  %+v", 504, o.Payload)
}

func (o *DeleteTeamGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteTeamGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

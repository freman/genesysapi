// Code generated by go-swagger; DO NOT EDIT.

package teams

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetTeamsReader is a Reader for the GetTeams structure.
type GetTeamsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTeamsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTeamsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetTeamsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetTeamsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetTeamsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetTeamsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetTeamsRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetTeamsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetTeamsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetTeamsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetTeamsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetTeamsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetTeamsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetTeamsOK creates a GetTeamsOK with default headers values
func NewGetTeamsOK() *GetTeamsOK {
	return &GetTeamsOK{}
}

/*
GetTeamsOK describes a response with status code 200, with default header values.

successful operation
*/
type GetTeamsOK struct {
	Payload *models.TeamEntityListing
}

// IsSuccess returns true when this get teams o k response has a 2xx status code
func (o *GetTeamsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get teams o k response has a 3xx status code
func (o *GetTeamsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get teams o k response has a 4xx status code
func (o *GetTeamsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get teams o k response has a 5xx status code
func (o *GetTeamsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get teams o k response a status code equal to that given
func (o *GetTeamsOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetTeamsOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/teams][%d] getTeamsOK  %+v", 200, o.Payload)
}

func (o *GetTeamsOK) String() string {
	return fmt.Sprintf("[GET /api/v2/teams][%d] getTeamsOK  %+v", 200, o.Payload)
}

func (o *GetTeamsOK) GetPayload() *models.TeamEntityListing {
	return o.Payload
}

func (o *GetTeamsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TeamEntityListing)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTeamsBadRequest creates a GetTeamsBadRequest with default headers values
func NewGetTeamsBadRequest() *GetTeamsBadRequest {
	return &GetTeamsBadRequest{}
}

/*
GetTeamsBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetTeamsBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get teams bad request response has a 2xx status code
func (o *GetTeamsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get teams bad request response has a 3xx status code
func (o *GetTeamsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get teams bad request response has a 4xx status code
func (o *GetTeamsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get teams bad request response has a 5xx status code
func (o *GetTeamsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get teams bad request response a status code equal to that given
func (o *GetTeamsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetTeamsBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/teams][%d] getTeamsBadRequest  %+v", 400, o.Payload)
}

func (o *GetTeamsBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/teams][%d] getTeamsBadRequest  %+v", 400, o.Payload)
}

func (o *GetTeamsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetTeamsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTeamsUnauthorized creates a GetTeamsUnauthorized with default headers values
func NewGetTeamsUnauthorized() *GetTeamsUnauthorized {
	return &GetTeamsUnauthorized{}
}

/*
GetTeamsUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetTeamsUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get teams unauthorized response has a 2xx status code
func (o *GetTeamsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get teams unauthorized response has a 3xx status code
func (o *GetTeamsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get teams unauthorized response has a 4xx status code
func (o *GetTeamsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get teams unauthorized response has a 5xx status code
func (o *GetTeamsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get teams unauthorized response a status code equal to that given
func (o *GetTeamsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetTeamsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/teams][%d] getTeamsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetTeamsUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/teams][%d] getTeamsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetTeamsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetTeamsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTeamsForbidden creates a GetTeamsForbidden with default headers values
func NewGetTeamsForbidden() *GetTeamsForbidden {
	return &GetTeamsForbidden{}
}

/*
GetTeamsForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetTeamsForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get teams forbidden response has a 2xx status code
func (o *GetTeamsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get teams forbidden response has a 3xx status code
func (o *GetTeamsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get teams forbidden response has a 4xx status code
func (o *GetTeamsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get teams forbidden response has a 5xx status code
func (o *GetTeamsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get teams forbidden response a status code equal to that given
func (o *GetTeamsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetTeamsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/teams][%d] getTeamsForbidden  %+v", 403, o.Payload)
}

func (o *GetTeamsForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/teams][%d] getTeamsForbidden  %+v", 403, o.Payload)
}

func (o *GetTeamsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetTeamsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTeamsNotFound creates a GetTeamsNotFound with default headers values
func NewGetTeamsNotFound() *GetTeamsNotFound {
	return &GetTeamsNotFound{}
}

/*
GetTeamsNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetTeamsNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get teams not found response has a 2xx status code
func (o *GetTeamsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get teams not found response has a 3xx status code
func (o *GetTeamsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get teams not found response has a 4xx status code
func (o *GetTeamsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get teams not found response has a 5xx status code
func (o *GetTeamsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get teams not found response a status code equal to that given
func (o *GetTeamsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetTeamsNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/teams][%d] getTeamsNotFound  %+v", 404, o.Payload)
}

func (o *GetTeamsNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/teams][%d] getTeamsNotFound  %+v", 404, o.Payload)
}

func (o *GetTeamsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetTeamsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTeamsRequestTimeout creates a GetTeamsRequestTimeout with default headers values
func NewGetTeamsRequestTimeout() *GetTeamsRequestTimeout {
	return &GetTeamsRequestTimeout{}
}

/*
GetTeamsRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetTeamsRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get teams request timeout response has a 2xx status code
func (o *GetTeamsRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get teams request timeout response has a 3xx status code
func (o *GetTeamsRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get teams request timeout response has a 4xx status code
func (o *GetTeamsRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get teams request timeout response has a 5xx status code
func (o *GetTeamsRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get teams request timeout response a status code equal to that given
func (o *GetTeamsRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetTeamsRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/teams][%d] getTeamsRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetTeamsRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/teams][%d] getTeamsRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetTeamsRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetTeamsRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTeamsRequestEntityTooLarge creates a GetTeamsRequestEntityTooLarge with default headers values
func NewGetTeamsRequestEntityTooLarge() *GetTeamsRequestEntityTooLarge {
	return &GetTeamsRequestEntityTooLarge{}
}

/*
GetTeamsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetTeamsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get teams request entity too large response has a 2xx status code
func (o *GetTeamsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get teams request entity too large response has a 3xx status code
func (o *GetTeamsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get teams request entity too large response has a 4xx status code
func (o *GetTeamsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get teams request entity too large response has a 5xx status code
func (o *GetTeamsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get teams request entity too large response a status code equal to that given
func (o *GetTeamsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetTeamsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/teams][%d] getTeamsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetTeamsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/teams][%d] getTeamsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetTeamsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetTeamsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTeamsUnsupportedMediaType creates a GetTeamsUnsupportedMediaType with default headers values
func NewGetTeamsUnsupportedMediaType() *GetTeamsUnsupportedMediaType {
	return &GetTeamsUnsupportedMediaType{}
}

/*
GetTeamsUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetTeamsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get teams unsupported media type response has a 2xx status code
func (o *GetTeamsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get teams unsupported media type response has a 3xx status code
func (o *GetTeamsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get teams unsupported media type response has a 4xx status code
func (o *GetTeamsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get teams unsupported media type response has a 5xx status code
func (o *GetTeamsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get teams unsupported media type response a status code equal to that given
func (o *GetTeamsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetTeamsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/teams][%d] getTeamsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetTeamsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/teams][%d] getTeamsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetTeamsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetTeamsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTeamsTooManyRequests creates a GetTeamsTooManyRequests with default headers values
func NewGetTeamsTooManyRequests() *GetTeamsTooManyRequests {
	return &GetTeamsTooManyRequests{}
}

/*
GetTeamsTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetTeamsTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get teams too many requests response has a 2xx status code
func (o *GetTeamsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get teams too many requests response has a 3xx status code
func (o *GetTeamsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get teams too many requests response has a 4xx status code
func (o *GetTeamsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get teams too many requests response has a 5xx status code
func (o *GetTeamsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get teams too many requests response a status code equal to that given
func (o *GetTeamsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetTeamsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/teams][%d] getTeamsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetTeamsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/teams][%d] getTeamsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetTeamsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetTeamsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTeamsInternalServerError creates a GetTeamsInternalServerError with default headers values
func NewGetTeamsInternalServerError() *GetTeamsInternalServerError {
	return &GetTeamsInternalServerError{}
}

/*
GetTeamsInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetTeamsInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get teams internal server error response has a 2xx status code
func (o *GetTeamsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get teams internal server error response has a 3xx status code
func (o *GetTeamsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get teams internal server error response has a 4xx status code
func (o *GetTeamsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get teams internal server error response has a 5xx status code
func (o *GetTeamsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get teams internal server error response a status code equal to that given
func (o *GetTeamsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetTeamsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/teams][%d] getTeamsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetTeamsInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/teams][%d] getTeamsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetTeamsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetTeamsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTeamsServiceUnavailable creates a GetTeamsServiceUnavailable with default headers values
func NewGetTeamsServiceUnavailable() *GetTeamsServiceUnavailable {
	return &GetTeamsServiceUnavailable{}
}

/*
GetTeamsServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetTeamsServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get teams service unavailable response has a 2xx status code
func (o *GetTeamsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get teams service unavailable response has a 3xx status code
func (o *GetTeamsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get teams service unavailable response has a 4xx status code
func (o *GetTeamsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get teams service unavailable response has a 5xx status code
func (o *GetTeamsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get teams service unavailable response a status code equal to that given
func (o *GetTeamsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetTeamsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/teams][%d] getTeamsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetTeamsServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/teams][%d] getTeamsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetTeamsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetTeamsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTeamsGatewayTimeout creates a GetTeamsGatewayTimeout with default headers values
func NewGetTeamsGatewayTimeout() *GetTeamsGatewayTimeout {
	return &GetTeamsGatewayTimeout{}
}

/*
GetTeamsGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetTeamsGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get teams gateway timeout response has a 2xx status code
func (o *GetTeamsGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get teams gateway timeout response has a 3xx status code
func (o *GetTeamsGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get teams gateway timeout response has a 4xx status code
func (o *GetTeamsGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get teams gateway timeout response has a 5xx status code
func (o *GetTeamsGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get teams gateway timeout response a status code equal to that given
func (o *GetTeamsGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetTeamsGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/teams][%d] getTeamsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetTeamsGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/teams][%d] getTeamsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetTeamsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetTeamsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

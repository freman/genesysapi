// Code generated by go-swagger; DO NOT EDIT.

package speech_and_text_analytics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDeleteSpeechandtextanalyticsTopicParams creates a new DeleteSpeechandtextanalyticsTopicParams object
// with the default values initialized.
func NewDeleteSpeechandtextanalyticsTopicParams() *DeleteSpeechandtextanalyticsTopicParams {
	var ()
	return &DeleteSpeechandtextanalyticsTopicParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteSpeechandtextanalyticsTopicParamsWithTimeout creates a new DeleteSpeechandtextanalyticsTopicParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteSpeechandtextanalyticsTopicParamsWithTimeout(timeout time.Duration) *DeleteSpeechandtextanalyticsTopicParams {
	var ()
	return &DeleteSpeechandtextanalyticsTopicParams{

		timeout: timeout,
	}
}

// NewDeleteSpeechandtextanalyticsTopicParamsWithContext creates a new DeleteSpeechandtextanalyticsTopicParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteSpeechandtextanalyticsTopicParamsWithContext(ctx context.Context) *DeleteSpeechandtextanalyticsTopicParams {
	var ()
	return &DeleteSpeechandtextanalyticsTopicParams{

		Context: ctx,
	}
}

// NewDeleteSpeechandtextanalyticsTopicParamsWithHTTPClient creates a new DeleteSpeechandtextanalyticsTopicParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteSpeechandtextanalyticsTopicParamsWithHTTPClient(client *http.Client) *DeleteSpeechandtextanalyticsTopicParams {
	var ()
	return &DeleteSpeechandtextanalyticsTopicParams{
		HTTPClient: client,
	}
}

/*DeleteSpeechandtextanalyticsTopicParams contains all the parameters to send to the API endpoint
for the delete speechandtextanalytics topic operation typically these are written to a http.Request
*/
type DeleteSpeechandtextanalyticsTopicParams struct {

	/*TopicID
	  The id of the topic

	*/
	TopicID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete speechandtextanalytics topic params
func (o *DeleteSpeechandtextanalyticsTopicParams) WithTimeout(timeout time.Duration) *DeleteSpeechandtextanalyticsTopicParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete speechandtextanalytics topic params
func (o *DeleteSpeechandtextanalyticsTopicParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete speechandtextanalytics topic params
func (o *DeleteSpeechandtextanalyticsTopicParams) WithContext(ctx context.Context) *DeleteSpeechandtextanalyticsTopicParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete speechandtextanalytics topic params
func (o *DeleteSpeechandtextanalyticsTopicParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete speechandtextanalytics topic params
func (o *DeleteSpeechandtextanalyticsTopicParams) WithHTTPClient(client *http.Client) *DeleteSpeechandtextanalyticsTopicParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete speechandtextanalytics topic params
func (o *DeleteSpeechandtextanalyticsTopicParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTopicID adds the topicID to the delete speechandtextanalytics topic params
func (o *DeleteSpeechandtextanalyticsTopicParams) WithTopicID(topicID string) *DeleteSpeechandtextanalyticsTopicParams {
	o.SetTopicID(topicID)
	return o
}

// SetTopicID adds the topicId to the delete speechandtextanalytics topic params
func (o *DeleteSpeechandtextanalyticsTopicParams) SetTopicID(topicID string) {
	o.TopicID = topicID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteSpeechandtextanalyticsTopicParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param topicId
	if err := r.SetPathParam("topicId", o.TopicID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

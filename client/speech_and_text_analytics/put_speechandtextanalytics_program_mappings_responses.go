// Code generated by go-swagger; DO NOT EDIT.

package speech_and_text_analytics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutSpeechandtextanalyticsProgramMappingsReader is a Reader for the PutSpeechandtextanalyticsProgramMappings structure.
type PutSpeechandtextanalyticsProgramMappingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutSpeechandtextanalyticsProgramMappingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutSpeechandtextanalyticsProgramMappingsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutSpeechandtextanalyticsProgramMappingsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutSpeechandtextanalyticsProgramMappingsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutSpeechandtextanalyticsProgramMappingsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutSpeechandtextanalyticsProgramMappingsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPutSpeechandtextanalyticsProgramMappingsRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPutSpeechandtextanalyticsProgramMappingsConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutSpeechandtextanalyticsProgramMappingsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutSpeechandtextanalyticsProgramMappingsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutSpeechandtextanalyticsProgramMappingsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutSpeechandtextanalyticsProgramMappingsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutSpeechandtextanalyticsProgramMappingsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutSpeechandtextanalyticsProgramMappingsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutSpeechandtextanalyticsProgramMappingsOK creates a PutSpeechandtextanalyticsProgramMappingsOK with default headers values
func NewPutSpeechandtextanalyticsProgramMappingsOK() *PutSpeechandtextanalyticsProgramMappingsOK {
	return &PutSpeechandtextanalyticsProgramMappingsOK{}
}

/*PutSpeechandtextanalyticsProgramMappingsOK handles this case with default header values.

successful operation
*/
type PutSpeechandtextanalyticsProgramMappingsOK struct {
	Payload *models.ProgramMappings
}

func (o *PutSpeechandtextanalyticsProgramMappingsOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}/mappings][%d] putSpeechandtextanalyticsProgramMappingsOK  %+v", 200, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramMappingsOK) GetPayload() *models.ProgramMappings {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsProgramMappingsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProgramMappings)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsProgramMappingsBadRequest creates a PutSpeechandtextanalyticsProgramMappingsBadRequest with default headers values
func NewPutSpeechandtextanalyticsProgramMappingsBadRequest() *PutSpeechandtextanalyticsProgramMappingsBadRequest {
	return &PutSpeechandtextanalyticsProgramMappingsBadRequest{}
}

/*PutSpeechandtextanalyticsProgramMappingsBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutSpeechandtextanalyticsProgramMappingsBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PutSpeechandtextanalyticsProgramMappingsBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}/mappings][%d] putSpeechandtextanalyticsProgramMappingsBadRequest  %+v", 400, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramMappingsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsProgramMappingsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsProgramMappingsUnauthorized creates a PutSpeechandtextanalyticsProgramMappingsUnauthorized with default headers values
func NewPutSpeechandtextanalyticsProgramMappingsUnauthorized() *PutSpeechandtextanalyticsProgramMappingsUnauthorized {
	return &PutSpeechandtextanalyticsProgramMappingsUnauthorized{}
}

/*PutSpeechandtextanalyticsProgramMappingsUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PutSpeechandtextanalyticsProgramMappingsUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PutSpeechandtextanalyticsProgramMappingsUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}/mappings][%d] putSpeechandtextanalyticsProgramMappingsUnauthorized  %+v", 401, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramMappingsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsProgramMappingsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsProgramMappingsForbidden creates a PutSpeechandtextanalyticsProgramMappingsForbidden with default headers values
func NewPutSpeechandtextanalyticsProgramMappingsForbidden() *PutSpeechandtextanalyticsProgramMappingsForbidden {
	return &PutSpeechandtextanalyticsProgramMappingsForbidden{}
}

/*PutSpeechandtextanalyticsProgramMappingsForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PutSpeechandtextanalyticsProgramMappingsForbidden struct {
	Payload *models.ErrorBody
}

func (o *PutSpeechandtextanalyticsProgramMappingsForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}/mappings][%d] putSpeechandtextanalyticsProgramMappingsForbidden  %+v", 403, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramMappingsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsProgramMappingsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsProgramMappingsNotFound creates a PutSpeechandtextanalyticsProgramMappingsNotFound with default headers values
func NewPutSpeechandtextanalyticsProgramMappingsNotFound() *PutSpeechandtextanalyticsProgramMappingsNotFound {
	return &PutSpeechandtextanalyticsProgramMappingsNotFound{}
}

/*PutSpeechandtextanalyticsProgramMappingsNotFound handles this case with default header values.

The requested resource was not found.
*/
type PutSpeechandtextanalyticsProgramMappingsNotFound struct {
	Payload *models.ErrorBody
}

func (o *PutSpeechandtextanalyticsProgramMappingsNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}/mappings][%d] putSpeechandtextanalyticsProgramMappingsNotFound  %+v", 404, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramMappingsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsProgramMappingsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsProgramMappingsRequestTimeout creates a PutSpeechandtextanalyticsProgramMappingsRequestTimeout with default headers values
func NewPutSpeechandtextanalyticsProgramMappingsRequestTimeout() *PutSpeechandtextanalyticsProgramMappingsRequestTimeout {
	return &PutSpeechandtextanalyticsProgramMappingsRequestTimeout{}
}

/*PutSpeechandtextanalyticsProgramMappingsRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PutSpeechandtextanalyticsProgramMappingsRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutSpeechandtextanalyticsProgramMappingsRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}/mappings][%d] putSpeechandtextanalyticsProgramMappingsRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramMappingsRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsProgramMappingsRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsProgramMappingsConflict creates a PutSpeechandtextanalyticsProgramMappingsConflict with default headers values
func NewPutSpeechandtextanalyticsProgramMappingsConflict() *PutSpeechandtextanalyticsProgramMappingsConflict {
	return &PutSpeechandtextanalyticsProgramMappingsConflict{}
}

/*PutSpeechandtextanalyticsProgramMappingsConflict handles this case with default header values.

Conflict
*/
type PutSpeechandtextanalyticsProgramMappingsConflict struct {
	Payload *models.ErrorBody
}

func (o *PutSpeechandtextanalyticsProgramMappingsConflict) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}/mappings][%d] putSpeechandtextanalyticsProgramMappingsConflict  %+v", 409, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramMappingsConflict) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsProgramMappingsConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsProgramMappingsRequestEntityTooLarge creates a PutSpeechandtextanalyticsProgramMappingsRequestEntityTooLarge with default headers values
func NewPutSpeechandtextanalyticsProgramMappingsRequestEntityTooLarge() *PutSpeechandtextanalyticsProgramMappingsRequestEntityTooLarge {
	return &PutSpeechandtextanalyticsProgramMappingsRequestEntityTooLarge{}
}

/*PutSpeechandtextanalyticsProgramMappingsRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type PutSpeechandtextanalyticsProgramMappingsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PutSpeechandtextanalyticsProgramMappingsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}/mappings][%d] putSpeechandtextanalyticsProgramMappingsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramMappingsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsProgramMappingsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsProgramMappingsUnsupportedMediaType creates a PutSpeechandtextanalyticsProgramMappingsUnsupportedMediaType with default headers values
func NewPutSpeechandtextanalyticsProgramMappingsUnsupportedMediaType() *PutSpeechandtextanalyticsProgramMappingsUnsupportedMediaType {
	return &PutSpeechandtextanalyticsProgramMappingsUnsupportedMediaType{}
}

/*PutSpeechandtextanalyticsProgramMappingsUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutSpeechandtextanalyticsProgramMappingsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PutSpeechandtextanalyticsProgramMappingsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}/mappings][%d] putSpeechandtextanalyticsProgramMappingsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramMappingsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsProgramMappingsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsProgramMappingsTooManyRequests creates a PutSpeechandtextanalyticsProgramMappingsTooManyRequests with default headers values
func NewPutSpeechandtextanalyticsProgramMappingsTooManyRequests() *PutSpeechandtextanalyticsProgramMappingsTooManyRequests {
	return &PutSpeechandtextanalyticsProgramMappingsTooManyRequests{}
}

/*PutSpeechandtextanalyticsProgramMappingsTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PutSpeechandtextanalyticsProgramMappingsTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PutSpeechandtextanalyticsProgramMappingsTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}/mappings][%d] putSpeechandtextanalyticsProgramMappingsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramMappingsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsProgramMappingsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsProgramMappingsInternalServerError creates a PutSpeechandtextanalyticsProgramMappingsInternalServerError with default headers values
func NewPutSpeechandtextanalyticsProgramMappingsInternalServerError() *PutSpeechandtextanalyticsProgramMappingsInternalServerError {
	return &PutSpeechandtextanalyticsProgramMappingsInternalServerError{}
}

/*PutSpeechandtextanalyticsProgramMappingsInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutSpeechandtextanalyticsProgramMappingsInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PutSpeechandtextanalyticsProgramMappingsInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}/mappings][%d] putSpeechandtextanalyticsProgramMappingsInternalServerError  %+v", 500, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramMappingsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsProgramMappingsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsProgramMappingsServiceUnavailable creates a PutSpeechandtextanalyticsProgramMappingsServiceUnavailable with default headers values
func NewPutSpeechandtextanalyticsProgramMappingsServiceUnavailable() *PutSpeechandtextanalyticsProgramMappingsServiceUnavailable {
	return &PutSpeechandtextanalyticsProgramMappingsServiceUnavailable{}
}

/*PutSpeechandtextanalyticsProgramMappingsServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutSpeechandtextanalyticsProgramMappingsServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PutSpeechandtextanalyticsProgramMappingsServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}/mappings][%d] putSpeechandtextanalyticsProgramMappingsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramMappingsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsProgramMappingsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsProgramMappingsGatewayTimeout creates a PutSpeechandtextanalyticsProgramMappingsGatewayTimeout with default headers values
func NewPutSpeechandtextanalyticsProgramMappingsGatewayTimeout() *PutSpeechandtextanalyticsProgramMappingsGatewayTimeout {
	return &PutSpeechandtextanalyticsProgramMappingsGatewayTimeout{}
}

/*PutSpeechandtextanalyticsProgramMappingsGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PutSpeechandtextanalyticsProgramMappingsGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutSpeechandtextanalyticsProgramMappingsGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}/mappings][%d] putSpeechandtextanalyticsProgramMappingsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramMappingsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsProgramMappingsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

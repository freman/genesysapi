// Code generated by go-swagger; DO NOT EDIT.

package speech_and_text_analytics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetSpeechandtextanalyticsSettingsReader is a Reader for the GetSpeechandtextanalyticsSettings structure.
type GetSpeechandtextanalyticsSettingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSpeechandtextanalyticsSettingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSpeechandtextanalyticsSettingsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetSpeechandtextanalyticsSettingsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetSpeechandtextanalyticsSettingsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetSpeechandtextanalyticsSettingsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSpeechandtextanalyticsSettingsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetSpeechandtextanalyticsSettingsRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetSpeechandtextanalyticsSettingsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetSpeechandtextanalyticsSettingsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetSpeechandtextanalyticsSettingsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetSpeechandtextanalyticsSettingsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetSpeechandtextanalyticsSettingsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetSpeechandtextanalyticsSettingsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetSpeechandtextanalyticsSettingsOK creates a GetSpeechandtextanalyticsSettingsOK with default headers values
func NewGetSpeechandtextanalyticsSettingsOK() *GetSpeechandtextanalyticsSettingsOK {
	return &GetSpeechandtextanalyticsSettingsOK{}
}

/*
GetSpeechandtextanalyticsSettingsOK describes a response with status code 200, with default header values.

successful operation
*/
type GetSpeechandtextanalyticsSettingsOK struct {
	Payload *models.SpeechTextAnalyticsSettingsResponse
}

// IsSuccess returns true when this get speechandtextanalytics settings o k response has a 2xx status code
func (o *GetSpeechandtextanalyticsSettingsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get speechandtextanalytics settings o k response has a 3xx status code
func (o *GetSpeechandtextanalyticsSettingsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get speechandtextanalytics settings o k response has a 4xx status code
func (o *GetSpeechandtextanalyticsSettingsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get speechandtextanalytics settings o k response has a 5xx status code
func (o *GetSpeechandtextanalyticsSettingsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get speechandtextanalytics settings o k response a status code equal to that given
func (o *GetSpeechandtextanalyticsSettingsOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetSpeechandtextanalyticsSettingsOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/settings][%d] getSpeechandtextanalyticsSettingsOK  %+v", 200, o.Payload)
}

func (o *GetSpeechandtextanalyticsSettingsOK) String() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/settings][%d] getSpeechandtextanalyticsSettingsOK  %+v", 200, o.Payload)
}

func (o *GetSpeechandtextanalyticsSettingsOK) GetPayload() *models.SpeechTextAnalyticsSettingsResponse {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsSettingsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SpeechTextAnalyticsSettingsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsSettingsBadRequest creates a GetSpeechandtextanalyticsSettingsBadRequest with default headers values
func NewGetSpeechandtextanalyticsSettingsBadRequest() *GetSpeechandtextanalyticsSettingsBadRequest {
	return &GetSpeechandtextanalyticsSettingsBadRequest{}
}

/*
GetSpeechandtextanalyticsSettingsBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetSpeechandtextanalyticsSettingsBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get speechandtextanalytics settings bad request response has a 2xx status code
func (o *GetSpeechandtextanalyticsSettingsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get speechandtextanalytics settings bad request response has a 3xx status code
func (o *GetSpeechandtextanalyticsSettingsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get speechandtextanalytics settings bad request response has a 4xx status code
func (o *GetSpeechandtextanalyticsSettingsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get speechandtextanalytics settings bad request response has a 5xx status code
func (o *GetSpeechandtextanalyticsSettingsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get speechandtextanalytics settings bad request response a status code equal to that given
func (o *GetSpeechandtextanalyticsSettingsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetSpeechandtextanalyticsSettingsBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/settings][%d] getSpeechandtextanalyticsSettingsBadRequest  %+v", 400, o.Payload)
}

func (o *GetSpeechandtextanalyticsSettingsBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/settings][%d] getSpeechandtextanalyticsSettingsBadRequest  %+v", 400, o.Payload)
}

func (o *GetSpeechandtextanalyticsSettingsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsSettingsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsSettingsUnauthorized creates a GetSpeechandtextanalyticsSettingsUnauthorized with default headers values
func NewGetSpeechandtextanalyticsSettingsUnauthorized() *GetSpeechandtextanalyticsSettingsUnauthorized {
	return &GetSpeechandtextanalyticsSettingsUnauthorized{}
}

/*
GetSpeechandtextanalyticsSettingsUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetSpeechandtextanalyticsSettingsUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get speechandtextanalytics settings unauthorized response has a 2xx status code
func (o *GetSpeechandtextanalyticsSettingsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get speechandtextanalytics settings unauthorized response has a 3xx status code
func (o *GetSpeechandtextanalyticsSettingsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get speechandtextanalytics settings unauthorized response has a 4xx status code
func (o *GetSpeechandtextanalyticsSettingsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get speechandtextanalytics settings unauthorized response has a 5xx status code
func (o *GetSpeechandtextanalyticsSettingsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get speechandtextanalytics settings unauthorized response a status code equal to that given
func (o *GetSpeechandtextanalyticsSettingsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetSpeechandtextanalyticsSettingsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/settings][%d] getSpeechandtextanalyticsSettingsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetSpeechandtextanalyticsSettingsUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/settings][%d] getSpeechandtextanalyticsSettingsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetSpeechandtextanalyticsSettingsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsSettingsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsSettingsForbidden creates a GetSpeechandtextanalyticsSettingsForbidden with default headers values
func NewGetSpeechandtextanalyticsSettingsForbidden() *GetSpeechandtextanalyticsSettingsForbidden {
	return &GetSpeechandtextanalyticsSettingsForbidden{}
}

/*
GetSpeechandtextanalyticsSettingsForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetSpeechandtextanalyticsSettingsForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get speechandtextanalytics settings forbidden response has a 2xx status code
func (o *GetSpeechandtextanalyticsSettingsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get speechandtextanalytics settings forbidden response has a 3xx status code
func (o *GetSpeechandtextanalyticsSettingsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get speechandtextanalytics settings forbidden response has a 4xx status code
func (o *GetSpeechandtextanalyticsSettingsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get speechandtextanalytics settings forbidden response has a 5xx status code
func (o *GetSpeechandtextanalyticsSettingsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get speechandtextanalytics settings forbidden response a status code equal to that given
func (o *GetSpeechandtextanalyticsSettingsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetSpeechandtextanalyticsSettingsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/settings][%d] getSpeechandtextanalyticsSettingsForbidden  %+v", 403, o.Payload)
}

func (o *GetSpeechandtextanalyticsSettingsForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/settings][%d] getSpeechandtextanalyticsSettingsForbidden  %+v", 403, o.Payload)
}

func (o *GetSpeechandtextanalyticsSettingsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsSettingsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsSettingsNotFound creates a GetSpeechandtextanalyticsSettingsNotFound with default headers values
func NewGetSpeechandtextanalyticsSettingsNotFound() *GetSpeechandtextanalyticsSettingsNotFound {
	return &GetSpeechandtextanalyticsSettingsNotFound{}
}

/*
GetSpeechandtextanalyticsSettingsNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetSpeechandtextanalyticsSettingsNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get speechandtextanalytics settings not found response has a 2xx status code
func (o *GetSpeechandtextanalyticsSettingsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get speechandtextanalytics settings not found response has a 3xx status code
func (o *GetSpeechandtextanalyticsSettingsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get speechandtextanalytics settings not found response has a 4xx status code
func (o *GetSpeechandtextanalyticsSettingsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get speechandtextanalytics settings not found response has a 5xx status code
func (o *GetSpeechandtextanalyticsSettingsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get speechandtextanalytics settings not found response a status code equal to that given
func (o *GetSpeechandtextanalyticsSettingsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetSpeechandtextanalyticsSettingsNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/settings][%d] getSpeechandtextanalyticsSettingsNotFound  %+v", 404, o.Payload)
}

func (o *GetSpeechandtextanalyticsSettingsNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/settings][%d] getSpeechandtextanalyticsSettingsNotFound  %+v", 404, o.Payload)
}

func (o *GetSpeechandtextanalyticsSettingsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsSettingsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsSettingsRequestTimeout creates a GetSpeechandtextanalyticsSettingsRequestTimeout with default headers values
func NewGetSpeechandtextanalyticsSettingsRequestTimeout() *GetSpeechandtextanalyticsSettingsRequestTimeout {
	return &GetSpeechandtextanalyticsSettingsRequestTimeout{}
}

/*
GetSpeechandtextanalyticsSettingsRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetSpeechandtextanalyticsSettingsRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get speechandtextanalytics settings request timeout response has a 2xx status code
func (o *GetSpeechandtextanalyticsSettingsRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get speechandtextanalytics settings request timeout response has a 3xx status code
func (o *GetSpeechandtextanalyticsSettingsRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get speechandtextanalytics settings request timeout response has a 4xx status code
func (o *GetSpeechandtextanalyticsSettingsRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get speechandtextanalytics settings request timeout response has a 5xx status code
func (o *GetSpeechandtextanalyticsSettingsRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get speechandtextanalytics settings request timeout response a status code equal to that given
func (o *GetSpeechandtextanalyticsSettingsRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetSpeechandtextanalyticsSettingsRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/settings][%d] getSpeechandtextanalyticsSettingsRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetSpeechandtextanalyticsSettingsRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/settings][%d] getSpeechandtextanalyticsSettingsRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetSpeechandtextanalyticsSettingsRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsSettingsRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsSettingsRequestEntityTooLarge creates a GetSpeechandtextanalyticsSettingsRequestEntityTooLarge with default headers values
func NewGetSpeechandtextanalyticsSettingsRequestEntityTooLarge() *GetSpeechandtextanalyticsSettingsRequestEntityTooLarge {
	return &GetSpeechandtextanalyticsSettingsRequestEntityTooLarge{}
}

/*
GetSpeechandtextanalyticsSettingsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetSpeechandtextanalyticsSettingsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get speechandtextanalytics settings request entity too large response has a 2xx status code
func (o *GetSpeechandtextanalyticsSettingsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get speechandtextanalytics settings request entity too large response has a 3xx status code
func (o *GetSpeechandtextanalyticsSettingsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get speechandtextanalytics settings request entity too large response has a 4xx status code
func (o *GetSpeechandtextanalyticsSettingsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get speechandtextanalytics settings request entity too large response has a 5xx status code
func (o *GetSpeechandtextanalyticsSettingsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get speechandtextanalytics settings request entity too large response a status code equal to that given
func (o *GetSpeechandtextanalyticsSettingsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetSpeechandtextanalyticsSettingsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/settings][%d] getSpeechandtextanalyticsSettingsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetSpeechandtextanalyticsSettingsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/settings][%d] getSpeechandtextanalyticsSettingsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetSpeechandtextanalyticsSettingsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsSettingsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsSettingsUnsupportedMediaType creates a GetSpeechandtextanalyticsSettingsUnsupportedMediaType with default headers values
func NewGetSpeechandtextanalyticsSettingsUnsupportedMediaType() *GetSpeechandtextanalyticsSettingsUnsupportedMediaType {
	return &GetSpeechandtextanalyticsSettingsUnsupportedMediaType{}
}

/*
GetSpeechandtextanalyticsSettingsUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetSpeechandtextanalyticsSettingsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get speechandtextanalytics settings unsupported media type response has a 2xx status code
func (o *GetSpeechandtextanalyticsSettingsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get speechandtextanalytics settings unsupported media type response has a 3xx status code
func (o *GetSpeechandtextanalyticsSettingsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get speechandtextanalytics settings unsupported media type response has a 4xx status code
func (o *GetSpeechandtextanalyticsSettingsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get speechandtextanalytics settings unsupported media type response has a 5xx status code
func (o *GetSpeechandtextanalyticsSettingsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get speechandtextanalytics settings unsupported media type response a status code equal to that given
func (o *GetSpeechandtextanalyticsSettingsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetSpeechandtextanalyticsSettingsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/settings][%d] getSpeechandtextanalyticsSettingsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetSpeechandtextanalyticsSettingsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/settings][%d] getSpeechandtextanalyticsSettingsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetSpeechandtextanalyticsSettingsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsSettingsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsSettingsTooManyRequests creates a GetSpeechandtextanalyticsSettingsTooManyRequests with default headers values
func NewGetSpeechandtextanalyticsSettingsTooManyRequests() *GetSpeechandtextanalyticsSettingsTooManyRequests {
	return &GetSpeechandtextanalyticsSettingsTooManyRequests{}
}

/*
GetSpeechandtextanalyticsSettingsTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetSpeechandtextanalyticsSettingsTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get speechandtextanalytics settings too many requests response has a 2xx status code
func (o *GetSpeechandtextanalyticsSettingsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get speechandtextanalytics settings too many requests response has a 3xx status code
func (o *GetSpeechandtextanalyticsSettingsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get speechandtextanalytics settings too many requests response has a 4xx status code
func (o *GetSpeechandtextanalyticsSettingsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get speechandtextanalytics settings too many requests response has a 5xx status code
func (o *GetSpeechandtextanalyticsSettingsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get speechandtextanalytics settings too many requests response a status code equal to that given
func (o *GetSpeechandtextanalyticsSettingsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetSpeechandtextanalyticsSettingsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/settings][%d] getSpeechandtextanalyticsSettingsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetSpeechandtextanalyticsSettingsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/settings][%d] getSpeechandtextanalyticsSettingsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetSpeechandtextanalyticsSettingsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsSettingsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsSettingsInternalServerError creates a GetSpeechandtextanalyticsSettingsInternalServerError with default headers values
func NewGetSpeechandtextanalyticsSettingsInternalServerError() *GetSpeechandtextanalyticsSettingsInternalServerError {
	return &GetSpeechandtextanalyticsSettingsInternalServerError{}
}

/*
GetSpeechandtextanalyticsSettingsInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetSpeechandtextanalyticsSettingsInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get speechandtextanalytics settings internal server error response has a 2xx status code
func (o *GetSpeechandtextanalyticsSettingsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get speechandtextanalytics settings internal server error response has a 3xx status code
func (o *GetSpeechandtextanalyticsSettingsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get speechandtextanalytics settings internal server error response has a 4xx status code
func (o *GetSpeechandtextanalyticsSettingsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get speechandtextanalytics settings internal server error response has a 5xx status code
func (o *GetSpeechandtextanalyticsSettingsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get speechandtextanalytics settings internal server error response a status code equal to that given
func (o *GetSpeechandtextanalyticsSettingsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetSpeechandtextanalyticsSettingsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/settings][%d] getSpeechandtextanalyticsSettingsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSpeechandtextanalyticsSettingsInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/settings][%d] getSpeechandtextanalyticsSettingsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSpeechandtextanalyticsSettingsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsSettingsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsSettingsServiceUnavailable creates a GetSpeechandtextanalyticsSettingsServiceUnavailable with default headers values
func NewGetSpeechandtextanalyticsSettingsServiceUnavailable() *GetSpeechandtextanalyticsSettingsServiceUnavailable {
	return &GetSpeechandtextanalyticsSettingsServiceUnavailable{}
}

/*
GetSpeechandtextanalyticsSettingsServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetSpeechandtextanalyticsSettingsServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get speechandtextanalytics settings service unavailable response has a 2xx status code
func (o *GetSpeechandtextanalyticsSettingsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get speechandtextanalytics settings service unavailable response has a 3xx status code
func (o *GetSpeechandtextanalyticsSettingsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get speechandtextanalytics settings service unavailable response has a 4xx status code
func (o *GetSpeechandtextanalyticsSettingsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get speechandtextanalytics settings service unavailable response has a 5xx status code
func (o *GetSpeechandtextanalyticsSettingsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get speechandtextanalytics settings service unavailable response a status code equal to that given
func (o *GetSpeechandtextanalyticsSettingsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetSpeechandtextanalyticsSettingsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/settings][%d] getSpeechandtextanalyticsSettingsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetSpeechandtextanalyticsSettingsServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/settings][%d] getSpeechandtextanalyticsSettingsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetSpeechandtextanalyticsSettingsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsSettingsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsSettingsGatewayTimeout creates a GetSpeechandtextanalyticsSettingsGatewayTimeout with default headers values
func NewGetSpeechandtextanalyticsSettingsGatewayTimeout() *GetSpeechandtextanalyticsSettingsGatewayTimeout {
	return &GetSpeechandtextanalyticsSettingsGatewayTimeout{}
}

/*
GetSpeechandtextanalyticsSettingsGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetSpeechandtextanalyticsSettingsGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get speechandtextanalytics settings gateway timeout response has a 2xx status code
func (o *GetSpeechandtextanalyticsSettingsGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get speechandtextanalytics settings gateway timeout response has a 3xx status code
func (o *GetSpeechandtextanalyticsSettingsGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get speechandtextanalytics settings gateway timeout response has a 4xx status code
func (o *GetSpeechandtextanalyticsSettingsGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get speechandtextanalytics settings gateway timeout response has a 5xx status code
func (o *GetSpeechandtextanalyticsSettingsGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get speechandtextanalytics settings gateway timeout response a status code equal to that given
func (o *GetSpeechandtextanalyticsSettingsGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetSpeechandtextanalyticsSettingsGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/settings][%d] getSpeechandtextanalyticsSettingsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetSpeechandtextanalyticsSettingsGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/settings][%d] getSpeechandtextanalyticsSettingsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetSpeechandtextanalyticsSettingsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsSettingsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

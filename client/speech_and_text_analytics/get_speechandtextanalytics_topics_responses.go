// Code generated by go-swagger; DO NOT EDIT.

package speech_and_text_analytics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetSpeechandtextanalyticsTopicsReader is a Reader for the GetSpeechandtextanalyticsTopics structure.
type GetSpeechandtextanalyticsTopicsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSpeechandtextanalyticsTopicsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSpeechandtextanalyticsTopicsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetSpeechandtextanalyticsTopicsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetSpeechandtextanalyticsTopicsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetSpeechandtextanalyticsTopicsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSpeechandtextanalyticsTopicsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetSpeechandtextanalyticsTopicsRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetSpeechandtextanalyticsTopicsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetSpeechandtextanalyticsTopicsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetSpeechandtextanalyticsTopicsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetSpeechandtextanalyticsTopicsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetSpeechandtextanalyticsTopicsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetSpeechandtextanalyticsTopicsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetSpeechandtextanalyticsTopicsOK creates a GetSpeechandtextanalyticsTopicsOK with default headers values
func NewGetSpeechandtextanalyticsTopicsOK() *GetSpeechandtextanalyticsTopicsOK {
	return &GetSpeechandtextanalyticsTopicsOK{}
}

/*
GetSpeechandtextanalyticsTopicsOK describes a response with status code 200, with default header values.

successful operation
*/
type GetSpeechandtextanalyticsTopicsOK struct {
	Payload *models.TopicsEntityListing
}

// IsSuccess returns true when this get speechandtextanalytics topics o k response has a 2xx status code
func (o *GetSpeechandtextanalyticsTopicsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get speechandtextanalytics topics o k response has a 3xx status code
func (o *GetSpeechandtextanalyticsTopicsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get speechandtextanalytics topics o k response has a 4xx status code
func (o *GetSpeechandtextanalyticsTopicsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get speechandtextanalytics topics o k response has a 5xx status code
func (o *GetSpeechandtextanalyticsTopicsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get speechandtextanalytics topics o k response a status code equal to that given
func (o *GetSpeechandtextanalyticsTopicsOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetSpeechandtextanalyticsTopicsOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics][%d] getSpeechandtextanalyticsTopicsOK  %+v", 200, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsOK) String() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics][%d] getSpeechandtextanalyticsTopicsOK  %+v", 200, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsOK) GetPayload() *models.TopicsEntityListing {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsTopicsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TopicsEntityListing)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsTopicsBadRequest creates a GetSpeechandtextanalyticsTopicsBadRequest with default headers values
func NewGetSpeechandtextanalyticsTopicsBadRequest() *GetSpeechandtextanalyticsTopicsBadRequest {
	return &GetSpeechandtextanalyticsTopicsBadRequest{}
}

/*
GetSpeechandtextanalyticsTopicsBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetSpeechandtextanalyticsTopicsBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get speechandtextanalytics topics bad request response has a 2xx status code
func (o *GetSpeechandtextanalyticsTopicsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get speechandtextanalytics topics bad request response has a 3xx status code
func (o *GetSpeechandtextanalyticsTopicsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get speechandtextanalytics topics bad request response has a 4xx status code
func (o *GetSpeechandtextanalyticsTopicsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get speechandtextanalytics topics bad request response has a 5xx status code
func (o *GetSpeechandtextanalyticsTopicsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get speechandtextanalytics topics bad request response a status code equal to that given
func (o *GetSpeechandtextanalyticsTopicsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetSpeechandtextanalyticsTopicsBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics][%d] getSpeechandtextanalyticsTopicsBadRequest  %+v", 400, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics][%d] getSpeechandtextanalyticsTopicsBadRequest  %+v", 400, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsTopicsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsTopicsUnauthorized creates a GetSpeechandtextanalyticsTopicsUnauthorized with default headers values
func NewGetSpeechandtextanalyticsTopicsUnauthorized() *GetSpeechandtextanalyticsTopicsUnauthorized {
	return &GetSpeechandtextanalyticsTopicsUnauthorized{}
}

/*
GetSpeechandtextanalyticsTopicsUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetSpeechandtextanalyticsTopicsUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get speechandtextanalytics topics unauthorized response has a 2xx status code
func (o *GetSpeechandtextanalyticsTopicsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get speechandtextanalytics topics unauthorized response has a 3xx status code
func (o *GetSpeechandtextanalyticsTopicsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get speechandtextanalytics topics unauthorized response has a 4xx status code
func (o *GetSpeechandtextanalyticsTopicsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get speechandtextanalytics topics unauthorized response has a 5xx status code
func (o *GetSpeechandtextanalyticsTopicsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get speechandtextanalytics topics unauthorized response a status code equal to that given
func (o *GetSpeechandtextanalyticsTopicsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetSpeechandtextanalyticsTopicsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics][%d] getSpeechandtextanalyticsTopicsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics][%d] getSpeechandtextanalyticsTopicsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsTopicsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsTopicsForbidden creates a GetSpeechandtextanalyticsTopicsForbidden with default headers values
func NewGetSpeechandtextanalyticsTopicsForbidden() *GetSpeechandtextanalyticsTopicsForbidden {
	return &GetSpeechandtextanalyticsTopicsForbidden{}
}

/*
GetSpeechandtextanalyticsTopicsForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetSpeechandtextanalyticsTopicsForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get speechandtextanalytics topics forbidden response has a 2xx status code
func (o *GetSpeechandtextanalyticsTopicsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get speechandtextanalytics topics forbidden response has a 3xx status code
func (o *GetSpeechandtextanalyticsTopicsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get speechandtextanalytics topics forbidden response has a 4xx status code
func (o *GetSpeechandtextanalyticsTopicsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get speechandtextanalytics topics forbidden response has a 5xx status code
func (o *GetSpeechandtextanalyticsTopicsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get speechandtextanalytics topics forbidden response a status code equal to that given
func (o *GetSpeechandtextanalyticsTopicsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetSpeechandtextanalyticsTopicsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics][%d] getSpeechandtextanalyticsTopicsForbidden  %+v", 403, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics][%d] getSpeechandtextanalyticsTopicsForbidden  %+v", 403, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsTopicsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsTopicsNotFound creates a GetSpeechandtextanalyticsTopicsNotFound with default headers values
func NewGetSpeechandtextanalyticsTopicsNotFound() *GetSpeechandtextanalyticsTopicsNotFound {
	return &GetSpeechandtextanalyticsTopicsNotFound{}
}

/*
GetSpeechandtextanalyticsTopicsNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetSpeechandtextanalyticsTopicsNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get speechandtextanalytics topics not found response has a 2xx status code
func (o *GetSpeechandtextanalyticsTopicsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get speechandtextanalytics topics not found response has a 3xx status code
func (o *GetSpeechandtextanalyticsTopicsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get speechandtextanalytics topics not found response has a 4xx status code
func (o *GetSpeechandtextanalyticsTopicsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get speechandtextanalytics topics not found response has a 5xx status code
func (o *GetSpeechandtextanalyticsTopicsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get speechandtextanalytics topics not found response a status code equal to that given
func (o *GetSpeechandtextanalyticsTopicsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetSpeechandtextanalyticsTopicsNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics][%d] getSpeechandtextanalyticsTopicsNotFound  %+v", 404, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics][%d] getSpeechandtextanalyticsTopicsNotFound  %+v", 404, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsTopicsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsTopicsRequestTimeout creates a GetSpeechandtextanalyticsTopicsRequestTimeout with default headers values
func NewGetSpeechandtextanalyticsTopicsRequestTimeout() *GetSpeechandtextanalyticsTopicsRequestTimeout {
	return &GetSpeechandtextanalyticsTopicsRequestTimeout{}
}

/*
GetSpeechandtextanalyticsTopicsRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetSpeechandtextanalyticsTopicsRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get speechandtextanalytics topics request timeout response has a 2xx status code
func (o *GetSpeechandtextanalyticsTopicsRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get speechandtextanalytics topics request timeout response has a 3xx status code
func (o *GetSpeechandtextanalyticsTopicsRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get speechandtextanalytics topics request timeout response has a 4xx status code
func (o *GetSpeechandtextanalyticsTopicsRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get speechandtextanalytics topics request timeout response has a 5xx status code
func (o *GetSpeechandtextanalyticsTopicsRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get speechandtextanalytics topics request timeout response a status code equal to that given
func (o *GetSpeechandtextanalyticsTopicsRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetSpeechandtextanalyticsTopicsRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics][%d] getSpeechandtextanalyticsTopicsRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics][%d] getSpeechandtextanalyticsTopicsRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsTopicsRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsTopicsRequestEntityTooLarge creates a GetSpeechandtextanalyticsTopicsRequestEntityTooLarge with default headers values
func NewGetSpeechandtextanalyticsTopicsRequestEntityTooLarge() *GetSpeechandtextanalyticsTopicsRequestEntityTooLarge {
	return &GetSpeechandtextanalyticsTopicsRequestEntityTooLarge{}
}

/*
GetSpeechandtextanalyticsTopicsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type GetSpeechandtextanalyticsTopicsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get speechandtextanalytics topics request entity too large response has a 2xx status code
func (o *GetSpeechandtextanalyticsTopicsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get speechandtextanalytics topics request entity too large response has a 3xx status code
func (o *GetSpeechandtextanalyticsTopicsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get speechandtextanalytics topics request entity too large response has a 4xx status code
func (o *GetSpeechandtextanalyticsTopicsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get speechandtextanalytics topics request entity too large response has a 5xx status code
func (o *GetSpeechandtextanalyticsTopicsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get speechandtextanalytics topics request entity too large response a status code equal to that given
func (o *GetSpeechandtextanalyticsTopicsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetSpeechandtextanalyticsTopicsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics][%d] getSpeechandtextanalyticsTopicsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics][%d] getSpeechandtextanalyticsTopicsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsTopicsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsTopicsUnsupportedMediaType creates a GetSpeechandtextanalyticsTopicsUnsupportedMediaType with default headers values
func NewGetSpeechandtextanalyticsTopicsUnsupportedMediaType() *GetSpeechandtextanalyticsTopicsUnsupportedMediaType {
	return &GetSpeechandtextanalyticsTopicsUnsupportedMediaType{}
}

/*
GetSpeechandtextanalyticsTopicsUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetSpeechandtextanalyticsTopicsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get speechandtextanalytics topics unsupported media type response has a 2xx status code
func (o *GetSpeechandtextanalyticsTopicsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get speechandtextanalytics topics unsupported media type response has a 3xx status code
func (o *GetSpeechandtextanalyticsTopicsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get speechandtextanalytics topics unsupported media type response has a 4xx status code
func (o *GetSpeechandtextanalyticsTopicsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get speechandtextanalytics topics unsupported media type response has a 5xx status code
func (o *GetSpeechandtextanalyticsTopicsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get speechandtextanalytics topics unsupported media type response a status code equal to that given
func (o *GetSpeechandtextanalyticsTopicsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetSpeechandtextanalyticsTopicsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics][%d] getSpeechandtextanalyticsTopicsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics][%d] getSpeechandtextanalyticsTopicsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsTopicsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsTopicsTooManyRequests creates a GetSpeechandtextanalyticsTopicsTooManyRequests with default headers values
func NewGetSpeechandtextanalyticsTopicsTooManyRequests() *GetSpeechandtextanalyticsTopicsTooManyRequests {
	return &GetSpeechandtextanalyticsTopicsTooManyRequests{}
}

/*
GetSpeechandtextanalyticsTopicsTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetSpeechandtextanalyticsTopicsTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get speechandtextanalytics topics too many requests response has a 2xx status code
func (o *GetSpeechandtextanalyticsTopicsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get speechandtextanalytics topics too many requests response has a 3xx status code
func (o *GetSpeechandtextanalyticsTopicsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get speechandtextanalytics topics too many requests response has a 4xx status code
func (o *GetSpeechandtextanalyticsTopicsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get speechandtextanalytics topics too many requests response has a 5xx status code
func (o *GetSpeechandtextanalyticsTopicsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get speechandtextanalytics topics too many requests response a status code equal to that given
func (o *GetSpeechandtextanalyticsTopicsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetSpeechandtextanalyticsTopicsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics][%d] getSpeechandtextanalyticsTopicsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics][%d] getSpeechandtextanalyticsTopicsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsTopicsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsTopicsInternalServerError creates a GetSpeechandtextanalyticsTopicsInternalServerError with default headers values
func NewGetSpeechandtextanalyticsTopicsInternalServerError() *GetSpeechandtextanalyticsTopicsInternalServerError {
	return &GetSpeechandtextanalyticsTopicsInternalServerError{}
}

/*
GetSpeechandtextanalyticsTopicsInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetSpeechandtextanalyticsTopicsInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get speechandtextanalytics topics internal server error response has a 2xx status code
func (o *GetSpeechandtextanalyticsTopicsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get speechandtextanalytics topics internal server error response has a 3xx status code
func (o *GetSpeechandtextanalyticsTopicsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get speechandtextanalytics topics internal server error response has a 4xx status code
func (o *GetSpeechandtextanalyticsTopicsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get speechandtextanalytics topics internal server error response has a 5xx status code
func (o *GetSpeechandtextanalyticsTopicsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get speechandtextanalytics topics internal server error response a status code equal to that given
func (o *GetSpeechandtextanalyticsTopicsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetSpeechandtextanalyticsTopicsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics][%d] getSpeechandtextanalyticsTopicsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics][%d] getSpeechandtextanalyticsTopicsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsTopicsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsTopicsServiceUnavailable creates a GetSpeechandtextanalyticsTopicsServiceUnavailable with default headers values
func NewGetSpeechandtextanalyticsTopicsServiceUnavailable() *GetSpeechandtextanalyticsTopicsServiceUnavailable {
	return &GetSpeechandtextanalyticsTopicsServiceUnavailable{}
}

/*
GetSpeechandtextanalyticsTopicsServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetSpeechandtextanalyticsTopicsServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get speechandtextanalytics topics service unavailable response has a 2xx status code
func (o *GetSpeechandtextanalyticsTopicsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get speechandtextanalytics topics service unavailable response has a 3xx status code
func (o *GetSpeechandtextanalyticsTopicsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get speechandtextanalytics topics service unavailable response has a 4xx status code
func (o *GetSpeechandtextanalyticsTopicsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get speechandtextanalytics topics service unavailable response has a 5xx status code
func (o *GetSpeechandtextanalyticsTopicsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get speechandtextanalytics topics service unavailable response a status code equal to that given
func (o *GetSpeechandtextanalyticsTopicsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetSpeechandtextanalyticsTopicsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics][%d] getSpeechandtextanalyticsTopicsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics][%d] getSpeechandtextanalyticsTopicsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsTopicsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsTopicsGatewayTimeout creates a GetSpeechandtextanalyticsTopicsGatewayTimeout with default headers values
func NewGetSpeechandtextanalyticsTopicsGatewayTimeout() *GetSpeechandtextanalyticsTopicsGatewayTimeout {
	return &GetSpeechandtextanalyticsTopicsGatewayTimeout{}
}

/*
GetSpeechandtextanalyticsTopicsGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetSpeechandtextanalyticsTopicsGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get speechandtextanalytics topics gateway timeout response has a 2xx status code
func (o *GetSpeechandtextanalyticsTopicsGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get speechandtextanalytics topics gateway timeout response has a 3xx status code
func (o *GetSpeechandtextanalyticsTopicsGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get speechandtextanalytics topics gateway timeout response has a 4xx status code
func (o *GetSpeechandtextanalyticsTopicsGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get speechandtextanalytics topics gateway timeout response has a 5xx status code
func (o *GetSpeechandtextanalyticsTopicsGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get speechandtextanalytics topics gateway timeout response a status code equal to that given
func (o *GetSpeechandtextanalyticsTopicsGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetSpeechandtextanalyticsTopicsGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics][%d] getSpeechandtextanalyticsTopicsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics][%d] getSpeechandtextanalyticsTopicsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsTopicsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

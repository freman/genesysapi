// Code generated by go-swagger; DO NOT EDIT.

package speech_and_text_analytics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutSpeechandtextanalyticsProgramReader is a Reader for the PutSpeechandtextanalyticsProgram structure.
type PutSpeechandtextanalyticsProgramReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutSpeechandtextanalyticsProgramReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutSpeechandtextanalyticsProgramOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutSpeechandtextanalyticsProgramBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutSpeechandtextanalyticsProgramUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutSpeechandtextanalyticsProgramForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutSpeechandtextanalyticsProgramNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPutSpeechandtextanalyticsProgramRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPutSpeechandtextanalyticsProgramConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutSpeechandtextanalyticsProgramRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutSpeechandtextanalyticsProgramUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutSpeechandtextanalyticsProgramTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutSpeechandtextanalyticsProgramInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutSpeechandtextanalyticsProgramServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutSpeechandtextanalyticsProgramGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutSpeechandtextanalyticsProgramOK creates a PutSpeechandtextanalyticsProgramOK with default headers values
func NewPutSpeechandtextanalyticsProgramOK() *PutSpeechandtextanalyticsProgramOK {
	return &PutSpeechandtextanalyticsProgramOK{}
}

/*
PutSpeechandtextanalyticsProgramOK describes a response with status code 200, with default header values.

successful operation
*/
type PutSpeechandtextanalyticsProgramOK struct {
	Payload *models.Program
}

// IsSuccess returns true when this put speechandtextanalytics program o k response has a 2xx status code
func (o *PutSpeechandtextanalyticsProgramOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put speechandtextanalytics program o k response has a 3xx status code
func (o *PutSpeechandtextanalyticsProgramOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put speechandtextanalytics program o k response has a 4xx status code
func (o *PutSpeechandtextanalyticsProgramOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put speechandtextanalytics program o k response has a 5xx status code
func (o *PutSpeechandtextanalyticsProgramOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put speechandtextanalytics program o k response a status code equal to that given
func (o *PutSpeechandtextanalyticsProgramOK) IsCode(code int) bool {
	return code == 200
}

func (o *PutSpeechandtextanalyticsProgramOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}][%d] putSpeechandtextanalyticsProgramOK  %+v", 200, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramOK) String() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}][%d] putSpeechandtextanalyticsProgramOK  %+v", 200, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramOK) GetPayload() *models.Program {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsProgramOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Program)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsProgramBadRequest creates a PutSpeechandtextanalyticsProgramBadRequest with default headers values
func NewPutSpeechandtextanalyticsProgramBadRequest() *PutSpeechandtextanalyticsProgramBadRequest {
	return &PutSpeechandtextanalyticsProgramBadRequest{}
}

/*
PutSpeechandtextanalyticsProgramBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutSpeechandtextanalyticsProgramBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put speechandtextanalytics program bad request response has a 2xx status code
func (o *PutSpeechandtextanalyticsProgramBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put speechandtextanalytics program bad request response has a 3xx status code
func (o *PutSpeechandtextanalyticsProgramBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put speechandtextanalytics program bad request response has a 4xx status code
func (o *PutSpeechandtextanalyticsProgramBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put speechandtextanalytics program bad request response has a 5xx status code
func (o *PutSpeechandtextanalyticsProgramBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put speechandtextanalytics program bad request response a status code equal to that given
func (o *PutSpeechandtextanalyticsProgramBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PutSpeechandtextanalyticsProgramBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}][%d] putSpeechandtextanalyticsProgramBadRequest  %+v", 400, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}][%d] putSpeechandtextanalyticsProgramBadRequest  %+v", 400, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsProgramBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsProgramUnauthorized creates a PutSpeechandtextanalyticsProgramUnauthorized with default headers values
func NewPutSpeechandtextanalyticsProgramUnauthorized() *PutSpeechandtextanalyticsProgramUnauthorized {
	return &PutSpeechandtextanalyticsProgramUnauthorized{}
}

/*
PutSpeechandtextanalyticsProgramUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PutSpeechandtextanalyticsProgramUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put speechandtextanalytics program unauthorized response has a 2xx status code
func (o *PutSpeechandtextanalyticsProgramUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put speechandtextanalytics program unauthorized response has a 3xx status code
func (o *PutSpeechandtextanalyticsProgramUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put speechandtextanalytics program unauthorized response has a 4xx status code
func (o *PutSpeechandtextanalyticsProgramUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put speechandtextanalytics program unauthorized response has a 5xx status code
func (o *PutSpeechandtextanalyticsProgramUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put speechandtextanalytics program unauthorized response a status code equal to that given
func (o *PutSpeechandtextanalyticsProgramUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PutSpeechandtextanalyticsProgramUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}][%d] putSpeechandtextanalyticsProgramUnauthorized  %+v", 401, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramUnauthorized) String() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}][%d] putSpeechandtextanalyticsProgramUnauthorized  %+v", 401, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsProgramUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsProgramForbidden creates a PutSpeechandtextanalyticsProgramForbidden with default headers values
func NewPutSpeechandtextanalyticsProgramForbidden() *PutSpeechandtextanalyticsProgramForbidden {
	return &PutSpeechandtextanalyticsProgramForbidden{}
}

/*
PutSpeechandtextanalyticsProgramForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PutSpeechandtextanalyticsProgramForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put speechandtextanalytics program forbidden response has a 2xx status code
func (o *PutSpeechandtextanalyticsProgramForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put speechandtextanalytics program forbidden response has a 3xx status code
func (o *PutSpeechandtextanalyticsProgramForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put speechandtextanalytics program forbidden response has a 4xx status code
func (o *PutSpeechandtextanalyticsProgramForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put speechandtextanalytics program forbidden response has a 5xx status code
func (o *PutSpeechandtextanalyticsProgramForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put speechandtextanalytics program forbidden response a status code equal to that given
func (o *PutSpeechandtextanalyticsProgramForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PutSpeechandtextanalyticsProgramForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}][%d] putSpeechandtextanalyticsProgramForbidden  %+v", 403, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramForbidden) String() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}][%d] putSpeechandtextanalyticsProgramForbidden  %+v", 403, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsProgramForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsProgramNotFound creates a PutSpeechandtextanalyticsProgramNotFound with default headers values
func NewPutSpeechandtextanalyticsProgramNotFound() *PutSpeechandtextanalyticsProgramNotFound {
	return &PutSpeechandtextanalyticsProgramNotFound{}
}

/*
PutSpeechandtextanalyticsProgramNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PutSpeechandtextanalyticsProgramNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put speechandtextanalytics program not found response has a 2xx status code
func (o *PutSpeechandtextanalyticsProgramNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put speechandtextanalytics program not found response has a 3xx status code
func (o *PutSpeechandtextanalyticsProgramNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put speechandtextanalytics program not found response has a 4xx status code
func (o *PutSpeechandtextanalyticsProgramNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put speechandtextanalytics program not found response has a 5xx status code
func (o *PutSpeechandtextanalyticsProgramNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put speechandtextanalytics program not found response a status code equal to that given
func (o *PutSpeechandtextanalyticsProgramNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PutSpeechandtextanalyticsProgramNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}][%d] putSpeechandtextanalyticsProgramNotFound  %+v", 404, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramNotFound) String() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}][%d] putSpeechandtextanalyticsProgramNotFound  %+v", 404, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsProgramNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsProgramRequestTimeout creates a PutSpeechandtextanalyticsProgramRequestTimeout with default headers values
func NewPutSpeechandtextanalyticsProgramRequestTimeout() *PutSpeechandtextanalyticsProgramRequestTimeout {
	return &PutSpeechandtextanalyticsProgramRequestTimeout{}
}

/*
PutSpeechandtextanalyticsProgramRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PutSpeechandtextanalyticsProgramRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put speechandtextanalytics program request timeout response has a 2xx status code
func (o *PutSpeechandtextanalyticsProgramRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put speechandtextanalytics program request timeout response has a 3xx status code
func (o *PutSpeechandtextanalyticsProgramRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put speechandtextanalytics program request timeout response has a 4xx status code
func (o *PutSpeechandtextanalyticsProgramRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this put speechandtextanalytics program request timeout response has a 5xx status code
func (o *PutSpeechandtextanalyticsProgramRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this put speechandtextanalytics program request timeout response a status code equal to that given
func (o *PutSpeechandtextanalyticsProgramRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PutSpeechandtextanalyticsProgramRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}][%d] putSpeechandtextanalyticsProgramRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramRequestTimeout) String() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}][%d] putSpeechandtextanalyticsProgramRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsProgramRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsProgramConflict creates a PutSpeechandtextanalyticsProgramConflict with default headers values
func NewPutSpeechandtextanalyticsProgramConflict() *PutSpeechandtextanalyticsProgramConflict {
	return &PutSpeechandtextanalyticsProgramConflict{}
}

/*
PutSpeechandtextanalyticsProgramConflict describes a response with status code 409, with default header values.

Conflict
*/
type PutSpeechandtextanalyticsProgramConflict struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put speechandtextanalytics program conflict response has a 2xx status code
func (o *PutSpeechandtextanalyticsProgramConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put speechandtextanalytics program conflict response has a 3xx status code
func (o *PutSpeechandtextanalyticsProgramConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put speechandtextanalytics program conflict response has a 4xx status code
func (o *PutSpeechandtextanalyticsProgramConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this put speechandtextanalytics program conflict response has a 5xx status code
func (o *PutSpeechandtextanalyticsProgramConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this put speechandtextanalytics program conflict response a status code equal to that given
func (o *PutSpeechandtextanalyticsProgramConflict) IsCode(code int) bool {
	return code == 409
}

func (o *PutSpeechandtextanalyticsProgramConflict) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}][%d] putSpeechandtextanalyticsProgramConflict  %+v", 409, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramConflict) String() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}][%d] putSpeechandtextanalyticsProgramConflict  %+v", 409, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramConflict) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsProgramConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsProgramRequestEntityTooLarge creates a PutSpeechandtextanalyticsProgramRequestEntityTooLarge with default headers values
func NewPutSpeechandtextanalyticsProgramRequestEntityTooLarge() *PutSpeechandtextanalyticsProgramRequestEntityTooLarge {
	return &PutSpeechandtextanalyticsProgramRequestEntityTooLarge{}
}

/*
PutSpeechandtextanalyticsProgramRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PutSpeechandtextanalyticsProgramRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put speechandtextanalytics program request entity too large response has a 2xx status code
func (o *PutSpeechandtextanalyticsProgramRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put speechandtextanalytics program request entity too large response has a 3xx status code
func (o *PutSpeechandtextanalyticsProgramRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put speechandtextanalytics program request entity too large response has a 4xx status code
func (o *PutSpeechandtextanalyticsProgramRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this put speechandtextanalytics program request entity too large response has a 5xx status code
func (o *PutSpeechandtextanalyticsProgramRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this put speechandtextanalytics program request entity too large response a status code equal to that given
func (o *PutSpeechandtextanalyticsProgramRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PutSpeechandtextanalyticsProgramRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}][%d] putSpeechandtextanalyticsProgramRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}][%d] putSpeechandtextanalyticsProgramRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsProgramRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsProgramUnsupportedMediaType creates a PutSpeechandtextanalyticsProgramUnsupportedMediaType with default headers values
func NewPutSpeechandtextanalyticsProgramUnsupportedMediaType() *PutSpeechandtextanalyticsProgramUnsupportedMediaType {
	return &PutSpeechandtextanalyticsProgramUnsupportedMediaType{}
}

/*
PutSpeechandtextanalyticsProgramUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutSpeechandtextanalyticsProgramUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put speechandtextanalytics program unsupported media type response has a 2xx status code
func (o *PutSpeechandtextanalyticsProgramUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put speechandtextanalytics program unsupported media type response has a 3xx status code
func (o *PutSpeechandtextanalyticsProgramUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put speechandtextanalytics program unsupported media type response has a 4xx status code
func (o *PutSpeechandtextanalyticsProgramUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this put speechandtextanalytics program unsupported media type response has a 5xx status code
func (o *PutSpeechandtextanalyticsProgramUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this put speechandtextanalytics program unsupported media type response a status code equal to that given
func (o *PutSpeechandtextanalyticsProgramUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PutSpeechandtextanalyticsProgramUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}][%d] putSpeechandtextanalyticsProgramUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}][%d] putSpeechandtextanalyticsProgramUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsProgramUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsProgramTooManyRequests creates a PutSpeechandtextanalyticsProgramTooManyRequests with default headers values
func NewPutSpeechandtextanalyticsProgramTooManyRequests() *PutSpeechandtextanalyticsProgramTooManyRequests {
	return &PutSpeechandtextanalyticsProgramTooManyRequests{}
}

/*
PutSpeechandtextanalyticsProgramTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PutSpeechandtextanalyticsProgramTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put speechandtextanalytics program too many requests response has a 2xx status code
func (o *PutSpeechandtextanalyticsProgramTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put speechandtextanalytics program too many requests response has a 3xx status code
func (o *PutSpeechandtextanalyticsProgramTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put speechandtextanalytics program too many requests response has a 4xx status code
func (o *PutSpeechandtextanalyticsProgramTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this put speechandtextanalytics program too many requests response has a 5xx status code
func (o *PutSpeechandtextanalyticsProgramTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this put speechandtextanalytics program too many requests response a status code equal to that given
func (o *PutSpeechandtextanalyticsProgramTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PutSpeechandtextanalyticsProgramTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}][%d] putSpeechandtextanalyticsProgramTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}][%d] putSpeechandtextanalyticsProgramTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsProgramTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsProgramInternalServerError creates a PutSpeechandtextanalyticsProgramInternalServerError with default headers values
func NewPutSpeechandtextanalyticsProgramInternalServerError() *PutSpeechandtextanalyticsProgramInternalServerError {
	return &PutSpeechandtextanalyticsProgramInternalServerError{}
}

/*
PutSpeechandtextanalyticsProgramInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutSpeechandtextanalyticsProgramInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put speechandtextanalytics program internal server error response has a 2xx status code
func (o *PutSpeechandtextanalyticsProgramInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put speechandtextanalytics program internal server error response has a 3xx status code
func (o *PutSpeechandtextanalyticsProgramInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put speechandtextanalytics program internal server error response has a 4xx status code
func (o *PutSpeechandtextanalyticsProgramInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this put speechandtextanalytics program internal server error response has a 5xx status code
func (o *PutSpeechandtextanalyticsProgramInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this put speechandtextanalytics program internal server error response a status code equal to that given
func (o *PutSpeechandtextanalyticsProgramInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PutSpeechandtextanalyticsProgramInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}][%d] putSpeechandtextanalyticsProgramInternalServerError  %+v", 500, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}][%d] putSpeechandtextanalyticsProgramInternalServerError  %+v", 500, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsProgramInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsProgramServiceUnavailable creates a PutSpeechandtextanalyticsProgramServiceUnavailable with default headers values
func NewPutSpeechandtextanalyticsProgramServiceUnavailable() *PutSpeechandtextanalyticsProgramServiceUnavailable {
	return &PutSpeechandtextanalyticsProgramServiceUnavailable{}
}

/*
PutSpeechandtextanalyticsProgramServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutSpeechandtextanalyticsProgramServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put speechandtextanalytics program service unavailable response has a 2xx status code
func (o *PutSpeechandtextanalyticsProgramServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put speechandtextanalytics program service unavailable response has a 3xx status code
func (o *PutSpeechandtextanalyticsProgramServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put speechandtextanalytics program service unavailable response has a 4xx status code
func (o *PutSpeechandtextanalyticsProgramServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this put speechandtextanalytics program service unavailable response has a 5xx status code
func (o *PutSpeechandtextanalyticsProgramServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this put speechandtextanalytics program service unavailable response a status code equal to that given
func (o *PutSpeechandtextanalyticsProgramServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PutSpeechandtextanalyticsProgramServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}][%d] putSpeechandtextanalyticsProgramServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramServiceUnavailable) String() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}][%d] putSpeechandtextanalyticsProgramServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsProgramServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsProgramGatewayTimeout creates a PutSpeechandtextanalyticsProgramGatewayTimeout with default headers values
func NewPutSpeechandtextanalyticsProgramGatewayTimeout() *PutSpeechandtextanalyticsProgramGatewayTimeout {
	return &PutSpeechandtextanalyticsProgramGatewayTimeout{}
}

/*
PutSpeechandtextanalyticsProgramGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PutSpeechandtextanalyticsProgramGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put speechandtextanalytics program gateway timeout response has a 2xx status code
func (o *PutSpeechandtextanalyticsProgramGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put speechandtextanalytics program gateway timeout response has a 3xx status code
func (o *PutSpeechandtextanalyticsProgramGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put speechandtextanalytics program gateway timeout response has a 4xx status code
func (o *PutSpeechandtextanalyticsProgramGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this put speechandtextanalytics program gateway timeout response has a 5xx status code
func (o *PutSpeechandtextanalyticsProgramGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this put speechandtextanalytics program gateway timeout response a status code equal to that given
func (o *PutSpeechandtextanalyticsProgramGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PutSpeechandtextanalyticsProgramGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}][%d] putSpeechandtextanalyticsProgramGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramGatewayTimeout) String() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}][%d] putSpeechandtextanalyticsProgramGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsProgramGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

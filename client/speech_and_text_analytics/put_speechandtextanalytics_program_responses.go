// Code generated by go-swagger; DO NOT EDIT.

package speech_and_text_analytics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutSpeechandtextanalyticsProgramReader is a Reader for the PutSpeechandtextanalyticsProgram structure.
type PutSpeechandtextanalyticsProgramReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutSpeechandtextanalyticsProgramReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutSpeechandtextanalyticsProgramOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutSpeechandtextanalyticsProgramBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutSpeechandtextanalyticsProgramUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutSpeechandtextanalyticsProgramForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutSpeechandtextanalyticsProgramNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPutSpeechandtextanalyticsProgramConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutSpeechandtextanalyticsProgramRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutSpeechandtextanalyticsProgramUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutSpeechandtextanalyticsProgramTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutSpeechandtextanalyticsProgramInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutSpeechandtextanalyticsProgramServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutSpeechandtextanalyticsProgramGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutSpeechandtextanalyticsProgramOK creates a PutSpeechandtextanalyticsProgramOK with default headers values
func NewPutSpeechandtextanalyticsProgramOK() *PutSpeechandtextanalyticsProgramOK {
	return &PutSpeechandtextanalyticsProgramOK{}
}

/*PutSpeechandtextanalyticsProgramOK handles this case with default header values.

successful operation
*/
type PutSpeechandtextanalyticsProgramOK struct {
	Payload *models.Program
}

func (o *PutSpeechandtextanalyticsProgramOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}][%d] putSpeechandtextanalyticsProgramOK  %+v", 200, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramOK) GetPayload() *models.Program {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsProgramOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Program)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsProgramBadRequest creates a PutSpeechandtextanalyticsProgramBadRequest with default headers values
func NewPutSpeechandtextanalyticsProgramBadRequest() *PutSpeechandtextanalyticsProgramBadRequest {
	return &PutSpeechandtextanalyticsProgramBadRequest{}
}

/*PutSpeechandtextanalyticsProgramBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutSpeechandtextanalyticsProgramBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PutSpeechandtextanalyticsProgramBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}][%d] putSpeechandtextanalyticsProgramBadRequest  %+v", 400, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsProgramBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsProgramUnauthorized creates a PutSpeechandtextanalyticsProgramUnauthorized with default headers values
func NewPutSpeechandtextanalyticsProgramUnauthorized() *PutSpeechandtextanalyticsProgramUnauthorized {
	return &PutSpeechandtextanalyticsProgramUnauthorized{}
}

/*PutSpeechandtextanalyticsProgramUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PutSpeechandtextanalyticsProgramUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PutSpeechandtextanalyticsProgramUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}][%d] putSpeechandtextanalyticsProgramUnauthorized  %+v", 401, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsProgramUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsProgramForbidden creates a PutSpeechandtextanalyticsProgramForbidden with default headers values
func NewPutSpeechandtextanalyticsProgramForbidden() *PutSpeechandtextanalyticsProgramForbidden {
	return &PutSpeechandtextanalyticsProgramForbidden{}
}

/*PutSpeechandtextanalyticsProgramForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PutSpeechandtextanalyticsProgramForbidden struct {
	Payload *models.ErrorBody
}

func (o *PutSpeechandtextanalyticsProgramForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}][%d] putSpeechandtextanalyticsProgramForbidden  %+v", 403, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsProgramForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsProgramNotFound creates a PutSpeechandtextanalyticsProgramNotFound with default headers values
func NewPutSpeechandtextanalyticsProgramNotFound() *PutSpeechandtextanalyticsProgramNotFound {
	return &PutSpeechandtextanalyticsProgramNotFound{}
}

/*PutSpeechandtextanalyticsProgramNotFound handles this case with default header values.

The requested resource was not found.
*/
type PutSpeechandtextanalyticsProgramNotFound struct {
	Payload *models.ErrorBody
}

func (o *PutSpeechandtextanalyticsProgramNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}][%d] putSpeechandtextanalyticsProgramNotFound  %+v", 404, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsProgramNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsProgramConflict creates a PutSpeechandtextanalyticsProgramConflict with default headers values
func NewPutSpeechandtextanalyticsProgramConflict() *PutSpeechandtextanalyticsProgramConflict {
	return &PutSpeechandtextanalyticsProgramConflict{}
}

/*PutSpeechandtextanalyticsProgramConflict handles this case with default header values.

Conflict
*/
type PutSpeechandtextanalyticsProgramConflict struct {
	Payload *models.ErrorBody
}

func (o *PutSpeechandtextanalyticsProgramConflict) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}][%d] putSpeechandtextanalyticsProgramConflict  %+v", 409, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramConflict) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsProgramConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsProgramRequestEntityTooLarge creates a PutSpeechandtextanalyticsProgramRequestEntityTooLarge with default headers values
func NewPutSpeechandtextanalyticsProgramRequestEntityTooLarge() *PutSpeechandtextanalyticsProgramRequestEntityTooLarge {
	return &PutSpeechandtextanalyticsProgramRequestEntityTooLarge{}
}

/*PutSpeechandtextanalyticsProgramRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type PutSpeechandtextanalyticsProgramRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PutSpeechandtextanalyticsProgramRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}][%d] putSpeechandtextanalyticsProgramRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsProgramRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsProgramUnsupportedMediaType creates a PutSpeechandtextanalyticsProgramUnsupportedMediaType with default headers values
func NewPutSpeechandtextanalyticsProgramUnsupportedMediaType() *PutSpeechandtextanalyticsProgramUnsupportedMediaType {
	return &PutSpeechandtextanalyticsProgramUnsupportedMediaType{}
}

/*PutSpeechandtextanalyticsProgramUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutSpeechandtextanalyticsProgramUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PutSpeechandtextanalyticsProgramUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}][%d] putSpeechandtextanalyticsProgramUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsProgramUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsProgramTooManyRequests creates a PutSpeechandtextanalyticsProgramTooManyRequests with default headers values
func NewPutSpeechandtextanalyticsProgramTooManyRequests() *PutSpeechandtextanalyticsProgramTooManyRequests {
	return &PutSpeechandtextanalyticsProgramTooManyRequests{}
}

/*PutSpeechandtextanalyticsProgramTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum [%s] requests within [%s] seconds
*/
type PutSpeechandtextanalyticsProgramTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PutSpeechandtextanalyticsProgramTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}][%d] putSpeechandtextanalyticsProgramTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsProgramTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsProgramInternalServerError creates a PutSpeechandtextanalyticsProgramInternalServerError with default headers values
func NewPutSpeechandtextanalyticsProgramInternalServerError() *PutSpeechandtextanalyticsProgramInternalServerError {
	return &PutSpeechandtextanalyticsProgramInternalServerError{}
}

/*PutSpeechandtextanalyticsProgramInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutSpeechandtextanalyticsProgramInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PutSpeechandtextanalyticsProgramInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}][%d] putSpeechandtextanalyticsProgramInternalServerError  %+v", 500, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsProgramInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsProgramServiceUnavailable creates a PutSpeechandtextanalyticsProgramServiceUnavailable with default headers values
func NewPutSpeechandtextanalyticsProgramServiceUnavailable() *PutSpeechandtextanalyticsProgramServiceUnavailable {
	return &PutSpeechandtextanalyticsProgramServiceUnavailable{}
}

/*PutSpeechandtextanalyticsProgramServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutSpeechandtextanalyticsProgramServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PutSpeechandtextanalyticsProgramServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}][%d] putSpeechandtextanalyticsProgramServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsProgramServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsProgramGatewayTimeout creates a PutSpeechandtextanalyticsProgramGatewayTimeout with default headers values
func NewPutSpeechandtextanalyticsProgramGatewayTimeout() *PutSpeechandtextanalyticsProgramGatewayTimeout {
	return &PutSpeechandtextanalyticsProgramGatewayTimeout{}
}

/*PutSpeechandtextanalyticsProgramGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PutSpeechandtextanalyticsProgramGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutSpeechandtextanalyticsProgramGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/programs/{programId}][%d] putSpeechandtextanalyticsProgramGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutSpeechandtextanalyticsProgramGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsProgramGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

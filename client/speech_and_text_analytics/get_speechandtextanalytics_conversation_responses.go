// Code generated by go-swagger; DO NOT EDIT.

package speech_and_text_analytics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetSpeechandtextanalyticsConversationReader is a Reader for the GetSpeechandtextanalyticsConversation structure.
type GetSpeechandtextanalyticsConversationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSpeechandtextanalyticsConversationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSpeechandtextanalyticsConversationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetSpeechandtextanalyticsConversationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetSpeechandtextanalyticsConversationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetSpeechandtextanalyticsConversationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSpeechandtextanalyticsConversationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetSpeechandtextanalyticsConversationRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetSpeechandtextanalyticsConversationUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetSpeechandtextanalyticsConversationTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetSpeechandtextanalyticsConversationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetSpeechandtextanalyticsConversationServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetSpeechandtextanalyticsConversationGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetSpeechandtextanalyticsConversationOK creates a GetSpeechandtextanalyticsConversationOK with default headers values
func NewGetSpeechandtextanalyticsConversationOK() *GetSpeechandtextanalyticsConversationOK {
	return &GetSpeechandtextanalyticsConversationOK{}
}

/*GetSpeechandtextanalyticsConversationOK handles this case with default header values.

successful operation
*/
type GetSpeechandtextanalyticsConversationOK struct {
	Payload *models.ConversationMetrics
}

func (o *GetSpeechandtextanalyticsConversationOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/conversations/{conversationId}][%d] getSpeechandtextanalyticsConversationOK  %+v", 200, o.Payload)
}

func (o *GetSpeechandtextanalyticsConversationOK) GetPayload() *models.ConversationMetrics {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsConversationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ConversationMetrics)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsConversationBadRequest creates a GetSpeechandtextanalyticsConversationBadRequest with default headers values
func NewGetSpeechandtextanalyticsConversationBadRequest() *GetSpeechandtextanalyticsConversationBadRequest {
	return &GetSpeechandtextanalyticsConversationBadRequest{}
}

/*GetSpeechandtextanalyticsConversationBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetSpeechandtextanalyticsConversationBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetSpeechandtextanalyticsConversationBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/conversations/{conversationId}][%d] getSpeechandtextanalyticsConversationBadRequest  %+v", 400, o.Payload)
}

func (o *GetSpeechandtextanalyticsConversationBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsConversationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsConversationUnauthorized creates a GetSpeechandtextanalyticsConversationUnauthorized with default headers values
func NewGetSpeechandtextanalyticsConversationUnauthorized() *GetSpeechandtextanalyticsConversationUnauthorized {
	return &GetSpeechandtextanalyticsConversationUnauthorized{}
}

/*GetSpeechandtextanalyticsConversationUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetSpeechandtextanalyticsConversationUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetSpeechandtextanalyticsConversationUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/conversations/{conversationId}][%d] getSpeechandtextanalyticsConversationUnauthorized  %+v", 401, o.Payload)
}

func (o *GetSpeechandtextanalyticsConversationUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsConversationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsConversationForbidden creates a GetSpeechandtextanalyticsConversationForbidden with default headers values
func NewGetSpeechandtextanalyticsConversationForbidden() *GetSpeechandtextanalyticsConversationForbidden {
	return &GetSpeechandtextanalyticsConversationForbidden{}
}

/*GetSpeechandtextanalyticsConversationForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetSpeechandtextanalyticsConversationForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetSpeechandtextanalyticsConversationForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/conversations/{conversationId}][%d] getSpeechandtextanalyticsConversationForbidden  %+v", 403, o.Payload)
}

func (o *GetSpeechandtextanalyticsConversationForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsConversationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsConversationNotFound creates a GetSpeechandtextanalyticsConversationNotFound with default headers values
func NewGetSpeechandtextanalyticsConversationNotFound() *GetSpeechandtextanalyticsConversationNotFound {
	return &GetSpeechandtextanalyticsConversationNotFound{}
}

/*GetSpeechandtextanalyticsConversationNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetSpeechandtextanalyticsConversationNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetSpeechandtextanalyticsConversationNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/conversations/{conversationId}][%d] getSpeechandtextanalyticsConversationNotFound  %+v", 404, o.Payload)
}

func (o *GetSpeechandtextanalyticsConversationNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsConversationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsConversationRequestEntityTooLarge creates a GetSpeechandtextanalyticsConversationRequestEntityTooLarge with default headers values
func NewGetSpeechandtextanalyticsConversationRequestEntityTooLarge() *GetSpeechandtextanalyticsConversationRequestEntityTooLarge {
	return &GetSpeechandtextanalyticsConversationRequestEntityTooLarge{}
}

/*GetSpeechandtextanalyticsConversationRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type GetSpeechandtextanalyticsConversationRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetSpeechandtextanalyticsConversationRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/conversations/{conversationId}][%d] getSpeechandtextanalyticsConversationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetSpeechandtextanalyticsConversationRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsConversationRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsConversationUnsupportedMediaType creates a GetSpeechandtextanalyticsConversationUnsupportedMediaType with default headers values
func NewGetSpeechandtextanalyticsConversationUnsupportedMediaType() *GetSpeechandtextanalyticsConversationUnsupportedMediaType {
	return &GetSpeechandtextanalyticsConversationUnsupportedMediaType{}
}

/*GetSpeechandtextanalyticsConversationUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetSpeechandtextanalyticsConversationUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetSpeechandtextanalyticsConversationUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/conversations/{conversationId}][%d] getSpeechandtextanalyticsConversationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetSpeechandtextanalyticsConversationUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsConversationUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsConversationTooManyRequests creates a GetSpeechandtextanalyticsConversationTooManyRequests with default headers values
func NewGetSpeechandtextanalyticsConversationTooManyRequests() *GetSpeechandtextanalyticsConversationTooManyRequests {
	return &GetSpeechandtextanalyticsConversationTooManyRequests{}
}

/*GetSpeechandtextanalyticsConversationTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum [%s] requests within [%s] seconds
*/
type GetSpeechandtextanalyticsConversationTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetSpeechandtextanalyticsConversationTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/conversations/{conversationId}][%d] getSpeechandtextanalyticsConversationTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetSpeechandtextanalyticsConversationTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsConversationTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsConversationInternalServerError creates a GetSpeechandtextanalyticsConversationInternalServerError with default headers values
func NewGetSpeechandtextanalyticsConversationInternalServerError() *GetSpeechandtextanalyticsConversationInternalServerError {
	return &GetSpeechandtextanalyticsConversationInternalServerError{}
}

/*GetSpeechandtextanalyticsConversationInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetSpeechandtextanalyticsConversationInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetSpeechandtextanalyticsConversationInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/conversations/{conversationId}][%d] getSpeechandtextanalyticsConversationInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSpeechandtextanalyticsConversationInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsConversationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsConversationServiceUnavailable creates a GetSpeechandtextanalyticsConversationServiceUnavailable with default headers values
func NewGetSpeechandtextanalyticsConversationServiceUnavailable() *GetSpeechandtextanalyticsConversationServiceUnavailable {
	return &GetSpeechandtextanalyticsConversationServiceUnavailable{}
}

/*GetSpeechandtextanalyticsConversationServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetSpeechandtextanalyticsConversationServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetSpeechandtextanalyticsConversationServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/conversations/{conversationId}][%d] getSpeechandtextanalyticsConversationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetSpeechandtextanalyticsConversationServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsConversationServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsConversationGatewayTimeout creates a GetSpeechandtextanalyticsConversationGatewayTimeout with default headers values
func NewGetSpeechandtextanalyticsConversationGatewayTimeout() *GetSpeechandtextanalyticsConversationGatewayTimeout {
	return &GetSpeechandtextanalyticsConversationGatewayTimeout{}
}

/*GetSpeechandtextanalyticsConversationGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetSpeechandtextanalyticsConversationGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetSpeechandtextanalyticsConversationGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/conversations/{conversationId}][%d] getSpeechandtextanalyticsConversationGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetSpeechandtextanalyticsConversationGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsConversationGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

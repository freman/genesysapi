// Code generated by go-swagger; DO NOT EDIT.

package speech_and_text_analytics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// DeleteSpeechandtextanalyticsTopicReader is a Reader for the DeleteSpeechandtextanalyticsTopic structure.
type DeleteSpeechandtextanalyticsTopicReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteSpeechandtextanalyticsTopicReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteSpeechandtextanalyticsTopicNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteSpeechandtextanalyticsTopicBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteSpeechandtextanalyticsTopicUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteSpeechandtextanalyticsTopicForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteSpeechandtextanalyticsTopicNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewDeleteSpeechandtextanalyticsTopicRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewDeleteSpeechandtextanalyticsTopicRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewDeleteSpeechandtextanalyticsTopicUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteSpeechandtextanalyticsTopicTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteSpeechandtextanalyticsTopicInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewDeleteSpeechandtextanalyticsTopicServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewDeleteSpeechandtextanalyticsTopicGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteSpeechandtextanalyticsTopicNoContent creates a DeleteSpeechandtextanalyticsTopicNoContent with default headers values
func NewDeleteSpeechandtextanalyticsTopicNoContent() *DeleteSpeechandtextanalyticsTopicNoContent {
	return &DeleteSpeechandtextanalyticsTopicNoContent{}
}

/*DeleteSpeechandtextanalyticsTopicNoContent handles this case with default header values.

The topic was deleted successfully
*/
type DeleteSpeechandtextanalyticsTopicNoContent struct {
}

func (o *DeleteSpeechandtextanalyticsTopicNoContent) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/topics/{topicId}][%d] deleteSpeechandtextanalyticsTopicNoContent ", 204)
}

func (o *DeleteSpeechandtextanalyticsTopicNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteSpeechandtextanalyticsTopicBadRequest creates a DeleteSpeechandtextanalyticsTopicBadRequest with default headers values
func NewDeleteSpeechandtextanalyticsTopicBadRequest() *DeleteSpeechandtextanalyticsTopicBadRequest {
	return &DeleteSpeechandtextanalyticsTopicBadRequest{}
}

/*DeleteSpeechandtextanalyticsTopicBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type DeleteSpeechandtextanalyticsTopicBadRequest struct {
	Payload *models.ErrorBody
}

func (o *DeleteSpeechandtextanalyticsTopicBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/topics/{topicId}][%d] deleteSpeechandtextanalyticsTopicBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsTopicBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteSpeechandtextanalyticsTopicBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSpeechandtextanalyticsTopicUnauthorized creates a DeleteSpeechandtextanalyticsTopicUnauthorized with default headers values
func NewDeleteSpeechandtextanalyticsTopicUnauthorized() *DeleteSpeechandtextanalyticsTopicUnauthorized {
	return &DeleteSpeechandtextanalyticsTopicUnauthorized{}
}

/*DeleteSpeechandtextanalyticsTopicUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type DeleteSpeechandtextanalyticsTopicUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *DeleteSpeechandtextanalyticsTopicUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/topics/{topicId}][%d] deleteSpeechandtextanalyticsTopicUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsTopicUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteSpeechandtextanalyticsTopicUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSpeechandtextanalyticsTopicForbidden creates a DeleteSpeechandtextanalyticsTopicForbidden with default headers values
func NewDeleteSpeechandtextanalyticsTopicForbidden() *DeleteSpeechandtextanalyticsTopicForbidden {
	return &DeleteSpeechandtextanalyticsTopicForbidden{}
}

/*DeleteSpeechandtextanalyticsTopicForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type DeleteSpeechandtextanalyticsTopicForbidden struct {
	Payload *models.ErrorBody
}

func (o *DeleteSpeechandtextanalyticsTopicForbidden) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/topics/{topicId}][%d] deleteSpeechandtextanalyticsTopicForbidden  %+v", 403, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsTopicForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteSpeechandtextanalyticsTopicForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSpeechandtextanalyticsTopicNotFound creates a DeleteSpeechandtextanalyticsTopicNotFound with default headers values
func NewDeleteSpeechandtextanalyticsTopicNotFound() *DeleteSpeechandtextanalyticsTopicNotFound {
	return &DeleteSpeechandtextanalyticsTopicNotFound{}
}

/*DeleteSpeechandtextanalyticsTopicNotFound handles this case with default header values.

The requested resource was not found.
*/
type DeleteSpeechandtextanalyticsTopicNotFound struct {
	Payload *models.ErrorBody
}

func (o *DeleteSpeechandtextanalyticsTopicNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/topics/{topicId}][%d] deleteSpeechandtextanalyticsTopicNotFound  %+v", 404, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsTopicNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteSpeechandtextanalyticsTopicNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSpeechandtextanalyticsTopicRequestTimeout creates a DeleteSpeechandtextanalyticsTopicRequestTimeout with default headers values
func NewDeleteSpeechandtextanalyticsTopicRequestTimeout() *DeleteSpeechandtextanalyticsTopicRequestTimeout {
	return &DeleteSpeechandtextanalyticsTopicRequestTimeout{}
}

/*DeleteSpeechandtextanalyticsTopicRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type DeleteSpeechandtextanalyticsTopicRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *DeleteSpeechandtextanalyticsTopicRequestTimeout) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/topics/{topicId}][%d] deleteSpeechandtextanalyticsTopicRequestTimeout  %+v", 408, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsTopicRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteSpeechandtextanalyticsTopicRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSpeechandtextanalyticsTopicRequestEntityTooLarge creates a DeleteSpeechandtextanalyticsTopicRequestEntityTooLarge with default headers values
func NewDeleteSpeechandtextanalyticsTopicRequestEntityTooLarge() *DeleteSpeechandtextanalyticsTopicRequestEntityTooLarge {
	return &DeleteSpeechandtextanalyticsTopicRequestEntityTooLarge{}
}

/*DeleteSpeechandtextanalyticsTopicRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type DeleteSpeechandtextanalyticsTopicRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *DeleteSpeechandtextanalyticsTopicRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/topics/{topicId}][%d] deleteSpeechandtextanalyticsTopicRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsTopicRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteSpeechandtextanalyticsTopicRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSpeechandtextanalyticsTopicUnsupportedMediaType creates a DeleteSpeechandtextanalyticsTopicUnsupportedMediaType with default headers values
func NewDeleteSpeechandtextanalyticsTopicUnsupportedMediaType() *DeleteSpeechandtextanalyticsTopicUnsupportedMediaType {
	return &DeleteSpeechandtextanalyticsTopicUnsupportedMediaType{}
}

/*DeleteSpeechandtextanalyticsTopicUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type DeleteSpeechandtextanalyticsTopicUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *DeleteSpeechandtextanalyticsTopicUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/topics/{topicId}][%d] deleteSpeechandtextanalyticsTopicUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsTopicUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteSpeechandtextanalyticsTopicUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSpeechandtextanalyticsTopicTooManyRequests creates a DeleteSpeechandtextanalyticsTopicTooManyRequests with default headers values
func NewDeleteSpeechandtextanalyticsTopicTooManyRequests() *DeleteSpeechandtextanalyticsTopicTooManyRequests {
	return &DeleteSpeechandtextanalyticsTopicTooManyRequests{}
}

/*DeleteSpeechandtextanalyticsTopicTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type DeleteSpeechandtextanalyticsTopicTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *DeleteSpeechandtextanalyticsTopicTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/topics/{topicId}][%d] deleteSpeechandtextanalyticsTopicTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsTopicTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteSpeechandtextanalyticsTopicTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSpeechandtextanalyticsTopicInternalServerError creates a DeleteSpeechandtextanalyticsTopicInternalServerError with default headers values
func NewDeleteSpeechandtextanalyticsTopicInternalServerError() *DeleteSpeechandtextanalyticsTopicInternalServerError {
	return &DeleteSpeechandtextanalyticsTopicInternalServerError{}
}

/*DeleteSpeechandtextanalyticsTopicInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type DeleteSpeechandtextanalyticsTopicInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *DeleteSpeechandtextanalyticsTopicInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/topics/{topicId}][%d] deleteSpeechandtextanalyticsTopicInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsTopicInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteSpeechandtextanalyticsTopicInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSpeechandtextanalyticsTopicServiceUnavailable creates a DeleteSpeechandtextanalyticsTopicServiceUnavailable with default headers values
func NewDeleteSpeechandtextanalyticsTopicServiceUnavailable() *DeleteSpeechandtextanalyticsTopicServiceUnavailable {
	return &DeleteSpeechandtextanalyticsTopicServiceUnavailable{}
}

/*DeleteSpeechandtextanalyticsTopicServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type DeleteSpeechandtextanalyticsTopicServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *DeleteSpeechandtextanalyticsTopicServiceUnavailable) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/topics/{topicId}][%d] deleteSpeechandtextanalyticsTopicServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsTopicServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteSpeechandtextanalyticsTopicServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSpeechandtextanalyticsTopicGatewayTimeout creates a DeleteSpeechandtextanalyticsTopicGatewayTimeout with default headers values
func NewDeleteSpeechandtextanalyticsTopicGatewayTimeout() *DeleteSpeechandtextanalyticsTopicGatewayTimeout {
	return &DeleteSpeechandtextanalyticsTopicGatewayTimeout{}
}

/*DeleteSpeechandtextanalyticsTopicGatewayTimeout handles this case with default header values.

The request timed out.
*/
type DeleteSpeechandtextanalyticsTopicGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *DeleteSpeechandtextanalyticsTopicGatewayTimeout) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/topics/{topicId}][%d] deleteSpeechandtextanalyticsTopicGatewayTimeout  %+v", 504, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsTopicGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteSpeechandtextanalyticsTopicGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

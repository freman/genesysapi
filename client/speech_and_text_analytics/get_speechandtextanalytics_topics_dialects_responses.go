// Code generated by go-swagger; DO NOT EDIT.

package speech_and_text_analytics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetSpeechandtextanalyticsTopicsDialectsReader is a Reader for the GetSpeechandtextanalyticsTopicsDialects structure.
type GetSpeechandtextanalyticsTopicsDialectsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSpeechandtextanalyticsTopicsDialectsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSpeechandtextanalyticsTopicsDialectsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetSpeechandtextanalyticsTopicsDialectsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetSpeechandtextanalyticsTopicsDialectsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetSpeechandtextanalyticsTopicsDialectsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSpeechandtextanalyticsTopicsDialectsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetSpeechandtextanalyticsTopicsDialectsRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetSpeechandtextanalyticsTopicsDialectsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetSpeechandtextanalyticsTopicsDialectsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetSpeechandtextanalyticsTopicsDialectsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetSpeechandtextanalyticsTopicsDialectsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetSpeechandtextanalyticsTopicsDialectsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetSpeechandtextanalyticsTopicsDialectsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetSpeechandtextanalyticsTopicsDialectsOK creates a GetSpeechandtextanalyticsTopicsDialectsOK with default headers values
func NewGetSpeechandtextanalyticsTopicsDialectsOK() *GetSpeechandtextanalyticsTopicsDialectsOK {
	return &GetSpeechandtextanalyticsTopicsDialectsOK{}
}

/*
GetSpeechandtextanalyticsTopicsDialectsOK describes a response with status code 200, with default header values.

successful operation
*/
type GetSpeechandtextanalyticsTopicsDialectsOK struct {
	Payload *models.EntityListing
}

// IsSuccess returns true when this get speechandtextanalytics topics dialects o k response has a 2xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get speechandtextanalytics topics dialects o k response has a 3xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get speechandtextanalytics topics dialects o k response has a 4xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get speechandtextanalytics topics dialects o k response has a 5xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get speechandtextanalytics topics dialects o k response a status code equal to that given
func (o *GetSpeechandtextanalyticsTopicsDialectsOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetSpeechandtextanalyticsTopicsDialectsOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics/dialects][%d] getSpeechandtextanalyticsTopicsDialectsOK  %+v", 200, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsDialectsOK) String() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics/dialects][%d] getSpeechandtextanalyticsTopicsDialectsOK  %+v", 200, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsDialectsOK) GetPayload() *models.EntityListing {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsTopicsDialectsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EntityListing)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsTopicsDialectsBadRequest creates a GetSpeechandtextanalyticsTopicsDialectsBadRequest with default headers values
func NewGetSpeechandtextanalyticsTopicsDialectsBadRequest() *GetSpeechandtextanalyticsTopicsDialectsBadRequest {
	return &GetSpeechandtextanalyticsTopicsDialectsBadRequest{}
}

/*
GetSpeechandtextanalyticsTopicsDialectsBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetSpeechandtextanalyticsTopicsDialectsBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get speechandtextanalytics topics dialects bad request response has a 2xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get speechandtextanalytics topics dialects bad request response has a 3xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get speechandtextanalytics topics dialects bad request response has a 4xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get speechandtextanalytics topics dialects bad request response has a 5xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get speechandtextanalytics topics dialects bad request response a status code equal to that given
func (o *GetSpeechandtextanalyticsTopicsDialectsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetSpeechandtextanalyticsTopicsDialectsBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics/dialects][%d] getSpeechandtextanalyticsTopicsDialectsBadRequest  %+v", 400, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsDialectsBadRequest) String() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics/dialects][%d] getSpeechandtextanalyticsTopicsDialectsBadRequest  %+v", 400, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsDialectsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsTopicsDialectsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsTopicsDialectsUnauthorized creates a GetSpeechandtextanalyticsTopicsDialectsUnauthorized with default headers values
func NewGetSpeechandtextanalyticsTopicsDialectsUnauthorized() *GetSpeechandtextanalyticsTopicsDialectsUnauthorized {
	return &GetSpeechandtextanalyticsTopicsDialectsUnauthorized{}
}

/*
GetSpeechandtextanalyticsTopicsDialectsUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type GetSpeechandtextanalyticsTopicsDialectsUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get speechandtextanalytics topics dialects unauthorized response has a 2xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get speechandtextanalytics topics dialects unauthorized response has a 3xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get speechandtextanalytics topics dialects unauthorized response has a 4xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get speechandtextanalytics topics dialects unauthorized response has a 5xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get speechandtextanalytics topics dialects unauthorized response a status code equal to that given
func (o *GetSpeechandtextanalyticsTopicsDialectsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetSpeechandtextanalyticsTopicsDialectsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics/dialects][%d] getSpeechandtextanalyticsTopicsDialectsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsDialectsUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics/dialects][%d] getSpeechandtextanalyticsTopicsDialectsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsDialectsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsTopicsDialectsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsTopicsDialectsForbidden creates a GetSpeechandtextanalyticsTopicsDialectsForbidden with default headers values
func NewGetSpeechandtextanalyticsTopicsDialectsForbidden() *GetSpeechandtextanalyticsTopicsDialectsForbidden {
	return &GetSpeechandtextanalyticsTopicsDialectsForbidden{}
}

/*
GetSpeechandtextanalyticsTopicsDialectsForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type GetSpeechandtextanalyticsTopicsDialectsForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get speechandtextanalytics topics dialects forbidden response has a 2xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get speechandtextanalytics topics dialects forbidden response has a 3xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get speechandtextanalytics topics dialects forbidden response has a 4xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get speechandtextanalytics topics dialects forbidden response has a 5xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get speechandtextanalytics topics dialects forbidden response a status code equal to that given
func (o *GetSpeechandtextanalyticsTopicsDialectsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetSpeechandtextanalyticsTopicsDialectsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics/dialects][%d] getSpeechandtextanalyticsTopicsDialectsForbidden  %+v", 403, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsDialectsForbidden) String() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics/dialects][%d] getSpeechandtextanalyticsTopicsDialectsForbidden  %+v", 403, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsDialectsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsTopicsDialectsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsTopicsDialectsNotFound creates a GetSpeechandtextanalyticsTopicsDialectsNotFound with default headers values
func NewGetSpeechandtextanalyticsTopicsDialectsNotFound() *GetSpeechandtextanalyticsTopicsDialectsNotFound {
	return &GetSpeechandtextanalyticsTopicsDialectsNotFound{}
}

/*
GetSpeechandtextanalyticsTopicsDialectsNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type GetSpeechandtextanalyticsTopicsDialectsNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get speechandtextanalytics topics dialects not found response has a 2xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get speechandtextanalytics topics dialects not found response has a 3xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get speechandtextanalytics topics dialects not found response has a 4xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get speechandtextanalytics topics dialects not found response has a 5xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get speechandtextanalytics topics dialects not found response a status code equal to that given
func (o *GetSpeechandtextanalyticsTopicsDialectsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetSpeechandtextanalyticsTopicsDialectsNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics/dialects][%d] getSpeechandtextanalyticsTopicsDialectsNotFound  %+v", 404, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsDialectsNotFound) String() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics/dialects][%d] getSpeechandtextanalyticsTopicsDialectsNotFound  %+v", 404, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsDialectsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsTopicsDialectsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsTopicsDialectsRequestTimeout creates a GetSpeechandtextanalyticsTopicsDialectsRequestTimeout with default headers values
func NewGetSpeechandtextanalyticsTopicsDialectsRequestTimeout() *GetSpeechandtextanalyticsTopicsDialectsRequestTimeout {
	return &GetSpeechandtextanalyticsTopicsDialectsRequestTimeout{}
}

/*
GetSpeechandtextanalyticsTopicsDialectsRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetSpeechandtextanalyticsTopicsDialectsRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get speechandtextanalytics topics dialects request timeout response has a 2xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get speechandtextanalytics topics dialects request timeout response has a 3xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get speechandtextanalytics topics dialects request timeout response has a 4xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get speechandtextanalytics topics dialects request timeout response has a 5xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get speechandtextanalytics topics dialects request timeout response a status code equal to that given
func (o *GetSpeechandtextanalyticsTopicsDialectsRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *GetSpeechandtextanalyticsTopicsDialectsRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics/dialects][%d] getSpeechandtextanalyticsTopicsDialectsRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsDialectsRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics/dialects][%d] getSpeechandtextanalyticsTopicsDialectsRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsDialectsRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsTopicsDialectsRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsTopicsDialectsRequestEntityTooLarge creates a GetSpeechandtextanalyticsTopicsDialectsRequestEntityTooLarge with default headers values
func NewGetSpeechandtextanalyticsTopicsDialectsRequestEntityTooLarge() *GetSpeechandtextanalyticsTopicsDialectsRequestEntityTooLarge {
	return &GetSpeechandtextanalyticsTopicsDialectsRequestEntityTooLarge{}
}

/*
GetSpeechandtextanalyticsTopicsDialectsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type GetSpeechandtextanalyticsTopicsDialectsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get speechandtextanalytics topics dialects request entity too large response has a 2xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get speechandtextanalytics topics dialects request entity too large response has a 3xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get speechandtextanalytics topics dialects request entity too large response has a 4xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get speechandtextanalytics topics dialects request entity too large response has a 5xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get speechandtextanalytics topics dialects request entity too large response a status code equal to that given
func (o *GetSpeechandtextanalyticsTopicsDialectsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetSpeechandtextanalyticsTopicsDialectsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics/dialects][%d] getSpeechandtextanalyticsTopicsDialectsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsDialectsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics/dialects][%d] getSpeechandtextanalyticsTopicsDialectsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsDialectsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsTopicsDialectsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsTopicsDialectsUnsupportedMediaType creates a GetSpeechandtextanalyticsTopicsDialectsUnsupportedMediaType with default headers values
func NewGetSpeechandtextanalyticsTopicsDialectsUnsupportedMediaType() *GetSpeechandtextanalyticsTopicsDialectsUnsupportedMediaType {
	return &GetSpeechandtextanalyticsTopicsDialectsUnsupportedMediaType{}
}

/*
GetSpeechandtextanalyticsTopicsDialectsUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetSpeechandtextanalyticsTopicsDialectsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get speechandtextanalytics topics dialects unsupported media type response has a 2xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get speechandtextanalytics topics dialects unsupported media type response has a 3xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get speechandtextanalytics topics dialects unsupported media type response has a 4xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get speechandtextanalytics topics dialects unsupported media type response has a 5xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get speechandtextanalytics topics dialects unsupported media type response a status code equal to that given
func (o *GetSpeechandtextanalyticsTopicsDialectsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetSpeechandtextanalyticsTopicsDialectsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics/dialects][%d] getSpeechandtextanalyticsTopicsDialectsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsDialectsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics/dialects][%d] getSpeechandtextanalyticsTopicsDialectsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsDialectsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsTopicsDialectsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsTopicsDialectsTooManyRequests creates a GetSpeechandtextanalyticsTopicsDialectsTooManyRequests with default headers values
func NewGetSpeechandtextanalyticsTopicsDialectsTooManyRequests() *GetSpeechandtextanalyticsTopicsDialectsTooManyRequests {
	return &GetSpeechandtextanalyticsTopicsDialectsTooManyRequests{}
}

/*
GetSpeechandtextanalyticsTopicsDialectsTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetSpeechandtextanalyticsTopicsDialectsTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get speechandtextanalytics topics dialects too many requests response has a 2xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get speechandtextanalytics topics dialects too many requests response has a 3xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get speechandtextanalytics topics dialects too many requests response has a 4xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get speechandtextanalytics topics dialects too many requests response has a 5xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get speechandtextanalytics topics dialects too many requests response a status code equal to that given
func (o *GetSpeechandtextanalyticsTopicsDialectsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetSpeechandtextanalyticsTopicsDialectsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics/dialects][%d] getSpeechandtextanalyticsTopicsDialectsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsDialectsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics/dialects][%d] getSpeechandtextanalyticsTopicsDialectsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsDialectsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsTopicsDialectsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsTopicsDialectsInternalServerError creates a GetSpeechandtextanalyticsTopicsDialectsInternalServerError with default headers values
func NewGetSpeechandtextanalyticsTopicsDialectsInternalServerError() *GetSpeechandtextanalyticsTopicsDialectsInternalServerError {
	return &GetSpeechandtextanalyticsTopicsDialectsInternalServerError{}
}

/*
GetSpeechandtextanalyticsTopicsDialectsInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetSpeechandtextanalyticsTopicsDialectsInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get speechandtextanalytics topics dialects internal server error response has a 2xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get speechandtextanalytics topics dialects internal server error response has a 3xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get speechandtextanalytics topics dialects internal server error response has a 4xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get speechandtextanalytics topics dialects internal server error response has a 5xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get speechandtextanalytics topics dialects internal server error response a status code equal to that given
func (o *GetSpeechandtextanalyticsTopicsDialectsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetSpeechandtextanalyticsTopicsDialectsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics/dialects][%d] getSpeechandtextanalyticsTopicsDialectsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsDialectsInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics/dialects][%d] getSpeechandtextanalyticsTopicsDialectsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsDialectsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsTopicsDialectsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsTopicsDialectsServiceUnavailable creates a GetSpeechandtextanalyticsTopicsDialectsServiceUnavailable with default headers values
func NewGetSpeechandtextanalyticsTopicsDialectsServiceUnavailable() *GetSpeechandtextanalyticsTopicsDialectsServiceUnavailable {
	return &GetSpeechandtextanalyticsTopicsDialectsServiceUnavailable{}
}

/*
GetSpeechandtextanalyticsTopicsDialectsServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetSpeechandtextanalyticsTopicsDialectsServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get speechandtextanalytics topics dialects service unavailable response has a 2xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get speechandtextanalytics topics dialects service unavailable response has a 3xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get speechandtextanalytics topics dialects service unavailable response has a 4xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get speechandtextanalytics topics dialects service unavailable response has a 5xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get speechandtextanalytics topics dialects service unavailable response a status code equal to that given
func (o *GetSpeechandtextanalyticsTopicsDialectsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetSpeechandtextanalyticsTopicsDialectsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics/dialects][%d] getSpeechandtextanalyticsTopicsDialectsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsDialectsServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics/dialects][%d] getSpeechandtextanalyticsTopicsDialectsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsDialectsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsTopicsDialectsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsTopicsDialectsGatewayTimeout creates a GetSpeechandtextanalyticsTopicsDialectsGatewayTimeout with default headers values
func NewGetSpeechandtextanalyticsTopicsDialectsGatewayTimeout() *GetSpeechandtextanalyticsTopicsDialectsGatewayTimeout {
	return &GetSpeechandtextanalyticsTopicsDialectsGatewayTimeout{}
}

/*
GetSpeechandtextanalyticsTopicsDialectsGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type GetSpeechandtextanalyticsTopicsDialectsGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this get speechandtextanalytics topics dialects gateway timeout response has a 2xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get speechandtextanalytics topics dialects gateway timeout response has a 3xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get speechandtextanalytics topics dialects gateway timeout response has a 4xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get speechandtextanalytics topics dialects gateway timeout response has a 5xx status code
func (o *GetSpeechandtextanalyticsTopicsDialectsGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get speechandtextanalytics topics dialects gateway timeout response a status code equal to that given
func (o *GetSpeechandtextanalyticsTopicsDialectsGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetSpeechandtextanalyticsTopicsDialectsGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics/dialects][%d] getSpeechandtextanalyticsTopicsDialectsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsDialectsGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/topics/dialects][%d] getSpeechandtextanalyticsTopicsDialectsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetSpeechandtextanalyticsTopicsDialectsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsTopicsDialectsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

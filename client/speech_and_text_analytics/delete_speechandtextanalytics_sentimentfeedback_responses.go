// Code generated by go-swagger; DO NOT EDIT.

package speech_and_text_analytics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// DeleteSpeechandtextanalyticsSentimentfeedbackReader is a Reader for the DeleteSpeechandtextanalyticsSentimentfeedback structure.
type DeleteSpeechandtextanalyticsSentimentfeedbackReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteSpeechandtextanalyticsSentimentfeedbackNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteSpeechandtextanalyticsSentimentfeedbackBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteSpeechandtextanalyticsSentimentfeedbackUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteSpeechandtextanalyticsSentimentfeedbackForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteSpeechandtextanalyticsSentimentfeedbackNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewDeleteSpeechandtextanalyticsSentimentfeedbackRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewDeleteSpeechandtextanalyticsSentimentfeedbackRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewDeleteSpeechandtextanalyticsSentimentfeedbackUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteSpeechandtextanalyticsSentimentfeedbackTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteSpeechandtextanalyticsSentimentfeedbackInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewDeleteSpeechandtextanalyticsSentimentfeedbackServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewDeleteSpeechandtextanalyticsSentimentfeedbackGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteSpeechandtextanalyticsSentimentfeedbackNoContent creates a DeleteSpeechandtextanalyticsSentimentfeedbackNoContent with default headers values
func NewDeleteSpeechandtextanalyticsSentimentfeedbackNoContent() *DeleteSpeechandtextanalyticsSentimentfeedbackNoContent {
	return &DeleteSpeechandtextanalyticsSentimentfeedbackNoContent{}
}

/*
DeleteSpeechandtextanalyticsSentimentfeedbackNoContent describes a response with status code 204, with default header values.

No Content
*/
type DeleteSpeechandtextanalyticsSentimentfeedbackNoContent struct {
}

// IsSuccess returns true when this delete speechandtextanalytics sentimentfeedback no content response has a 2xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete speechandtextanalytics sentimentfeedback no content response has a 3xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete speechandtextanalytics sentimentfeedback no content response has a 4xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete speechandtextanalytics sentimentfeedback no content response has a 5xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete speechandtextanalytics sentimentfeedback no content response a status code equal to that given
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackNoContent) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback][%d] deleteSpeechandtextanalyticsSentimentfeedbackNoContent ", 204)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackNoContent) String() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback][%d] deleteSpeechandtextanalyticsSentimentfeedbackNoContent ", 204)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteSpeechandtextanalyticsSentimentfeedbackBadRequest creates a DeleteSpeechandtextanalyticsSentimentfeedbackBadRequest with default headers values
func NewDeleteSpeechandtextanalyticsSentimentfeedbackBadRequest() *DeleteSpeechandtextanalyticsSentimentfeedbackBadRequest {
	return &DeleteSpeechandtextanalyticsSentimentfeedbackBadRequest{}
}

/*
DeleteSpeechandtextanalyticsSentimentfeedbackBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type DeleteSpeechandtextanalyticsSentimentfeedbackBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete speechandtextanalytics sentimentfeedback bad request response has a 2xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete speechandtextanalytics sentimentfeedback bad request response has a 3xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete speechandtextanalytics sentimentfeedback bad request response has a 4xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete speechandtextanalytics sentimentfeedback bad request response has a 5xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete speechandtextanalytics sentimentfeedback bad request response a status code equal to that given
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback][%d] deleteSpeechandtextanalyticsSentimentfeedbackBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackBadRequest) String() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback][%d] deleteSpeechandtextanalyticsSentimentfeedbackBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSpeechandtextanalyticsSentimentfeedbackUnauthorized creates a DeleteSpeechandtextanalyticsSentimentfeedbackUnauthorized with default headers values
func NewDeleteSpeechandtextanalyticsSentimentfeedbackUnauthorized() *DeleteSpeechandtextanalyticsSentimentfeedbackUnauthorized {
	return &DeleteSpeechandtextanalyticsSentimentfeedbackUnauthorized{}
}

/*
DeleteSpeechandtextanalyticsSentimentfeedbackUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type DeleteSpeechandtextanalyticsSentimentfeedbackUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete speechandtextanalytics sentimentfeedback unauthorized response has a 2xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete speechandtextanalytics sentimentfeedback unauthorized response has a 3xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete speechandtextanalytics sentimentfeedback unauthorized response has a 4xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete speechandtextanalytics sentimentfeedback unauthorized response has a 5xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete speechandtextanalytics sentimentfeedback unauthorized response a status code equal to that given
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback][%d] deleteSpeechandtextanalyticsSentimentfeedbackUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback][%d] deleteSpeechandtextanalyticsSentimentfeedbackUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSpeechandtextanalyticsSentimentfeedbackForbidden creates a DeleteSpeechandtextanalyticsSentimentfeedbackForbidden with default headers values
func NewDeleteSpeechandtextanalyticsSentimentfeedbackForbidden() *DeleteSpeechandtextanalyticsSentimentfeedbackForbidden {
	return &DeleteSpeechandtextanalyticsSentimentfeedbackForbidden{}
}

/*
DeleteSpeechandtextanalyticsSentimentfeedbackForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type DeleteSpeechandtextanalyticsSentimentfeedbackForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete speechandtextanalytics sentimentfeedback forbidden response has a 2xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete speechandtextanalytics sentimentfeedback forbidden response has a 3xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete speechandtextanalytics sentimentfeedback forbidden response has a 4xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete speechandtextanalytics sentimentfeedback forbidden response has a 5xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete speechandtextanalytics sentimentfeedback forbidden response a status code equal to that given
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackForbidden) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback][%d] deleteSpeechandtextanalyticsSentimentfeedbackForbidden  %+v", 403, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackForbidden) String() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback][%d] deleteSpeechandtextanalyticsSentimentfeedbackForbidden  %+v", 403, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSpeechandtextanalyticsSentimentfeedbackNotFound creates a DeleteSpeechandtextanalyticsSentimentfeedbackNotFound with default headers values
func NewDeleteSpeechandtextanalyticsSentimentfeedbackNotFound() *DeleteSpeechandtextanalyticsSentimentfeedbackNotFound {
	return &DeleteSpeechandtextanalyticsSentimentfeedbackNotFound{}
}

/*
DeleteSpeechandtextanalyticsSentimentfeedbackNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type DeleteSpeechandtextanalyticsSentimentfeedbackNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete speechandtextanalytics sentimentfeedback not found response has a 2xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete speechandtextanalytics sentimentfeedback not found response has a 3xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete speechandtextanalytics sentimentfeedback not found response has a 4xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete speechandtextanalytics sentimentfeedback not found response has a 5xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete speechandtextanalytics sentimentfeedback not found response a status code equal to that given
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback][%d] deleteSpeechandtextanalyticsSentimentfeedbackNotFound  %+v", 404, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackNotFound) String() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback][%d] deleteSpeechandtextanalyticsSentimentfeedbackNotFound  %+v", 404, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSpeechandtextanalyticsSentimentfeedbackRequestTimeout creates a DeleteSpeechandtextanalyticsSentimentfeedbackRequestTimeout with default headers values
func NewDeleteSpeechandtextanalyticsSentimentfeedbackRequestTimeout() *DeleteSpeechandtextanalyticsSentimentfeedbackRequestTimeout {
	return &DeleteSpeechandtextanalyticsSentimentfeedbackRequestTimeout{}
}

/*
DeleteSpeechandtextanalyticsSentimentfeedbackRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type DeleteSpeechandtextanalyticsSentimentfeedbackRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete speechandtextanalytics sentimentfeedback request timeout response has a 2xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete speechandtextanalytics sentimentfeedback request timeout response has a 3xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete speechandtextanalytics sentimentfeedback request timeout response has a 4xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete speechandtextanalytics sentimentfeedback request timeout response has a 5xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this delete speechandtextanalytics sentimentfeedback request timeout response a status code equal to that given
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackRequestTimeout) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback][%d] deleteSpeechandtextanalyticsSentimentfeedbackRequestTimeout  %+v", 408, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackRequestTimeout) String() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback][%d] deleteSpeechandtextanalyticsSentimentfeedbackRequestTimeout  %+v", 408, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSpeechandtextanalyticsSentimentfeedbackRequestEntityTooLarge creates a DeleteSpeechandtextanalyticsSentimentfeedbackRequestEntityTooLarge with default headers values
func NewDeleteSpeechandtextanalyticsSentimentfeedbackRequestEntityTooLarge() *DeleteSpeechandtextanalyticsSentimentfeedbackRequestEntityTooLarge {
	return &DeleteSpeechandtextanalyticsSentimentfeedbackRequestEntityTooLarge{}
}

/*
DeleteSpeechandtextanalyticsSentimentfeedbackRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type DeleteSpeechandtextanalyticsSentimentfeedbackRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete speechandtextanalytics sentimentfeedback request entity too large response has a 2xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete speechandtextanalytics sentimentfeedback request entity too large response has a 3xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete speechandtextanalytics sentimentfeedback request entity too large response has a 4xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete speechandtextanalytics sentimentfeedback request entity too large response has a 5xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this delete speechandtextanalytics sentimentfeedback request entity too large response a status code equal to that given
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback][%d] deleteSpeechandtextanalyticsSentimentfeedbackRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback][%d] deleteSpeechandtextanalyticsSentimentfeedbackRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSpeechandtextanalyticsSentimentfeedbackUnsupportedMediaType creates a DeleteSpeechandtextanalyticsSentimentfeedbackUnsupportedMediaType with default headers values
func NewDeleteSpeechandtextanalyticsSentimentfeedbackUnsupportedMediaType() *DeleteSpeechandtextanalyticsSentimentfeedbackUnsupportedMediaType {
	return &DeleteSpeechandtextanalyticsSentimentfeedbackUnsupportedMediaType{}
}

/*
DeleteSpeechandtextanalyticsSentimentfeedbackUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type DeleteSpeechandtextanalyticsSentimentfeedbackUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete speechandtextanalytics sentimentfeedback unsupported media type response has a 2xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete speechandtextanalytics sentimentfeedback unsupported media type response has a 3xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete speechandtextanalytics sentimentfeedback unsupported media type response has a 4xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete speechandtextanalytics sentimentfeedback unsupported media type response has a 5xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this delete speechandtextanalytics sentimentfeedback unsupported media type response a status code equal to that given
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback][%d] deleteSpeechandtextanalyticsSentimentfeedbackUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackUnsupportedMediaType) String() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback][%d] deleteSpeechandtextanalyticsSentimentfeedbackUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSpeechandtextanalyticsSentimentfeedbackTooManyRequests creates a DeleteSpeechandtextanalyticsSentimentfeedbackTooManyRequests with default headers values
func NewDeleteSpeechandtextanalyticsSentimentfeedbackTooManyRequests() *DeleteSpeechandtextanalyticsSentimentfeedbackTooManyRequests {
	return &DeleteSpeechandtextanalyticsSentimentfeedbackTooManyRequests{}
}

/*
DeleteSpeechandtextanalyticsSentimentfeedbackTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type DeleteSpeechandtextanalyticsSentimentfeedbackTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete speechandtextanalytics sentimentfeedback too many requests response has a 2xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete speechandtextanalytics sentimentfeedback too many requests response has a 3xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete speechandtextanalytics sentimentfeedback too many requests response has a 4xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete speechandtextanalytics sentimentfeedback too many requests response has a 5xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this delete speechandtextanalytics sentimentfeedback too many requests response a status code equal to that given
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback][%d] deleteSpeechandtextanalyticsSentimentfeedbackTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackTooManyRequests) String() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback][%d] deleteSpeechandtextanalyticsSentimentfeedbackTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSpeechandtextanalyticsSentimentfeedbackInternalServerError creates a DeleteSpeechandtextanalyticsSentimentfeedbackInternalServerError with default headers values
func NewDeleteSpeechandtextanalyticsSentimentfeedbackInternalServerError() *DeleteSpeechandtextanalyticsSentimentfeedbackInternalServerError {
	return &DeleteSpeechandtextanalyticsSentimentfeedbackInternalServerError{}
}

/*
DeleteSpeechandtextanalyticsSentimentfeedbackInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type DeleteSpeechandtextanalyticsSentimentfeedbackInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete speechandtextanalytics sentimentfeedback internal server error response has a 2xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete speechandtextanalytics sentimentfeedback internal server error response has a 3xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete speechandtextanalytics sentimentfeedback internal server error response has a 4xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete speechandtextanalytics sentimentfeedback internal server error response has a 5xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete speechandtextanalytics sentimentfeedback internal server error response a status code equal to that given
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback][%d] deleteSpeechandtextanalyticsSentimentfeedbackInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback][%d] deleteSpeechandtextanalyticsSentimentfeedbackInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSpeechandtextanalyticsSentimentfeedbackServiceUnavailable creates a DeleteSpeechandtextanalyticsSentimentfeedbackServiceUnavailable with default headers values
func NewDeleteSpeechandtextanalyticsSentimentfeedbackServiceUnavailable() *DeleteSpeechandtextanalyticsSentimentfeedbackServiceUnavailable {
	return &DeleteSpeechandtextanalyticsSentimentfeedbackServiceUnavailable{}
}

/*
DeleteSpeechandtextanalyticsSentimentfeedbackServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type DeleteSpeechandtextanalyticsSentimentfeedbackServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete speechandtextanalytics sentimentfeedback service unavailable response has a 2xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete speechandtextanalytics sentimentfeedback service unavailable response has a 3xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete speechandtextanalytics sentimentfeedback service unavailable response has a 4xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete speechandtextanalytics sentimentfeedback service unavailable response has a 5xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this delete speechandtextanalytics sentimentfeedback service unavailable response a status code equal to that given
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackServiceUnavailable) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback][%d] deleteSpeechandtextanalyticsSentimentfeedbackServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackServiceUnavailable) String() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback][%d] deleteSpeechandtextanalyticsSentimentfeedbackServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSpeechandtextanalyticsSentimentfeedbackGatewayTimeout creates a DeleteSpeechandtextanalyticsSentimentfeedbackGatewayTimeout with default headers values
func NewDeleteSpeechandtextanalyticsSentimentfeedbackGatewayTimeout() *DeleteSpeechandtextanalyticsSentimentfeedbackGatewayTimeout {
	return &DeleteSpeechandtextanalyticsSentimentfeedbackGatewayTimeout{}
}

/*
DeleteSpeechandtextanalyticsSentimentfeedbackGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type DeleteSpeechandtextanalyticsSentimentfeedbackGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete speechandtextanalytics sentimentfeedback gateway timeout response has a 2xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete speechandtextanalytics sentimentfeedback gateway timeout response has a 3xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete speechandtextanalytics sentimentfeedback gateway timeout response has a 4xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete speechandtextanalytics sentimentfeedback gateway timeout response has a 5xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this delete speechandtextanalytics sentimentfeedback gateway timeout response a status code equal to that given
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackGatewayTimeout) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback][%d] deleteSpeechandtextanalyticsSentimentfeedbackGatewayTimeout  %+v", 504, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackGatewayTimeout) String() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback][%d] deleteSpeechandtextanalyticsSentimentfeedbackGatewayTimeout  %+v", 504, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

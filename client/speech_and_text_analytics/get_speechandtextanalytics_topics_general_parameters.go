// Code generated by go-swagger; DO NOT EDIT.

package speech_and_text_analytics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetSpeechandtextanalyticsTopicsGeneralParams creates a new GetSpeechandtextanalyticsTopicsGeneralParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetSpeechandtextanalyticsTopicsGeneralParams() *GetSpeechandtextanalyticsTopicsGeneralParams {
	return &GetSpeechandtextanalyticsTopicsGeneralParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetSpeechandtextanalyticsTopicsGeneralParamsWithTimeout creates a new GetSpeechandtextanalyticsTopicsGeneralParams object
// with the ability to set a timeout on a request.
func NewGetSpeechandtextanalyticsTopicsGeneralParamsWithTimeout(timeout time.Duration) *GetSpeechandtextanalyticsTopicsGeneralParams {
	return &GetSpeechandtextanalyticsTopicsGeneralParams{
		timeout: timeout,
	}
}

// NewGetSpeechandtextanalyticsTopicsGeneralParamsWithContext creates a new GetSpeechandtextanalyticsTopicsGeneralParams object
// with the ability to set a context for a request.
func NewGetSpeechandtextanalyticsTopicsGeneralParamsWithContext(ctx context.Context) *GetSpeechandtextanalyticsTopicsGeneralParams {
	return &GetSpeechandtextanalyticsTopicsGeneralParams{
		Context: ctx,
	}
}

// NewGetSpeechandtextanalyticsTopicsGeneralParamsWithHTTPClient creates a new GetSpeechandtextanalyticsTopicsGeneralParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetSpeechandtextanalyticsTopicsGeneralParamsWithHTTPClient(client *http.Client) *GetSpeechandtextanalyticsTopicsGeneralParams {
	return &GetSpeechandtextanalyticsTopicsGeneralParams{
		HTTPClient: client,
	}
}

/*
GetSpeechandtextanalyticsTopicsGeneralParams contains all the parameters to send to the API endpoint

	for the get speechandtextanalytics topics general operation.

	Typically these are written to a http.Request.
*/
type GetSpeechandtextanalyticsTopicsGeneralParams struct {

	/* Dialect.

	   The dialect of the general topics, dialect format is {language}-{country} where language follows ISO 639-1 standard and country follows ISO 3166-1 alpha 2 standard
	*/
	Dialect *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get speechandtextanalytics topics general params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSpeechandtextanalyticsTopicsGeneralParams) WithDefaults() *GetSpeechandtextanalyticsTopicsGeneralParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get speechandtextanalytics topics general params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSpeechandtextanalyticsTopicsGeneralParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get speechandtextanalytics topics general params
func (o *GetSpeechandtextanalyticsTopicsGeneralParams) WithTimeout(timeout time.Duration) *GetSpeechandtextanalyticsTopicsGeneralParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get speechandtextanalytics topics general params
func (o *GetSpeechandtextanalyticsTopicsGeneralParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get speechandtextanalytics topics general params
func (o *GetSpeechandtextanalyticsTopicsGeneralParams) WithContext(ctx context.Context) *GetSpeechandtextanalyticsTopicsGeneralParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get speechandtextanalytics topics general params
func (o *GetSpeechandtextanalyticsTopicsGeneralParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get speechandtextanalytics topics general params
func (o *GetSpeechandtextanalyticsTopicsGeneralParams) WithHTTPClient(client *http.Client) *GetSpeechandtextanalyticsTopicsGeneralParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get speechandtextanalytics topics general params
func (o *GetSpeechandtextanalyticsTopicsGeneralParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDialect adds the dialect to the get speechandtextanalytics topics general params
func (o *GetSpeechandtextanalyticsTopicsGeneralParams) WithDialect(dialect *string) *GetSpeechandtextanalyticsTopicsGeneralParams {
	o.SetDialect(dialect)
	return o
}

// SetDialect adds the dialect to the get speechandtextanalytics topics general params
func (o *GetSpeechandtextanalyticsTopicsGeneralParams) SetDialect(dialect *string) {
	o.Dialect = dialect
}

// WriteToRequest writes these params to a swagger request
func (o *GetSpeechandtextanalyticsTopicsGeneralParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Dialect != nil {

		// query param dialect
		var qrDialect string

		if o.Dialect != nil {
			qrDialect = *o.Dialect
		}
		qDialect := qrDialect
		if qDialect != "" {

			if err := r.SetQueryParam("dialect", qDialect); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

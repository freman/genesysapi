// Code generated by go-swagger; DO NOT EDIT.

package speech_and_text_analytics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PostSpeechandtextanalyticsTopicsReader is a Reader for the PostSpeechandtextanalyticsTopics structure.
type PostSpeechandtextanalyticsTopicsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostSpeechandtextanalyticsTopicsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostSpeechandtextanalyticsTopicsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostSpeechandtextanalyticsTopicsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostSpeechandtextanalyticsTopicsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostSpeechandtextanalyticsTopicsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostSpeechandtextanalyticsTopicsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPostSpeechandtextanalyticsTopicsConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPostSpeechandtextanalyticsTopicsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPostSpeechandtextanalyticsTopicsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostSpeechandtextanalyticsTopicsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostSpeechandtextanalyticsTopicsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostSpeechandtextanalyticsTopicsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPostSpeechandtextanalyticsTopicsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostSpeechandtextanalyticsTopicsOK creates a PostSpeechandtextanalyticsTopicsOK with default headers values
func NewPostSpeechandtextanalyticsTopicsOK() *PostSpeechandtextanalyticsTopicsOK {
	return &PostSpeechandtextanalyticsTopicsOK{}
}

/*PostSpeechandtextanalyticsTopicsOK handles this case with default header values.

successful operation
*/
type PostSpeechandtextanalyticsTopicsOK struct {
	Payload *models.Topic
}

func (o *PostSpeechandtextanalyticsTopicsOK) Error() string {
	return fmt.Sprintf("[POST /api/v2/speechandtextanalytics/topics][%d] postSpeechandtextanalyticsTopicsOK  %+v", 200, o.Payload)
}

func (o *PostSpeechandtextanalyticsTopicsOK) GetPayload() *models.Topic {
	return o.Payload
}

func (o *PostSpeechandtextanalyticsTopicsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Topic)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSpeechandtextanalyticsTopicsBadRequest creates a PostSpeechandtextanalyticsTopicsBadRequest with default headers values
func NewPostSpeechandtextanalyticsTopicsBadRequest() *PostSpeechandtextanalyticsTopicsBadRequest {
	return &PostSpeechandtextanalyticsTopicsBadRequest{}
}

/*PostSpeechandtextanalyticsTopicsBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PostSpeechandtextanalyticsTopicsBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PostSpeechandtextanalyticsTopicsBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v2/speechandtextanalytics/topics][%d] postSpeechandtextanalyticsTopicsBadRequest  %+v", 400, o.Payload)
}

func (o *PostSpeechandtextanalyticsTopicsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostSpeechandtextanalyticsTopicsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSpeechandtextanalyticsTopicsUnauthorized creates a PostSpeechandtextanalyticsTopicsUnauthorized with default headers values
func NewPostSpeechandtextanalyticsTopicsUnauthorized() *PostSpeechandtextanalyticsTopicsUnauthorized {
	return &PostSpeechandtextanalyticsTopicsUnauthorized{}
}

/*PostSpeechandtextanalyticsTopicsUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PostSpeechandtextanalyticsTopicsUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PostSpeechandtextanalyticsTopicsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/speechandtextanalytics/topics][%d] postSpeechandtextanalyticsTopicsUnauthorized  %+v", 401, o.Payload)
}

func (o *PostSpeechandtextanalyticsTopicsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostSpeechandtextanalyticsTopicsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSpeechandtextanalyticsTopicsForbidden creates a PostSpeechandtextanalyticsTopicsForbidden with default headers values
func NewPostSpeechandtextanalyticsTopicsForbidden() *PostSpeechandtextanalyticsTopicsForbidden {
	return &PostSpeechandtextanalyticsTopicsForbidden{}
}

/*PostSpeechandtextanalyticsTopicsForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PostSpeechandtextanalyticsTopicsForbidden struct {
	Payload *models.ErrorBody
}

func (o *PostSpeechandtextanalyticsTopicsForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/speechandtextanalytics/topics][%d] postSpeechandtextanalyticsTopicsForbidden  %+v", 403, o.Payload)
}

func (o *PostSpeechandtextanalyticsTopicsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostSpeechandtextanalyticsTopicsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSpeechandtextanalyticsTopicsNotFound creates a PostSpeechandtextanalyticsTopicsNotFound with default headers values
func NewPostSpeechandtextanalyticsTopicsNotFound() *PostSpeechandtextanalyticsTopicsNotFound {
	return &PostSpeechandtextanalyticsTopicsNotFound{}
}

/*PostSpeechandtextanalyticsTopicsNotFound handles this case with default header values.

The requested resource was not found.
*/
type PostSpeechandtextanalyticsTopicsNotFound struct {
	Payload *models.ErrorBody
}

func (o *PostSpeechandtextanalyticsTopicsNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v2/speechandtextanalytics/topics][%d] postSpeechandtextanalyticsTopicsNotFound  %+v", 404, o.Payload)
}

func (o *PostSpeechandtextanalyticsTopicsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostSpeechandtextanalyticsTopicsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSpeechandtextanalyticsTopicsConflict creates a PostSpeechandtextanalyticsTopicsConflict with default headers values
func NewPostSpeechandtextanalyticsTopicsConflict() *PostSpeechandtextanalyticsTopicsConflict {
	return &PostSpeechandtextanalyticsTopicsConflict{}
}

/*PostSpeechandtextanalyticsTopicsConflict handles this case with default header values.

Conflict
*/
type PostSpeechandtextanalyticsTopicsConflict struct {
	Payload *models.ErrorBody
}

func (o *PostSpeechandtextanalyticsTopicsConflict) Error() string {
	return fmt.Sprintf("[POST /api/v2/speechandtextanalytics/topics][%d] postSpeechandtextanalyticsTopicsConflict  %+v", 409, o.Payload)
}

func (o *PostSpeechandtextanalyticsTopicsConflict) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostSpeechandtextanalyticsTopicsConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSpeechandtextanalyticsTopicsRequestEntityTooLarge creates a PostSpeechandtextanalyticsTopicsRequestEntityTooLarge with default headers values
func NewPostSpeechandtextanalyticsTopicsRequestEntityTooLarge() *PostSpeechandtextanalyticsTopicsRequestEntityTooLarge {
	return &PostSpeechandtextanalyticsTopicsRequestEntityTooLarge{}
}

/*PostSpeechandtextanalyticsTopicsRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type PostSpeechandtextanalyticsTopicsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PostSpeechandtextanalyticsTopicsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /api/v2/speechandtextanalytics/topics][%d] postSpeechandtextanalyticsTopicsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PostSpeechandtextanalyticsTopicsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostSpeechandtextanalyticsTopicsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSpeechandtextanalyticsTopicsUnsupportedMediaType creates a PostSpeechandtextanalyticsTopicsUnsupportedMediaType with default headers values
func NewPostSpeechandtextanalyticsTopicsUnsupportedMediaType() *PostSpeechandtextanalyticsTopicsUnsupportedMediaType {
	return &PostSpeechandtextanalyticsTopicsUnsupportedMediaType{}
}

/*PostSpeechandtextanalyticsTopicsUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PostSpeechandtextanalyticsTopicsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PostSpeechandtextanalyticsTopicsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /api/v2/speechandtextanalytics/topics][%d] postSpeechandtextanalyticsTopicsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PostSpeechandtextanalyticsTopicsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostSpeechandtextanalyticsTopicsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSpeechandtextanalyticsTopicsTooManyRequests creates a PostSpeechandtextanalyticsTopicsTooManyRequests with default headers values
func NewPostSpeechandtextanalyticsTopicsTooManyRequests() *PostSpeechandtextanalyticsTopicsTooManyRequests {
	return &PostSpeechandtextanalyticsTopicsTooManyRequests{}
}

/*PostSpeechandtextanalyticsTopicsTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum [%s] requests within [%s] seconds
*/
type PostSpeechandtextanalyticsTopicsTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PostSpeechandtextanalyticsTopicsTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/v2/speechandtextanalytics/topics][%d] postSpeechandtextanalyticsTopicsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostSpeechandtextanalyticsTopicsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostSpeechandtextanalyticsTopicsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSpeechandtextanalyticsTopicsInternalServerError creates a PostSpeechandtextanalyticsTopicsInternalServerError with default headers values
func NewPostSpeechandtextanalyticsTopicsInternalServerError() *PostSpeechandtextanalyticsTopicsInternalServerError {
	return &PostSpeechandtextanalyticsTopicsInternalServerError{}
}

/*PostSpeechandtextanalyticsTopicsInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PostSpeechandtextanalyticsTopicsInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PostSpeechandtextanalyticsTopicsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v2/speechandtextanalytics/topics][%d] postSpeechandtextanalyticsTopicsInternalServerError  %+v", 500, o.Payload)
}

func (o *PostSpeechandtextanalyticsTopicsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostSpeechandtextanalyticsTopicsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSpeechandtextanalyticsTopicsServiceUnavailable creates a PostSpeechandtextanalyticsTopicsServiceUnavailable with default headers values
func NewPostSpeechandtextanalyticsTopicsServiceUnavailable() *PostSpeechandtextanalyticsTopicsServiceUnavailable {
	return &PostSpeechandtextanalyticsTopicsServiceUnavailable{}
}

/*PostSpeechandtextanalyticsTopicsServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PostSpeechandtextanalyticsTopicsServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PostSpeechandtextanalyticsTopicsServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/v2/speechandtextanalytics/topics][%d] postSpeechandtextanalyticsTopicsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostSpeechandtextanalyticsTopicsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostSpeechandtextanalyticsTopicsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSpeechandtextanalyticsTopicsGatewayTimeout creates a PostSpeechandtextanalyticsTopicsGatewayTimeout with default headers values
func NewPostSpeechandtextanalyticsTopicsGatewayTimeout() *PostSpeechandtextanalyticsTopicsGatewayTimeout {
	return &PostSpeechandtextanalyticsTopicsGatewayTimeout{}
}

/*PostSpeechandtextanalyticsTopicsGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PostSpeechandtextanalyticsTopicsGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PostSpeechandtextanalyticsTopicsGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /api/v2/speechandtextanalytics/topics][%d] postSpeechandtextanalyticsTopicsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostSpeechandtextanalyticsTopicsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PostSpeechandtextanalyticsTopicsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

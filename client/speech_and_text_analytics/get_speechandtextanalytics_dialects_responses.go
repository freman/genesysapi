// Code generated by go-swagger; DO NOT EDIT.

package speech_and_text_analytics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// GetSpeechandtextanalyticsDialectsReader is a Reader for the GetSpeechandtextanalyticsDialects structure.
type GetSpeechandtextanalyticsDialectsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSpeechandtextanalyticsDialectsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSpeechandtextanalyticsDialectsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetSpeechandtextanalyticsDialectsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetSpeechandtextanalyticsDialectsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetSpeechandtextanalyticsDialectsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSpeechandtextanalyticsDialectsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetSpeechandtextanalyticsDialectsRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetSpeechandtextanalyticsDialectsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetSpeechandtextanalyticsDialectsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetSpeechandtextanalyticsDialectsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetSpeechandtextanalyticsDialectsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetSpeechandtextanalyticsDialectsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetSpeechandtextanalyticsDialectsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetSpeechandtextanalyticsDialectsOK creates a GetSpeechandtextanalyticsDialectsOK with default headers values
func NewGetSpeechandtextanalyticsDialectsOK() *GetSpeechandtextanalyticsDialectsOK {
	return &GetSpeechandtextanalyticsDialectsOK{}
}

/*GetSpeechandtextanalyticsDialectsOK handles this case with default header values.

successful operation
*/
type GetSpeechandtextanalyticsDialectsOK struct {
	Payload []interface{}
}

func (o *GetSpeechandtextanalyticsDialectsOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/dialects][%d] getSpeechandtextanalyticsDialectsOK  %+v", 200, o.Payload)
}

func (o *GetSpeechandtextanalyticsDialectsOK) GetPayload() []interface{} {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsDialectsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsDialectsBadRequest creates a GetSpeechandtextanalyticsDialectsBadRequest with default headers values
func NewGetSpeechandtextanalyticsDialectsBadRequest() *GetSpeechandtextanalyticsDialectsBadRequest {
	return &GetSpeechandtextanalyticsDialectsBadRequest{}
}

/*GetSpeechandtextanalyticsDialectsBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type GetSpeechandtextanalyticsDialectsBadRequest struct {
	Payload *models.ErrorBody
}

func (o *GetSpeechandtextanalyticsDialectsBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/dialects][%d] getSpeechandtextanalyticsDialectsBadRequest  %+v", 400, o.Payload)
}

func (o *GetSpeechandtextanalyticsDialectsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsDialectsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsDialectsUnauthorized creates a GetSpeechandtextanalyticsDialectsUnauthorized with default headers values
func NewGetSpeechandtextanalyticsDialectsUnauthorized() *GetSpeechandtextanalyticsDialectsUnauthorized {
	return &GetSpeechandtextanalyticsDialectsUnauthorized{}
}

/*GetSpeechandtextanalyticsDialectsUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type GetSpeechandtextanalyticsDialectsUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *GetSpeechandtextanalyticsDialectsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/dialects][%d] getSpeechandtextanalyticsDialectsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetSpeechandtextanalyticsDialectsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsDialectsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsDialectsForbidden creates a GetSpeechandtextanalyticsDialectsForbidden with default headers values
func NewGetSpeechandtextanalyticsDialectsForbidden() *GetSpeechandtextanalyticsDialectsForbidden {
	return &GetSpeechandtextanalyticsDialectsForbidden{}
}

/*GetSpeechandtextanalyticsDialectsForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type GetSpeechandtextanalyticsDialectsForbidden struct {
	Payload *models.ErrorBody
}

func (o *GetSpeechandtextanalyticsDialectsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/dialects][%d] getSpeechandtextanalyticsDialectsForbidden  %+v", 403, o.Payload)
}

func (o *GetSpeechandtextanalyticsDialectsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsDialectsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsDialectsNotFound creates a GetSpeechandtextanalyticsDialectsNotFound with default headers values
func NewGetSpeechandtextanalyticsDialectsNotFound() *GetSpeechandtextanalyticsDialectsNotFound {
	return &GetSpeechandtextanalyticsDialectsNotFound{}
}

/*GetSpeechandtextanalyticsDialectsNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetSpeechandtextanalyticsDialectsNotFound struct {
	Payload *models.ErrorBody
}

func (o *GetSpeechandtextanalyticsDialectsNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/dialects][%d] getSpeechandtextanalyticsDialectsNotFound  %+v", 404, o.Payload)
}

func (o *GetSpeechandtextanalyticsDialectsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsDialectsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsDialectsRequestTimeout creates a GetSpeechandtextanalyticsDialectsRequestTimeout with default headers values
func NewGetSpeechandtextanalyticsDialectsRequestTimeout() *GetSpeechandtextanalyticsDialectsRequestTimeout {
	return &GetSpeechandtextanalyticsDialectsRequestTimeout{}
}

/*GetSpeechandtextanalyticsDialectsRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type GetSpeechandtextanalyticsDialectsRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetSpeechandtextanalyticsDialectsRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/dialects][%d] getSpeechandtextanalyticsDialectsRequestTimeout  %+v", 408, o.Payload)
}

func (o *GetSpeechandtextanalyticsDialectsRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsDialectsRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsDialectsRequestEntityTooLarge creates a GetSpeechandtextanalyticsDialectsRequestEntityTooLarge with default headers values
func NewGetSpeechandtextanalyticsDialectsRequestEntityTooLarge() *GetSpeechandtextanalyticsDialectsRequestEntityTooLarge {
	return &GetSpeechandtextanalyticsDialectsRequestEntityTooLarge{}
}

/*GetSpeechandtextanalyticsDialectsRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type GetSpeechandtextanalyticsDialectsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *GetSpeechandtextanalyticsDialectsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/dialects][%d] getSpeechandtextanalyticsDialectsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetSpeechandtextanalyticsDialectsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsDialectsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsDialectsUnsupportedMediaType creates a GetSpeechandtextanalyticsDialectsUnsupportedMediaType with default headers values
func NewGetSpeechandtextanalyticsDialectsUnsupportedMediaType() *GetSpeechandtextanalyticsDialectsUnsupportedMediaType {
	return &GetSpeechandtextanalyticsDialectsUnsupportedMediaType{}
}

/*GetSpeechandtextanalyticsDialectsUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type GetSpeechandtextanalyticsDialectsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *GetSpeechandtextanalyticsDialectsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/dialects][%d] getSpeechandtextanalyticsDialectsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetSpeechandtextanalyticsDialectsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsDialectsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsDialectsTooManyRequests creates a GetSpeechandtextanalyticsDialectsTooManyRequests with default headers values
func NewGetSpeechandtextanalyticsDialectsTooManyRequests() *GetSpeechandtextanalyticsDialectsTooManyRequests {
	return &GetSpeechandtextanalyticsDialectsTooManyRequests{}
}

/*GetSpeechandtextanalyticsDialectsTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type GetSpeechandtextanalyticsDialectsTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *GetSpeechandtextanalyticsDialectsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/dialects][%d] getSpeechandtextanalyticsDialectsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetSpeechandtextanalyticsDialectsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsDialectsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsDialectsInternalServerError creates a GetSpeechandtextanalyticsDialectsInternalServerError with default headers values
func NewGetSpeechandtextanalyticsDialectsInternalServerError() *GetSpeechandtextanalyticsDialectsInternalServerError {
	return &GetSpeechandtextanalyticsDialectsInternalServerError{}
}

/*GetSpeechandtextanalyticsDialectsInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type GetSpeechandtextanalyticsDialectsInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *GetSpeechandtextanalyticsDialectsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/dialects][%d] getSpeechandtextanalyticsDialectsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSpeechandtextanalyticsDialectsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsDialectsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsDialectsServiceUnavailable creates a GetSpeechandtextanalyticsDialectsServiceUnavailable with default headers values
func NewGetSpeechandtextanalyticsDialectsServiceUnavailable() *GetSpeechandtextanalyticsDialectsServiceUnavailable {
	return &GetSpeechandtextanalyticsDialectsServiceUnavailable{}
}

/*GetSpeechandtextanalyticsDialectsServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type GetSpeechandtextanalyticsDialectsServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *GetSpeechandtextanalyticsDialectsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/dialects][%d] getSpeechandtextanalyticsDialectsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetSpeechandtextanalyticsDialectsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsDialectsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSpeechandtextanalyticsDialectsGatewayTimeout creates a GetSpeechandtextanalyticsDialectsGatewayTimeout with default headers values
func NewGetSpeechandtextanalyticsDialectsGatewayTimeout() *GetSpeechandtextanalyticsDialectsGatewayTimeout {
	return &GetSpeechandtextanalyticsDialectsGatewayTimeout{}
}

/*GetSpeechandtextanalyticsDialectsGatewayTimeout handles this case with default header values.

The request timed out.
*/
type GetSpeechandtextanalyticsDialectsGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *GetSpeechandtextanalyticsDialectsGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /api/v2/speechandtextanalytics/dialects][%d] getSpeechandtextanalyticsDialectsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetSpeechandtextanalyticsDialectsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *GetSpeechandtextanalyticsDialectsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

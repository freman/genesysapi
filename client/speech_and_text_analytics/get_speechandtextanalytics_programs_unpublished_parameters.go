// Code generated by go-swagger; DO NOT EDIT.

package speech_and_text_analytics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetSpeechandtextanalyticsProgramsUnpublishedParams creates a new GetSpeechandtextanalyticsProgramsUnpublishedParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetSpeechandtextanalyticsProgramsUnpublishedParams() *GetSpeechandtextanalyticsProgramsUnpublishedParams {
	return &GetSpeechandtextanalyticsProgramsUnpublishedParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetSpeechandtextanalyticsProgramsUnpublishedParamsWithTimeout creates a new GetSpeechandtextanalyticsProgramsUnpublishedParams object
// with the ability to set a timeout on a request.
func NewGetSpeechandtextanalyticsProgramsUnpublishedParamsWithTimeout(timeout time.Duration) *GetSpeechandtextanalyticsProgramsUnpublishedParams {
	return &GetSpeechandtextanalyticsProgramsUnpublishedParams{
		timeout: timeout,
	}
}

// NewGetSpeechandtextanalyticsProgramsUnpublishedParamsWithContext creates a new GetSpeechandtextanalyticsProgramsUnpublishedParams object
// with the ability to set a context for a request.
func NewGetSpeechandtextanalyticsProgramsUnpublishedParamsWithContext(ctx context.Context) *GetSpeechandtextanalyticsProgramsUnpublishedParams {
	return &GetSpeechandtextanalyticsProgramsUnpublishedParams{
		Context: ctx,
	}
}

// NewGetSpeechandtextanalyticsProgramsUnpublishedParamsWithHTTPClient creates a new GetSpeechandtextanalyticsProgramsUnpublishedParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetSpeechandtextanalyticsProgramsUnpublishedParamsWithHTTPClient(client *http.Client) *GetSpeechandtextanalyticsProgramsUnpublishedParams {
	return &GetSpeechandtextanalyticsProgramsUnpublishedParams{
		HTTPClient: client,
	}
}

/*
GetSpeechandtextanalyticsProgramsUnpublishedParams contains all the parameters to send to the API endpoint

	for the get speechandtextanalytics programs unpublished operation.

	Typically these are written to a http.Request.
*/
type GetSpeechandtextanalyticsProgramsUnpublishedParams struct {

	/* NextPage.

	   The key for listing the next page
	*/
	NextPage *string

	/* PageSize.

	   The page size for the listing

	   Format: int32
	   Default: 20
	*/
	PageSize *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get speechandtextanalytics programs unpublished params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSpeechandtextanalyticsProgramsUnpublishedParams) WithDefaults() *GetSpeechandtextanalyticsProgramsUnpublishedParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get speechandtextanalytics programs unpublished params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSpeechandtextanalyticsProgramsUnpublishedParams) SetDefaults() {
	var (
		pageSizeDefault = int32(20)
	)

	val := GetSpeechandtextanalyticsProgramsUnpublishedParams{
		PageSize: &pageSizeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get speechandtextanalytics programs unpublished params
func (o *GetSpeechandtextanalyticsProgramsUnpublishedParams) WithTimeout(timeout time.Duration) *GetSpeechandtextanalyticsProgramsUnpublishedParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get speechandtextanalytics programs unpublished params
func (o *GetSpeechandtextanalyticsProgramsUnpublishedParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get speechandtextanalytics programs unpublished params
func (o *GetSpeechandtextanalyticsProgramsUnpublishedParams) WithContext(ctx context.Context) *GetSpeechandtextanalyticsProgramsUnpublishedParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get speechandtextanalytics programs unpublished params
func (o *GetSpeechandtextanalyticsProgramsUnpublishedParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get speechandtextanalytics programs unpublished params
func (o *GetSpeechandtextanalyticsProgramsUnpublishedParams) WithHTTPClient(client *http.Client) *GetSpeechandtextanalyticsProgramsUnpublishedParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get speechandtextanalytics programs unpublished params
func (o *GetSpeechandtextanalyticsProgramsUnpublishedParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNextPage adds the nextPage to the get speechandtextanalytics programs unpublished params
func (o *GetSpeechandtextanalyticsProgramsUnpublishedParams) WithNextPage(nextPage *string) *GetSpeechandtextanalyticsProgramsUnpublishedParams {
	o.SetNextPage(nextPage)
	return o
}

// SetNextPage adds the nextPage to the get speechandtextanalytics programs unpublished params
func (o *GetSpeechandtextanalyticsProgramsUnpublishedParams) SetNextPage(nextPage *string) {
	o.NextPage = nextPage
}

// WithPageSize adds the pageSize to the get speechandtextanalytics programs unpublished params
func (o *GetSpeechandtextanalyticsProgramsUnpublishedParams) WithPageSize(pageSize *int32) *GetSpeechandtextanalyticsProgramsUnpublishedParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get speechandtextanalytics programs unpublished params
func (o *GetSpeechandtextanalyticsProgramsUnpublishedParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WriteToRequest writes these params to a swagger request
func (o *GetSpeechandtextanalyticsProgramsUnpublishedParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.NextPage != nil {

		// query param nextPage
		var qrNextPage string

		if o.NextPage != nil {
			qrNextPage = *o.NextPage
		}
		qNextPage := qrNextPage
		if qNextPage != "" {

			if err := r.SetQueryParam("nextPage", qNextPage); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int32

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

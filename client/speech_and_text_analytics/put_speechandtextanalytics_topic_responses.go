// Code generated by go-swagger; DO NOT EDIT.

package speech_and_text_analytics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutSpeechandtextanalyticsTopicReader is a Reader for the PutSpeechandtextanalyticsTopic structure.
type PutSpeechandtextanalyticsTopicReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutSpeechandtextanalyticsTopicReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutSpeechandtextanalyticsTopicOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutSpeechandtextanalyticsTopicBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutSpeechandtextanalyticsTopicUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutSpeechandtextanalyticsTopicForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutSpeechandtextanalyticsTopicNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPutSpeechandtextanalyticsTopicRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPutSpeechandtextanalyticsTopicConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutSpeechandtextanalyticsTopicRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutSpeechandtextanalyticsTopicUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutSpeechandtextanalyticsTopicTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutSpeechandtextanalyticsTopicInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutSpeechandtextanalyticsTopicServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutSpeechandtextanalyticsTopicGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutSpeechandtextanalyticsTopicOK creates a PutSpeechandtextanalyticsTopicOK with default headers values
func NewPutSpeechandtextanalyticsTopicOK() *PutSpeechandtextanalyticsTopicOK {
	return &PutSpeechandtextanalyticsTopicOK{}
}

/*
PutSpeechandtextanalyticsTopicOK describes a response with status code 200, with default header values.

successful operation
*/
type PutSpeechandtextanalyticsTopicOK struct {
	Payload *models.Topic
}

// IsSuccess returns true when this put speechandtextanalytics topic o k response has a 2xx status code
func (o *PutSpeechandtextanalyticsTopicOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put speechandtextanalytics topic o k response has a 3xx status code
func (o *PutSpeechandtextanalyticsTopicOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put speechandtextanalytics topic o k response has a 4xx status code
func (o *PutSpeechandtextanalyticsTopicOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put speechandtextanalytics topic o k response has a 5xx status code
func (o *PutSpeechandtextanalyticsTopicOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put speechandtextanalytics topic o k response a status code equal to that given
func (o *PutSpeechandtextanalyticsTopicOK) IsCode(code int) bool {
	return code == 200
}

func (o *PutSpeechandtextanalyticsTopicOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/topics/{topicId}][%d] putSpeechandtextanalyticsTopicOK  %+v", 200, o.Payload)
}

func (o *PutSpeechandtextanalyticsTopicOK) String() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/topics/{topicId}][%d] putSpeechandtextanalyticsTopicOK  %+v", 200, o.Payload)
}

func (o *PutSpeechandtextanalyticsTopicOK) GetPayload() *models.Topic {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsTopicOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Topic)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsTopicBadRequest creates a PutSpeechandtextanalyticsTopicBadRequest with default headers values
func NewPutSpeechandtextanalyticsTopicBadRequest() *PutSpeechandtextanalyticsTopicBadRequest {
	return &PutSpeechandtextanalyticsTopicBadRequest{}
}

/*
PutSpeechandtextanalyticsTopicBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutSpeechandtextanalyticsTopicBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put speechandtextanalytics topic bad request response has a 2xx status code
func (o *PutSpeechandtextanalyticsTopicBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put speechandtextanalytics topic bad request response has a 3xx status code
func (o *PutSpeechandtextanalyticsTopicBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put speechandtextanalytics topic bad request response has a 4xx status code
func (o *PutSpeechandtextanalyticsTopicBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put speechandtextanalytics topic bad request response has a 5xx status code
func (o *PutSpeechandtextanalyticsTopicBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put speechandtextanalytics topic bad request response a status code equal to that given
func (o *PutSpeechandtextanalyticsTopicBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PutSpeechandtextanalyticsTopicBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/topics/{topicId}][%d] putSpeechandtextanalyticsTopicBadRequest  %+v", 400, o.Payload)
}

func (o *PutSpeechandtextanalyticsTopicBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/topics/{topicId}][%d] putSpeechandtextanalyticsTopicBadRequest  %+v", 400, o.Payload)
}

func (o *PutSpeechandtextanalyticsTopicBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsTopicBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsTopicUnauthorized creates a PutSpeechandtextanalyticsTopicUnauthorized with default headers values
func NewPutSpeechandtextanalyticsTopicUnauthorized() *PutSpeechandtextanalyticsTopicUnauthorized {
	return &PutSpeechandtextanalyticsTopicUnauthorized{}
}

/*
PutSpeechandtextanalyticsTopicUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PutSpeechandtextanalyticsTopicUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put speechandtextanalytics topic unauthorized response has a 2xx status code
func (o *PutSpeechandtextanalyticsTopicUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put speechandtextanalytics topic unauthorized response has a 3xx status code
func (o *PutSpeechandtextanalyticsTopicUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put speechandtextanalytics topic unauthorized response has a 4xx status code
func (o *PutSpeechandtextanalyticsTopicUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put speechandtextanalytics topic unauthorized response has a 5xx status code
func (o *PutSpeechandtextanalyticsTopicUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put speechandtextanalytics topic unauthorized response a status code equal to that given
func (o *PutSpeechandtextanalyticsTopicUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PutSpeechandtextanalyticsTopicUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/topics/{topicId}][%d] putSpeechandtextanalyticsTopicUnauthorized  %+v", 401, o.Payload)
}

func (o *PutSpeechandtextanalyticsTopicUnauthorized) String() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/topics/{topicId}][%d] putSpeechandtextanalyticsTopicUnauthorized  %+v", 401, o.Payload)
}

func (o *PutSpeechandtextanalyticsTopicUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsTopicUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsTopicForbidden creates a PutSpeechandtextanalyticsTopicForbidden with default headers values
func NewPutSpeechandtextanalyticsTopicForbidden() *PutSpeechandtextanalyticsTopicForbidden {
	return &PutSpeechandtextanalyticsTopicForbidden{}
}

/*
PutSpeechandtextanalyticsTopicForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PutSpeechandtextanalyticsTopicForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put speechandtextanalytics topic forbidden response has a 2xx status code
func (o *PutSpeechandtextanalyticsTopicForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put speechandtextanalytics topic forbidden response has a 3xx status code
func (o *PutSpeechandtextanalyticsTopicForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put speechandtextanalytics topic forbidden response has a 4xx status code
func (o *PutSpeechandtextanalyticsTopicForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put speechandtextanalytics topic forbidden response has a 5xx status code
func (o *PutSpeechandtextanalyticsTopicForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put speechandtextanalytics topic forbidden response a status code equal to that given
func (o *PutSpeechandtextanalyticsTopicForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PutSpeechandtextanalyticsTopicForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/topics/{topicId}][%d] putSpeechandtextanalyticsTopicForbidden  %+v", 403, o.Payload)
}

func (o *PutSpeechandtextanalyticsTopicForbidden) String() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/topics/{topicId}][%d] putSpeechandtextanalyticsTopicForbidden  %+v", 403, o.Payload)
}

func (o *PutSpeechandtextanalyticsTopicForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsTopicForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsTopicNotFound creates a PutSpeechandtextanalyticsTopicNotFound with default headers values
func NewPutSpeechandtextanalyticsTopicNotFound() *PutSpeechandtextanalyticsTopicNotFound {
	return &PutSpeechandtextanalyticsTopicNotFound{}
}

/*
PutSpeechandtextanalyticsTopicNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PutSpeechandtextanalyticsTopicNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put speechandtextanalytics topic not found response has a 2xx status code
func (o *PutSpeechandtextanalyticsTopicNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put speechandtextanalytics topic not found response has a 3xx status code
func (o *PutSpeechandtextanalyticsTopicNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put speechandtextanalytics topic not found response has a 4xx status code
func (o *PutSpeechandtextanalyticsTopicNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put speechandtextanalytics topic not found response has a 5xx status code
func (o *PutSpeechandtextanalyticsTopicNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put speechandtextanalytics topic not found response a status code equal to that given
func (o *PutSpeechandtextanalyticsTopicNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PutSpeechandtextanalyticsTopicNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/topics/{topicId}][%d] putSpeechandtextanalyticsTopicNotFound  %+v", 404, o.Payload)
}

func (o *PutSpeechandtextanalyticsTopicNotFound) String() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/topics/{topicId}][%d] putSpeechandtextanalyticsTopicNotFound  %+v", 404, o.Payload)
}

func (o *PutSpeechandtextanalyticsTopicNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsTopicNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsTopicRequestTimeout creates a PutSpeechandtextanalyticsTopicRequestTimeout with default headers values
func NewPutSpeechandtextanalyticsTopicRequestTimeout() *PutSpeechandtextanalyticsTopicRequestTimeout {
	return &PutSpeechandtextanalyticsTopicRequestTimeout{}
}

/*
PutSpeechandtextanalyticsTopicRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PutSpeechandtextanalyticsTopicRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put speechandtextanalytics topic request timeout response has a 2xx status code
func (o *PutSpeechandtextanalyticsTopicRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put speechandtextanalytics topic request timeout response has a 3xx status code
func (o *PutSpeechandtextanalyticsTopicRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put speechandtextanalytics topic request timeout response has a 4xx status code
func (o *PutSpeechandtextanalyticsTopicRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this put speechandtextanalytics topic request timeout response has a 5xx status code
func (o *PutSpeechandtextanalyticsTopicRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this put speechandtextanalytics topic request timeout response a status code equal to that given
func (o *PutSpeechandtextanalyticsTopicRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PutSpeechandtextanalyticsTopicRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/topics/{topicId}][%d] putSpeechandtextanalyticsTopicRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutSpeechandtextanalyticsTopicRequestTimeout) String() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/topics/{topicId}][%d] putSpeechandtextanalyticsTopicRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutSpeechandtextanalyticsTopicRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsTopicRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsTopicConflict creates a PutSpeechandtextanalyticsTopicConflict with default headers values
func NewPutSpeechandtextanalyticsTopicConflict() *PutSpeechandtextanalyticsTopicConflict {
	return &PutSpeechandtextanalyticsTopicConflict{}
}

/*
PutSpeechandtextanalyticsTopicConflict describes a response with status code 409, with default header values.

Conflict
*/
type PutSpeechandtextanalyticsTopicConflict struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put speechandtextanalytics topic conflict response has a 2xx status code
func (o *PutSpeechandtextanalyticsTopicConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put speechandtextanalytics topic conflict response has a 3xx status code
func (o *PutSpeechandtextanalyticsTopicConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put speechandtextanalytics topic conflict response has a 4xx status code
func (o *PutSpeechandtextanalyticsTopicConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this put speechandtextanalytics topic conflict response has a 5xx status code
func (o *PutSpeechandtextanalyticsTopicConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this put speechandtextanalytics topic conflict response a status code equal to that given
func (o *PutSpeechandtextanalyticsTopicConflict) IsCode(code int) bool {
	return code == 409
}

func (o *PutSpeechandtextanalyticsTopicConflict) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/topics/{topicId}][%d] putSpeechandtextanalyticsTopicConflict  %+v", 409, o.Payload)
}

func (o *PutSpeechandtextanalyticsTopicConflict) String() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/topics/{topicId}][%d] putSpeechandtextanalyticsTopicConflict  %+v", 409, o.Payload)
}

func (o *PutSpeechandtextanalyticsTopicConflict) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsTopicConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsTopicRequestEntityTooLarge creates a PutSpeechandtextanalyticsTopicRequestEntityTooLarge with default headers values
func NewPutSpeechandtextanalyticsTopicRequestEntityTooLarge() *PutSpeechandtextanalyticsTopicRequestEntityTooLarge {
	return &PutSpeechandtextanalyticsTopicRequestEntityTooLarge{}
}

/*
PutSpeechandtextanalyticsTopicRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type PutSpeechandtextanalyticsTopicRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put speechandtextanalytics topic request entity too large response has a 2xx status code
func (o *PutSpeechandtextanalyticsTopicRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put speechandtextanalytics topic request entity too large response has a 3xx status code
func (o *PutSpeechandtextanalyticsTopicRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put speechandtextanalytics topic request entity too large response has a 4xx status code
func (o *PutSpeechandtextanalyticsTopicRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this put speechandtextanalytics topic request entity too large response has a 5xx status code
func (o *PutSpeechandtextanalyticsTopicRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this put speechandtextanalytics topic request entity too large response a status code equal to that given
func (o *PutSpeechandtextanalyticsTopicRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PutSpeechandtextanalyticsTopicRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/topics/{topicId}][%d] putSpeechandtextanalyticsTopicRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutSpeechandtextanalyticsTopicRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/topics/{topicId}][%d] putSpeechandtextanalyticsTopicRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutSpeechandtextanalyticsTopicRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsTopicRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsTopicUnsupportedMediaType creates a PutSpeechandtextanalyticsTopicUnsupportedMediaType with default headers values
func NewPutSpeechandtextanalyticsTopicUnsupportedMediaType() *PutSpeechandtextanalyticsTopicUnsupportedMediaType {
	return &PutSpeechandtextanalyticsTopicUnsupportedMediaType{}
}

/*
PutSpeechandtextanalyticsTopicUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutSpeechandtextanalyticsTopicUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put speechandtextanalytics topic unsupported media type response has a 2xx status code
func (o *PutSpeechandtextanalyticsTopicUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put speechandtextanalytics topic unsupported media type response has a 3xx status code
func (o *PutSpeechandtextanalyticsTopicUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put speechandtextanalytics topic unsupported media type response has a 4xx status code
func (o *PutSpeechandtextanalyticsTopicUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this put speechandtextanalytics topic unsupported media type response has a 5xx status code
func (o *PutSpeechandtextanalyticsTopicUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this put speechandtextanalytics topic unsupported media type response a status code equal to that given
func (o *PutSpeechandtextanalyticsTopicUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PutSpeechandtextanalyticsTopicUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/topics/{topicId}][%d] putSpeechandtextanalyticsTopicUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutSpeechandtextanalyticsTopicUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/topics/{topicId}][%d] putSpeechandtextanalyticsTopicUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutSpeechandtextanalyticsTopicUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsTopicUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsTopicTooManyRequests creates a PutSpeechandtextanalyticsTopicTooManyRequests with default headers values
func NewPutSpeechandtextanalyticsTopicTooManyRequests() *PutSpeechandtextanalyticsTopicTooManyRequests {
	return &PutSpeechandtextanalyticsTopicTooManyRequests{}
}

/*
PutSpeechandtextanalyticsTopicTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PutSpeechandtextanalyticsTopicTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put speechandtextanalytics topic too many requests response has a 2xx status code
func (o *PutSpeechandtextanalyticsTopicTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put speechandtextanalytics topic too many requests response has a 3xx status code
func (o *PutSpeechandtextanalyticsTopicTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put speechandtextanalytics topic too many requests response has a 4xx status code
func (o *PutSpeechandtextanalyticsTopicTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this put speechandtextanalytics topic too many requests response has a 5xx status code
func (o *PutSpeechandtextanalyticsTopicTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this put speechandtextanalytics topic too many requests response a status code equal to that given
func (o *PutSpeechandtextanalyticsTopicTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PutSpeechandtextanalyticsTopicTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/topics/{topicId}][%d] putSpeechandtextanalyticsTopicTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutSpeechandtextanalyticsTopicTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/topics/{topicId}][%d] putSpeechandtextanalyticsTopicTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutSpeechandtextanalyticsTopicTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsTopicTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsTopicInternalServerError creates a PutSpeechandtextanalyticsTopicInternalServerError with default headers values
func NewPutSpeechandtextanalyticsTopicInternalServerError() *PutSpeechandtextanalyticsTopicInternalServerError {
	return &PutSpeechandtextanalyticsTopicInternalServerError{}
}

/*
PutSpeechandtextanalyticsTopicInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutSpeechandtextanalyticsTopicInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put speechandtextanalytics topic internal server error response has a 2xx status code
func (o *PutSpeechandtextanalyticsTopicInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put speechandtextanalytics topic internal server error response has a 3xx status code
func (o *PutSpeechandtextanalyticsTopicInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put speechandtextanalytics topic internal server error response has a 4xx status code
func (o *PutSpeechandtextanalyticsTopicInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this put speechandtextanalytics topic internal server error response has a 5xx status code
func (o *PutSpeechandtextanalyticsTopicInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this put speechandtextanalytics topic internal server error response a status code equal to that given
func (o *PutSpeechandtextanalyticsTopicInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PutSpeechandtextanalyticsTopicInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/topics/{topicId}][%d] putSpeechandtextanalyticsTopicInternalServerError  %+v", 500, o.Payload)
}

func (o *PutSpeechandtextanalyticsTopicInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/topics/{topicId}][%d] putSpeechandtextanalyticsTopicInternalServerError  %+v", 500, o.Payload)
}

func (o *PutSpeechandtextanalyticsTopicInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsTopicInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsTopicServiceUnavailable creates a PutSpeechandtextanalyticsTopicServiceUnavailable with default headers values
func NewPutSpeechandtextanalyticsTopicServiceUnavailable() *PutSpeechandtextanalyticsTopicServiceUnavailable {
	return &PutSpeechandtextanalyticsTopicServiceUnavailable{}
}

/*
PutSpeechandtextanalyticsTopicServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutSpeechandtextanalyticsTopicServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put speechandtextanalytics topic service unavailable response has a 2xx status code
func (o *PutSpeechandtextanalyticsTopicServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put speechandtextanalytics topic service unavailable response has a 3xx status code
func (o *PutSpeechandtextanalyticsTopicServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put speechandtextanalytics topic service unavailable response has a 4xx status code
func (o *PutSpeechandtextanalyticsTopicServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this put speechandtextanalytics topic service unavailable response has a 5xx status code
func (o *PutSpeechandtextanalyticsTopicServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this put speechandtextanalytics topic service unavailable response a status code equal to that given
func (o *PutSpeechandtextanalyticsTopicServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PutSpeechandtextanalyticsTopicServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/topics/{topicId}][%d] putSpeechandtextanalyticsTopicServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutSpeechandtextanalyticsTopicServiceUnavailable) String() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/topics/{topicId}][%d] putSpeechandtextanalyticsTopicServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutSpeechandtextanalyticsTopicServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsTopicServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsTopicGatewayTimeout creates a PutSpeechandtextanalyticsTopicGatewayTimeout with default headers values
func NewPutSpeechandtextanalyticsTopicGatewayTimeout() *PutSpeechandtextanalyticsTopicGatewayTimeout {
	return &PutSpeechandtextanalyticsTopicGatewayTimeout{}
}

/*
PutSpeechandtextanalyticsTopicGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PutSpeechandtextanalyticsTopicGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this put speechandtextanalytics topic gateway timeout response has a 2xx status code
func (o *PutSpeechandtextanalyticsTopicGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put speechandtextanalytics topic gateway timeout response has a 3xx status code
func (o *PutSpeechandtextanalyticsTopicGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put speechandtextanalytics topic gateway timeout response has a 4xx status code
func (o *PutSpeechandtextanalyticsTopicGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this put speechandtextanalytics topic gateway timeout response has a 5xx status code
func (o *PutSpeechandtextanalyticsTopicGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this put speechandtextanalytics topic gateway timeout response a status code equal to that given
func (o *PutSpeechandtextanalyticsTopicGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PutSpeechandtextanalyticsTopicGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/topics/{topicId}][%d] putSpeechandtextanalyticsTopicGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutSpeechandtextanalyticsTopicGatewayTimeout) String() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/topics/{topicId}][%d] putSpeechandtextanalyticsTopicGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutSpeechandtextanalyticsTopicGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsTopicGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package speech_and_text_analytics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetSpeechandtextanalyticsTopicsParams creates a new GetSpeechandtextanalyticsTopicsParams object
// with the default values initialized.
func NewGetSpeechandtextanalyticsTopicsParams() *GetSpeechandtextanalyticsTopicsParams {
	var (
		pageSizeDefault = int32(20)
	)
	return &GetSpeechandtextanalyticsTopicsParams{
		PageSize: &pageSizeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSpeechandtextanalyticsTopicsParamsWithTimeout creates a new GetSpeechandtextanalyticsTopicsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSpeechandtextanalyticsTopicsParamsWithTimeout(timeout time.Duration) *GetSpeechandtextanalyticsTopicsParams {
	var (
		pageSizeDefault = int32(20)
	)
	return &GetSpeechandtextanalyticsTopicsParams{
		PageSize: &pageSizeDefault,

		timeout: timeout,
	}
}

// NewGetSpeechandtextanalyticsTopicsParamsWithContext creates a new GetSpeechandtextanalyticsTopicsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetSpeechandtextanalyticsTopicsParamsWithContext(ctx context.Context) *GetSpeechandtextanalyticsTopicsParams {
	var (
		pageSizeDefault = int32(20)
	)
	return &GetSpeechandtextanalyticsTopicsParams{
		PageSize: &pageSizeDefault,

		Context: ctx,
	}
}

// NewGetSpeechandtextanalyticsTopicsParamsWithHTTPClient creates a new GetSpeechandtextanalyticsTopicsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSpeechandtextanalyticsTopicsParamsWithHTTPClient(client *http.Client) *GetSpeechandtextanalyticsTopicsParams {
	var (
		pageSizeDefault = int32(20)
	)
	return &GetSpeechandtextanalyticsTopicsParams{
		PageSize:   &pageSizeDefault,
		HTTPClient: client,
	}
}

/*GetSpeechandtextanalyticsTopicsParams contains all the parameters to send to the API endpoint
for the get speechandtextanalytics topics operation typically these are written to a http.Request
*/
type GetSpeechandtextanalyticsTopicsParams struct {

	/*Ids
	  Comma separated Topic IDs to filter by. Cannot be used with other filters. Maximum of 50 IDs allowed.

	*/
	Ids []string
	/*Name
	  Case insensitive partial name to filter by

	*/
	Name *string
	/*NextPage
	  The key for listing the next page

	*/
	NextPage *string
	/*PageSize
	  The page size for the listing

	*/
	PageSize *int32
	/*SortBy
	  Sort results by. Defaults to name

	*/
	SortBy *string
	/*SortOrder
	  Sort order. Defaults to asc

	*/
	SortOrder *string
	/*State
	  Topic state. Defaults to latest

	*/
	State *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get speechandtextanalytics topics params
func (o *GetSpeechandtextanalyticsTopicsParams) WithTimeout(timeout time.Duration) *GetSpeechandtextanalyticsTopicsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get speechandtextanalytics topics params
func (o *GetSpeechandtextanalyticsTopicsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get speechandtextanalytics topics params
func (o *GetSpeechandtextanalyticsTopicsParams) WithContext(ctx context.Context) *GetSpeechandtextanalyticsTopicsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get speechandtextanalytics topics params
func (o *GetSpeechandtextanalyticsTopicsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get speechandtextanalytics topics params
func (o *GetSpeechandtextanalyticsTopicsParams) WithHTTPClient(client *http.Client) *GetSpeechandtextanalyticsTopicsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get speechandtextanalytics topics params
func (o *GetSpeechandtextanalyticsTopicsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIds adds the ids to the get speechandtextanalytics topics params
func (o *GetSpeechandtextanalyticsTopicsParams) WithIds(ids []string) *GetSpeechandtextanalyticsTopicsParams {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the get speechandtextanalytics topics params
func (o *GetSpeechandtextanalyticsTopicsParams) SetIds(ids []string) {
	o.Ids = ids
}

// WithName adds the name to the get speechandtextanalytics topics params
func (o *GetSpeechandtextanalyticsTopicsParams) WithName(name *string) *GetSpeechandtextanalyticsTopicsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get speechandtextanalytics topics params
func (o *GetSpeechandtextanalyticsTopicsParams) SetName(name *string) {
	o.Name = name
}

// WithNextPage adds the nextPage to the get speechandtextanalytics topics params
func (o *GetSpeechandtextanalyticsTopicsParams) WithNextPage(nextPage *string) *GetSpeechandtextanalyticsTopicsParams {
	o.SetNextPage(nextPage)
	return o
}

// SetNextPage adds the nextPage to the get speechandtextanalytics topics params
func (o *GetSpeechandtextanalyticsTopicsParams) SetNextPage(nextPage *string) {
	o.NextPage = nextPage
}

// WithPageSize adds the pageSize to the get speechandtextanalytics topics params
func (o *GetSpeechandtextanalyticsTopicsParams) WithPageSize(pageSize *int32) *GetSpeechandtextanalyticsTopicsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get speechandtextanalytics topics params
func (o *GetSpeechandtextanalyticsTopicsParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithSortBy adds the sortBy to the get speechandtextanalytics topics params
func (o *GetSpeechandtextanalyticsTopicsParams) WithSortBy(sortBy *string) *GetSpeechandtextanalyticsTopicsParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the get speechandtextanalytics topics params
func (o *GetSpeechandtextanalyticsTopicsParams) SetSortBy(sortBy *string) {
	o.SortBy = sortBy
}

// WithSortOrder adds the sortOrder to the get speechandtextanalytics topics params
func (o *GetSpeechandtextanalyticsTopicsParams) WithSortOrder(sortOrder *string) *GetSpeechandtextanalyticsTopicsParams {
	o.SetSortOrder(sortOrder)
	return o
}

// SetSortOrder adds the sortOrder to the get speechandtextanalytics topics params
func (o *GetSpeechandtextanalyticsTopicsParams) SetSortOrder(sortOrder *string) {
	o.SortOrder = sortOrder
}

// WithState adds the state to the get speechandtextanalytics topics params
func (o *GetSpeechandtextanalyticsTopicsParams) WithState(state *string) *GetSpeechandtextanalyticsTopicsParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the get speechandtextanalytics topics params
func (o *GetSpeechandtextanalyticsTopicsParams) SetState(state *string) {
	o.State = state
}

// WriteToRequest writes these params to a swagger request
func (o *GetSpeechandtextanalyticsTopicsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesIds := o.Ids

	joinedIds := swag.JoinByFormat(valuesIds, "multi")
	// query array param ids
	if err := r.SetQueryParam("ids", joinedIds...); err != nil {
		return err
	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.NextPage != nil {

		// query param nextPage
		var qrNextPage string
		if o.NextPage != nil {
			qrNextPage = *o.NextPage
		}
		qNextPage := qrNextPage
		if qNextPage != "" {
			if err := r.SetQueryParam("nextPage", qNextPage); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int32
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}

	}

	if o.SortBy != nil {

		// query param sortBy
		var qrSortBy string
		if o.SortBy != nil {
			qrSortBy = *o.SortBy
		}
		qSortBy := qrSortBy
		if qSortBy != "" {
			if err := r.SetQueryParam("sortBy", qSortBy); err != nil {
				return err
			}
		}

	}

	if o.SortOrder != nil {

		// query param sortOrder
		var qrSortOrder string
		if o.SortOrder != nil {
			qrSortOrder = *o.SortOrder
		}
		qSortOrder := qrSortOrder
		if qSortOrder != "" {
			if err := r.SetQueryParam("sortOrder", qSortOrder); err != nil {
				return err
			}
		}

	}

	if o.State != nil {

		// query param state
		var qrState string
		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {
			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

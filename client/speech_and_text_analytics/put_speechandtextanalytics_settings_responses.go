// Code generated by go-swagger; DO NOT EDIT.

package speech_and_text_analytics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PutSpeechandtextanalyticsSettingsReader is a Reader for the PutSpeechandtextanalyticsSettings structure.
type PutSpeechandtextanalyticsSettingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutSpeechandtextanalyticsSettingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutSpeechandtextanalyticsSettingsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutSpeechandtextanalyticsSettingsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutSpeechandtextanalyticsSettingsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutSpeechandtextanalyticsSettingsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutSpeechandtextanalyticsSettingsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPutSpeechandtextanalyticsSettingsRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutSpeechandtextanalyticsSettingsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutSpeechandtextanalyticsSettingsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutSpeechandtextanalyticsSettingsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutSpeechandtextanalyticsSettingsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutSpeechandtextanalyticsSettingsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPutSpeechandtextanalyticsSettingsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutSpeechandtextanalyticsSettingsOK creates a PutSpeechandtextanalyticsSettingsOK with default headers values
func NewPutSpeechandtextanalyticsSettingsOK() *PutSpeechandtextanalyticsSettingsOK {
	return &PutSpeechandtextanalyticsSettingsOK{}
}

/*PutSpeechandtextanalyticsSettingsOK handles this case with default header values.

Speech And Text Analytics settings has been updated
*/
type PutSpeechandtextanalyticsSettingsOK struct {
	Payload *models.SpeechTextAnalyticsSettingsResponse
}

func (o *PutSpeechandtextanalyticsSettingsOK) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/settings][%d] putSpeechandtextanalyticsSettingsOK  %+v", 200, o.Payload)
}

func (o *PutSpeechandtextanalyticsSettingsOK) GetPayload() *models.SpeechTextAnalyticsSettingsResponse {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsSettingsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SpeechTextAnalyticsSettingsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsSettingsBadRequest creates a PutSpeechandtextanalyticsSettingsBadRequest with default headers values
func NewPutSpeechandtextanalyticsSettingsBadRequest() *PutSpeechandtextanalyticsSettingsBadRequest {
	return &PutSpeechandtextanalyticsSettingsBadRequest{}
}

/*PutSpeechandtextanalyticsSettingsBadRequest handles this case with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PutSpeechandtextanalyticsSettingsBadRequest struct {
	Payload *models.ErrorBody
}

func (o *PutSpeechandtextanalyticsSettingsBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/settings][%d] putSpeechandtextanalyticsSettingsBadRequest  %+v", 400, o.Payload)
}

func (o *PutSpeechandtextanalyticsSettingsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsSettingsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsSettingsUnauthorized creates a PutSpeechandtextanalyticsSettingsUnauthorized with default headers values
func NewPutSpeechandtextanalyticsSettingsUnauthorized() *PutSpeechandtextanalyticsSettingsUnauthorized {
	return &PutSpeechandtextanalyticsSettingsUnauthorized{}
}

/*PutSpeechandtextanalyticsSettingsUnauthorized handles this case with default header values.

No authentication bearer token specified in authorization header.
*/
type PutSpeechandtextanalyticsSettingsUnauthorized struct {
	Payload *models.ErrorBody
}

func (o *PutSpeechandtextanalyticsSettingsUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/settings][%d] putSpeechandtextanalyticsSettingsUnauthorized  %+v", 401, o.Payload)
}

func (o *PutSpeechandtextanalyticsSettingsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsSettingsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsSettingsForbidden creates a PutSpeechandtextanalyticsSettingsForbidden with default headers values
func NewPutSpeechandtextanalyticsSettingsForbidden() *PutSpeechandtextanalyticsSettingsForbidden {
	return &PutSpeechandtextanalyticsSettingsForbidden{}
}

/*PutSpeechandtextanalyticsSettingsForbidden handles this case with default header values.

You are not authorized to perform the requested action.
*/
type PutSpeechandtextanalyticsSettingsForbidden struct {
	Payload *models.ErrorBody
}

func (o *PutSpeechandtextanalyticsSettingsForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/settings][%d] putSpeechandtextanalyticsSettingsForbidden  %+v", 403, o.Payload)
}

func (o *PutSpeechandtextanalyticsSettingsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsSettingsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsSettingsNotFound creates a PutSpeechandtextanalyticsSettingsNotFound with default headers values
func NewPutSpeechandtextanalyticsSettingsNotFound() *PutSpeechandtextanalyticsSettingsNotFound {
	return &PutSpeechandtextanalyticsSettingsNotFound{}
}

/*PutSpeechandtextanalyticsSettingsNotFound handles this case with default header values.

The requested resource was not found.
*/
type PutSpeechandtextanalyticsSettingsNotFound struct {
	Payload *models.ErrorBody
}

func (o *PutSpeechandtextanalyticsSettingsNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/settings][%d] putSpeechandtextanalyticsSettingsNotFound  %+v", 404, o.Payload)
}

func (o *PutSpeechandtextanalyticsSettingsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsSettingsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsSettingsRequestTimeout creates a PutSpeechandtextanalyticsSettingsRequestTimeout with default headers values
func NewPutSpeechandtextanalyticsSettingsRequestTimeout() *PutSpeechandtextanalyticsSettingsRequestTimeout {
	return &PutSpeechandtextanalyticsSettingsRequestTimeout{}
}

/*PutSpeechandtextanalyticsSettingsRequestTimeout handles this case with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PutSpeechandtextanalyticsSettingsRequestTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutSpeechandtextanalyticsSettingsRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/settings][%d] putSpeechandtextanalyticsSettingsRequestTimeout  %+v", 408, o.Payload)
}

func (o *PutSpeechandtextanalyticsSettingsRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsSettingsRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsSettingsRequestEntityTooLarge creates a PutSpeechandtextanalyticsSettingsRequestEntityTooLarge with default headers values
func NewPutSpeechandtextanalyticsSettingsRequestEntityTooLarge() *PutSpeechandtextanalyticsSettingsRequestEntityTooLarge {
	return &PutSpeechandtextanalyticsSettingsRequestEntityTooLarge{}
}

/*PutSpeechandtextanalyticsSettingsRequestEntityTooLarge handles this case with default header values.

The request is over the size limit. Content-Length: %s
*/
type PutSpeechandtextanalyticsSettingsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

func (o *PutSpeechandtextanalyticsSettingsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/settings][%d] putSpeechandtextanalyticsSettingsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PutSpeechandtextanalyticsSettingsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsSettingsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsSettingsUnsupportedMediaType creates a PutSpeechandtextanalyticsSettingsUnsupportedMediaType with default headers values
func NewPutSpeechandtextanalyticsSettingsUnsupportedMediaType() *PutSpeechandtextanalyticsSettingsUnsupportedMediaType {
	return &PutSpeechandtextanalyticsSettingsUnsupportedMediaType{}
}

/*PutSpeechandtextanalyticsSettingsUnsupportedMediaType handles this case with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PutSpeechandtextanalyticsSettingsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

func (o *PutSpeechandtextanalyticsSettingsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/settings][%d] putSpeechandtextanalyticsSettingsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutSpeechandtextanalyticsSettingsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsSettingsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsSettingsTooManyRequests creates a PutSpeechandtextanalyticsSettingsTooManyRequests with default headers values
func NewPutSpeechandtextanalyticsSettingsTooManyRequests() *PutSpeechandtextanalyticsSettingsTooManyRequests {
	return &PutSpeechandtextanalyticsSettingsTooManyRequests{}
}

/*PutSpeechandtextanalyticsSettingsTooManyRequests handles this case with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PutSpeechandtextanalyticsSettingsTooManyRequests struct {
	Payload *models.ErrorBody
}

func (o *PutSpeechandtextanalyticsSettingsTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/settings][%d] putSpeechandtextanalyticsSettingsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutSpeechandtextanalyticsSettingsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsSettingsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsSettingsInternalServerError creates a PutSpeechandtextanalyticsSettingsInternalServerError with default headers values
func NewPutSpeechandtextanalyticsSettingsInternalServerError() *PutSpeechandtextanalyticsSettingsInternalServerError {
	return &PutSpeechandtextanalyticsSettingsInternalServerError{}
}

/*PutSpeechandtextanalyticsSettingsInternalServerError handles this case with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PutSpeechandtextanalyticsSettingsInternalServerError struct {
	Payload *models.ErrorBody
}

func (o *PutSpeechandtextanalyticsSettingsInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/settings][%d] putSpeechandtextanalyticsSettingsInternalServerError  %+v", 500, o.Payload)
}

func (o *PutSpeechandtextanalyticsSettingsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsSettingsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsSettingsServiceUnavailable creates a PutSpeechandtextanalyticsSettingsServiceUnavailable with default headers values
func NewPutSpeechandtextanalyticsSettingsServiceUnavailable() *PutSpeechandtextanalyticsSettingsServiceUnavailable {
	return &PutSpeechandtextanalyticsSettingsServiceUnavailable{}
}

/*PutSpeechandtextanalyticsSettingsServiceUnavailable handles this case with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PutSpeechandtextanalyticsSettingsServiceUnavailable struct {
	Payload *models.ErrorBody
}

func (o *PutSpeechandtextanalyticsSettingsServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/settings][%d] putSpeechandtextanalyticsSettingsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PutSpeechandtextanalyticsSettingsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsSettingsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSpeechandtextanalyticsSettingsGatewayTimeout creates a PutSpeechandtextanalyticsSettingsGatewayTimeout with default headers values
func NewPutSpeechandtextanalyticsSettingsGatewayTimeout() *PutSpeechandtextanalyticsSettingsGatewayTimeout {
	return &PutSpeechandtextanalyticsSettingsGatewayTimeout{}
}

/*PutSpeechandtextanalyticsSettingsGatewayTimeout handles this case with default header values.

The request timed out.
*/
type PutSpeechandtextanalyticsSettingsGatewayTimeout struct {
	Payload *models.ErrorBody
}

func (o *PutSpeechandtextanalyticsSettingsGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/v2/speechandtextanalytics/settings][%d] putSpeechandtextanalyticsSettingsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PutSpeechandtextanalyticsSettingsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PutSpeechandtextanalyticsSettingsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package speech_and_text_analytics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDReader is a Reader for the DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackID structure.
type DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewDeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewDeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewDeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewDeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewDeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDNoContent creates a DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDNoContent with default headers values
func NewDeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDNoContent() *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDNoContent {
	return &DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDNoContent{}
}

/*
DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDNoContent describes a response with status code 204, with default header values.

No Content
*/
type DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDNoContent struct {
}

// IsSuccess returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id no content response has a 2xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id no content response has a 3xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id no content response has a 4xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id no content response has a 5xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id no content response a status code equal to that given
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDNoContent) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback/{sentimentFeedbackId}][%d] deleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIdNoContent ", 204)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDNoContent) String() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback/{sentimentFeedbackId}][%d] deleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIdNoContent ", 204)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDBadRequest creates a DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDBadRequest with default headers values
func NewDeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDBadRequest() *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDBadRequest {
	return &DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDBadRequest{}
}

/*
DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id bad request response has a 2xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id bad request response has a 3xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id bad request response has a 4xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id bad request response has a 5xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id bad request response a status code equal to that given
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback/{sentimentFeedbackId}][%d] deleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIdBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDBadRequest) String() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback/{sentimentFeedbackId}][%d] deleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIdBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDUnauthorized creates a DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDUnauthorized with default headers values
func NewDeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDUnauthorized() *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDUnauthorized {
	return &DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDUnauthorized{}
}

/*
DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id unauthorized response has a 2xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id unauthorized response has a 3xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id unauthorized response has a 4xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id unauthorized response has a 5xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id unauthorized response a status code equal to that given
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback/{sentimentFeedbackId}][%d] deleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIdUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback/{sentimentFeedbackId}][%d] deleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIdUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDForbidden creates a DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDForbidden with default headers values
func NewDeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDForbidden() *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDForbidden {
	return &DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDForbidden{}
}

/*
DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id forbidden response has a 2xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id forbidden response has a 3xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id forbidden response has a 4xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id forbidden response has a 5xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id forbidden response a status code equal to that given
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDForbidden) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback/{sentimentFeedbackId}][%d] deleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIdForbidden  %+v", 403, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDForbidden) String() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback/{sentimentFeedbackId}][%d] deleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIdForbidden  %+v", 403, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDNotFound creates a DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDNotFound with default headers values
func NewDeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDNotFound() *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDNotFound {
	return &DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDNotFound{}
}

/*
DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id not found response has a 2xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id not found response has a 3xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id not found response has a 4xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id not found response has a 5xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id not found response a status code equal to that given
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback/{sentimentFeedbackId}][%d] deleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIdNotFound  %+v", 404, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDNotFound) String() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback/{sentimentFeedbackId}][%d] deleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIdNotFound  %+v", 404, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDRequestTimeout creates a DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDRequestTimeout with default headers values
func NewDeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDRequestTimeout() *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDRequestTimeout {
	return &DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDRequestTimeout{}
}

/*
DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id request timeout response has a 2xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id request timeout response has a 3xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id request timeout response has a 4xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id request timeout response has a 5xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id request timeout response a status code equal to that given
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDRequestTimeout) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback/{sentimentFeedbackId}][%d] deleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIdRequestTimeout  %+v", 408, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDRequestTimeout) String() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback/{sentimentFeedbackId}][%d] deleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIdRequestTimeout  %+v", 408, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDRequestEntityTooLarge creates a DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDRequestEntityTooLarge with default headers values
func NewDeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDRequestEntityTooLarge() *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDRequestEntityTooLarge {
	return &DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDRequestEntityTooLarge{}
}

/*
DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Maximum bytes: %s
*/
type DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id request entity too large response has a 2xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id request entity too large response has a 3xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id request entity too large response has a 4xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id request entity too large response has a 5xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id request entity too large response a status code equal to that given
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback/{sentimentFeedbackId}][%d] deleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIdRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback/{sentimentFeedbackId}][%d] deleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIdRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDUnsupportedMediaType creates a DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDUnsupportedMediaType with default headers values
func NewDeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDUnsupportedMediaType() *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDUnsupportedMediaType {
	return &DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDUnsupportedMediaType{}
}

/*
DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id unsupported media type response has a 2xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id unsupported media type response has a 3xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id unsupported media type response has a 4xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id unsupported media type response has a 5xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id unsupported media type response a status code equal to that given
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback/{sentimentFeedbackId}][%d] deleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIdUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDUnsupportedMediaType) String() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback/{sentimentFeedbackId}][%d] deleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIdUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDTooManyRequests creates a DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDTooManyRequests with default headers values
func NewDeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDTooManyRequests() *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDTooManyRequests {
	return &DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDTooManyRequests{}
}

/*
DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id too many requests response has a 2xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id too many requests response has a 3xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id too many requests response has a 4xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id too many requests response has a 5xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id too many requests response a status code equal to that given
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback/{sentimentFeedbackId}][%d] deleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDTooManyRequests) String() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback/{sentimentFeedbackId}][%d] deleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDInternalServerError creates a DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDInternalServerError with default headers values
func NewDeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDInternalServerError() *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDInternalServerError {
	return &DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDInternalServerError{}
}

/*
DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id internal server error response has a 2xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id internal server error response has a 3xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id internal server error response has a 4xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id internal server error response has a 5xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id internal server error response a status code equal to that given
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback/{sentimentFeedbackId}][%d] deleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIdInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback/{sentimentFeedbackId}][%d] deleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIdInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDServiceUnavailable creates a DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDServiceUnavailable with default headers values
func NewDeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDServiceUnavailable() *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDServiceUnavailable {
	return &DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDServiceUnavailable{}
}

/*
DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id service unavailable response has a 2xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id service unavailable response has a 3xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id service unavailable response has a 4xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id service unavailable response has a 5xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id service unavailable response a status code equal to that given
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDServiceUnavailable) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback/{sentimentFeedbackId}][%d] deleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIdServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDServiceUnavailable) String() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback/{sentimentFeedbackId}][%d] deleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIdServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDGatewayTimeout creates a DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDGatewayTimeout with default headers values
func NewDeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDGatewayTimeout() *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDGatewayTimeout {
	return &DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDGatewayTimeout{}
}

/*
DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id gateway timeout response has a 2xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id gateway timeout response has a 3xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id gateway timeout response has a 4xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id gateway timeout response has a 5xx status code
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this delete speechandtextanalytics sentimentfeedback sentiment feedback Id gateway timeout response a status code equal to that given
func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDGatewayTimeout) Error() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback/{sentimentFeedbackId}][%d] deleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIdGatewayTimeout  %+v", 504, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDGatewayTimeout) String() string {
	return fmt.Sprintf("[DELETE /api/v2/speechandtextanalytics/sentimentfeedback/{sentimentFeedbackId}][%d] deleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIdGatewayTimeout  %+v", 504, o.Payload)
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIDGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

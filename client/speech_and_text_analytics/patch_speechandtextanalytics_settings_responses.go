// Code generated by go-swagger; DO NOT EDIT.

package speech_and_text_analytics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/freman/genesysapi/models"
)

// PatchSpeechandtextanalyticsSettingsReader is a Reader for the PatchSpeechandtextanalyticsSettings structure.
type PatchSpeechandtextanalyticsSettingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchSpeechandtextanalyticsSettingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchSpeechandtextanalyticsSettingsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchSpeechandtextanalyticsSettingsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchSpeechandtextanalyticsSettingsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchSpeechandtextanalyticsSettingsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchSpeechandtextanalyticsSettingsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPatchSpeechandtextanalyticsSettingsRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPatchSpeechandtextanalyticsSettingsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchSpeechandtextanalyticsSettingsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchSpeechandtextanalyticsSettingsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchSpeechandtextanalyticsSettingsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPatchSpeechandtextanalyticsSettingsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchSpeechandtextanalyticsSettingsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchSpeechandtextanalyticsSettingsOK creates a PatchSpeechandtextanalyticsSettingsOK with default headers values
func NewPatchSpeechandtextanalyticsSettingsOK() *PatchSpeechandtextanalyticsSettingsOK {
	return &PatchSpeechandtextanalyticsSettingsOK{}
}

/*
PatchSpeechandtextanalyticsSettingsOK describes a response with status code 200, with default header values.

Speech And Text Analytics settings has been updated
*/
type PatchSpeechandtextanalyticsSettingsOK struct {
	Payload *models.SpeechTextAnalyticsSettingsResponse
}

// IsSuccess returns true when this patch speechandtextanalytics settings o k response has a 2xx status code
func (o *PatchSpeechandtextanalyticsSettingsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch speechandtextanalytics settings o k response has a 3xx status code
func (o *PatchSpeechandtextanalyticsSettingsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch speechandtextanalytics settings o k response has a 4xx status code
func (o *PatchSpeechandtextanalyticsSettingsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch speechandtextanalytics settings o k response has a 5xx status code
func (o *PatchSpeechandtextanalyticsSettingsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch speechandtextanalytics settings o k response a status code equal to that given
func (o *PatchSpeechandtextanalyticsSettingsOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchSpeechandtextanalyticsSettingsOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/speechandtextanalytics/settings][%d] patchSpeechandtextanalyticsSettingsOK  %+v", 200, o.Payload)
}

func (o *PatchSpeechandtextanalyticsSettingsOK) String() string {
	return fmt.Sprintf("[PATCH /api/v2/speechandtextanalytics/settings][%d] patchSpeechandtextanalyticsSettingsOK  %+v", 200, o.Payload)
}

func (o *PatchSpeechandtextanalyticsSettingsOK) GetPayload() *models.SpeechTextAnalyticsSettingsResponse {
	return o.Payload
}

func (o *PatchSpeechandtextanalyticsSettingsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SpeechTextAnalyticsSettingsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchSpeechandtextanalyticsSettingsBadRequest creates a PatchSpeechandtextanalyticsSettingsBadRequest with default headers values
func NewPatchSpeechandtextanalyticsSettingsBadRequest() *PatchSpeechandtextanalyticsSettingsBadRequest {
	return &PatchSpeechandtextanalyticsSettingsBadRequest{}
}

/*
PatchSpeechandtextanalyticsSettingsBadRequest describes a response with status code 400, with default header values.

The request could not be understood by the server due to malformed syntax.
*/
type PatchSpeechandtextanalyticsSettingsBadRequest struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch speechandtextanalytics settings bad request response has a 2xx status code
func (o *PatchSpeechandtextanalyticsSettingsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch speechandtextanalytics settings bad request response has a 3xx status code
func (o *PatchSpeechandtextanalyticsSettingsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch speechandtextanalytics settings bad request response has a 4xx status code
func (o *PatchSpeechandtextanalyticsSettingsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch speechandtextanalytics settings bad request response has a 5xx status code
func (o *PatchSpeechandtextanalyticsSettingsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch speechandtextanalytics settings bad request response a status code equal to that given
func (o *PatchSpeechandtextanalyticsSettingsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchSpeechandtextanalyticsSettingsBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/speechandtextanalytics/settings][%d] patchSpeechandtextanalyticsSettingsBadRequest  %+v", 400, o.Payload)
}

func (o *PatchSpeechandtextanalyticsSettingsBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v2/speechandtextanalytics/settings][%d] patchSpeechandtextanalyticsSettingsBadRequest  %+v", 400, o.Payload)
}

func (o *PatchSpeechandtextanalyticsSettingsBadRequest) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchSpeechandtextanalyticsSettingsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchSpeechandtextanalyticsSettingsUnauthorized creates a PatchSpeechandtextanalyticsSettingsUnauthorized with default headers values
func NewPatchSpeechandtextanalyticsSettingsUnauthorized() *PatchSpeechandtextanalyticsSettingsUnauthorized {
	return &PatchSpeechandtextanalyticsSettingsUnauthorized{}
}

/*
PatchSpeechandtextanalyticsSettingsUnauthorized describes a response with status code 401, with default header values.

No authentication bearer token specified in authorization header.
*/
type PatchSpeechandtextanalyticsSettingsUnauthorized struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch speechandtextanalytics settings unauthorized response has a 2xx status code
func (o *PatchSpeechandtextanalyticsSettingsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch speechandtextanalytics settings unauthorized response has a 3xx status code
func (o *PatchSpeechandtextanalyticsSettingsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch speechandtextanalytics settings unauthorized response has a 4xx status code
func (o *PatchSpeechandtextanalyticsSettingsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch speechandtextanalytics settings unauthorized response has a 5xx status code
func (o *PatchSpeechandtextanalyticsSettingsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch speechandtextanalytics settings unauthorized response a status code equal to that given
func (o *PatchSpeechandtextanalyticsSettingsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchSpeechandtextanalyticsSettingsUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/speechandtextanalytics/settings][%d] patchSpeechandtextanalyticsSettingsUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchSpeechandtextanalyticsSettingsUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v2/speechandtextanalytics/settings][%d] patchSpeechandtextanalyticsSettingsUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchSpeechandtextanalyticsSettingsUnauthorized) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchSpeechandtextanalyticsSettingsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchSpeechandtextanalyticsSettingsForbidden creates a PatchSpeechandtextanalyticsSettingsForbidden with default headers values
func NewPatchSpeechandtextanalyticsSettingsForbidden() *PatchSpeechandtextanalyticsSettingsForbidden {
	return &PatchSpeechandtextanalyticsSettingsForbidden{}
}

/*
PatchSpeechandtextanalyticsSettingsForbidden describes a response with status code 403, with default header values.

You are not authorized to perform the requested action.
*/
type PatchSpeechandtextanalyticsSettingsForbidden struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch speechandtextanalytics settings forbidden response has a 2xx status code
func (o *PatchSpeechandtextanalyticsSettingsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch speechandtextanalytics settings forbidden response has a 3xx status code
func (o *PatchSpeechandtextanalyticsSettingsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch speechandtextanalytics settings forbidden response has a 4xx status code
func (o *PatchSpeechandtextanalyticsSettingsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch speechandtextanalytics settings forbidden response has a 5xx status code
func (o *PatchSpeechandtextanalyticsSettingsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch speechandtextanalytics settings forbidden response a status code equal to that given
func (o *PatchSpeechandtextanalyticsSettingsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchSpeechandtextanalyticsSettingsForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/speechandtextanalytics/settings][%d] patchSpeechandtextanalyticsSettingsForbidden  %+v", 403, o.Payload)
}

func (o *PatchSpeechandtextanalyticsSettingsForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/speechandtextanalytics/settings][%d] patchSpeechandtextanalyticsSettingsForbidden  %+v", 403, o.Payload)
}

func (o *PatchSpeechandtextanalyticsSettingsForbidden) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchSpeechandtextanalyticsSettingsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchSpeechandtextanalyticsSettingsNotFound creates a PatchSpeechandtextanalyticsSettingsNotFound with default headers values
func NewPatchSpeechandtextanalyticsSettingsNotFound() *PatchSpeechandtextanalyticsSettingsNotFound {
	return &PatchSpeechandtextanalyticsSettingsNotFound{}
}

/*
PatchSpeechandtextanalyticsSettingsNotFound describes a response with status code 404, with default header values.

The requested resource was not found.
*/
type PatchSpeechandtextanalyticsSettingsNotFound struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch speechandtextanalytics settings not found response has a 2xx status code
func (o *PatchSpeechandtextanalyticsSettingsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch speechandtextanalytics settings not found response has a 3xx status code
func (o *PatchSpeechandtextanalyticsSettingsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch speechandtextanalytics settings not found response has a 4xx status code
func (o *PatchSpeechandtextanalyticsSettingsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch speechandtextanalytics settings not found response has a 5xx status code
func (o *PatchSpeechandtextanalyticsSettingsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch speechandtextanalytics settings not found response a status code equal to that given
func (o *PatchSpeechandtextanalyticsSettingsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchSpeechandtextanalyticsSettingsNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/speechandtextanalytics/settings][%d] patchSpeechandtextanalyticsSettingsNotFound  %+v", 404, o.Payload)
}

func (o *PatchSpeechandtextanalyticsSettingsNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v2/speechandtextanalytics/settings][%d] patchSpeechandtextanalyticsSettingsNotFound  %+v", 404, o.Payload)
}

func (o *PatchSpeechandtextanalyticsSettingsNotFound) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchSpeechandtextanalyticsSettingsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchSpeechandtextanalyticsSettingsRequestTimeout creates a PatchSpeechandtextanalyticsSettingsRequestTimeout with default headers values
func NewPatchSpeechandtextanalyticsSettingsRequestTimeout() *PatchSpeechandtextanalyticsSettingsRequestTimeout {
	return &PatchSpeechandtextanalyticsSettingsRequestTimeout{}
}

/*
PatchSpeechandtextanalyticsSettingsRequestTimeout describes a response with status code 408, with default header values.

The client did not produce a request within the server timeout limit. This can be caused by a slow network connection and/or large payloads.
*/
type PatchSpeechandtextanalyticsSettingsRequestTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch speechandtextanalytics settings request timeout response has a 2xx status code
func (o *PatchSpeechandtextanalyticsSettingsRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch speechandtextanalytics settings request timeout response has a 3xx status code
func (o *PatchSpeechandtextanalyticsSettingsRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch speechandtextanalytics settings request timeout response has a 4xx status code
func (o *PatchSpeechandtextanalyticsSettingsRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch speechandtextanalytics settings request timeout response has a 5xx status code
func (o *PatchSpeechandtextanalyticsSettingsRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this patch speechandtextanalytics settings request timeout response a status code equal to that given
func (o *PatchSpeechandtextanalyticsSettingsRequestTimeout) IsCode(code int) bool {
	return code == 408
}

func (o *PatchSpeechandtextanalyticsSettingsRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/speechandtextanalytics/settings][%d] patchSpeechandtextanalyticsSettingsRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchSpeechandtextanalyticsSettingsRequestTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/speechandtextanalytics/settings][%d] patchSpeechandtextanalyticsSettingsRequestTimeout  %+v", 408, o.Payload)
}

func (o *PatchSpeechandtextanalyticsSettingsRequestTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchSpeechandtextanalyticsSettingsRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchSpeechandtextanalyticsSettingsRequestEntityTooLarge creates a PatchSpeechandtextanalyticsSettingsRequestEntityTooLarge with default headers values
func NewPatchSpeechandtextanalyticsSettingsRequestEntityTooLarge() *PatchSpeechandtextanalyticsSettingsRequestEntityTooLarge {
	return &PatchSpeechandtextanalyticsSettingsRequestEntityTooLarge{}
}

/*
PatchSpeechandtextanalyticsSettingsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request is over the size limit. Content-Length: %s, Maximum bytes: %s
*/
type PatchSpeechandtextanalyticsSettingsRequestEntityTooLarge struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch speechandtextanalytics settings request entity too large response has a 2xx status code
func (o *PatchSpeechandtextanalyticsSettingsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch speechandtextanalytics settings request entity too large response has a 3xx status code
func (o *PatchSpeechandtextanalyticsSettingsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch speechandtextanalytics settings request entity too large response has a 4xx status code
func (o *PatchSpeechandtextanalyticsSettingsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch speechandtextanalytics settings request entity too large response has a 5xx status code
func (o *PatchSpeechandtextanalyticsSettingsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this patch speechandtextanalytics settings request entity too large response a status code equal to that given
func (o *PatchSpeechandtextanalyticsSettingsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *PatchSpeechandtextanalyticsSettingsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/speechandtextanalytics/settings][%d] patchSpeechandtextanalyticsSettingsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchSpeechandtextanalyticsSettingsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PATCH /api/v2/speechandtextanalytics/settings][%d] patchSpeechandtextanalyticsSettingsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *PatchSpeechandtextanalyticsSettingsRequestEntityTooLarge) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchSpeechandtextanalyticsSettingsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchSpeechandtextanalyticsSettingsUnsupportedMediaType creates a PatchSpeechandtextanalyticsSettingsUnsupportedMediaType with default headers values
func NewPatchSpeechandtextanalyticsSettingsUnsupportedMediaType() *PatchSpeechandtextanalyticsSettingsUnsupportedMediaType {
	return &PatchSpeechandtextanalyticsSettingsUnsupportedMediaType{}
}

/*
PatchSpeechandtextanalyticsSettingsUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type - Unsupported or incorrect media type, such as an incorrect Content-Type value in the header.
*/
type PatchSpeechandtextanalyticsSettingsUnsupportedMediaType struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch speechandtextanalytics settings unsupported media type response has a 2xx status code
func (o *PatchSpeechandtextanalyticsSettingsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch speechandtextanalytics settings unsupported media type response has a 3xx status code
func (o *PatchSpeechandtextanalyticsSettingsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch speechandtextanalytics settings unsupported media type response has a 4xx status code
func (o *PatchSpeechandtextanalyticsSettingsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch speechandtextanalytics settings unsupported media type response has a 5xx status code
func (o *PatchSpeechandtextanalyticsSettingsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this patch speechandtextanalytics settings unsupported media type response a status code equal to that given
func (o *PatchSpeechandtextanalyticsSettingsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *PatchSpeechandtextanalyticsSettingsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/speechandtextanalytics/settings][%d] patchSpeechandtextanalyticsSettingsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchSpeechandtextanalyticsSettingsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PATCH /api/v2/speechandtextanalytics/settings][%d] patchSpeechandtextanalyticsSettingsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchSpeechandtextanalyticsSettingsUnsupportedMediaType) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchSpeechandtextanalyticsSettingsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchSpeechandtextanalyticsSettingsTooManyRequests creates a PatchSpeechandtextanalyticsSettingsTooManyRequests with default headers values
func NewPatchSpeechandtextanalyticsSettingsTooManyRequests() *PatchSpeechandtextanalyticsSettingsTooManyRequests {
	return &PatchSpeechandtextanalyticsSettingsTooManyRequests{}
}

/*
PatchSpeechandtextanalyticsSettingsTooManyRequests describes a response with status code 429, with default header values.

Rate limit exceeded the maximum. Retry the request in [%s] seconds
*/
type PatchSpeechandtextanalyticsSettingsTooManyRequests struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch speechandtextanalytics settings too many requests response has a 2xx status code
func (o *PatchSpeechandtextanalyticsSettingsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch speechandtextanalytics settings too many requests response has a 3xx status code
func (o *PatchSpeechandtextanalyticsSettingsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch speechandtextanalytics settings too many requests response has a 4xx status code
func (o *PatchSpeechandtextanalyticsSettingsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch speechandtextanalytics settings too many requests response has a 5xx status code
func (o *PatchSpeechandtextanalyticsSettingsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch speechandtextanalytics settings too many requests response a status code equal to that given
func (o *PatchSpeechandtextanalyticsSettingsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchSpeechandtextanalyticsSettingsTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/speechandtextanalytics/settings][%d] patchSpeechandtextanalyticsSettingsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchSpeechandtextanalyticsSettingsTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /api/v2/speechandtextanalytics/settings][%d] patchSpeechandtextanalyticsSettingsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchSpeechandtextanalyticsSettingsTooManyRequests) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchSpeechandtextanalyticsSettingsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchSpeechandtextanalyticsSettingsInternalServerError creates a PatchSpeechandtextanalyticsSettingsInternalServerError with default headers values
func NewPatchSpeechandtextanalyticsSettingsInternalServerError() *PatchSpeechandtextanalyticsSettingsInternalServerError {
	return &PatchSpeechandtextanalyticsSettingsInternalServerError{}
}

/*
PatchSpeechandtextanalyticsSettingsInternalServerError describes a response with status code 500, with default header values.

The server encountered an unexpected condition which prevented it from fulfilling the request.
*/
type PatchSpeechandtextanalyticsSettingsInternalServerError struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch speechandtextanalytics settings internal server error response has a 2xx status code
func (o *PatchSpeechandtextanalyticsSettingsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch speechandtextanalytics settings internal server error response has a 3xx status code
func (o *PatchSpeechandtextanalyticsSettingsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch speechandtextanalytics settings internal server error response has a 4xx status code
func (o *PatchSpeechandtextanalyticsSettingsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch speechandtextanalytics settings internal server error response has a 5xx status code
func (o *PatchSpeechandtextanalyticsSettingsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch speechandtextanalytics settings internal server error response a status code equal to that given
func (o *PatchSpeechandtextanalyticsSettingsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchSpeechandtextanalyticsSettingsInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/speechandtextanalytics/settings][%d] patchSpeechandtextanalyticsSettingsInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchSpeechandtextanalyticsSettingsInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v2/speechandtextanalytics/settings][%d] patchSpeechandtextanalyticsSettingsInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchSpeechandtextanalyticsSettingsInternalServerError) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchSpeechandtextanalyticsSettingsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchSpeechandtextanalyticsSettingsServiceUnavailable creates a PatchSpeechandtextanalyticsSettingsServiceUnavailable with default headers values
func NewPatchSpeechandtextanalyticsSettingsServiceUnavailable() *PatchSpeechandtextanalyticsSettingsServiceUnavailable {
	return &PatchSpeechandtextanalyticsSettingsServiceUnavailable{}
}

/*
PatchSpeechandtextanalyticsSettingsServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable - The server is currently unavailable (because it is overloaded or down for maintenance).
*/
type PatchSpeechandtextanalyticsSettingsServiceUnavailable struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch speechandtextanalytics settings service unavailable response has a 2xx status code
func (o *PatchSpeechandtextanalyticsSettingsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch speechandtextanalytics settings service unavailable response has a 3xx status code
func (o *PatchSpeechandtextanalyticsSettingsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch speechandtextanalytics settings service unavailable response has a 4xx status code
func (o *PatchSpeechandtextanalyticsSettingsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch speechandtextanalytics settings service unavailable response has a 5xx status code
func (o *PatchSpeechandtextanalyticsSettingsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this patch speechandtextanalytics settings service unavailable response a status code equal to that given
func (o *PatchSpeechandtextanalyticsSettingsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PatchSpeechandtextanalyticsSettingsServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/speechandtextanalytics/settings][%d] patchSpeechandtextanalyticsSettingsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchSpeechandtextanalyticsSettingsServiceUnavailable) String() string {
	return fmt.Sprintf("[PATCH /api/v2/speechandtextanalytics/settings][%d] patchSpeechandtextanalyticsSettingsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PatchSpeechandtextanalyticsSettingsServiceUnavailable) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchSpeechandtextanalyticsSettingsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchSpeechandtextanalyticsSettingsGatewayTimeout creates a PatchSpeechandtextanalyticsSettingsGatewayTimeout with default headers values
func NewPatchSpeechandtextanalyticsSettingsGatewayTimeout() *PatchSpeechandtextanalyticsSettingsGatewayTimeout {
	return &PatchSpeechandtextanalyticsSettingsGatewayTimeout{}
}

/*
PatchSpeechandtextanalyticsSettingsGatewayTimeout describes a response with status code 504, with default header values.

The request timed out.
*/
type PatchSpeechandtextanalyticsSettingsGatewayTimeout struct {
	Payload *models.ErrorBody
}

// IsSuccess returns true when this patch speechandtextanalytics settings gateway timeout response has a 2xx status code
func (o *PatchSpeechandtextanalyticsSettingsGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch speechandtextanalytics settings gateway timeout response has a 3xx status code
func (o *PatchSpeechandtextanalyticsSettingsGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch speechandtextanalytics settings gateway timeout response has a 4xx status code
func (o *PatchSpeechandtextanalyticsSettingsGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch speechandtextanalytics settings gateway timeout response has a 5xx status code
func (o *PatchSpeechandtextanalyticsSettingsGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this patch speechandtextanalytics settings gateway timeout response a status code equal to that given
func (o *PatchSpeechandtextanalyticsSettingsGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *PatchSpeechandtextanalyticsSettingsGatewayTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/speechandtextanalytics/settings][%d] patchSpeechandtextanalyticsSettingsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchSpeechandtextanalyticsSettingsGatewayTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/v2/speechandtextanalytics/settings][%d] patchSpeechandtextanalyticsSettingsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchSpeechandtextanalyticsSettingsGatewayTimeout) GetPayload() *models.ErrorBody {
	return o.Payload
}

func (o *PatchSpeechandtextanalyticsSettingsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
